
FCS - Summer Project Code and Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800822c  0800822c  0000922c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008380  08008380  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008380  08008380  0000a17c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008380  08008380  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008380  08008380  00009380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008384  08008384  00009384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008388  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  2000017c  08008504  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08008504  0000a3b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e49b  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e65  00000000  00000000  0001863f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0001b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000961  00000000  00000000  0001c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001635a  00000000  00000000  0001cab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d72  00000000  00000000  00032e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c7c0  00000000  00000000  00043b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c033d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000c0380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c2ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008214 	.word	0x08008214

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08008214 	.word	0x08008214

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa19 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f833 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8db 	bl	80003e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000232:	f000 f8a1 	bl	8000378 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000236:	f007 fabb 	bl	80077b0 <MX_USB_DEVICE_Init>
//  char txBuf[8];
//  uint8_t count = 1;

  // Create rx array to store read information
  uint8_t rx_buf[2];
  bool dummy_read = false;
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	  /*
	   * The chip ID value (reset value) in addr 0x00 is 0x0043
	   */

	  // Set NCS pin to LOW to start transmission
	  HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_RESET);
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <main+0x6c>)
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fcd4 	bl	8000bf4 <HAL_GPIO_WritePin>

	  // Dummy read for the first time and skip storing to configure to SPI
	  if (!dummy_read)
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2201      	movs	r2, #1
 8000252:	4053      	eors	r3, r2
 8000254:	b2db      	uxtb	r3, r3
 8000256:	2b00      	cmp	r3, #0
 8000258:	d00a      	beq.n	8000270 <main+0x50>
	  {
		  HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY);
 800025a:	2301      	movs	r3, #1
 800025c:	425b      	negs	r3, r3
 800025e:	1d39      	adds	r1, r7, #4
 8000260:	480b      	ldr	r0, [pc, #44]	@ (8000290 <main+0x70>)
 8000262:	2202      	movs	r2, #2
 8000264:	f003 fac0 	bl	80037e8 <HAL_SPI_Receive>
		  dummy_read = true;
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	2201      	movs	r2, #1
 800026c:	701a      	strb	r2, [r3, #0]
 800026e:	e006      	b.n	800027e <main+0x5e>
	  }
	  else
	  {
//		  uint8_t tx_buf[2] = {(0x00 | 0x80), 0x00};
//		  HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 2, HAL_MAX_DELAY);
		  HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY);
 8000270:	2301      	movs	r3, #1
 8000272:	425b      	negs	r3, r3
 8000274:	1d39      	adds	r1, r7, #4
 8000276:	4806      	ldr	r0, [pc, #24]	@ (8000290 <main+0x70>)
 8000278:	2202      	movs	r2, #2
 800027a:	f003 fab5 	bl	80037e8 <HAL_SPI_Receive>
	  }

	  // Set NCS pin to HIGH to stop transmission
	  HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <main+0x6c>)
 8000280:	2201      	movs	r2, #1
 8000282:	2101      	movs	r1, #1
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fcb5 	bl	8000bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_RESET);
 800028a:	e7d9      	b.n	8000240 <main+0x20>
 800028c:	50000400 	.word	0x50000400
 8000290:	20000198 	.word	0x20000198

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b09d      	sub	sp, #116	@ 0x74
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2438      	movs	r4, #56	@ 0x38
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2338      	movs	r3, #56	@ 0x38
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f007 ff89 	bl	80081bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	2324      	movs	r3, #36	@ 0x24
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	0018      	movs	r0, r3
 80002b0:	2314      	movs	r3, #20
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f007 ff81 	bl	80081bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ba:	003b      	movs	r3, r7
 80002bc:	0018      	movs	r0, r3
 80002be:	2324      	movs	r3, #36	@ 0x24
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f007 ff7a 	bl	80081bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c8:	4b29      	ldr	r3, [pc, #164]	@ (8000370 <SystemClock_Config+0xdc>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a29      	ldr	r2, [pc, #164]	@ (8000374 <SystemClock_Config+0xe0>)
 80002ce:	401a      	ands	r2, r3
 80002d0:	4b27      	ldr	r3, [pc, #156]	@ (8000370 <SystemClock_Config+0xdc>)
 80002d2:	2180      	movs	r1, #128	@ 0x80
 80002d4:	0109      	lsls	r1, r1, #4
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	0021      	movs	r1, r4
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0252      	lsls	r2, r2, #9
 80002e8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2202      	movs	r2, #2
 80002ee:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2280      	movs	r2, #128	@ 0x80
 80002f4:	0252      	lsls	r2, r2, #9
 80002f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2280      	movs	r2, #128	@ 0x80
 80002fc:	0312      	lsls	r2, r2, #12
 80002fe:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	0412      	lsls	r2, r2, #16
 8000306:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	0018      	movs	r0, r3
 800030c:	f002 fadc 	bl	80028c8 <HAL_RCC_OscConfig>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000314:	f000 f8ee 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	2124      	movs	r1, #36	@ 0x24
 800031a:	187b      	adds	r3, r7, r1
 800031c:	220f      	movs	r2, #15
 800031e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2202      	movs	r2, #2
 8000324:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2100      	movs	r1, #0
 800033c:	0018      	movs	r0, r3
 800033e:	f002 fe97 	bl	8003070 <HAL_RCC_ClockConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000346:	f000 f8d5 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034a:	003b      	movs	r3, r7
 800034c:	2240      	movs	r2, #64	@ 0x40
 800034e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	f003 f855 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000362:	f000 f8c7 	bl	80004f4 <Error_Handler>
  }
}
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b01d      	add	sp, #116	@ 0x74
 800036c:	bd90      	pop	{r4, r7, pc}
 800036e:	46c0      	nop			@ (mov r8, r8)
 8000370:	40007000 	.word	0x40007000
 8000374:	ffffe7ff 	.word	0xffffe7ff

08000378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800037c:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <MX_SPI1_Init+0x68>)
 800037e:	4a19      	ldr	r2, [pc, #100]	@ (80003e4 <MX_SPI1_Init+0x6c>)
 8000380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000382:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <MX_SPI1_Init+0x68>)
 8000384:	2282      	movs	r2, #130	@ 0x82
 8000386:	0052      	lsls	r2, r2, #1
 8000388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038a:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <MX_SPI1_Init+0x68>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000390:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <MX_SPI1_Init+0x68>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000396:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <MX_SPI1_Init+0x68>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800039c:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <MX_SPI1_Init+0x68>)
 800039e:	2200      	movs	r2, #0
 80003a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <MX_SPI1_Init+0x68>)
 80003a4:	2280      	movs	r2, #128	@ 0x80
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003aa:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <MX_SPI1_Init+0x68>)
 80003ac:	2208      	movs	r2, #8
 80003ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <MX_SPI1_Init+0x68>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b6:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <MX_SPI1_Init+0x68>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003bc:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <MX_SPI1_Init+0x68>)
 80003be:	2200      	movs	r2, #0
 80003c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <MX_SPI1_Init+0x68>)
 80003c4:	2207      	movs	r2, #7
 80003c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <MX_SPI1_Init+0x68>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f003 f978 	bl	80036c0 <HAL_SPI_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003d4:	f000 f88e 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	20000198 	.word	0x20000198
 80003e4:	40013000 	.word	0x40013000

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b08b      	sub	sp, #44	@ 0x2c
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	2414      	movs	r4, #20
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	0018      	movs	r0, r3
 80003f4:	2314      	movs	r3, #20
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f007 fedf 	bl	80081bc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fe:	4b3b      	ldr	r3, [pc, #236]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000402:	4b3a      	ldr	r3, [pc, #232]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000404:	2104      	movs	r1, #4
 8000406:	430a      	orrs	r2, r1
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c
 800040a:	4b38      	ldr	r3, [pc, #224]	@ (80004ec <MX_GPIO_Init+0x104>)
 800040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040e:	2204      	movs	r2, #4
 8000410:	4013      	ands	r3, r2
 8000412:	613b      	str	r3, [r7, #16]
 8000414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000416:	4b35      	ldr	r3, [pc, #212]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800041a:	4b34      	ldr	r3, [pc, #208]	@ (80004ec <MX_GPIO_Init+0x104>)
 800041c:	2180      	movs	r1, #128	@ 0x80
 800041e:	430a      	orrs	r2, r1
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000422:	4b32      	ldr	r3, [pc, #200]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000426:	2280      	movs	r2, #128	@ 0x80
 8000428:	4013      	ands	r3, r2
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b2f      	ldr	r3, [pc, #188]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000432:	4b2e      	ldr	r3, [pc, #184]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	62da      	str	r2, [r3, #44]	@ 0x2c
 800043a:	4b2c      	ldr	r3, [pc, #176]	@ (80004ec <MX_GPIO_Init+0x104>)
 800043c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800043e:	2201      	movs	r2, #1
 8000440:	4013      	ands	r3, r2
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b29      	ldr	r3, [pc, #164]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <MX_GPIO_Init+0x104>)
 800044c:	2102      	movs	r1, #2
 800044e:	430a      	orrs	r2, r1
 8000450:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000452:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <MX_GPIO_Init+0x104>)
 8000454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000456:	2202      	movs	r2, #2
 8000458:	4013      	ands	r3, r2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin|FLASH_HOLD_RST_Pin|FLASH_WP_Pin, GPIO_PIN_RESET);
 800045e:	23a0      	movs	r3, #160	@ 0xa0
 8000460:	05db      	lsls	r3, r3, #23
 8000462:	2200      	movs	r2, #0
 8000464:	2107      	movs	r1, #7
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fbc4 	bl	8000bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_NCS_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800046c:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <MX_GPIO_Init+0x108>)
 800046e:	2200      	movs	r2, #0
 8000470:	2161      	movs	r1, #97	@ 0x61
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fbbe 	bl	8000bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_CS_Pin FLASH_HOLD_RST_Pin FLASH_WP_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|FLASH_HOLD_RST_Pin|FLASH_WP_Pin;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2207      	movs	r2, #7
 800047c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2201      	movs	r2, #1
 8000482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	193a      	adds	r2, r7, r4
 8000492:	23a0      	movs	r3, #160	@ 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fa2d 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_NCS_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = IMU_NCS_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2261      	movs	r2, #97	@ 0x61
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2201      	movs	r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	4a0d      	ldr	r2, [pc, #52]	@ (80004f0 <MX_GPIO_Init+0x108>)
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f000 fa1b 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80004c2:	0021      	movs	r1, r4
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2202      	movs	r2, #2
 80004c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2288      	movs	r2, #136	@ 0x88
 80004ce:	0352      	lsls	r2, r2, #13
 80004d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <MX_GPIO_Init+0x108>)
 80004dc:	0019      	movs	r1, r3
 80004de:	0010      	movs	r0, r2
 80004e0:	f000 fa0a 	bl	80008f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b00b      	add	sp, #44	@ 0x2c
 80004ea:	bd90      	pop	{r4, r7, pc}
 80004ec:	40021000 	.word	0x40021000
 80004f0:	50000400 	.word	0x50000400

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000504:	4b07      	ldr	r3, [pc, #28]	@ (8000524 <HAL_MspInit+0x24>)
 8000506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <HAL_MspInit+0x24>)
 800050a:	2101      	movs	r1, #1
 800050c:	430a      	orrs	r2, r1
 800050e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <HAL_MspInit+0x24>)
 8000512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000514:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <HAL_MspInit+0x24>)
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	0549      	lsls	r1, r1, #21
 800051a:	430a      	orrs	r2, r1
 800051c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b089      	sub	sp, #36	@ 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	240c      	movs	r4, #12
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f007 fe3e 	bl	80081bc <memset>
  if(hspi->Instance==SPI1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <HAL_SPI_MspInit+0x80>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d129      	bne.n	800059e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <HAL_SPI_MspInit+0x84>)
 800054c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800054e:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <HAL_SPI_MspInit+0x84>)
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	0149      	lsls	r1, r1, #5
 8000554:	430a      	orrs	r2, r1
 8000556:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <HAL_SPI_MspInit+0x84>)
 800055a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <HAL_SPI_MspInit+0x84>)
 800055e:	2101      	movs	r1, #1
 8000560:	430a      	orrs	r2, r1
 8000562:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000564:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <HAL_SPI_MspInit+0x84>)
 8000566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000568:	2201      	movs	r2, #1
 800056a:	4013      	ands	r3, r2
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000570:	0021      	movs	r1, r4
 8000572:	187b      	adds	r3, r7, r1
 8000574:	22e0      	movs	r2, #224	@ 0xe0
 8000576:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2202      	movs	r2, #2
 800057c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2203      	movs	r2, #3
 8000588:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	187a      	adds	r2, r7, r1
 8000592:	23a0      	movs	r3, #160	@ 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f000 f9ad 	bl	80008f8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b009      	add	sp, #36	@ 0x24
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	40013000 	.word	0x40013000
 80005ac:	40021000 	.word	0x40021000

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	e7fd      	b.n	80005b4 <NMI_Handler+0x4>

080005b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	e7fd      	b.n	80005bc <HardFault_Handler+0x4>

080005c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f894 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005e8:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <USB_IRQHandler+0x14>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fc3a 	bl	8000e64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	20000ebc 	.word	0x20000ebc

080005fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	@ (8000640 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f7ff fff6 	bl	80005fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	@ (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	@ (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	@ (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000636:	f007 fdc9 	bl	80081cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800063a:	f7ff fdf1 	bl	8000220 <main>

0800063e <LoopForever>:

LoopForever:
    b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
   ldr   r0, =_estack
 8000640:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800064c:	08008388 	.word	0x08008388
  ldr r2, =_sbss
 8000650:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000654:	200013b8 	.word	0x200013b8

08000658 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_COMP_IRQHandler>
	...

0800065c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000668:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <HAL_Init+0x3c>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <HAL_Init+0x3c>)
 800066e:	2140      	movs	r1, #64	@ 0x40
 8000670:	430a      	orrs	r2, r1
 8000672:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f811 	bl	800069c <HAL_InitTick>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d003      	beq.n	8000686 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	e001      	b.n	800068a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000686:	f7ff ff3b 	bl	8000500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
}
 800068e:	0018      	movs	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <HAL_InitTick+0x5c>)
 80006a6:	681c      	ldr	r4, [r3, #0]
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <HAL_InitTick+0x60>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	0019      	movs	r1, r3
 80006ae:	23fa      	movs	r3, #250	@ 0xfa
 80006b0:	0098      	lsls	r0, r3, #2
 80006b2:	f7ff fd29 	bl	8000108 <__udivsi3>
 80006b6:	0003      	movs	r3, r0
 80006b8:	0019      	movs	r1, r3
 80006ba:	0020      	movs	r0, r4
 80006bc:	f7ff fd24 	bl	8000108 <__udivsi3>
 80006c0:	0003      	movs	r3, r0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 f90b 	bl	80008de <HAL_SYSTICK_Config>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e00f      	b.n	80006f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d80b      	bhi.n	80006ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	2301      	movs	r3, #1
 80006da:	425b      	negs	r3, r3
 80006dc:	2200      	movs	r2, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 f8d8 	bl	8000894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_InitTick+0x64>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b003      	add	sp, #12
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x1c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	001a      	movs	r2, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <HAL_IncTick+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	18d2      	adds	r2, r2, r3
 8000714:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <HAL_IncTick+0x20>)
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000008 	.word	0x20000008
 8000724:	200001f0 	.word	0x200001f0

08000728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b02      	ldr	r3, [pc, #8]	@ (8000738 <HAL_GetTick+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	200001f0 	.word	0x200001f0

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	0002      	movs	r2, r0
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b7f      	cmp	r3, #127	@ 0x7f
 800074e:	d809      	bhi.n	8000764 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	001a      	movs	r2, r3
 8000756:	231f      	movs	r3, #31
 8000758:	401a      	ands	r2, r3
 800075a:	4b04      	ldr	r3, [pc, #16]	@ (800076c <__NVIC_EnableIRQ+0x30>)
 800075c:	2101      	movs	r1, #1
 800075e:	4091      	lsls	r1, r2
 8000760:	000a      	movs	r2, r1
 8000762:	601a      	str	r2, [r3, #0]
  }
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}
 800076c:	e000e100 	.word	0xe000e100

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b7f      	cmp	r3, #127	@ 0x7f
 8000784:	d828      	bhi.n	80007d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000786:	4a2f      	ldr	r2, [pc, #188]	@ (8000844 <__NVIC_SetPriority+0xd4>)
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	089b      	lsrs	r3, r3, #2
 8000790:	33c0      	adds	r3, #192	@ 0xc0
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	589b      	ldr	r3, [r3, r2]
 8000796:	1dfa      	adds	r2, r7, #7
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	0011      	movs	r1, r2
 800079c:	2203      	movs	r2, #3
 800079e:	400a      	ands	r2, r1
 80007a0:	00d2      	lsls	r2, r2, #3
 80007a2:	21ff      	movs	r1, #255	@ 0xff
 80007a4:	4091      	lsls	r1, r2
 80007a6:	000a      	movs	r2, r1
 80007a8:	43d2      	mvns	r2, r2
 80007aa:	401a      	ands	r2, r3
 80007ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	22ff      	movs	r2, #255	@ 0xff
 80007b4:	401a      	ands	r2, r3
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0018      	movs	r0, r3
 80007bc:	2303      	movs	r3, #3
 80007be:	4003      	ands	r3, r0
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	481f      	ldr	r0, [pc, #124]	@ (8000844 <__NVIC_SetPriority+0xd4>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	089b      	lsrs	r3, r3, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	33c0      	adds	r3, #192	@ 0xc0
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007d6:	e031      	b.n	800083c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000848 <__NVIC_SetPriority+0xd8>)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0019      	movs	r1, r3
 80007e0:	230f      	movs	r3, #15
 80007e2:	400b      	ands	r3, r1
 80007e4:	3b08      	subs	r3, #8
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	3306      	adds	r3, #6
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	3304      	adds	r3, #4
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	1dfa      	adds	r2, r7, #7
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	0011      	movs	r1, r2
 80007f8:	2203      	movs	r2, #3
 80007fa:	400a      	ands	r2, r1
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	21ff      	movs	r1, #255	@ 0xff
 8000800:	4091      	lsls	r1, r2
 8000802:	000a      	movs	r2, r1
 8000804:	43d2      	mvns	r2, r2
 8000806:	401a      	ands	r2, r3
 8000808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	019b      	lsls	r3, r3, #6
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	401a      	ands	r2, r3
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	0018      	movs	r0, r3
 8000818:	2303      	movs	r3, #3
 800081a:	4003      	ands	r3, r0
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	4809      	ldr	r0, [pc, #36]	@ (8000848 <__NVIC_SetPriority+0xd8>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	001c      	movs	r4, r3
 8000828:	230f      	movs	r3, #15
 800082a:	4023      	ands	r3, r4
 800082c:	3b08      	subs	r3, #8
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	430a      	orrs	r2, r1
 8000832:	3306      	adds	r3, #6
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	18c3      	adds	r3, r0, r3
 8000838:	3304      	adds	r3, #4
 800083a:	601a      	str	r2, [r3, #0]
}
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b003      	add	sp, #12
 8000842:	bd90      	pop	{r4, r7, pc}
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	1e5a      	subs	r2, r3, #1
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	045b      	lsls	r3, r3, #17
 800085c:	429a      	cmp	r2, r3
 800085e:	d301      	bcc.n	8000864 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000860:	2301      	movs	r3, #1
 8000862:	e010      	b.n	8000886 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <SysTick_Config+0x44>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	3a01      	subs	r2, #1
 800086a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086c:	2301      	movs	r3, #1
 800086e:	425b      	negs	r3, r3
 8000870:	2103      	movs	r1, #3
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff ff7c 	bl	8000770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <SysTick_Config+0x44>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <SysTick_Config+0x44>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000884:	2300      	movs	r3, #0
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	210f      	movs	r1, #15
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	1c02      	adds	r2, r0, #0
 80008a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ff5d 	bl	8000770 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	0002      	movs	r2, r0
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff33 	bl	800073c <__NVIC_EnableIRQ>
}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff ffaf 	bl	800084c <SysTick_Config>
 80008ee:	0003      	movs	r3, r0
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800090e:	e155      	b.n	8000bbc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4091      	lsls	r1, r2
 800091a:	000a      	movs	r2, r1
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d100      	bne.n	8000928 <HAL_GPIO_Init+0x30>
 8000926:	e146      	b.n	8000bb6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2203      	movs	r2, #3
 800092e:	4013      	ands	r3, r2
 8000930:	2b01      	cmp	r3, #1
 8000932:	d005      	beq.n	8000940 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2203      	movs	r2, #3
 800093a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800093c:	2b02      	cmp	r3, #2
 800093e:	d130      	bne.n	80009a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	409a      	lsls	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	43da      	mvns	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000976:	2201      	movs	r2, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
 800097c:	0013      	movs	r3, r2
 800097e:	43da      	mvns	r2, r3
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	2201      	movs	r2, #1
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
 8000994:	0013      	movs	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2203      	movs	r2, #3
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d017      	beq.n	80009de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	43da      	mvns	r2, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2203      	movs	r2, #3
 80009e4:	4013      	ands	r3, r2
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d123      	bne.n	8000a32 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	08da      	lsrs	r2, r3, #3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	58d3      	ldr	r3, [r2, r3]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2207      	movs	r2, #7
 80009fc:	4013      	ands	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	43da      	mvns	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2107      	movs	r1, #7
 8000a16:	400b      	ands	r3, r1
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	08da      	lsrs	r2, r3, #3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3208      	adds	r2, #8
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	6939      	ldr	r1, [r7, #16]
 8000a30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2203      	movs	r2, #3
 8000a50:	401a      	ands	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	23c0      	movs	r3, #192	@ 0xc0
 8000a6c:	029b      	lsls	r3, r3, #10
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d100      	bne.n	8000a74 <HAL_GPIO_Init+0x17c>
 8000a72:	e0a0      	b.n	8000bb6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a74:	4b57      	ldr	r3, [pc, #348]	@ (8000bd4 <HAL_GPIO_Init+0x2dc>)
 8000a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a78:	4b56      	ldr	r3, [pc, #344]	@ (8000bd4 <HAL_GPIO_Init+0x2dc>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a80:	4a55      	ldr	r2, [pc, #340]	@ (8000bd8 <HAL_GPIO_Init+0x2e0>)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	089b      	lsrs	r3, r3, #2
 8000a86:	3302      	adds	r3, #2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	589b      	ldr	r3, [r3, r2]
 8000a8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2203      	movs	r2, #3
 8000a92:	4013      	ands	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	220f      	movs	r2, #15
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	43da      	mvns	r2, r3
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	23a0      	movs	r3, #160	@ 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d01f      	beq.n	8000aee <HAL_GPIO_Init+0x1f6>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8000bdc <HAL_GPIO_Init+0x2e4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d019      	beq.n	8000aea <HAL_GPIO_Init+0x1f2>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a49      	ldr	r2, [pc, #292]	@ (8000be0 <HAL_GPIO_Init+0x2e8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d013      	beq.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a48      	ldr	r2, [pc, #288]	@ (8000be4 <HAL_GPIO_Init+0x2ec>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d00d      	beq.n	8000ae2 <HAL_GPIO_Init+0x1ea>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a47      	ldr	r2, [pc, #284]	@ (8000be8 <HAL_GPIO_Init+0x2f0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d007      	beq.n	8000ade <HAL_GPIO_Init+0x1e6>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a46      	ldr	r2, [pc, #280]	@ (8000bec <HAL_GPIO_Init+0x2f4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_GPIO_Init+0x1e2>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e00a      	b.n	8000af0 <HAL_GPIO_Init+0x1f8>
 8000ada:	2306      	movs	r3, #6
 8000adc:	e008      	b.n	8000af0 <HAL_GPIO_Init+0x1f8>
 8000ade:	2304      	movs	r3, #4
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x1f8>
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e004      	b.n	8000af0 <HAL_GPIO_Init+0x1f8>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e002      	b.n	8000af0 <HAL_GPIO_Init+0x1f8>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_Init+0x1f8>
 8000aee:	2300      	movs	r3, #0
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	2103      	movs	r1, #3
 8000af4:	400a      	ands	r2, r1
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	4093      	lsls	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b00:	4935      	ldr	r1, [pc, #212]	@ (8000bd8 <HAL_GPIO_Init+0x2e0>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0e:	4b38      	ldr	r3, [pc, #224]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	035b      	lsls	r3, r3, #13
 8000b26:	4013      	ands	r3, r2
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b32:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b38:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	039b      	lsls	r3, r3, #14
 8000b50:	4013      	ands	r3, r2
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	@ 0x80
 8000b78:	029b      	lsls	r3, r3, #10
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	025b      	lsls	r3, r3, #9
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <HAL_GPIO_Init+0x2f8>)
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	40da      	lsrs	r2, r3
 8000bc4:	1e13      	subs	r3, r2, #0
 8000bc6:	d000      	beq.n	8000bca <HAL_GPIO_Init+0x2d2>
 8000bc8:	e6a2      	b.n	8000910 <HAL_GPIO_Init+0x18>
  }
}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b006      	add	sp, #24
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	50000400 	.word	0x50000400
 8000be0:	50000800 	.word	0x50000800
 8000be4:	50000c00 	.word	0x50000c00
 8000be8:	50001000 	.word	0x50001000
 8000bec:	50001c00 	.word	0x50001c00
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	0011      	movs	r1, r2
 8000c00:	1cbb      	adds	r3, r7, #2
 8000c02:	1c02      	adds	r2, r0, #0
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	1c7b      	adds	r3, r7, #1
 8000c08:	1c0a      	adds	r2, r1, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c0c:	1c7b      	adds	r3, r7, #1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d004      	beq.n	8000c1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000c1e:	1cbb      	adds	r3, r7, #2
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0e4      	b.n	8000e0c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a73      	ldr	r2, [pc, #460]	@ (8000e14 <HAL_PCD_Init+0x1e4>)
 8000c46:	5c9b      	ldrb	r3, [r3, r2]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d108      	bne.n	8000c60 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	23a4      	movs	r3, #164	@ 0xa4
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	2100      	movs	r1, #0
 8000c56:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f006 ff5a 	bl	8007b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a6c      	ldr	r2, [pc, #432]	@ (8000e14 <HAL_PCD_Init+0x1e4>)
 8000c64:	2103      	movs	r1, #3
 8000c66:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f003 fa05 	bl	800407c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c72:	230f      	movs	r3, #15
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e047      	b.n	8000d0c <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c7c:	200f      	movs	r0, #15
 8000c7e:	183b      	adds	r3, r7, r0
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	0013      	movs	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	189b      	adds	r3, r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	18cb      	adds	r3, r1, r3
 8000c8e:	3311      	adds	r3, #17
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c94:	183b      	adds	r3, r7, r0
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	18cb      	adds	r3, r1, r3
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	183a      	adds	r2, r7, r0
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cac:	183b      	adds	r3, r7, r0
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	189b      	adds	r3, r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	18cb      	adds	r3, r1, r3
 8000cbc:	3313      	adds	r3, #19
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cc2:	183b      	adds	r3, r7, r0
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	0013      	movs	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	189b      	adds	r3, r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	18cb      	adds	r3, r1, r3
 8000cd2:	3320      	adds	r3, #32
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	0013      	movs	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	189b      	adds	r3, r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	18cb      	adds	r3, r1, r3
 8000ce8:	3324      	adds	r3, #36	@ 0x24
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cee:	183b      	adds	r3, r7, r0
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	189b      	adds	r3, r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d02:	183b      	adds	r3, r7, r0
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	183b      	adds	r3, r7, r0
 8000d08:	3201      	adds	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	210f      	movs	r1, #15
 8000d12:	187a      	adds	r2, r7, r1
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3b0      	bcc.n	8000c7c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e056      	b.n	8000dd0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d22:	240f      	movs	r4, #15
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	2352      	movs	r3, #82	@ 0x52
 8000d2c:	33ff      	adds	r3, #255	@ 0xff
 8000d2e:	0019      	movs	r1, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	189b      	adds	r3, r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	18c3      	adds	r3, r0, r3
 8000d3a:	185b      	adds	r3, r3, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	23a8      	movs	r3, #168	@ 0xa8
 8000d48:	0059      	lsls	r1, r3, #1
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	18c3      	adds	r3, r0, r3
 8000d54:	185b      	adds	r3, r3, r1
 8000d56:	193a      	adds	r2, r7, r4
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	2354      	movs	r3, #84	@ 0x54
 8000d64:	33ff      	adds	r3, #255	@ 0xff
 8000d66:	0019      	movs	r1, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	18c3      	adds	r3, r0, r3
 8000d72:	185b      	adds	r3, r3, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	23b0      	movs	r3, #176	@ 0xb0
 8000d80:	0059      	lsls	r1, r3, #1
 8000d82:	0013      	movs	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	189b      	adds	r3, r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	18c3      	adds	r3, r0, r3
 8000d8c:	185b      	adds	r3, r3, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	23b2      	movs	r3, #178	@ 0xb2
 8000d9a:	0059      	lsls	r1, r3, #1
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	189b      	adds	r3, r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	18c3      	adds	r3, r0, r3
 8000da6:	185b      	adds	r3, r3, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	23b4      	movs	r3, #180	@ 0xb4
 8000db4:	0059      	lsls	r1, r3, #1
 8000db6:	0013      	movs	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	189b      	adds	r3, r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	18c3      	adds	r3, r0, r3
 8000dc0:	185b      	adds	r3, r3, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	3201      	adds	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	18ba      	adds	r2, r7, r2
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d3a1      	bcc.n	8000d22 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6859      	ldr	r1, [r3, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	f003 f962 	bl	80040b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_PCD_Init+0x1e4>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7a9b      	ldrb	r3, [r3, #10]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d103      	bne.n	8000e0a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fd29 	bl	800285c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b005      	add	sp, #20
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	00000291 	.word	0x00000291

08000e18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	23a4      	movs	r3, #164	@ 0xa4
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d101      	bne.n	8000e30 <HAL_PCD_Start+0x18>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e014      	b.n	8000e5a <HAL_PCD_Start+0x42>
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	23a4      	movs	r3, #164	@ 0xa4
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	2101      	movs	r1, #1
 8000e38:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f003 f906 	bl	8004050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f004 fedd 	bl	8005c08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	23a4      	movs	r3, #164	@ 0xa4
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	2100      	movs	r1, #0
 8000e56:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f004 fedf 	bl	8005c34 <USB_ReadInterrupts>
 8000e76:	0003      	movs	r3, r0
 8000e78:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4013      	ands	r3, r2
 8000e82:	d004      	beq.n	8000e8e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 fb62 	bl	8001550 <PCD_EP_ISR_Handler>

    return;
 8000e8c:	e11d      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	d015      	beq.n	8000ec4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2244      	movs	r2, #68	@ 0x44
 8000e9e:	5a9b      	ldrh	r3, [r3, r2]
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	498a      	ldr	r1, [pc, #552]	@ (80010d0 <HAL_PCD_IRQHandler+0x26c>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	b291      	uxth	r1, r2
 8000eac:	2244      	movs	r2, #68	@ 0x44
 8000eae:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f006 feb1 	bl	8007c1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f000 f915 	bl	80010ec <HAL_PCD_SetAddress>

    return;
 8000ec2:	e102      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	2380      	movs	r3, #128	@ 0x80
 8000ec8:	01db      	lsls	r3, r3, #7
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d00c      	beq.n	8000ee8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2244      	movs	r2, #68	@ 0x44
 8000ed4:	5a9b      	ldrh	r3, [r3, r2]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	497d      	ldr	r1, [pc, #500]	@ (80010d4 <HAL_PCD_IRQHandler+0x270>)
 8000ede:	400a      	ands	r2, r1
 8000ee0:	b291      	uxth	r1, r2
 8000ee2:	2244      	movs	r2, #68	@ 0x44
 8000ee4:	5299      	strh	r1, [r3, r2]

    return;
 8000ee6:	e0f0      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	019b      	lsls	r3, r3, #6
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d00c      	beq.n	8000f0c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2244      	movs	r2, #68	@ 0x44
 8000ef8:	5a9b      	ldrh	r3, [r3, r2]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4975      	ldr	r1, [pc, #468]	@ (80010d8 <HAL_PCD_IRQHandler+0x274>)
 8000f02:	400a      	ands	r2, r1
 8000f04:	b291      	uxth	r1, r2
 8000f06:	2244      	movs	r2, #68	@ 0x44
 8000f08:	5299      	strh	r1, [r3, r2]

    return;
 8000f0a:	e0de      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	2380      	movs	r3, #128	@ 0x80
 8000f10:	015b      	lsls	r3, r3, #5
 8000f12:	4013      	ands	r3, r2
 8000f14:	d038      	beq.n	8000f88 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2240      	movs	r2, #64	@ 0x40
 8000f1c:	5a9b      	ldrh	r3, [r3, r2]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2104      	movs	r1, #4
 8000f26:	438a      	bics	r2, r1
 8000f28:	b291      	uxth	r1, r2
 8000f2a:	2240      	movs	r2, #64	@ 0x40
 8000f2c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2240      	movs	r2, #64	@ 0x40
 8000f34:	5a9b      	ldrh	r3, [r3, r2]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	438a      	bics	r2, r1
 8000f40:	b291      	uxth	r1, r2
 8000f42:	2240      	movs	r2, #64	@ 0x40
 8000f44:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	23b2      	movs	r3, #178	@ 0xb2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d109      	bne.n	8000f66 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	23b2      	movs	r3, #178	@ 0xb2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	2100      	movs	r1, #0
 8000f5a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2100      	movs	r1, #0
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fca5 	bl	80028b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f006 fe97 	bl	8007c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2244      	movs	r2, #68	@ 0x44
 8000f74:	5a9b      	ldrh	r3, [r3, r2]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4957      	ldr	r1, [pc, #348]	@ (80010dc <HAL_PCD_IRQHandler+0x278>)
 8000f7e:	400a      	ands	r2, r1
 8000f80:	b291      	uxth	r1, r2
 8000f82:	2244      	movs	r2, #68	@ 0x44
 8000f84:	5299      	strh	r1, [r3, r2]

    return;
 8000f86:	e0a0      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d028      	beq.n	8000fe4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2240      	movs	r2, #64	@ 0x40
 8000f98:	5a9b      	ldrh	r3, [r3, r2]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	b291      	uxth	r1, r2
 8000fa6:	2240      	movs	r2, #64	@ 0x40
 8000fa8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2244      	movs	r2, #68	@ 0x44
 8000fb0:	5a9b      	ldrh	r3, [r3, r2]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4949      	ldr	r1, [pc, #292]	@ (80010e0 <HAL_PCD_IRQHandler+0x27c>)
 8000fba:	400a      	ands	r2, r1
 8000fbc:	b291      	uxth	r1, r2
 8000fbe:	2244      	movs	r2, #68	@ 0x44
 8000fc0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2240      	movs	r2, #64	@ 0x40
 8000fc8:	5a9b      	ldrh	r3, [r3, r2]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	b291      	uxth	r1, r2
 8000fd6:	2240      	movs	r2, #64	@ 0x40
 8000fd8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f006 fe41 	bl	8007c64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000fe2:	e072      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2280      	movs	r2, #128	@ 0x80
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d046      	beq.n	800107a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2244      	movs	r2, #68	@ 0x44
 8000ff2:	5a9b      	ldrh	r3, [r3, r2]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2180      	movs	r1, #128	@ 0x80
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	b291      	uxth	r1, r2
 8001000:	2244      	movs	r2, #68	@ 0x44
 8001002:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	23b2      	movs	r3, #178	@ 0xb2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d12f      	bne.n	8001070 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2240      	movs	r2, #64	@ 0x40
 8001016:	5a9b      	ldrh	r3, [r3, r2]
 8001018:	b29a      	uxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2104      	movs	r1, #4
 8001020:	430a      	orrs	r2, r1
 8001022:	b291      	uxth	r1, r2
 8001024:	2240      	movs	r2, #64	@ 0x40
 8001026:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2240      	movs	r2, #64	@ 0x40
 800102e:	5a9b      	ldrh	r3, [r3, r2]
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2108      	movs	r1, #8
 8001038:	430a      	orrs	r2, r1
 800103a:	b291      	uxth	r1, r2
 800103c:	2240      	movs	r2, #64	@ 0x40
 800103e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	23b2      	movs	r3, #178	@ 0xb2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	2101      	movs	r1, #1
 8001048:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2254      	movs	r2, #84	@ 0x54
 8001050:	5a9b      	ldrh	r3, [r3, r2]
 8001052:	b29b      	uxth	r3, r3
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	223c      	movs	r2, #60	@ 0x3c
 8001058:	4013      	ands	r3, r2
 800105a:	0019      	movs	r1, r3
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	23b3      	movs	r3, #179	@ 0xb3
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2101      	movs	r1, #1
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fc21 	bl	80028b0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800106e:	e02c      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	0018      	movs	r0, r3
 8001074:	f006 fdf6 	bl	8007c64 <HAL_PCD_SuspendCallback>
    return;
 8001078:	e027      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4013      	ands	r3, r2
 8001082:	d010      	beq.n	80010a6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2244      	movs	r2, #68	@ 0x44
 800108a:	5a9b      	ldrh	r3, [r3, r2]
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4914      	ldr	r1, [pc, #80]	@ (80010e4 <HAL_PCD_IRQHandler+0x280>)
 8001094:	400a      	ands	r2, r1
 8001096:	b291      	uxth	r1, r2
 8001098:	2244      	movs	r2, #68	@ 0x44
 800109a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	0018      	movs	r0, r3
 80010a0:	f006 fdac 	bl	8007bfc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010a4:	e011      	b.n	80010ca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	d00c      	beq.n	80010ca <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2244      	movs	r2, #68	@ 0x44
 80010b6:	5a9b      	ldrh	r3, [r3, r2]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	490a      	ldr	r1, [pc, #40]	@ (80010e8 <HAL_PCD_IRQHandler+0x284>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	b291      	uxth	r1, r2
 80010c4:	2244      	movs	r2, #68	@ 0x44
 80010c6:	5299      	strh	r1, [r3, r2]

    return;
 80010c8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b004      	add	sp, #16
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	fffffbff 	.word	0xfffffbff
 80010d4:	ffffbfff 	.word	0xffffbfff
 80010d8:	ffffdfff 	.word	0xffffdfff
 80010dc:	ffffefff 	.word	0xffffefff
 80010e0:	fffff7ff 	.word	0xfffff7ff
 80010e4:	fffffdff 	.word	0xfffffdff
 80010e8:	fffffeff 	.word	0xfffffeff

080010ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	000a      	movs	r2, r1
 80010f6:	1cfb      	adds	r3, r7, #3
 80010f8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	23a4      	movs	r3, #164	@ 0xa4
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	5cd3      	ldrb	r3, [r2, r3]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_PCD_SetAddress+0x1e>
 8001106:	2302      	movs	r3, #2
 8001108:	e016      	b.n	8001138 <HAL_PCD_SetAddress+0x4c>
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	23a4      	movs	r3, #164	@ 0xa4
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	2101      	movs	r1, #1
 8001112:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1cfa      	adds	r2, r7, #3
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	1cfb      	adds	r3, r7, #3
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	0019      	movs	r1, r3
 8001126:	0010      	movs	r0, r2
 8001128:	f004 fd5a 	bl	8005be0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	23a4      	movs	r3, #164	@ 0xa4
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	2100      	movs	r1, #0
 8001134:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	000c      	movs	r4, r1
 800114a:	0010      	movs	r0, r2
 800114c:	0019      	movs	r1, r3
 800114e:	1cfb      	adds	r3, r7, #3
 8001150:	1c22      	adds	r2, r4, #0
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	003b      	movs	r3, r7
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	1cbb      	adds	r3, r7, #2
 800115c:	1c0a      	adds	r2, r1, #0
 800115e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8001160:	230b      	movs	r3, #11
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001168:	1cfb      	adds	r3, r7, #3
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b25b      	sxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	da0f      	bge.n	8001192 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001172:	1cfb      	adds	r3, r7, #3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2207      	movs	r2, #7
 8001178:	401a      	ands	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	189b      	adds	r3, r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	3310      	adds	r3, #16
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	18d3      	adds	r3, r2, r3
 8001188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	705a      	strb	r2, [r3, #1]
 8001190:	e00f      	b.n	80011b2 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001192:	1cfb      	adds	r3, r7, #3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2207      	movs	r2, #7
 8001198:	401a      	ands	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	189b      	adds	r3, r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	3351      	adds	r3, #81	@ 0x51
 80011a4:	33ff      	adds	r3, #255	@ 0xff
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011b2:	1cfb      	adds	r3, r7, #3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2207      	movs	r2, #7
 80011b8:	4013      	ands	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80011c0:	003b      	movs	r3, r7
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	055b      	lsls	r3, r3, #21
 80011c6:	0d5a      	lsrs	r2, r3, #21
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1cba      	adds	r2, r7, #2
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011d4:	1cbb      	adds	r3, r7, #2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d102      	bne.n	80011e2 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	23a4      	movs	r3, #164	@ 0xa4
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_PCD_EP_Open+0xb2>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e013      	b.n	800121a <HAL_PCD_EP_Open+0xda>
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	23a4      	movs	r3, #164	@ 0xa4
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	2101      	movs	r1, #1
 80011fa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f002 ff6f 	bl	80040e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	23a4      	movs	r3, #164	@ 0xa4
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	2100      	movs	r1, #0
 8001212:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001214:	230b      	movs	r3, #11
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	781b      	ldrb	r3, [r3, #0]
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b005      	add	sp, #20
 8001220:	bd90      	pop	{r4, r7, pc}

08001222 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	000a      	movs	r2, r1
 800122c:	1cfb      	adds	r3, r7, #3
 800122e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001230:	1cfb      	adds	r3, r7, #3
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	da0f      	bge.n	800125a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800123a:	1cfb      	adds	r3, r7, #3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2207      	movs	r2, #7
 8001240:	401a      	ands	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	189b      	adds	r3, r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	3310      	adds	r3, #16
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	18d3      	adds	r3, r2, r3
 8001250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	705a      	strb	r2, [r3, #1]
 8001258:	e00f      	b.n	800127a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800125a:	1cfb      	adds	r3, r7, #3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2207      	movs	r2, #7
 8001260:	401a      	ands	r2, r3
 8001262:	0013      	movs	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	189b      	adds	r3, r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	3351      	adds	r3, #81	@ 0x51
 800126c:	33ff      	adds	r3, #255	@ 0xff
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	18d3      	adds	r3, r2, r3
 8001272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800127a:	1cfb      	adds	r3, r7, #3
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2207      	movs	r2, #7
 8001280:	4013      	ands	r3, r2
 8001282:	b2da      	uxtb	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	23a4      	movs	r3, #164	@ 0xa4
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_PCD_EP_Close+0x76>
 8001294:	2302      	movs	r3, #2
 8001296:	e011      	b.n	80012bc <HAL_PCD_EP_Close+0x9a>
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	23a4      	movs	r3, #164	@ 0xa4
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	2101      	movs	r1, #1
 80012a0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f003 fbf0 	bl	8004a90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	23a4      	movs	r3, #164	@ 0xa4
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	2100      	movs	r1, #0
 80012b8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b004      	add	sp, #16
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	200b      	movs	r0, #11
 80012d2:	183b      	adds	r3, r7, r0
 80012d4:	1c0a      	adds	r2, r1, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012d8:	0001      	movs	r1, r0
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2207      	movs	r2, #7
 80012e0:	401a      	ands	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	189b      	adds	r3, r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	3351      	adds	r3, #81	@ 0x51
 80012ec:	33ff      	adds	r3, #255	@ 0xff
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2200      	movs	r2, #0
 800130a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2207      	movs	r2, #7
 8001312:	4013      	ands	r3, r2
 8001314:	b2da      	uxtb	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	0011      	movs	r1, r2
 8001322:	0018      	movs	r0, r3
 8001324:	f003 fd74 	bl	8004e10 <USB_EPStartXfer>

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b006      	add	sp, #24
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	000a      	movs	r2, r1
 800133c:	1cfb      	adds	r3, r7, #3
 800133e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001340:	1cfb      	adds	r3, r7, #3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2207      	movs	r2, #7
 8001346:	401a      	ands	r2, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	23b6      	movs	r3, #182	@ 0xb6
 800134c:	0059      	lsls	r1, r3, #1
 800134e:	0013      	movs	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	189b      	adds	r3, r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	18c3      	adds	r3, r0, r3
 8001358:	185b      	adds	r3, r3, r1
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	200b      	movs	r0, #11
 8001372:	183b      	adds	r3, r7, r0
 8001374:	1c0a      	adds	r2, r1, #0
 8001376:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001378:	183b      	adds	r3, r7, r0
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2207      	movs	r2, #7
 800137e:	401a      	ands	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	189b      	adds	r3, r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	3310      	adds	r3, #16
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	18d3      	adds	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2224      	movs	r2, #36	@ 0x24
 80013a0:	2101      	movs	r1, #1
 80013a2:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2201      	movs	r2, #1
 80013b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b6:	183b      	adds	r3, r7, r0
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2207      	movs	r2, #7
 80013bc:	4013      	ands	r3, r2
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f003 fd1f 	bl	8004e10 <USB_EPStartXfer>

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b006      	add	sp, #24
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	000a      	movs	r2, r1
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013ea:	1cfb      	adds	r3, r7, #3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2207      	movs	r2, #7
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	7912      	ldrb	r2, [r2, #4]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e046      	b.n	800148c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013fe:	1cfb      	adds	r3, r7, #3
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	da0f      	bge.n	8001428 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001408:	1cfb      	adds	r3, r7, #3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2207      	movs	r2, #7
 800140e:	401a      	ands	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	189b      	adds	r3, r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	3310      	adds	r3, #16
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2201      	movs	r2, #1
 8001424:	705a      	strb	r2, [r3, #1]
 8001426:	e00d      	b.n	8001444 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001428:	1cfb      	adds	r3, r7, #3
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	0013      	movs	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	189b      	adds	r3, r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	3351      	adds	r3, #81	@ 0x51
 8001436:	33ff      	adds	r3, #255	@ 0xff
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800144a:	1cfb      	adds	r3, r7, #3
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2207      	movs	r2, #7
 8001450:	4013      	ands	r3, r2
 8001452:	b2da      	uxtb	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	23a4      	movs	r3, #164	@ 0xa4
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_PCD_EP_SetStall+0x8c>
 8001464:	2302      	movs	r3, #2
 8001466:	e011      	b.n	800148c <HAL_PCD_EP_SetStall+0xb0>
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	23a4      	movs	r3, #164	@ 0xa4
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	2101      	movs	r1, #1
 8001470:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	0011      	movs	r1, r2
 800147a:	0018      	movs	r0, r3
 800147c:	f004 fab4 	bl	80059e8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	23a4      	movs	r3, #164	@ 0xa4
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	2100      	movs	r1, #0
 8001488:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	000a      	movs	r2, r1
 800149e:	1cfb      	adds	r3, r7, #3
 80014a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014a2:	1cfb      	adds	r3, r7, #3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	220f      	movs	r2, #15
 80014a8:	4013      	ands	r3, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	7912      	ldrb	r2, [r2, #4]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e048      	b.n	8001548 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014b6:	1cfb      	adds	r3, r7, #3
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da0f      	bge.n	80014e0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c0:	1cfb      	adds	r3, r7, #3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2207      	movs	r2, #7
 80014c6:	401a      	ands	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	189b      	adds	r3, r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	3310      	adds	r3, #16
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	705a      	strb	r2, [r3, #1]
 80014de:	e00f      	b.n	8001500 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014e0:	1cfb      	adds	r3, r7, #3
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2207      	movs	r2, #7
 80014e6:	401a      	ands	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	189b      	adds	r3, r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	3351      	adds	r3, #81	@ 0x51
 80014f2:	33ff      	adds	r3, #255	@ 0xff
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	18d3      	adds	r3, r2, r3
 80014f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001506:	1cfb      	adds	r3, r7, #3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2207      	movs	r2, #7
 800150c:	4013      	ands	r3, r2
 800150e:	b2da      	uxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	23a4      	movs	r3, #164	@ 0xa4
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_PCD_EP_ClrStall+0x90>
 8001520:	2302      	movs	r3, #2
 8001522:	e011      	b.n	8001548 <HAL_PCD_EP_ClrStall+0xb4>
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	23a4      	movs	r3, #164	@ 0xa4
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	2101      	movs	r1, #1
 800152c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f004 faa6 	bl	8005a88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	23a4      	movs	r3, #164	@ 0xa4
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	2100      	movs	r1, #0
 8001544:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}

08001550 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b094      	sub	sp, #80	@ 0x50
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001558:	f000 fbbf 	bl	8001cda <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2042      	movs	r0, #66	@ 0x42
 8001562:	183b      	adds	r3, r7, r0
 8001564:	2144      	movs	r1, #68	@ 0x44
 8001566:	5a52      	ldrh	r2, [r2, r1]
 8001568:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800156a:	183b      	adds	r3, r7, r0
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	2441      	movs	r4, #65	@ 0x41
 8001572:	193b      	adds	r3, r7, r4
 8001574:	210f      	movs	r1, #15
 8001576:	400a      	ands	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800157a:	193b      	adds	r3, r7, r4
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d000      	beq.n	8001584 <PCD_EP_ISR_Handler+0x34>
 8001582:	e151      	b.n	8001828 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001584:	183b      	adds	r3, r7, r0
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	2210      	movs	r2, #16
 800158a:	4013      	ands	r3, r2
 800158c:	d14f      	bne.n	800162e <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29a      	uxth	r2, r3
 8001596:	200a      	movs	r0, #10
 8001598:	183b      	adds	r3, r7, r0
 800159a:	49dd      	ldr	r1, [pc, #884]	@ (8001910 <PCD_EP_ISR_Handler+0x3c0>)
 800159c:	400a      	ands	r2, r1
 800159e:	801a      	strh	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	183a      	adds	r2, r7, r0
 80015a6:	8812      	ldrh	r2, [r2, #0]
 80015a8:	49da      	ldr	r1, [pc, #872]	@ (8001914 <PCD_EP_ISR_Handler+0x3c4>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	b292      	uxth	r2, r2
 80015ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3310      	adds	r3, #16
 80015b4:	64bb      	str	r3, [r7, #72]	@ 0x48

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2250      	movs	r2, #80	@ 0x50
 80015bc:	5a9b      	ldrh	r3, [r3, r2]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	001a      	movs	r2, r3
 80015c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	18d2      	adds	r2, r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	18d3      	adds	r3, r2, r3
 80015d0:	4ad1      	ldr	r2, [pc, #836]	@ (8001918 <PCD_EP_ISR_Handler+0x3c8>)
 80015d2:	4694      	mov	ip, r2
 80015d4:	4463      	add	r3, ip
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	059b      	lsls	r3, r3, #22
 80015da:	0d9a      	lsrs	r2, r3, #22
 80015dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	18d2      	adds	r2, r2, r3
 80015ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2100      	movs	r1, #0
 80015f2:	0018      	movs	r0, r3
 80015f4:	f006 fae4 	bl	8007bc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7b1b      	ldrb	r3, [r3, #12]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d100      	bne.n	8001604 <PCD_EP_ISR_Handler+0xb4>
 8001602:	e36a      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
 8001604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d000      	beq.n	800160e <PCD_EP_ISR_Handler+0xbe>
 800160c:	e365      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7b1b      	ldrb	r3, [r3, #12]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2280      	movs	r2, #128	@ 0x80
 8001616:	4252      	negs	r2, r2
 8001618:	4313      	orrs	r3, r2
 800161a:	b2da      	uxtb	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0011      	movs	r1, r2
 8001622:	224c      	movs	r2, #76	@ 0x4c
 8001624:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	731a      	strb	r2, [r3, #12]
 800162c:	e355      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3351      	adds	r3, #81	@ 0x51
 8001632:	33ff      	adds	r3, #255	@ 0xff
 8001634:	64bb      	str	r3, [r7, #72]	@ 0x48
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	213e      	movs	r1, #62	@ 0x3e
 800163c:	187b      	adds	r3, r7, r1
 800163e:	8812      	ldrh	r2, [r2, #0]
 8001640:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001642:	187b      	adds	r3, r7, r1
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4013      	ands	r3, r2
 800164c:	d100      	bne.n	8001650 <PCD_EP_ISR_Handler+0x100>
 800164e:	e07d      	b.n	800174c <PCD_EP_ISR_Handler+0x1fc>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2250      	movs	r2, #80	@ 0x50
 8001656:	5a9b      	ldrh	r3, [r3, r2]
 8001658:	b29b      	uxth	r3, r3
 800165a:	001a      	movs	r2, r3
 800165c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	18d2      	adds	r2, r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	4aac      	ldr	r2, [pc, #688]	@ (800191c <PCD_EP_ISR_Handler+0x3cc>)
 800166c:	4694      	mov	ip, r2
 800166e:	4463      	add	r3, ip
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	059b      	lsls	r3, r3, #22
 8001674:	0d9a      	lsrs	r2, r3, #22
 8001676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001678:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 8U)
 800167a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d041      	beq.n	8001706 <PCD_EP_ISR_Handler+0x1b6>
          {
            /* Set Stall condition for EP0 IN/OUT */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29a      	uxth	r2, r3
 800168a:	2010      	movs	r0, #16
 800168c:	183b      	adds	r3, r7, r0
 800168e:	49a4      	ldr	r1, [pc, #656]	@ (8001920 <PCD_EP_ISR_Handler+0x3d0>)
 8001690:	400a      	ands	r2, r1
 8001692:	801a      	strh	r2, [r3, #0]
 8001694:	183b      	adds	r3, r7, r0
 8001696:	183a      	adds	r2, r7, r0
 8001698:	8812      	ldrh	r2, [r2, #0]
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0149      	lsls	r1, r1, #5
 800169e:	404a      	eors	r2, r1
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	183a      	adds	r2, r7, r0
 80016a8:	8812      	ldrh	r2, [r2, #0]
 80016aa:	499e      	ldr	r1, [pc, #632]	@ (8001924 <PCD_EP_ISR_Handler+0x3d4>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	b292      	uxth	r2, r2
 80016b0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	200e      	movs	r0, #14
 80016bc:	183b      	adds	r3, r7, r0
 80016be:	499a      	ldr	r1, [pc, #616]	@ (8001928 <PCD_EP_ISR_Handler+0x3d8>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	183b      	adds	r3, r7, r0
 80016c6:	183a      	adds	r2, r7, r0
 80016c8:	8812      	ldrh	r2, [r2, #0]
 80016ca:	2110      	movs	r1, #16
 80016cc:	404a      	eors	r2, r1
 80016ce:	801a      	strh	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	183a      	adds	r2, r7, r0
 80016d6:	8812      	ldrh	r2, [r2, #0]
 80016d8:	4992      	ldr	r1, [pc, #584]	@ (8001924 <PCD_EP_ISR_Handler+0x3d4>)
 80016da:	430a      	orrs	r2, r1
 80016dc:	b292      	uxth	r2, r2
 80016de:	801a      	strh	r2, [r3, #0]

            /* SETUP bit kept frozen while CTR_RX = 1 */
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	200c      	movs	r0, #12
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	498f      	ldr	r1, [pc, #572]	@ (800192c <PCD_EP_ISR_Handler+0x3dc>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	183a      	adds	r2, r7, r0
 80016f8:	8812      	ldrh	r2, [r2, #0]
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	430a      	orrs	r2, r1
 80016fe:	b292      	uxth	r2, r2
 8001700:	801a      	strh	r2, [r3, #0]

            return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e2f4      	b.n	8001cf0 <PCD_EP_ISR_Handler+0x7a0>
          }

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	22a6      	movs	r2, #166	@ 0xa6
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	1899      	adds	r1, r3, r2
 8001712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001714:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001718:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800171a:	b29b      	uxth	r3, r3
 800171c:	f004 fae2 	bl	8005ce4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29a      	uxth	r2, r3
 8001728:	2012      	movs	r0, #18
 800172a:	183b      	adds	r3, r7, r0
 800172c:	497f      	ldr	r1, [pc, #508]	@ (800192c <PCD_EP_ISR_Handler+0x3dc>)
 800172e:	400a      	ands	r2, r1
 8001730:	801a      	strh	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	183a      	adds	r2, r7, r0
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	2180      	movs	r1, #128	@ 0x80
 800173c:	430a      	orrs	r2, r1
 800173e:	b292      	uxth	r2, r2
 8001740:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0018      	movs	r0, r3
 8001746:	f006 fa05 	bl	8007b54 <HAL_PCD_SetupStageCallback>
 800174a:	e2c6      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800174c:	233e      	movs	r3, #62	@ 0x3e
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2200      	movs	r2, #0
 8001752:	5e9b      	ldrsh	r3, [r3, r2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db00      	blt.n	800175a <PCD_EP_ISR_Handler+0x20a>
 8001758:	e2bf      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29a      	uxth	r2, r3
 8001762:	2016      	movs	r0, #22
 8001764:	183b      	adds	r3, r7, r0
 8001766:	4971      	ldr	r1, [pc, #452]	@ (800192c <PCD_EP_ISR_Handler+0x3dc>)
 8001768:	400a      	ands	r2, r1
 800176a:	801a      	strh	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	183a      	adds	r2, r7, r0
 8001772:	8812      	ldrh	r2, [r2, #0]
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	430a      	orrs	r2, r1
 8001778:	b292      	uxth	r2, r2
 800177a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2250      	movs	r2, #80	@ 0x50
 8001782:	5a9b      	ldrh	r3, [r3, r2]
 8001784:	b29b      	uxth	r3, r3
 8001786:	001a      	movs	r2, r3
 8001788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	18d2      	adds	r2, r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	4a61      	ldr	r2, [pc, #388]	@ (800191c <PCD_EP_ISR_Handler+0x3cc>)
 8001798:	4694      	mov	ip, r2
 800179a:	4463      	add	r3, ip
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	059b      	lsls	r3, r3, #22
 80017a0:	0d9a      	lsrs	r2, r3, #22
 80017a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a4:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count == 0U)
 80017a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d11f      	bne.n	80017ee <PCD_EP_ISR_Handler+0x29e>
          {
            /* Status phase re-arm for next setup */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	2014      	movs	r0, #20
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	4959      	ldr	r1, [pc, #356]	@ (8001920 <PCD_EP_ISR_Handler+0x3d0>)
 80017bc:	400a      	ands	r2, r1
 80017be:	801a      	strh	r2, [r3, #0]
 80017c0:	183b      	adds	r3, r7, r0
 80017c2:	183a      	adds	r2, r7, r0
 80017c4:	8812      	ldrh	r2, [r2, #0]
 80017c6:	2180      	movs	r1, #128	@ 0x80
 80017c8:	0149      	lsls	r1, r1, #5
 80017ca:	404a      	eors	r2, r1
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	183b      	adds	r3, r7, r0
 80017d0:	183a      	adds	r2, r7, r0
 80017d2:	8812      	ldrh	r2, [r2, #0]
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	0189      	lsls	r1, r1, #6
 80017d8:	404a      	eors	r2, r1
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	183a      	adds	r2, r7, r0
 80017e2:	8812      	ldrh	r2, [r2, #0]
 80017e4:	494f      	ldr	r1, [pc, #316]	@ (8001924 <PCD_EP_ISR_Handler+0x3d4>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	b292      	uxth	r2, r2
 80017ea:	801a      	strh	r2, [r3, #0]
 80017ec:	e275      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
          }
          else
          {
            if (ep->xfer_buff != 0U)
 80017ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <PCD_EP_ISR_Handler+0x2a8>
 80017f6:	e270      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017fe:	6959      	ldr	r1, [r3, #20]
 8001800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001802:	88da      	ldrh	r2, [r3, #6]
                          ep->pmaadress, (uint16_t)ep->xfer_count);  /* max 64bytes */
 8001804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001806:	69db      	ldr	r3, [r3, #28]
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001808:	b29b      	uxth	r3, r3
 800180a:	f004 fa6b 	bl	8005ce4 <USB_ReadPMA>

              ep->xfer_buff += ep->xfer_count;
 800180e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	18d2      	adds	r2, r2, r3
 8001818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800181a:	615a      	str	r2, [r3, #20]

              /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataOutStageCallback(hpcd, 0U);
#else
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2100      	movs	r1, #0
 8001820:	0018      	movs	r0, r3
 8001822:	f006 f9ac 	bl	8007b7e <HAL_PCD_DataOutStageCallback>
 8001826:	e258      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	2041      	movs	r0, #65	@ 0x41
 8001830:	183b      	adds	r3, r7, r0
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	18d2      	adds	r2, r2, r3
 8001838:	213e      	movs	r1, #62	@ 0x3e
 800183a:	187b      	adds	r3, r7, r1
 800183c:	8812      	ldrh	r2, [r2, #0]
 800183e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2200      	movs	r2, #0
 8001844:	5e9b      	ldrsh	r3, [r3, r2]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db00      	blt.n	800184c <PCD_EP_ISR_Handler+0x2fc>
 800184a:	e10c      	b.n	8001a66 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	001a      	movs	r2, r3
 8001852:	183b      	adds	r3, r7, r0
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	18d3      	adds	r3, r2, r3
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	2446      	movs	r4, #70	@ 0x46
 8001860:	193b      	adds	r3, r7, r4
 8001862:	4932      	ldr	r1, [pc, #200]	@ (800192c <PCD_EP_ISR_Handler+0x3dc>)
 8001864:	400a      	ands	r2, r1
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	001a      	movs	r2, r3
 800186e:	183b      	adds	r3, r7, r0
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	18d3      	adds	r3, r2, r3
 8001876:	193a      	adds	r2, r7, r4
 8001878:	8812      	ldrh	r2, [r2, #0]
 800187a:	2180      	movs	r1, #128	@ 0x80
 800187c:	430a      	orrs	r2, r1
 800187e:	b292      	uxth	r2, r2
 8001880:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001882:	183b      	adds	r3, r7, r0
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	0013      	movs	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	189b      	adds	r3, r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	3351      	adds	r3, #81	@ 0x51
 8001890:	33ff      	adds	r3, #255	@ 0xff
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	18d3      	adds	r3, r2, r3
 8001896:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d125      	bne.n	80018ec <PCD_EP_ISR_Handler+0x39c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2250      	movs	r2, #80	@ 0x50
 80018a6:	5a9b      	ldrh	r3, [r3, r2]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	001a      	movs	r2, r3
 80018ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	18d2      	adds	r2, r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	18d3      	adds	r3, r2, r3
 80018ba:	4a18      	ldr	r2, [pc, #96]	@ (800191c <PCD_EP_ISR_Handler+0x3cc>)
 80018bc:	4694      	mov	ip, r2
 80018be:	4463      	add	r3, ip
 80018c0:	881a      	ldrh	r2, [r3, #0]
 80018c2:	244e      	movs	r4, #78	@ 0x4e
 80018c4:	193b      	adds	r3, r7, r4
 80018c6:	0592      	lsls	r2, r2, #22
 80018c8:	0d92      	lsrs	r2, r2, #22
 80018ca:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d100      	bne.n	80018d6 <PCD_EP_ISR_Handler+0x386>
 80018d4:	e09e      	b.n	8001a14 <PCD_EP_ISR_Handler+0x4c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018dc:	6959      	ldr	r1, [r3, #20]
 80018de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018e0:	88da      	ldrh	r2, [r3, #6]
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	f004 f9fd 	bl	8005ce4 <USB_ReadPMA>
 80018ea:	e093      	b.n	8001a14 <PCD_EP_ISR_Handler+0x4c4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ee:	78db      	ldrb	r3, [r3, #3]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d11d      	bne.n	8001930 <PCD_EP_ISR_Handler+0x3e0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018f4:	234e      	movs	r3, #78	@ 0x4e
 80018f6:	18fc      	adds	r4, r7, r3
 80018f8:	233e      	movs	r3, #62	@ 0x3e
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	881a      	ldrh	r2, [r3, #0]
 80018fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	0018      	movs	r0, r3
 8001904:	f000 f9f8 	bl	8001cf8 <HAL_PCD_EP_DB_Receive>
 8001908:	0003      	movs	r3, r0
 800190a:	8023      	strh	r3, [r4, #0]
 800190c:	e082      	b.n	8001a14 <PCD_EP_ISR_Handler+0x4c4>
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	ffff8f0f 	.word	0xffff8f0f
 8001914:	ffff8000 	.word	0xffff8000
 8001918:	00000402 	.word	0x00000402
 800191c:	00000406 	.word	0x00000406
 8001920:	ffffbf8f 	.word	0xffffbf8f
 8001924:	ffff8080 	.word	0xffff8080
 8001928:	ffff8fbf 	.word	0xffff8fbf
 800192c:	00000f8f 	.word	0x00000f8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	001a      	movs	r2, r3
 8001936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29a      	uxth	r2, r3
 8001942:	2044      	movs	r0, #68	@ 0x44
 8001944:	183b      	adds	r3, r7, r0
 8001946:	49cf      	ldr	r1, [pc, #828]	@ (8001c84 <PCD_EP_ISR_Handler+0x734>)
 8001948:	400a      	ands	r2, r1
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	001a      	movs	r2, r3
 8001952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	183a      	adds	r2, r7, r0
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	49ca      	ldr	r1, [pc, #808]	@ (8001c88 <PCD_EP_ISR_Handler+0x738>)
 8001960:	430a      	orrs	r2, r1
 8001962:	b292      	uxth	r2, r2
 8001964:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	001a      	movs	r2, r3
 800196c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	18d3      	adds	r3, r2, r3
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	001a      	movs	r2, r3
 800197a:	2380      	movs	r3, #128	@ 0x80
 800197c:	01db      	lsls	r3, r3, #7
 800197e:	4013      	ands	r3, r2
 8001980:	d024      	beq.n	80019cc <PCD_EP_ISR_Handler+0x47c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2250      	movs	r2, #80	@ 0x50
 8001988:	5a9b      	ldrh	r3, [r3, r2]
 800198a:	b29b      	uxth	r3, r3
 800198c:	001a      	movs	r2, r3
 800198e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	18d2      	adds	r2, r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	18d3      	adds	r3, r2, r3
 800199c:	4abb      	ldr	r2, [pc, #748]	@ (8001c8c <PCD_EP_ISR_Handler+0x73c>)
 800199e:	4694      	mov	ip, r2
 80019a0:	4463      	add	r3, ip
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	244e      	movs	r4, #78	@ 0x4e
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	0592      	lsls	r2, r2, #22
 80019aa:	0d92      	lsrs	r2, r2, #22
 80019ac:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d02e      	beq.n	8001a14 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019bc:	6959      	ldr	r1, [r3, #20]
 80019be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c0:	891a      	ldrh	r2, [r3, #8]
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	f004 f98d 	bl	8005ce4 <USB_ReadPMA>
 80019ca:	e023      	b.n	8001a14 <PCD_EP_ISR_Handler+0x4c4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2250      	movs	r2, #80	@ 0x50
 80019d2:	5a9b      	ldrh	r3, [r3, r2]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	001a      	movs	r2, r3
 80019d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	18d2      	adds	r2, r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	18d3      	adds	r3, r2, r3
 80019e6:	4aaa      	ldr	r2, [pc, #680]	@ (8001c90 <PCD_EP_ISR_Handler+0x740>)
 80019e8:	4694      	mov	ip, r2
 80019ea:	4463      	add	r3, ip
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	244e      	movs	r4, #78	@ 0x4e
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	0592      	lsls	r2, r2, #22
 80019f4:	0d92      	lsrs	r2, r2, #22
 80019f6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a06:	6959      	ldr	r1, [r3, #20]
 8001a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a0a:	895a      	ldrh	r2, [r3, #10]
 8001a0c:	193b      	adds	r3, r7, r4
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	f004 f968 	bl	8005ce4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	214e      	movs	r1, #78	@ 0x4e
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	18d2      	adds	r2, r2, r3
 8001a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a22:	61da      	str	r2, [r3, #28]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <PCD_EP_ISR_Handler+0x4e8>
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <PCD_EP_ISR_Handler+0x4f8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f006 f89c 	bl	8007b7e <HAL_PCD_DataOutStageCallback>
 8001a46:	e00e      	b.n	8001a66 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
           ep->xfer_buff += count;
 8001a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	234e      	movs	r3, #78	@ 0x4e
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	18d2      	adds	r2, r2, r3
 8001a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a56:	615a      	str	r2, [r3, #20]
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a5e:	0011      	movs	r1, r2
 8001a60:	0018      	movs	r0, r3
 8001a62:	f003 f9d5 	bl	8004e10 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a66:	243e      	movs	r4, #62	@ 0x3e
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d100      	bne.n	8001a74 <PCD_EP_ISR_Handler+0x524>
 8001a72:	e132      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a74:	2041      	movs	r0, #65	@ 0x41
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	189b      	adds	r3, r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	3310      	adds	r3, #16
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	18d3      	adds	r3, r2, r3
 8001a88:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	001a      	movs	r2, r3
 8001a90:	183b      	adds	r3, r7, r0
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	18d3      	adds	r3, r2, r3
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	253c      	movs	r5, #60	@ 0x3c
 8001a9e:	197b      	adds	r3, r7, r5
 8001aa0:	497c      	ldr	r1, [pc, #496]	@ (8001c94 <PCD_EP_ISR_Handler+0x744>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	001a      	movs	r2, r3
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	18d3      	adds	r3, r2, r3
 8001ab4:	197a      	adds	r2, r7, r5
 8001ab6:	8812      	ldrh	r2, [r2, #0]
 8001ab8:	4977      	ldr	r1, [pc, #476]	@ (8001c98 <PCD_EP_ISR_Handler+0x748>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	b292      	uxth	r2, r2
 8001abe:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ac2:	78db      	ldrb	r3, [r3, #3]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d000      	beq.n	8001aca <PCD_EP_ISR_Handler+0x57a>
 8001ac8:	e0a1      	b.n	8001c0e <PCD_EP_ISR_Handler+0x6be>
        {
          ep->xfer_len = 0U;
 8001aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ad2:	7b1b      	ldrb	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d100      	bne.n	8001ada <PCD_EP_ISR_Handler+0x58a>
 8001ad8:	e091      	b.n	8001bfe <PCD_EP_ISR_Handler+0x6ae>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2240      	movs	r2, #64	@ 0x40
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d046      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x622>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ae6:	785b      	ldrb	r3, [r3, #1]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d125      	bne.n	8001b38 <PCD_EP_ISR_Handler+0x5e8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2250      	movs	r2, #80	@ 0x50
 8001af8:	5a9b      	ldrh	r3, [r3, r2]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	001a      	movs	r2, r3
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	189b      	adds	r3, r3, r2
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	00da      	lsls	r2, r3, #3
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	18d3      	adds	r3, r2, r3
 8001b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001c8c <PCD_EP_ISR_Handler+0x73c>)
 8001b10:	4694      	mov	ip, r2
 8001b12:	4463      	add	r3, ip
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	059b      	lsls	r3, r3, #22
 8001b1e:	0d9b      	lsrs	r3, r3, #22
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4a5a      	ldr	r2, [pc, #360]	@ (8001c98 <PCD_EP_ISR_Handler+0x748>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	801a      	strh	r2, [r3, #0]
 8001b36:	e062      	b.n	8001bfe <PCD_EP_ISR_Handler+0x6ae>
 8001b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d15e      	bne.n	8001bfe <PCD_EP_ISR_Handler+0x6ae>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2250      	movs	r2, #80	@ 0x50
 8001b4c:	5a9b      	ldrh	r3, [r3, r2]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	001a      	movs	r2, r3
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	189b      	adds	r3, r3, r2
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	00da      	lsls	r2, r3, #3
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	18d3      	adds	r3, r2, r3
 8001b62:	4a4a      	ldr	r2, [pc, #296]	@ (8001c8c <PCD_EP_ISR_Handler+0x73c>)
 8001b64:	4694      	mov	ip, r2
 8001b66:	4463      	add	r3, ip
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	e045      	b.n	8001bfe <PCD_EP_ISR_Handler+0x6ae>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d125      	bne.n	8001bcc <PCD_EP_ISR_Handler+0x67c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2250      	movs	r2, #80	@ 0x50
 8001b8c:	5a9b      	ldrh	r3, [r3, r2]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	001a      	movs	r2, r3
 8001b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	00da      	lsls	r2, r3, #3
 8001b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8001c90 <PCD_EP_ISR_Handler+0x740>)
 8001ba4:	4694      	mov	ip, r2
 8001ba6:	4463      	add	r3, ip
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	059b      	lsls	r3, r3, #22
 8001bb2:	0d9b      	lsrs	r3, r3, #22
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb8:	801a      	strh	r2, [r3, #0]
 8001bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4a35      	ldr	r2, [pc, #212]	@ (8001c98 <PCD_EP_ISR_Handler+0x748>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e018      	b.n	8001bfe <PCD_EP_ISR_Handler+0x6ae>
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d114      	bne.n	8001bfe <PCD_EP_ISR_Handler+0x6ae>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2250      	movs	r2, #80	@ 0x50
 8001bda:	5a9b      	ldrh	r3, [r3, r2]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	001a      	movs	r2, r3
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	189b      	adds	r3, r3, r2
 8001be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	00da      	lsls	r2, r3, #3
 8001bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bee:	18d3      	adds	r3, r2, r3
 8001bf0:	4a27      	ldr	r2, [pc, #156]	@ (8001c90 <PCD_EP_ISR_Handler+0x740>)
 8001bf2:	4694      	mov	ip, r2
 8001bf4:	4463      	add	r3, ip
 8001bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0011      	movs	r1, r2
 8001c06:	0018      	movs	r0, r3
 8001c08:	f005 ffda 	bl	8007bc0 <HAL_PCD_DataInStageCallback>
 8001c0c:	e065      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001c0e:	233e      	movs	r3, #62	@ 0x3e
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d156      	bne.n	8001cca <PCD_EP_ISR_Handler+0x77a>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2250      	movs	r2, #80	@ 0x50
 8001c22:	5a9b      	ldrh	r3, [r3, r2]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	001a      	movs	r2, r3
 8001c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	18d2      	adds	r2, r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	18d3      	adds	r3, r2, r3
 8001c36:	4a15      	ldr	r2, [pc, #84]	@ (8001c8c <PCD_EP_ISR_Handler+0x73c>)
 8001c38:	4694      	mov	ip, r2
 8001c3a:	4463      	add	r3, ip
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	213a      	movs	r1, #58	@ 0x3a
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	0592      	lsls	r2, r2, #22
 8001c44:	0d92      	lsrs	r2, r2, #22
 8001c46:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d907      	bls.n	8001c64 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e002      	b.n	8001c6a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d114      	bne.n	8001c9c <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0011      	movs	r1, r2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f005 ffa0 	bl	8007bc0 <HAL_PCD_DataInStageCallback>
 8001c80:	e02b      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	ffff8f8f 	.word	0xffff8f8f
 8001c88:	ffff80c0 	.word	0xffff80c0
 8001c8c:	00000402 	.word	0x00000402
 8001c90:	00000406 	.word	0x00000406
 8001c94:	ffff8f0f 	.word	0xffff8f0f
 8001c98:	ffff8000 	.word	0xffff8000
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	213a      	movs	r1, #58	@ 0x3a
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	18d2      	adds	r2, r2, r3
 8001ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001caa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cae:	69da      	ldr	r2, [r3, #28]
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	18d2      	adds	r2, r2, r3
 8001cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f003 f8a4 	bl	8004e10 <USB_EPStartXfer>
 8001cc8:	e007      	b.n	8001cda <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cca:	233e      	movs	r3, #62	@ 0x3e
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f92b 	bl	8001f30 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2244      	movs	r2, #68	@ 0x44
 8001ce0:	5a9b      	ldrh	r3, [r3, r2]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da01      	bge.n	8001cee <PCD_EP_ISR_Handler+0x79e>
 8001cea:	f7ff fc37 	bl	800155c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b014      	add	sp, #80	@ 0x50
 8001cf6:	bdb0      	pop	{r4, r5, r7, pc}

08001cf8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d06:	1dbb      	adds	r3, r7, #6
 8001d08:	881a      	ldrh	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	01db      	lsls	r3, r3, #7
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d100      	bne.n	8001d14 <HAL_PCD_EP_DB_Receive+0x1c>
 8001d12:	e07d      	b.n	8001e10 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2250      	movs	r2, #80	@ 0x50
 8001d1a:	5a9b      	ldrh	r3, [r3, r2]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	001a      	movs	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	18d2      	adds	r2, r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	18d3      	adds	r3, r2, r3
 8001d2e:	4a7a      	ldr	r2, [pc, #488]	@ (8001f18 <HAL_PCD_EP_DB_Receive+0x220>)
 8001d30:	4694      	mov	ip, r2
 8001d32:	4463      	add	r3, ip
 8001d34:	881a      	ldrh	r2, [r3, #0]
 8001d36:	211a      	movs	r1, #26
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	0592      	lsls	r2, r2, #22
 8001d3c:	0d92      	lsrs	r2, r2, #22
 8001d3e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d307      	bcc.n	8001d5c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	619a      	str	r2, [r3, #24]
 8001d5a:	e002      	b.n	8001d62 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d121      	bne.n	8001dae <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	001a      	movs	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	18d3      	adds	r3, r2, r3
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2018      	movs	r0, #24
 8001d7e:	183b      	adds	r3, r7, r0
 8001d80:	4966      	ldr	r1, [pc, #408]	@ (8001f1c <HAL_PCD_EP_DB_Receive+0x224>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	183b      	adds	r3, r7, r0
 8001d88:	183a      	adds	r2, r7, r0
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	0189      	lsls	r1, r1, #6
 8001d90:	404a      	eors	r2, r1
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	001a      	movs	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	18d3      	adds	r3, r2, r3
 8001da2:	183a      	adds	r2, r7, r0
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	495e      	ldr	r1, [pc, #376]	@ (8001f20 <HAL_PCD_EP_DB_Receive+0x228>)
 8001da8:	430a      	orrs	r2, r1
 8001daa:	b292      	uxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2240      	movs	r2, #64	@ 0x40
 8001db4:	4013      	ands	r3, r2
 8001db6:	d01a      	beq.n	8001dee <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	18d3      	adds	r3, r2, r3
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	2016      	movs	r0, #22
 8001dcc:	183b      	adds	r3, r7, r0
 8001dce:	4955      	ldr	r1, [pc, #340]	@ (8001f24 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	801a      	strh	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	001a      	movs	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	183a      	adds	r2, r7, r0
 8001de4:	8812      	ldrh	r2, [r2, #0]
 8001de6:	4950      	ldr	r1, [pc, #320]	@ (8001f28 <HAL_PCD_EP_DB_Receive+0x230>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	b292      	uxth	r2, r2
 8001dec:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001dee:	241a      	movs	r4, #26
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d100      	bne.n	8001dfa <HAL_PCD_EP_DB_Receive+0x102>
 8001df8:	e086      	b.n	8001f08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	6959      	ldr	r1, [r3, #20]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	891a      	ldrh	r2, [r3, #8]
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f003 ff6b 	bl	8005ce4 <USB_ReadPMA>
 8001e0e:	e07b      	b.n	8001f08 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2250      	movs	r2, #80	@ 0x50
 8001e16:	5a9b      	ldrh	r3, [r3, r2]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	18d2      	adds	r2, r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	18d3      	adds	r3, r2, r3
 8001e2a:	4a40      	ldr	r2, [pc, #256]	@ (8001f2c <HAL_PCD_EP_DB_Receive+0x234>)
 8001e2c:	4694      	mov	ip, r2
 8001e2e:	4463      	add	r3, ip
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	211a      	movs	r1, #26
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	0592      	lsls	r2, r2, #22
 8001e38:	0d92      	lsrs	r2, r2, #22
 8001e3a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d307      	bcc.n	8001e58 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	699a      	ldr	r2, [r3, #24]
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	1ad2      	subs	r2, r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	e002      	b.n	8001e5e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d121      	bne.n	8001eaa <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	18d3      	adds	r3, r2, r3
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	201e      	movs	r0, #30
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	4927      	ldr	r1, [pc, #156]	@ (8001f1c <HAL_PCD_EP_DB_Receive+0x224>)
 8001e7e:	400a      	ands	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	183a      	adds	r2, r7, r0
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	0189      	lsls	r1, r1, #6
 8001e8c:	404a      	eors	r2, r1
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	001a      	movs	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	18d3      	adds	r3, r2, r3
 8001e9e:	183a      	adds	r2, r7, r0
 8001ea0:	8812      	ldrh	r2, [r2, #0]
 8001ea2:	491f      	ldr	r1, [pc, #124]	@ (8001f20 <HAL_PCD_EP_DB_Receive+0x228>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	801a      	strh	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001eaa:	1dbb      	adds	r3, r7, #6
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d11a      	bne.n	8001eea <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	201c      	movs	r0, #28
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	4916      	ldr	r1, [pc, #88]	@ (8001f24 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	18d3      	adds	r3, r2, r3
 8001ede:	183a      	adds	r2, r7, r0
 8001ee0:	8812      	ldrh	r2, [r2, #0]
 8001ee2:	4911      	ldr	r1, [pc, #68]	@ (8001f28 <HAL_PCD_EP_DB_Receive+0x230>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001eea:	241a      	movs	r4, #26
 8001eec:	193b      	adds	r3, r7, r4
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	6959      	ldr	r1, [r3, #20]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	895a      	ldrh	r2, [r3, #10]
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f003 feee 	bl	8005ce4 <USB_ReadPMA>
    }
  }

  return count;
 8001f08:	231a      	movs	r3, #26
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	881b      	ldrh	r3, [r3, #0]
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b009      	add	sp, #36	@ 0x24
 8001f14:	bd90      	pop	{r4, r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	00000402 	.word	0x00000402
 8001f1c:	ffffbf8f 	.word	0xffffbf8f
 8001f20:	ffff8080 	.word	0xffff8080
 8001f24:	ffff8f8f 	.word	0xffff8f8f
 8001f28:	ffff80c0 	.word	0xffff80c0
 8001f2c:	00000406 	.word	0x00000406

08001f30 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0a6      	sub	sp, #152	@ 0x98
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	1dbb      	adds	r3, r7, #6
 8001f3c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f3e:	1dbb      	adds	r3, r7, #6
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2240      	movs	r2, #64	@ 0x40
 8001f44:	4013      	ands	r3, r2
 8001f46:	d100      	bne.n	8001f4a <HAL_PCD_EP_DB_Transmit+0x1a>
 8001f48:	e1f9      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0x40e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2250      	movs	r2, #80	@ 0x50
 8001f50:	5a9b      	ldrh	r3, [r3, r2]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	001a      	movs	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	18d2      	adds	r2, r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	4ace      	ldr	r2, [pc, #824]	@ (80022a0 <HAL_PCD_EP_DB_Transmit+0x370>)
 8001f66:	4694      	mov	ip, r2
 8001f68:	4463      	add	r3, ip
 8001f6a:	881a      	ldrh	r2, [r3, #0]
 8001f6c:	2196      	movs	r1, #150	@ 0x96
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	0592      	lsls	r2, r2, #22
 8001f72:	0d92      	lsrs	r2, r2, #22
 8001f74:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d907      	bls.n	8001f92 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	1ad2      	subs	r2, r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	619a      	str	r2, [r3, #24]
 8001f90:	e002      	b.n	8001f98 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d000      	beq.n	8001fa2 <HAL_PCD_EP_DB_Transmit+0x72>
 8001fa0:	e0da      	b.n	8002158 <HAL_PCD_EP_DB_Transmit+0x228>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d125      	bne.n	8001ff6 <HAL_PCD_EP_DB_Transmit+0xc6>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2250      	movs	r2, #80	@ 0x50
 8001fb6:	5a9b      	ldrh	r3, [r3, r2]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	001a      	movs	r2, r3
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fbe:	189b      	adds	r3, r3, r2
 8001fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	00da      	lsls	r2, r3, #3
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fca:	18d3      	adds	r3, r2, r3
 8001fcc:	4ab4      	ldr	r2, [pc, #720]	@ (80022a0 <HAL_PCD_EP_DB_Transmit+0x370>)
 8001fce:	4694      	mov	ip, r2
 8001fd0:	4463      	add	r3, ip
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	059b      	lsls	r3, r3, #22
 8001fdc:	0d9b      	lsrs	r3, r3, #22
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4aae      	ldr	r2, [pc, #696]	@ (80022a4 <HAL_PCD_EP_DB_Transmit+0x374>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	e01b      	b.n	800202e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d117      	bne.n	800202e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2250      	movs	r2, #80	@ 0x50
 800200a:	5a9b      	ldrh	r3, [r3, r2]
 800200c:	b29b      	uxth	r3, r3
 800200e:	001a      	movs	r2, r3
 8002010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002012:	189b      	adds	r3, r3, r2
 8002014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	00da      	lsls	r2, r3, #3
 800201c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201e:	18d3      	adds	r3, r2, r3
 8002020:	4a9f      	ldr	r2, [pc, #636]	@ (80022a0 <HAL_PCD_EP_DB_Transmit+0x370>)
 8002022:	4694      	mov	ip, r2
 8002024:	4463      	add	r3, ip
 8002026:	637b      	str	r3, [r7, #52]	@ 0x34
 8002028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	785b      	ldrb	r3, [r3, #1]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d125      	bne.n	8002088 <HAL_PCD_EP_DB_Transmit+0x158>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2250      	movs	r2, #80	@ 0x50
 8002048:	5a9b      	ldrh	r3, [r3, r2]
 800204a:	b29b      	uxth	r3, r3
 800204c:	001a      	movs	r2, r3
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	189b      	adds	r3, r3, r2
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	00da      	lsls	r2, r3, #3
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	4a92      	ldr	r2, [pc, #584]	@ (80022a8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002060:	4694      	mov	ip, r2
 8002062:	4463      	add	r3, ip
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	059b      	lsls	r3, r3, #22
 800206e:	0d9b      	lsrs	r3, r3, #22
 8002070:	b29a      	uxth	r2, r3
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4a89      	ldr	r2, [pc, #548]	@ (80022a4 <HAL_PCD_EP_DB_Transmit+0x374>)
 800207e:	4313      	orrs	r3, r2
 8002080:	b29a      	uxth	r2, r3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e018      	b.n	80020ba <HAL_PCD_EP_DB_Transmit+0x18a>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d114      	bne.n	80020ba <HAL_PCD_EP_DB_Transmit+0x18a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2250      	movs	r2, #80	@ 0x50
 8002096:	5a9b      	ldrh	r3, [r3, r2]
 8002098:	b29b      	uxth	r3, r3
 800209a:	001a      	movs	r2, r3
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	189b      	adds	r3, r3, r2
 80020a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	00da      	lsls	r2, r3, #3
 80020a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	4a7e      	ldr	r2, [pc, #504]	@ (80022a8 <HAL_PCD_EP_DB_Transmit+0x378>)
 80020ae:	4694      	mov	ip, r2
 80020b0:	4463      	add	r3, ip
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	2200      	movs	r2, #0
 80020b8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	78db      	ldrb	r3, [r3, #3]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d120      	bne.n	8002104 <HAL_PCD_EP_DB_Transmit+0x1d4>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	001a      	movs	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	18d3      	adds	r3, r2, r3
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	201a      	movs	r0, #26
 80020d6:	183b      	adds	r3, r7, r0
 80020d8:	4974      	ldr	r1, [pc, #464]	@ (80022ac <HAL_PCD_EP_DB_Transmit+0x37c>)
 80020da:	400a      	ands	r2, r1
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	183a      	adds	r2, r7, r0
 80020e2:	8812      	ldrh	r2, [r2, #0]
 80020e4:	2120      	movs	r1, #32
 80020e6:	404a      	eors	r2, r1
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	001a      	movs	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	183a      	adds	r2, r7, r0
 80020fa:	8812      	ldrh	r2, [r2, #0]
 80020fc:	496c      	ldr	r1, [pc, #432]	@ (80022b0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	b292      	uxth	r2, r2
 8002102:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	0011      	movs	r1, r2
 800210c:	0018      	movs	r0, r3
 800210e:	f005 fd57 	bl	8007bc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002112:	1dbb      	adds	r3, r7, #6
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	01db      	lsls	r3, r3, #7
 800211a:	4013      	ands	r3, r2
 800211c:	d01a      	beq.n	8002154 <HAL_PCD_EP_DB_Transmit+0x224>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	001a      	movs	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29a      	uxth	r2, r3
 8002130:	2018      	movs	r0, #24
 8002132:	183b      	adds	r3, r7, r0
 8002134:	495f      	ldr	r1, [pc, #380]	@ (80022b4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002136:	400a      	ands	r2, r1
 8002138:	801a      	strh	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	001a      	movs	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	18d3      	adds	r3, r2, r3
 8002148:	183a      	adds	r2, r7, r0
 800214a:	8812      	ldrh	r2, [r2, #0]
 800214c:	495a      	ldr	r1, [pc, #360]	@ (80022b8 <HAL_PCD_EP_DB_Transmit+0x388>)
 800214e:	430a      	orrs	r2, r1
 8002150:	b292      	uxth	r2, r2
 8002152:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e327      	b.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002158:	1dbb      	adds	r3, r7, #6
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	01db      	lsls	r3, r3, #7
 8002160:	4013      	ands	r3, r2
 8002162:	d01a      	beq.n	800219a <HAL_PCD_EP_DB_Transmit+0x26a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	001a      	movs	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	18d3      	adds	r3, r2, r3
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29a      	uxth	r2, r3
 8002176:	204e      	movs	r0, #78	@ 0x4e
 8002178:	183b      	adds	r3, r7, r0
 800217a:	494e      	ldr	r1, [pc, #312]	@ (80022b4 <HAL_PCD_EP_DB_Transmit+0x384>)
 800217c:	400a      	ands	r2, r1
 800217e:	801a      	strh	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	001a      	movs	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	18d3      	adds	r3, r2, r3
 800218e:	183a      	adds	r2, r7, r0
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	4949      	ldr	r1, [pc, #292]	@ (80022b8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002194:	430a      	orrs	r2, r1
 8002196:	b292      	uxth	r2, r2
 8002198:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2224      	movs	r2, #36	@ 0x24
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d000      	beq.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x276>
 80021a4:	e2d8      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	2196      	movs	r1, #150	@ 0x96
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	18d2      	adds	r2, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	18d2      	adds	r2, r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d309      	bcc.n	80021e4 <HAL_PCD_EP_DB_Transmit+0x2b4>
        {
          len = ep->maxpacket;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6a1a      	ldr	r2, [r3, #32]
 80021da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021dc:	1ad2      	subs	r2, r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	621a      	str	r2, [r3, #32]
 80021e2:	e016      	b.n	8002212 <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else if (ep->xfer_len_db == 0U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d108      	bne.n	80021fe <HAL_PCD_EP_DB_Transmit+0x2ce>
        {
          len = TxPctSize;
 80021ec:	2396      	movs	r3, #150	@ 0x96
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2224      	movs	r2, #36	@ 0x24
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]
 80021fc:	e009      	b.n	8002212 <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2224      	movs	r2, #36	@ 0x24
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2200      	movs	r2, #0
 8002210:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d169      	bne.n	80022ee <HAL_PCD_EP_DB_Transmit+0x3be>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2250      	movs	r2, #80	@ 0x50
 8002226:	5a9b      	ldrh	r3, [r3, r2]
 8002228:	b29b      	uxth	r3, r3
 800222a:	001a      	movs	r2, r3
 800222c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800222e:	189b      	adds	r3, r3, r2
 8002230:	643b      	str	r3, [r7, #64]	@ 0x40
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	00da      	lsls	r2, r3, #3
 8002238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	4a18      	ldr	r2, [pc, #96]	@ (80022a0 <HAL_PCD_EP_DB_Transmit+0x370>)
 800223e:	4694      	mov	ip, r2
 8002240:	4463      	add	r3, ip
 8002242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	059b      	lsls	r3, r3, #22
 800224c:	0d9b      	lsrs	r3, r3, #22
 800224e:	b29a      	uxth	r2, r3
 8002250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002252:	801a      	strh	r2, [r3, #0]
 8002254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <HAL_PCD_EP_DB_Transmit+0x33c>
 800225a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <HAL_PCD_EP_DB_Transmit+0x374>)
 8002262:	4313      	orrs	r3, r2
 8002264:	b29a      	uxth	r2, r3
 8002266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002268:	801a      	strh	r2, [r3, #0]
 800226a:	e05d      	b.n	8002328 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800226c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800226e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002270:	d824      	bhi.n	80022bc <HAL_PCD_EP_DB_Transmit+0x38c>
 8002272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	653b      	str	r3, [r7, #80]	@ 0x50
 8002278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800227a:	2201      	movs	r2, #1
 800227c:	4013      	ands	r3, r2
 800227e:	d002      	beq.n	8002286 <HAL_PCD_EP_DB_Transmit+0x356>
 8002280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002282:	3301      	adds	r3, #1
 8002284:	653b      	str	r3, [r7, #80]	@ 0x50
 8002286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29a      	uxth	r2, r3
 800228c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	029b      	lsls	r3, r3, #10
 8002292:	b29b      	uxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b29a      	uxth	r2, r3
 8002298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229a:	801a      	strh	r2, [r3, #0]
 800229c:	e044      	b.n	8002328 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	00000402 	.word	0x00000402
 80022a4:	ffff8000 	.word	0xffff8000
 80022a8:	00000406 	.word	0x00000406
 80022ac:	ffff8fbf 	.word	0xffff8fbf
 80022b0:	ffff8080 	.word	0xffff8080
 80022b4:	ffff8f8f 	.word	0xffff8f8f
 80022b8:	ffffc080 	.word	0xffffc080
 80022bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80022c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022c4:	221f      	movs	r2, #31
 80022c6:	4013      	ands	r3, r2
 80022c8:	d102      	bne.n	80022d0 <HAL_PCD_EP_DB_Transmit+0x3a0>
 80022ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022cc:	3b01      	subs	r3, #1
 80022ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80022d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022d8:	b29b      	uxth	r3, r3
 80022da:	029b      	lsls	r3, r3, #10
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4ace      	ldr	r2, [pc, #824]	@ (800261c <HAL_PCD_EP_DB_Transmit+0x6ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	e01c      	b.n	8002328 <HAL_PCD_EP_DB_Transmit+0x3f8>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d118      	bne.n	8002328 <HAL_PCD_EP_DB_Transmit+0x3f8>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2250      	movs	r2, #80	@ 0x50
 8002302:	5a9b      	ldrh	r3, [r3, r2]
 8002304:	b29b      	uxth	r3, r3
 8002306:	001a      	movs	r2, r3
 8002308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800230a:	189b      	adds	r3, r3, r2
 800230c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	00da      	lsls	r2, r3, #3
 8002314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002316:	18d3      	adds	r3, r2, r3
 8002318:	4ac1      	ldr	r2, [pc, #772]	@ (8002620 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800231a:	4694      	mov	ip, r2
 800231c:	4463      	add	r3, ip
 800231e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002322:	b29a      	uxth	r2, r3
 8002324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002326:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	6959      	ldr	r1, [r3, #20]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	891a      	ldrh	r2, [r3, #8]
 8002334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002336:	b29b      	uxth	r3, r3
 8002338:	f003 fc8a 	bl	8005c50 <USB_WritePMA>
 800233c:	e20c      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x828>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2250      	movs	r2, #80	@ 0x50
 8002344:	5a9b      	ldrh	r3, [r3, r2]
 8002346:	b29b      	uxth	r3, r3
 8002348:	001a      	movs	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	18d2      	adds	r2, r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	18d3      	adds	r3, r2, r3
 8002358:	4ab2      	ldr	r2, [pc, #712]	@ (8002624 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800235a:	4694      	mov	ip, r2
 800235c:	4463      	add	r3, ip
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	2196      	movs	r1, #150	@ 0x96
 8002362:	187b      	adds	r3, r7, r1
 8002364:	0592      	lsls	r2, r2, #22
 8002366:	0d92      	lsrs	r2, r2, #22
 8002368:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	187b      	adds	r3, r7, r1
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d307      	bcc.n	8002386 <HAL_PCD_EP_DB_Transmit+0x456>
    {
      ep->xfer_len -= TxPctSize;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	187b      	adds	r3, r7, r1
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	1ad2      	subs	r2, r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	e002      	b.n	800238c <HAL_PCD_EP_DB_Transmit+0x45c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d000      	beq.n	8002396 <HAL_PCD_EP_DB_Transmit+0x466>
 8002394:	e0ee      	b.n	8002574 <HAL_PCD_EP_DB_Transmit+0x644>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d125      	bne.n	80023ea <HAL_PCD_EP_DB_Transmit+0x4ba>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2250      	movs	r2, #80	@ 0x50
 80023aa:	5a9b      	ldrh	r3, [r3, r2]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	001a      	movs	r2, r3
 80023b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	00da      	lsls	r2, r3, #3
 80023bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023be:	18d3      	adds	r3, r2, r3
 80023c0:	4a97      	ldr	r2, [pc, #604]	@ (8002620 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80023c2:	4694      	mov	ip, r2
 80023c4:	4463      	add	r3, ip
 80023c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80023c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	059b      	lsls	r3, r3, #22
 80023d0:	0d9b      	lsrs	r3, r3, #22
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4a8f      	ldr	r2, [pc, #572]	@ (800261c <HAL_PCD_EP_DB_Transmit+0x6ec>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e01b      	b.n	8002422 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d117      	bne.n	8002422 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2250      	movs	r2, #80	@ 0x50
 80023fe:	5a9b      	ldrh	r3, [r3, r2]
 8002400:	b29b      	uxth	r3, r3
 8002402:	001a      	movs	r2, r3
 8002404:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002406:	189b      	adds	r3, r3, r2
 8002408:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00da      	lsls	r2, r3, #3
 8002410:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002412:	18d3      	adds	r3, r2, r3
 8002414:	4a82      	ldr	r2, [pc, #520]	@ (8002620 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002416:	4694      	mov	ip, r2
 8002418:	4463      	add	r3, ip
 800241a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800241c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800241e:	2200      	movs	r2, #0
 8002420:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2284      	movs	r2, #132	@ 0x84
 8002428:	18ba      	adds	r2, r7, r2
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d130      	bne.n	8002496 <HAL_PCD_EP_DB_Transmit+0x566>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	218c      	movs	r1, #140	@ 0x8c
 800243a:	187a      	adds	r2, r7, r1
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2250      	movs	r2, #80	@ 0x50
 8002444:	5a9b      	ldrh	r3, [r3, r2]
 8002446:	b29b      	uxth	r3, r3
 8002448:	001a      	movs	r2, r3
 800244a:	187b      	adds	r3, r7, r1
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	189b      	adds	r3, r3, r2
 8002450:	187a      	adds	r2, r7, r1
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	00da      	lsls	r2, r3, #3
 800245a:	187b      	adds	r3, r7, r1
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	18d3      	adds	r3, r2, r3
 8002460:	4a70      	ldr	r2, [pc, #448]	@ (8002624 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002462:	4694      	mov	ip, r2
 8002464:	4463      	add	r3, ip
 8002466:	2188      	movs	r1, #136	@ 0x88
 8002468:	187a      	adds	r2, r7, r1
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	187b      	adds	r3, r7, r1
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	059b      	lsls	r3, r3, #22
 8002476:	0d9b      	lsrs	r3, r3, #22
 8002478:	b29a      	uxth	r2, r3
 800247a:	187b      	adds	r3, r7, r1
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	187b      	adds	r3, r7, r1
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4a64      	ldr	r2, [pc, #400]	@ (800261c <HAL_PCD_EP_DB_Transmit+0x6ec>)
 800248a:	4313      	orrs	r3, r2
 800248c:	b29a      	uxth	r2, r3
 800248e:	187b      	adds	r3, r7, r1
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e01f      	b.n	80024d6 <HAL_PCD_EP_DB_Transmit+0x5a6>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d11b      	bne.n	80024d6 <HAL_PCD_EP_DB_Transmit+0x5a6>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2250      	movs	r2, #80	@ 0x50
 80024a4:	5a9b      	ldrh	r3, [r3, r2]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	001a      	movs	r2, r3
 80024aa:	2184      	movs	r1, #132	@ 0x84
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	189b      	adds	r3, r3, r2
 80024b2:	187a      	adds	r2, r7, r1
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	00da      	lsls	r2, r3, #3
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	18d3      	adds	r3, r2, r3
 80024c2:	4a58      	ldr	r2, [pc, #352]	@ (8002624 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80024c4:	4694      	mov	ip, r2
 80024c6:	4463      	add	r3, ip
 80024c8:	2280      	movs	r2, #128	@ 0x80
 80024ca:	18b9      	adds	r1, r7, r2
 80024cc:	600b      	str	r3, [r1, #0]
 80024ce:	18bb      	adds	r3, r7, r2
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d120      	bne.n	8002520 <HAL_PCD_EP_DB_Transmit+0x5f0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	001a      	movs	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	18d3      	adds	r3, r2, r3
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	2094      	movs	r0, #148	@ 0x94
 80024f2:	183b      	adds	r3, r7, r0
 80024f4:	494c      	ldr	r1, [pc, #304]	@ (8002628 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80024f6:	400a      	ands	r2, r1
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	183b      	adds	r3, r7, r0
 80024fc:	183a      	adds	r2, r7, r0
 80024fe:	8812      	ldrh	r2, [r2, #0]
 8002500:	2120      	movs	r1, #32
 8002502:	404a      	eors	r2, r1
 8002504:	801a      	strh	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	001a      	movs	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	18d3      	adds	r3, r2, r3
 8002514:	183a      	adds	r2, r7, r0
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	4944      	ldr	r1, [pc, #272]	@ (800262c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800251a:	430a      	orrs	r2, r1
 800251c:	b292      	uxth	r2, r2
 800251e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f005 fb49 	bl	8007bc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800252e:	1dbb      	adds	r3, r7, #6
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	01db      	lsls	r3, r3, #7
 8002536:	4013      	ands	r3, r2
 8002538:	d11a      	bne.n	8002570 <HAL_PCD_EP_DB_Transmit+0x640>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	001a      	movs	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29a      	uxth	r2, r3
 800254c:	2092      	movs	r0, #146	@ 0x92
 800254e:	183b      	adds	r3, r7, r0
 8002550:	4937      	ldr	r1, [pc, #220]	@ (8002630 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002552:	400a      	ands	r2, r1
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	001a      	movs	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	18d3      	adds	r3, r2, r3
 8002564:	183a      	adds	r2, r7, r0
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	4932      	ldr	r1, [pc, #200]	@ (8002634 <HAL_PCD_EP_DB_Transmit+0x704>)
 800256a:	430a      	orrs	r2, r1
 800256c:	b292      	uxth	r2, r2
 800256e:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e119      	b.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002574:	1dbb      	adds	r3, r7, #6
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	01db      	lsls	r3, r3, #7
 800257c:	4013      	ands	r3, r2
 800257e:	d11a      	bne.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x686>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	001a      	movs	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29a      	uxth	r2, r3
 8002592:	2056      	movs	r0, #86	@ 0x56
 8002594:	183b      	adds	r3, r7, r0
 8002596:	4926      	ldr	r1, [pc, #152]	@ (8002630 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002598:	400a      	ands	r2, r1
 800259a:	801a      	strh	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	001a      	movs	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	18d3      	adds	r3, r2, r3
 80025aa:	183a      	adds	r2, r7, r0
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	4921      	ldr	r1, [pc, #132]	@ (8002634 <HAL_PCD_EP_DB_Transmit+0x704>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2224      	movs	r2, #36	@ 0x24
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d000      	beq.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x692>
 80025c0:	e0ca      	b.n	8002758 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	2196      	movs	r1, #150	@ 0x96
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	18d2      	adds	r2, r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	18d2      	adds	r2, r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6a1a      	ldr	r2, [r3, #32]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d309      	bcc.n	8002600 <HAL_PCD_EP_DB_Transmit+0x6d0>
        {
          len = ep->maxpacket;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025f8:	1ad2      	subs	r2, r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	621a      	str	r2, [r3, #32]
 80025fe:	e025      	b.n	800264c <HAL_PCD_EP_DB_Transmit+0x71c>
        }
        else if (ep->xfer_len_db == 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d117      	bne.n	8002638 <HAL_PCD_EP_DB_Transmit+0x708>
        {
          len = TxPctSize;
 8002608:	2396      	movs	r3, #150	@ 0x96
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2224      	movs	r2, #36	@ 0x24
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]
 8002618:	e018      	b.n	800264c <HAL_PCD_EP_DB_Transmit+0x71c>
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	ffff8000 	.word	0xffff8000
 8002620:	00000402 	.word	0x00000402
 8002624:	00000406 	.word	0x00000406
 8002628:	ffff8fbf 	.word	0xffff8fbf
 800262c:	ffff8080 	.word	0xffff8080
 8002630:	ffff8f8f 	.word	0xffff8f8f
 8002634:	ffffc080 	.word	0xffffc080
        }
        else
        {
          len = ep->xfer_len_db;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2224      	movs	r2, #36	@ 0x24
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d15a      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0x7e0>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2250      	movs	r2, #80	@ 0x50
 8002666:	5a9b      	ldrh	r3, [r3, r2]
 8002668:	b29b      	uxth	r3, r3
 800266a:	001a      	movs	r2, r3
 800266c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800266e:	189b      	adds	r3, r3, r2
 8002670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	00da      	lsls	r2, r3, #3
 8002678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_PCD_EP_DB_Transmit+0x880>)
 800267e:	4694      	mov	ip, r2
 8002680:	4463      	add	r3, ip
 8002682:	667b      	str	r3, [r7, #100]	@ 0x64
 8002684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	059b      	lsls	r3, r3, #22
 800268c:	0d9b      	lsrs	r3, r3, #22
 800268e:	b29a      	uxth	r2, r3
 8002690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_PCD_EP_DB_Transmit+0x77c>
 800269a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4a44      	ldr	r2, [pc, #272]	@ (80027b4 <HAL_PCD_EP_DB_Transmit+0x884>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	e04b      	b.n	8002744 <HAL_PCD_EP_DB_Transmit+0x814>
 80026ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80026b0:	d815      	bhi.n	80026de <HAL_PCD_EP_DB_Transmit+0x7ae>
 80026b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80026b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ba:	2201      	movs	r2, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d002      	beq.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x796>
 80026c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c2:	3301      	adds	r3, #1
 80026c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80026c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	e032      	b.n	8002744 <HAL_PCD_EP_DB_Transmit+0x814>
 80026de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80026e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e6:	221f      	movs	r2, #31
 80026e8:	4013      	ands	r3, r2
 80026ea:	d102      	bne.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x7c2>
 80026ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ee:	3b01      	subs	r3, #1
 80026f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80026f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	4a2b      	ldr	r2, [pc, #172]	@ (80027b4 <HAL_PCD_EP_DB_Transmit+0x884>)
 8002706:	4313      	orrs	r3, r2
 8002708:	b29a      	uxth	r2, r3
 800270a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	e019      	b.n	8002744 <HAL_PCD_EP_DB_Transmit+0x814>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d115      	bne.n	8002744 <HAL_PCD_EP_DB_Transmit+0x814>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2250      	movs	r2, #80	@ 0x50
 800271e:	5a9b      	ldrh	r3, [r3, r2]
 8002720:	b29b      	uxth	r3, r3
 8002722:	001a      	movs	r2, r3
 8002724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002726:	189b      	adds	r3, r3, r2
 8002728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	00da      	lsls	r2, r3, #3
 8002730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002732:	18d3      	adds	r3, r2, r3
 8002734:	4a1e      	ldr	r2, [pc, #120]	@ (80027b0 <HAL_PCD_EP_DB_Transmit+0x880>)
 8002736:	4694      	mov	ip, r2
 8002738:	4463      	add	r3, ip
 800273a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800273c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273e:	b29a      	uxth	r2, r3
 8002740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002742:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	6959      	ldr	r1, [r3, #20]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	895a      	ldrh	r2, [r3, #10]
 8002750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002752:	b29b      	uxth	r3, r3
 8002754:	f003 fa7c 	bl	8005c50 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	001a      	movs	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	18d3      	adds	r3, r2, r3
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29a      	uxth	r2, r3
 800276a:	2016      	movs	r0, #22
 800276c:	183b      	adds	r3, r7, r0
 800276e:	4912      	ldr	r1, [pc, #72]	@ (80027b8 <HAL_PCD_EP_DB_Transmit+0x888>)
 8002770:	400a      	ands	r2, r1
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	183b      	adds	r3, r7, r0
 8002776:	183a      	adds	r2, r7, r0
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	2110      	movs	r1, #16
 800277c:	404a      	eors	r2, r1
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	183b      	adds	r3, r7, r0
 8002782:	183a      	adds	r2, r7, r0
 8002784:	8812      	ldrh	r2, [r2, #0]
 8002786:	2120      	movs	r1, #32
 8002788:	404a      	eors	r2, r1
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	001a      	movs	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	18d3      	adds	r3, r2, r3
 800279a:	183a      	adds	r2, r7, r0
 800279c:	8812      	ldrh	r2, [r2, #0]
 800279e:	4907      	ldr	r1, [pc, #28]	@ (80027bc <HAL_PCD_EP_DB_Transmit+0x88c>)
 80027a0:	430a      	orrs	r2, r1
 80027a2:	b292      	uxth	r2, r2
 80027a4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b026      	add	sp, #152	@ 0x98
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	00000406 	.word	0x00000406
 80027b4:	ffff8000 	.word	0xffff8000
 80027b8:	ffff8fbf 	.word	0xffff8fbf
 80027bc:	ffff8080 	.word	0xffff8080

080027c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	0008      	movs	r0, r1
 80027ca:	0011      	movs	r1, r2
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	240a      	movs	r4, #10
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	1c02      	adds	r2, r0, #0
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	2308      	movs	r3, #8
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	1c0a      	adds	r2, r1, #0
 80027dc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027de:	0021      	movs	r1, r4
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	2280      	movs	r2, #128	@ 0x80
 80027e6:	4013      	ands	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	2207      	movs	r2, #7
 80027f4:	401a      	ands	r2, r3
 80027f6:	0013      	movs	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	3310      	adds	r3, #16
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	18d3      	adds	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e00b      	b.n	8002820 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002808:	230a      	movs	r3, #10
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	881a      	ldrh	r2, [r3, #0]
 800280e:	0013      	movs	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	189b      	adds	r3, r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	3351      	adds	r3, #81	@ 0x51
 8002818:	33ff      	adds	r3, #255	@ 0xff
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	18d3      	adds	r3, r2, r3
 800281e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002820:	2308      	movs	r3, #8
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	b29a      	uxth	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	80da      	strh	r2, [r3, #6]
 8002838:	e00b      	b.n	8002852 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2201      	movs	r2, #1
 800283e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	b29a      	uxth	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b29a      	uxth	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b007      	add	sp, #28
 800285a:	bd90      	pop	{r4, r7, pc}

0800285c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	23b4      	movs	r3, #180	@ 0xb4
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	2101      	movs	r1, #1
 8002872:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	23b2      	movs	r3, #178	@ 0xb2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	2100      	movs	r1, #0
 800287c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2254      	movs	r2, #84	@ 0x54
 8002882:	5a9b      	ldrh	r3, [r3, r2]
 8002884:	b29b      	uxth	r3, r3
 8002886:	2201      	movs	r2, #1
 8002888:	4313      	orrs	r3, r2
 800288a:	b299      	uxth	r1, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2254      	movs	r2, #84	@ 0x54
 8002890:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2254      	movs	r2, #84	@ 0x54
 8002896:	5a9b      	ldrh	r3, [r3, r2]
 8002898:	b29b      	uxth	r3, r3
 800289a:	2202      	movs	r2, #2
 800289c:	4313      	orrs	r3, r2
 800289e:	b299      	uxth	r1, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2254      	movs	r2, #84	@ 0x54
 80028a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	000a      	movs	r2, r1
 80028ba:	1cfb      	adds	r3, r7, #3
 80028bc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b002      	add	sp, #8
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f000 fbbf 	bl	800305a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028dc:	4bc9      	ldr	r3, [pc, #804]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	220c      	movs	r2, #12
 80028e2:	4013      	ands	r3, r2
 80028e4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e6:	4bc7      	ldr	r3, [pc, #796]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	2380      	movs	r3, #128	@ 0x80
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	d100      	bne.n	80028fe <HAL_RCC_OscConfig+0x36>
 80028fc:	e07e      	b.n	80029fc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d007      	beq.n	8002914 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d112      	bne.n	8002930 <HAL_RCC_OscConfig+0x68>
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	429a      	cmp	r2, r3
 8002912:	d10d      	bne.n	8002930 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	4bbb      	ldr	r3, [pc, #748]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	029b      	lsls	r3, r3, #10
 800291c:	4013      	ands	r3, r2
 800291e:	d100      	bne.n	8002922 <HAL_RCC_OscConfig+0x5a>
 8002920:	e06b      	b.n	80029fa <HAL_RCC_OscConfig+0x132>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d167      	bne.n	80029fa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f000 fb95 	bl	800305a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	025b      	lsls	r3, r3, #9
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x84>
 800293c:	4bb1      	ldr	r3, [pc, #708]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4bb0      	ldr	r3, [pc, #704]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	0249      	lsls	r1, r1, #9
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e027      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	23a0      	movs	r3, #160	@ 0xa0
 8002952:	02db      	lsls	r3, r3, #11
 8002954:	429a      	cmp	r2, r3
 8002956:	d10e      	bne.n	8002976 <HAL_RCC_OscConfig+0xae>
 8002958:	4baa      	ldr	r3, [pc, #680]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4ba9      	ldr	r3, [pc, #676]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 800295e:	2180      	movs	r1, #128	@ 0x80
 8002960:	02c9      	lsls	r1, r1, #11
 8002962:	430a      	orrs	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4ba7      	ldr	r3, [pc, #668]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4ba6      	ldr	r3, [pc, #664]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 800296c:	2180      	movs	r1, #128	@ 0x80
 800296e:	0249      	lsls	r1, r1, #9
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e012      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002976:	4ba3      	ldr	r3, [pc, #652]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4ba2      	ldr	r3, [pc, #648]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 800297c:	49a2      	ldr	r1, [pc, #648]	@ (8002c08 <HAL_RCC_OscConfig+0x340>)
 800297e:	400a      	ands	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	4ba0      	ldr	r3, [pc, #640]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	025b      	lsls	r3, r3, #9
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4b9c      	ldr	r3, [pc, #624]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b9b      	ldr	r3, [pc, #620]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002996:	499d      	ldr	r1, [pc, #628]	@ (8002c0c <HAL_RCC_OscConfig+0x344>)
 8002998:	400a      	ands	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fd fec0 	bl	8000728 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ae:	f7fd febb 	bl	8000728 <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b64      	cmp	r3, #100	@ 0x64
 80029ba:	d902      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	f000 fb4c 	bl	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029c2:	4b90      	ldr	r3, [pc, #576]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d0ef      	beq.n	80029ae <HAL_RCC_OscConfig+0xe6>
 80029ce:	e015      	b.n	80029fc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fd feaa 	bl	8000728 <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029da:	f7fd fea5 	bl	8000728 <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	@ 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e336      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029ec:	4b85      	ldr	r3, [pc, #532]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	029b      	lsls	r3, r3, #10
 80029f4:	4013      	ands	r3, r2
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x112>
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d100      	bne.n	8002a08 <HAL_RCC_OscConfig+0x140>
 8002a06:	e099      	b.n	8002b3c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	2220      	movs	r2, #32
 8002a12:	4013      	ands	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002a16:	4b7b      	ldr	r3, [pc, #492]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	2220      	movs	r2, #32
 8002a26:	4393      	bics	r3, r2
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d13e      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1ec>
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d13b      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002a3c:	4b71      	ldr	r3, [pc, #452]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2204      	movs	r2, #4
 8002a42:	4013      	ands	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_RCC_OscConfig+0x188>
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e304      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b6c      	ldr	r3, [pc, #432]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a6e      	ldr	r2, [pc, #440]	@ (8002c10 <HAL_RCC_OscConfig+0x348>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a66:	4b67      	ldr	r3, [pc, #412]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2209      	movs	r2, #9
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4b64      	ldr	r3, [pc, #400]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a78:	f000 fc42 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 8002a7c:	0001      	movs	r1, r0
 8002a7e:	4b61      	ldr	r3, [pc, #388]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	220f      	movs	r2, #15
 8002a86:	4013      	ands	r3, r2
 8002a88:	4a62      	ldr	r2, [pc, #392]	@ (8002c14 <HAL_RCC_OscConfig+0x34c>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	40da      	lsrs	r2, r3
 8002a90:	4b61      	ldr	r3, [pc, #388]	@ (8002c18 <HAL_RCC_OscConfig+0x350>)
 8002a92:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002a94:	4b61      	ldr	r3, [pc, #388]	@ (8002c1c <HAL_RCC_OscConfig+0x354>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2513      	movs	r5, #19
 8002a9a:	197c      	adds	r4, r7, r5
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7fd fdfd 	bl	800069c <HAL_InitTick>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002aa6:	197b      	adds	r3, r7, r5
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d046      	beq.n	8002b3c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002aae:	197b      	adds	r3, r7, r5
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	e2d2      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d027      	beq.n	8002b0a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002aba:	4b52      	ldr	r3, [pc, #328]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2209      	movs	r2, #9
 8002ac0:	4393      	bics	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fd fe2c 	bl	8000728 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7fd fe27 	bl	8000728 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e2b8      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae8:	4b46      	ldr	r3, [pc, #280]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2204      	movs	r2, #4
 8002aee:	4013      	ands	r3, r2
 8002af0:	d0f1      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b44      	ldr	r3, [pc, #272]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a46      	ldr	r2, [pc, #280]	@ (8002c10 <HAL_RCC_OscConfig+0x348>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	021a      	lsls	r2, r3, #8
 8002b02:	4b40      	ldr	r3, [pc, #256]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	e018      	b.n	8002b3c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fd fe07 	bl	8000728 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b20:	f7fd fe02 	bl	8000728 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e293      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b32:	4b34      	ldr	r3, [pc, #208]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2204      	movs	r2, #4
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d1f1      	bne.n	8002b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2210      	movs	r2, #16
 8002b42:	4013      	ands	r3, r2
 8002b44:	d100      	bne.n	8002b48 <HAL_RCC_OscConfig+0x280>
 8002b46:	e0a2      	b.n	8002c8e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d140      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x29e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e279      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b66:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c20 <HAL_RCC_OscConfig+0x358>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b74:	4b23      	ldr	r3, [pc, #140]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	0a19      	lsrs	r1, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	061a      	lsls	r2, r3, #24
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	0b5b      	lsrs	r3, r3, #13
 8002b94:	3301      	adds	r3, #1
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	0212      	lsls	r2, r2, #8
 8002b9a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	491b      	ldr	r1, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x34c>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bac:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <HAL_RCC_OscConfig+0x350>)
 8002bae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_RCC_OscConfig+0x354>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2513      	movs	r5, #19
 8002bb6:	197c      	adds	r4, r7, r5
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fd fd6f 	bl	800069c <HAL_InitTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002bc2:	197b      	adds	r3, r7, r5
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d061      	beq.n	8002c8e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002bca:	197b      	adds	r3, r7, r5
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	e244      	b.n	800305a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d040      	beq.n	8002c5a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_OscConfig+0x33c>)
 8002bde:	2180      	movs	r1, #128	@ 0x80
 8002be0:	0049      	lsls	r1, r1, #1
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fd fd9f 	bl	8000728 <HAL_GetTick>
 8002bea:	0003      	movs	r3, r0
 8002bec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bee:	e019      	b.n	8002c24 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf0:	f7fd fd9a 	bl	8000728 <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d912      	bls.n	8002c24 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e22b      	b.n	800305a <HAL_RCC_OscConfig+0x792>
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	fffbffff 	.word	0xfffbffff
 8002c10:	ffffe0ff 	.word	0xffffe0ff
 8002c14:	08008274 	.word	0x08008274
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c24:	4bca      	ldr	r3, [pc, #808]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d0df      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c30:	4bc7      	ldr	r3, [pc, #796]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4ac7      	ldr	r2, [pc, #796]	@ (8002f54 <HAL_RCC_OscConfig+0x68c>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c3e:	4bc4      	ldr	r3, [pc, #784]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c44:	4bc2      	ldr	r3, [pc, #776]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	0a19      	lsrs	r1, r3, #8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	061a      	lsls	r2, r3, #24
 8002c52:	4bbf      	ldr	r3, [pc, #764]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e019      	b.n	8002c8e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c5a:	4bbd      	ldr	r3, [pc, #756]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4bbc      	ldr	r3, [pc, #752]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c60:	49bd      	ldr	r1, [pc, #756]	@ (8002f58 <HAL_RCC_OscConfig+0x690>)
 8002c62:	400a      	ands	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fd fd5f 	bl	8000728 <HAL_GetTick>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c70:	f7fd fd5a 	bl	8000728 <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1eb      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c82:	4bb3      	ldr	r3, [pc, #716]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2208      	movs	r2, #8
 8002c94:	4013      	ands	r3, r2
 8002c96:	d036      	beq.n	8002d06 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca0:	4bab      	ldr	r3, [pc, #684]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002ca2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca4:	4baa      	ldr	r3, [pc, #680]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fd fd3c 	bl	8000728 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fd fd37 	bl	8000728 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1c8      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0f1      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x3ee>
 8002cd2:	e018      	b.n	8002d06 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd4:	4b9e      	ldr	r3, [pc, #632]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002cd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cd8:	4b9d      	ldr	r3, [pc, #628]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7fd fd22 	bl	8000728 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fd fd1d 	bl	8000728 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1ae      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cfc:	4b94      	ldr	r3, [pc, #592]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1f1      	bne.n	8002cea <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <HAL_RCC_OscConfig+0x44a>
 8002d10:	e0ae      	b.n	8002e70 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2023      	movs	r0, #35	@ 0x23
 8002d14:	183b      	adds	r3, r7, r0
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	055b      	lsls	r3, r3, #21
 8002d22:	4013      	ands	r3, r2
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b8a      	ldr	r3, [pc, #552]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d2a:	4b89      	ldr	r3, [pc, #548]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002d2c:	2180      	movs	r1, #128	@ 0x80
 8002d2e:	0549      	lsls	r1, r1, #21
 8002d30:	430a      	orrs	r2, r1
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b88      	ldr	r3, [pc, #544]	@ (8002f5c <HAL_RCC_OscConfig+0x694>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4013      	ands	r3, r2
 8002d44:	d11a      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d46:	4b85      	ldr	r3, [pc, #532]	@ (8002f5c <HAL_RCC_OscConfig+0x694>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b84      	ldr	r3, [pc, #528]	@ (8002f5c <HAL_RCC_OscConfig+0x694>)
 8002d4c:	2180      	movs	r1, #128	@ 0x80
 8002d4e:	0049      	lsls	r1, r1, #1
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d54:	f7fd fce8 	bl	8000728 <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fd fce3 	bl	8000728 <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	@ 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e174      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	4b7a      	ldr	r3, [pc, #488]	@ (8002f5c <HAL_RCC_OscConfig+0x694>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4d0>
 8002d88:	4b71      	ldr	r3, [pc, #452]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002d8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d8c:	4b70      	ldr	r3, [pc, #448]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002d8e:	2180      	movs	r1, #128	@ 0x80
 8002d90:	0049      	lsls	r1, r1, #1
 8002d92:	430a      	orrs	r2, r1
 8002d94:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d96:	e031      	b.n	8002dfc <HAL_RCC_OscConfig+0x534>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10c      	bne.n	8002dba <HAL_RCC_OscConfig+0x4f2>
 8002da0:	4b6b      	ldr	r3, [pc, #428]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002da2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002da4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002da6:	496c      	ldr	r1, [pc, #432]	@ (8002f58 <HAL_RCC_OscConfig+0x690>)
 8002da8:	400a      	ands	r2, r1
 8002daa:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dac:	4b68      	ldr	r3, [pc, #416]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002dae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002db0:	4b67      	ldr	r3, [pc, #412]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002db2:	496b      	ldr	r1, [pc, #428]	@ (8002f60 <HAL_RCC_OscConfig+0x698>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002db8:	e020      	b.n	8002dfc <HAL_RCC_OscConfig+0x534>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	23a0      	movs	r3, #160	@ 0xa0
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d10e      	bne.n	8002de4 <HAL_RCC_OscConfig+0x51c>
 8002dc6:	4b62      	ldr	r3, [pc, #392]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002dc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dca:	4b61      	ldr	r3, [pc, #388]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	00c9      	lsls	r1, r1, #3
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002dd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dd8:	4b5d      	ldr	r3, [pc, #372]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x534>
 8002de4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002de6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002de8:	4b59      	ldr	r3, [pc, #356]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002dea:	495b      	ldr	r1, [pc, #364]	@ (8002f58 <HAL_RCC_OscConfig+0x690>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	651a      	str	r2, [r3, #80]	@ 0x50
 8002df0:	4b57      	ldr	r3, [pc, #348]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002df2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002df4:	4b56      	ldr	r3, [pc, #344]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002df6:	495a      	ldr	r1, [pc, #360]	@ (8002f60 <HAL_RCC_OscConfig+0x698>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fd fc90 	bl	8000728 <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e0c:	e009      	b.n	8002e22 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fd fc8b 	bl	8000728 <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	4a52      	ldr	r2, [pc, #328]	@ (8002f64 <HAL_RCC_OscConfig+0x69c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e11b      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e22:	4b4b      	ldr	r3, [pc, #300]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d0ef      	beq.n	8002e0e <HAL_RCC_OscConfig+0x546>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fd fc7a 	bl	8000728 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e38:	e009      	b.n	8002e4e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fc75 	bl	8000728 <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	4a47      	ldr	r2, [pc, #284]	@ (8002f64 <HAL_RCC_OscConfig+0x69c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e105      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e4e:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d1ef      	bne.n	8002e3a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e5a:	2323      	movs	r3, #35	@ 0x23
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e68:	4b39      	ldr	r3, [pc, #228]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e6a:	493f      	ldr	r1, [pc, #252]	@ (8002f68 <HAL_RCC_OscConfig+0x6a0>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2220      	movs	r2, #32
 8002e76:	4013      	ands	r3, r2
 8002e78:	d049      	beq.n	8002f0e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d026      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002e82:	4b33      	ldr	r3, [pc, #204]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b32      	ldr	r3, [pc, #200]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e88:	2101      	movs	r1, #1
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	4b30      	ldr	r3, [pc, #192]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e92:	4b2f      	ldr	r3, [pc, #188]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9a:	4b34      	ldr	r3, [pc, #208]	@ (8002f6c <HAL_RCC_OscConfig+0x6a4>)
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_RCC_OscConfig+0x6a4>)
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	0189      	lsls	r1, r1, #6
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fd fc3e 	bl	8000728 <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb2:	f7fd fc39 	bl	8000728 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0ca      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ec4:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d0f1      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x5ea>
 8002ece:	e01e      	b.n	8002f0e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	438a      	bics	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	4b23      	ldr	r3, [pc, #140]	@ (8002f6c <HAL_RCC_OscConfig+0x6a4>)
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <HAL_RCC_OscConfig+0x6a4>)
 8002ee2:	4923      	ldr	r1, [pc, #140]	@ (8002f70 <HAL_RCC_OscConfig+0x6a8>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fd fc1e 	bl	8000728 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef2:	f7fd fc19 	bl	8000728 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0aa      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d1f1      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d100      	bne.n	8002f18 <HAL_RCC_OscConfig+0x650>
 8002f16:	e09f      	b.n	8003058 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d100      	bne.n	8002f20 <HAL_RCC_OscConfig+0x658>
 8002f1e:	e078      	b.n	8003012 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d159      	bne.n	8002fdc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <HAL_RCC_OscConfig+0x688>)
 8002f2e:	4911      	ldr	r1, [pc, #68]	@ (8002f74 <HAL_RCC_OscConfig+0x6ac>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd fbf8 	bl	8000728 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f3c:	e01c      	b.n	8002f78 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fd fbf3 	bl	8000728 <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d915      	bls.n	8002f78 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e084      	b.n	800305a <HAL_RCC_OscConfig+0x792>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	ffff1fff 	.word	0xffff1fff
 8002f58:	fffffeff 	.word	0xfffffeff
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	fffffbff 	.word	0xfffffbff
 8002f64:	00001388 	.word	0x00001388
 8002f68:	efffffff 	.word	0xefffffff
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	ffffdfff 	.word	0xffffdfff
 8002f74:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f78:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	@ 0x80
 8002f7e:	049b      	lsls	r3, r3, #18
 8002f80:	4013      	ands	r3, r2
 8002f82:	d1dc      	bne.n	8002f3e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f84:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a37      	ldr	r2, [pc, #220]	@ (8003068 <HAL_RCC_OscConfig+0x7a0>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002faa:	2180      	movs	r1, #128	@ 0x80
 8002fac:	0449      	lsls	r1, r1, #17
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fd fbb9 	bl	8000728 <HAL_GetTick>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fd fbb4 	bl	8000728 <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e045      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fce:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x6f4>
 8002fda:	e03d      	b.n	8003058 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8002fe2:	4922      	ldr	r1, [pc, #136]	@ (800306c <HAL_RCC_OscConfig+0x7a4>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fb9e 	bl	8000728 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fd fb99 	bl	8000728 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e02a      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003004:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	049b      	lsls	r3, r3, #18
 800300c:	4013      	ands	r3, r2
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x72a>
 8003010:	e022      	b.n	8003058 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e01d      	b.n	800305a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <HAL_RCC_OscConfig+0x79c>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	2380      	movs	r3, #128	@ 0x80
 8003028:	025b      	lsls	r3, r3, #9
 800302a:	401a      	ands	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	429a      	cmp	r2, r3
 8003032:	d10f      	bne.n	8003054 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	23f0      	movs	r3, #240	@ 0xf0
 8003038:	039b      	lsls	r3, r3, #14
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	23c0      	movs	r3, #192	@ 0xc0
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b00a      	add	sp, #40	@ 0x28
 8003060:	bdb0      	pop	{r4, r5, r7, pc}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	40021000 	.word	0x40021000
 8003068:	ff02ffff 	.word	0xff02ffff
 800306c:	feffffff 	.word	0xfeffffff

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e128      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b96      	ldr	r3, [pc, #600]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2201      	movs	r2, #1
 800308a:	4013      	ands	r3, r2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d91e      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b93      	ldr	r3, [pc, #588]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2201      	movs	r2, #1
 8003098:	4393      	bics	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	4b90      	ldr	r3, [pc, #576]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030a4:	f7fd fb40 	bl	8000728 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd fb3b 	bl	8000728 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a8a      	ldr	r2, [pc, #552]	@ (80032e4 <HAL_RCC_ClockConfig+0x274>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e109      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b87      	ldr	r3, [pc, #540]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030da:	4b83      	ldr	r3, [pc, #524]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	22f0      	movs	r2, #240	@ 0xf0
 80030e0:	4393      	bics	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b7f      	ldr	r3, [pc, #508]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	d100      	bne.n	80030fa <HAL_RCC_ClockConfig+0x8a>
 80030f8:	e089      	b.n	800320e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003102:	4b79      	ldr	r3, [pc, #484]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	4013      	ands	r3, r2
 800310c:	d120      	bne.n	8003150 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0e1      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800311a:	4b73      	ldr	r3, [pc, #460]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	049b      	lsls	r3, r3, #18
 8003122:	4013      	ands	r3, r2
 8003124:	d114      	bne.n	8003150 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0d5      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003132:	4b6d      	ldr	r3, [pc, #436]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2204      	movs	r2, #4
 8003138:	4013      	ands	r3, r2
 800313a:	d109      	bne.n	8003150 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0ca      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003140:	4b69      	ldr	r3, [pc, #420]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	@ 0x80
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4013      	ands	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0c2      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003150:	4b65      	ldr	r3, [pc, #404]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2203      	movs	r2, #3
 8003156:	4393      	bics	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4b62      	ldr	r3, [pc, #392]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7fd fae0 	bl	8000728 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003174:	e009      	b.n	800318a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003176:	f7fd fad7 	bl	8000728 <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	4a58      	ldr	r2, [pc, #352]	@ (80032e4 <HAL_RCC_ClockConfig+0x274>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0a5      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800318a:	4b57      	ldr	r3, [pc, #348]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	220c      	movs	r2, #12
 8003190:	4013      	ands	r3, r2
 8003192:	2b08      	cmp	r3, #8
 8003194:	d1ef      	bne.n	8003176 <HAL_RCC_ClockConfig+0x106>
 8003196:	e03a      	b.n	800320e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d111      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a0:	e009      	b.n	80031b6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a2:	f7fd fac1 	bl	8000728 <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	4a4d      	ldr	r2, [pc, #308]	@ (80032e4 <HAL_RCC_ClockConfig+0x274>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e08f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b6:	4b4c      	ldr	r3, [pc, #304]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	220c      	movs	r2, #12
 80031bc:	4013      	ands	r3, r2
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d1ef      	bne.n	80031a2 <HAL_RCC_ClockConfig+0x132>
 80031c2:	e024      	b.n	800320e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d11b      	bne.n	8003204 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031cc:	e009      	b.n	80031e2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ce:	f7fd faab 	bl	8000728 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	4a42      	ldr	r2, [pc, #264]	@ (80032e4 <HAL_RCC_ClockConfig+0x274>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e079      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e2:	4b41      	ldr	r3, [pc, #260]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	220c      	movs	r2, #12
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d1ef      	bne.n	80031ce <HAL_RCC_ClockConfig+0x15e>
 80031ee:	e00e      	b.n	800320e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fd fa9a 	bl	8000728 <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	4a3a      	ldr	r2, [pc, #232]	@ (80032e4 <HAL_RCC_ClockConfig+0x274>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e068      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003204:	4b38      	ldr	r3, [pc, #224]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	220c      	movs	r2, #12
 800320a:	4013      	ands	r3, r2
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320e:	4b34      	ldr	r3, [pc, #208]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2201      	movs	r2, #1
 8003214:	4013      	ands	r3, r2
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d21e      	bcs.n	800325a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321c:	4b30      	ldr	r3, [pc, #192]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2201      	movs	r2, #1
 8003222:	4393      	bics	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	4b2e      	ldr	r3, [pc, #184]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800322e:	f7fd fa7b 	bl	8000728 <HAL_GetTick>
 8003232:	0003      	movs	r3, r0
 8003234:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	e009      	b.n	800324c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fd fa76 	bl	8000728 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	4a28      	ldr	r2, [pc, #160]	@ (80032e4 <HAL_RCC_ClockConfig+0x274>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e044      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324c:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d1ee      	bne.n	8003238 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a20      	ldr	r2, [pc, #128]	@ (80032ec <HAL_RCC_ClockConfig+0x27c>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2208      	movs	r2, #8
 800327e:	4013      	ands	r3, r2
 8003280:	d00a      	beq.n	8003298 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003282:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4a1a      	ldr	r2, [pc, #104]	@ (80032f0 <HAL_RCC_ClockConfig+0x280>)
 8003288:	4013      	ands	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	00da      	lsls	r2, r3, #3
 8003292:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003298:	f000 f832 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 800329c:	0001      	movs	r1, r0
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_RCC_ClockConfig+0x278>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	220f      	movs	r2, #15
 80032a6:	4013      	ands	r3, r2
 80032a8:	4a12      	ldr	r2, [pc, #72]	@ (80032f4 <HAL_RCC_ClockConfig+0x284>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	000a      	movs	r2, r1
 80032ae:	40da      	lsrs	r2, r3
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_ClockConfig+0x288>)
 80032b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <HAL_RCC_ClockConfig+0x28c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	250b      	movs	r5, #11
 80032ba:	197c      	adds	r4, r7, r5
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fd f9ed 	bl	800069c <HAL_InitTick>
 80032c2:	0003      	movs	r3, r0
 80032c4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80032c6:	197b      	adds	r3, r7, r5
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80032ce:	197b      	adds	r3, r7, r5
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bdb0      	pop	{r4, r5, r7, pc}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	40022000 	.word	0x40022000
 80032e4:	00001388 	.word	0x00001388
 80032e8:	40021000 	.word	0x40021000
 80032ec:	fffff8ff 	.word	0xfffff8ff
 80032f0:	ffffc7ff 	.word	0xffffc7ff
 80032f4:	08008274 	.word	0x08008274
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000004 	.word	0x20000004

08003300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003306:	4b3c      	ldr	r3, [pc, #240]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	220c      	movs	r2, #12
 8003310:	4013      	ands	r3, r2
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d013      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x3e>
 8003316:	d85c      	bhi.n	80033d2 <HAL_RCC_GetSysClockFreq+0xd2>
 8003318:	2b04      	cmp	r3, #4
 800331a:	d002      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x22>
 800331c:	2b08      	cmp	r3, #8
 800331e:	d00b      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x38>
 8003320:	e057      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003322:	4b35      	ldr	r3, [pc, #212]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2210      	movs	r2, #16
 8003328:	4013      	ands	r3, r2
 800332a:	d002      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800332c:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800332e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003330:	e05d      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003332:	4b33      	ldr	r3, [pc, #204]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x100>)
 8003334:	613b      	str	r3, [r7, #16]
      break;
 8003336:	e05a      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003338:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x100>)
 800333a:	613b      	str	r3, [r7, #16]
      break;
 800333c:	e057      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0c9b      	lsrs	r3, r3, #18
 8003342:	220f      	movs	r2, #15
 8003344:	4013      	ands	r3, r2
 8003346:	4a2f      	ldr	r2, [pc, #188]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x104>)
 8003348:	5cd3      	ldrb	r3, [r2, r3]
 800334a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0d9b      	lsrs	r3, r3, #22
 8003350:	2203      	movs	r2, #3
 8003352:	4013      	ands	r3, r2
 8003354:	3301      	adds	r3, #1
 8003356:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003358:	4b27      	ldr	r3, [pc, #156]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	025b      	lsls	r3, r3, #9
 8003360:	4013      	ands	r3, r2
 8003362:	d00f      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	000a      	movs	r2, r1
 8003368:	0152      	lsls	r2, r2, #5
 800336a:	1a52      	subs	r2, r2, r1
 800336c:	0193      	lsls	r3, r2, #6
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	185b      	adds	r3, r3, r1
 8003374:	029b      	lsls	r3, r3, #10
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f7fc fec5 	bl	8000108 <__udivsi3>
 800337e:	0003      	movs	r3, r0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	e023      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003384:	4b1c      	ldr	r3, [pc, #112]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	d00f      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	000a      	movs	r2, r1
 8003392:	0152      	lsls	r2, r2, #5
 8003394:	1a52      	subs	r2, r2, r1
 8003396:	0193      	lsls	r3, r2, #6
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	185b      	adds	r3, r3, r1
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7fc feb0 	bl	8000108 <__udivsi3>
 80033a8:	0003      	movs	r3, r0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e00e      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	000a      	movs	r2, r1
 80033b2:	0152      	lsls	r2, r2, #5
 80033b4:	1a52      	subs	r2, r2, r1
 80033b6:	0193      	lsls	r3, r2, #6
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	185b      	adds	r3, r3, r1
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f7fc fea0 	bl	8000108 <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
      break;
 80033d0:	e00d      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80033d2:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0b5b      	lsrs	r3, r3, #13
 80033d8:	2207      	movs	r2, #7
 80033da:	4013      	ands	r3, r2
 80033dc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	0212      	lsls	r2, r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	0013      	movs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
      break;
 80033ec:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033ee:	693b      	ldr	r3, [r7, #16]
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b006      	add	sp, #24
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	003d0900 	.word	0x003d0900
 8003400:	00f42400 	.word	0x00f42400
 8003404:	08008284 	.word	0x08008284

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003410:	2017      	movs	r0, #23
 8003412:	183b      	adds	r3, r7, r0
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2220      	movs	r2, #32
 800341e:	4013      	ands	r3, r2
 8003420:	d100      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003422:	e0c7      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003424:	4b9b      	ldr	r3, [pc, #620]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	4013      	ands	r3, r2
 800342e:	d109      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b98      	ldr	r3, [pc, #608]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003434:	4b97      	ldr	r3, [pc, #604]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003436:	2180      	movs	r1, #128	@ 0x80
 8003438:	0549      	lsls	r1, r1, #21
 800343a:	430a      	orrs	r2, r1
 800343c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800343e:	183b      	adds	r3, r7, r0
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b94      	ldr	r3, [pc, #592]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4013      	ands	r3, r2
 800344e:	d11a      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003450:	4b91      	ldr	r3, [pc, #580]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b90      	ldr	r3, [pc, #576]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003456:	2180      	movs	r1, #128	@ 0x80
 8003458:	0049      	lsls	r1, r1, #1
 800345a:	430a      	orrs	r2, r1
 800345c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fd f963 	bl	8000728 <HAL_GetTick>
 8003462:	0003      	movs	r3, r0
 8003464:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	e008      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fd f95e 	bl	8000728 <HAL_GetTick>
 800346c:	0002      	movs	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e107      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b87      	ldr	r3, [pc, #540]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4013      	ands	r3, r2
 8003484:	d0f0      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003486:	4b83      	ldr	r3, [pc, #524]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	23c0      	movs	r3, #192	@ 0xc0
 800348c:	039b      	lsls	r3, r3, #14
 800348e:	4013      	ands	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	23c0      	movs	r3, #192	@ 0xc0
 8003498:	039b      	lsls	r3, r3, #14
 800349a:	4013      	ands	r3, r2
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d013      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	23c0      	movs	r3, #192	@ 0xc0
 80034a8:	029b      	lsls	r3, r3, #10
 80034aa:	401a      	ands	r2, r3
 80034ac:	23c0      	movs	r3, #192	@ 0xc0
 80034ae:	029b      	lsls	r3, r3, #10
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d10a      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034b4:	4b77      	ldr	r3, [pc, #476]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	029b      	lsls	r3, r3, #10
 80034bc:	401a      	ands	r2, r3
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d101      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0df      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80034ca:	4b72      	ldr	r3, [pc, #456]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034ce:	23c0      	movs	r3, #192	@ 0xc0
 80034d0:	029b      	lsls	r3, r3, #10
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03b      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	23c0      	movs	r3, #192	@ 0xc0
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	4013      	ands	r3, r2
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d033      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2220      	movs	r2, #32
 80034f2:	4013      	ands	r3, r2
 80034f4:	d02e      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80034f6:	4b67      	ldr	r3, [pc, #412]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fa:	4a68      	ldr	r2, [pc, #416]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003500:	4b64      	ldr	r3, [pc, #400]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003502:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003504:	4b63      	ldr	r3, [pc, #396]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003506:	2180      	movs	r1, #128	@ 0x80
 8003508:	0309      	lsls	r1, r1, #12
 800350a:	430a      	orrs	r2, r1
 800350c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800350e:	4b61      	ldr	r3, [pc, #388]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003512:	4b60      	ldr	r3, [pc, #384]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003514:	4962      	ldr	r1, [pc, #392]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003516:	400a      	ands	r2, r1
 8003518:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800351a:	4b5e      	ldr	r3, [pc, #376]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4013      	ands	r3, r2
 8003528:	d014      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352a:	f7fd f8fd 	bl	8000728 <HAL_GetTick>
 800352e:	0003      	movs	r3, r0
 8003530:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003532:	e009      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fd f8f8 	bl	8000728 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	4a59      	ldr	r2, [pc, #356]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0a0      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003548:	4b52      	ldr	r3, [pc, #328]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800354a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800354c:	2380      	movs	r3, #128	@ 0x80
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4013      	ands	r3, r2
 8003552:	d0ef      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2220      	movs	r2, #32
 800355a:	4013      	ands	r3, r2
 800355c:	d01f      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	23c0      	movs	r3, #192	@ 0xc0
 8003564:	029b      	lsls	r3, r3, #10
 8003566:	401a      	ands	r2, r3
 8003568:	23c0      	movs	r3, #192	@ 0xc0
 800356a:	029b      	lsls	r3, r3, #10
 800356c:	429a      	cmp	r2, r3
 800356e:	d10c      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003570:	4b48      	ldr	r3, [pc, #288]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a4c      	ldr	r2, [pc, #304]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	23c0      	movs	r3, #192	@ 0xc0
 8003580:	039b      	lsls	r3, r3, #14
 8003582:	401a      	ands	r2, r3
 8003584:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003586:	430a      	orrs	r2, r1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	4b42      	ldr	r3, [pc, #264]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800358c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	23c0      	movs	r3, #192	@ 0xc0
 8003594:	029b      	lsls	r3, r3, #10
 8003596:	401a      	ands	r2, r3
 8003598:	4b3e      	ldr	r3, [pc, #248]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800359a:	430a      	orrs	r2, r1
 800359c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800359e:	2317      	movs	r3, #23
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ac:	4b39      	ldr	r3, [pc, #228]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035ae:	493f      	ldr	r1, [pc, #252]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2201      	movs	r2, #1
 80035ba:	4013      	ands	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035be:	4b35      	ldr	r3, [pc, #212]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	2203      	movs	r2, #3
 80035c4:	4393      	bics	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035ce:	430a      	orrs	r2, r1
 80035d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2202      	movs	r2, #2
 80035d8:	4013      	ands	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e0:	220c      	movs	r2, #12
 80035e2:	4393      	bics	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035ec:	430a      	orrs	r2, r1
 80035ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2204      	movs	r2, #4
 80035f6:	4013      	ands	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	4a2c      	ldr	r2, [pc, #176]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800360a:	430a      	orrs	r2, r1
 800360c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2208      	movs	r2, #8
 8003614:	4013      	ands	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003618:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800361a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361c:	4a25      	ldr	r2, [pc, #148]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800361e:	4013      	ands	r3, r2
 8003620:	0019      	movs	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003628:	430a      	orrs	r2, r1
 800362a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4013      	ands	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003638:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363c:	4a17      	ldr	r2, [pc, #92]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003648:	430a      	orrs	r2, r1
 800364a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2240      	movs	r2, #64	@ 0x40
 8003652:	4013      	ands	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003656:	4b0f      	ldr	r3, [pc, #60]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365a:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800365c:	4013      	ands	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003666:	430a      	orrs	r2, r1
 8003668:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2280      	movs	r2, #128	@ 0x80
 8003670:	4013      	ands	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003674:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003678:	4a10      	ldr	r2, [pc, #64]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800367a:	4013      	ands	r3, r2
 800367c:	0019      	movs	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003684:	430a      	orrs	r2, r1
 8003686:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b006      	add	sp, #24
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
 800369c:	fffcffff 	.word	0xfffcffff
 80036a0:	fff7ffff 	.word	0xfff7ffff
 80036a4:	00001388 	.word	0x00001388
 80036a8:	ffcfffff 	.word	0xffcfffff
 80036ac:	efffffff 	.word	0xefffffff
 80036b0:	fffff3ff 	.word	0xfffff3ff
 80036b4:	ffffcfff 	.word	0xffffcfff
 80036b8:	fbffffff 	.word	0xfbffffff
 80036bc:	fff3ffff 	.word	0xfff3ffff

080036c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e083      	b.n	80037da <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	2382      	movs	r3, #130	@ 0x82
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d009      	beq.n	80036fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	61da      	str	r2, [r3, #28]
 80036ec:	e005      	b.n	80036fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2251      	movs	r2, #81	@ 0x51
 8003704:	5c9b      	ldrb	r3, [r3, r2]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2250      	movs	r2, #80	@ 0x50
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	0018      	movs	r0, r3
 8003718:	f7fc ff06 	bl	8000528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2251      	movs	r2, #81	@ 0x51
 8003720:	2102      	movs	r1, #2
 8003722:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2140      	movs	r1, #64	@ 0x40
 8003730:	438a      	bics	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	2382      	movs	r3, #130	@ 0x82
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	401a      	ands	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6899      	ldr	r1, [r3, #8]
 8003742:	2384      	movs	r3, #132	@ 0x84
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	400b      	ands	r3, r1
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68d9      	ldr	r1, [r3, #12]
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	400b      	ands	r3, r1
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2102      	movs	r1, #2
 800375c:	400b      	ands	r3, r1
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2101      	movs	r1, #1
 8003766:	400b      	ands	r3, r1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6999      	ldr	r1, [r3, #24]
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	400b      	ands	r3, r1
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2138      	movs	r1, #56	@ 0x38
 800377c:	400b      	ands	r3, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	2180      	movs	r1, #128	@ 0x80
 8003786:	400b      	ands	r3, r1
 8003788:	431a      	orrs	r2, r3
 800378a:	0011      	movs	r1, r2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003790:	2380      	movs	r3, #128	@ 0x80
 8003792:	019b      	lsls	r3, r3, #6
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	2204      	movs	r2, #4
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	2210      	movs	r2, #16
 80037b0:	401a      	ands	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4907      	ldr	r1, [pc, #28]	@ (80037e4 <HAL_SPI_Init+0x124>)
 80037c6:	400a      	ands	r2, r1
 80037c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2251      	movs	r2, #81	@ 0x51
 80037d4:	2101      	movs	r1, #1
 80037d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	fffff7ff 	.word	0xfffff7ff

080037e8 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	1dbb      	adds	r3, r7, #6
 80037f6:	801a      	strh	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2251      	movs	r2, #81	@ 0x51
 80037fc:	5c9b      	ldrb	r3, [r3, r2]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d001      	beq.n	8003808 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
 8003806:	e10a      	b.n	8003a1e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_SPI_Receive+0x2e>
 800380e:	1dbb      	adds	r3, r7, #6
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_SPI_Receive+0x32>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e101      	b.n	8003a1e <HAL_SPI_Receive+0x236>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	2382      	movs	r3, #130	@ 0x82
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	429a      	cmp	r2, r3
 8003824:	d113      	bne.n	800384e <HAL_SPI_Receive+0x66>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <HAL_SPI_Receive+0x66>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2251      	movs	r2, #81	@ 0x51
 8003832:	2104      	movs	r1, #4
 8003834:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003836:	1dbb      	adds	r3, r7, #6
 8003838:	881c      	ldrh	r4, [r3, #0]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	0023      	movs	r3, r4
 8003846:	f000 f8f1 	bl	8003a2c <HAL_SPI_TransmitReceive>
 800384a:	0003      	movs	r3, r0
 800384c:	e0e7      	b.n	8003a1e <HAL_SPI_Receive+0x236>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800384e:	f7fc ff6b 	bl	8000728 <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2250      	movs	r2, #80	@ 0x50
 800385a:	5c9b      	ldrb	r3, [r3, r2]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_SPI_Receive+0x7c>
 8003860:	2302      	movs	r3, #2
 8003862:	e0dc      	b.n	8003a1e <HAL_SPI_Receive+0x236>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2250      	movs	r2, #80	@ 0x50
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2251      	movs	r2, #81	@ 0x51
 8003870:	2104      	movs	r1, #4
 8003872:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1dba      	adds	r2, r7, #6
 8003884:	8812      	ldrh	r2, [r2, #0]
 8003886:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1dba      	adds	r2, r7, #6
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d10f      	bne.n	80038da <HAL_SPI_Receive+0xf2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2140      	movs	r1, #64	@ 0x40
 80038c6:	438a      	bics	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4954      	ldr	r1, [pc, #336]	@ (8003a28 <HAL_SPI_Receive+0x240>)
 80038d6:	400a      	ands	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2240      	movs	r2, #64	@ 0x40
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	d007      	beq.n	80038f8 <HAL_SPI_Receive+0x110>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2140      	movs	r1, #64	@ 0x40
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d000      	beq.n	8003902 <HAL_SPI_Receive+0x11a>
 8003900:	e06e      	b.n	80039e0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003902:	e034      	b.n	800396e <HAL_SPI_Receive+0x186>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	2b01      	cmp	r3, #1
 8003910:	d115      	bne.n	800393e <HAL_SPI_Receive+0x156>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	001a      	movs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800393c:	e017      	b.n	800396e <HAL_SPI_Receive+0x186>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800393e:	f7fc fef3 	bl	8000728 <HAL_GetTick>
 8003942:	0002      	movs	r2, r0
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d802      	bhi.n	8003954 <HAL_SPI_Receive+0x16c>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	d102      	bne.n	800395a <HAL_SPI_Receive+0x172>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_SPI_Receive+0x186>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2251      	movs	r2, #81	@ 0x51
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2250      	movs	r2, #80	@ 0x50
 8003966:	2100      	movs	r1, #0
 8003968:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e057      	b.n	8003a1e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1c5      	bne.n	8003904 <HAL_SPI_Receive+0x11c>
 8003978:	e037      	b.n	80039ea <HAL_SPI_Receive+0x202>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	2b01      	cmp	r3, #1
 8003986:	d113      	bne.n	80039b0 <HAL_SPI_Receive+0x1c8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003992:	b292      	uxth	r2, r2
 8003994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039ae:	e017      	b.n	80039e0 <HAL_SPI_Receive+0x1f8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b0:	f7fc feba 	bl	8000728 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d802      	bhi.n	80039c6 <HAL_SPI_Receive+0x1de>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_Receive+0x1e4>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_SPI_Receive+0x1f8>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2251      	movs	r2, #81	@ 0x51
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2250      	movs	r2, #80	@ 0x50
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e01e      	b.n	8003a1e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1c7      	bne.n	800397a <HAL_SPI_Receive+0x192>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fa69 	bl	8003ec8 <SPI_EndRxTransaction>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_SPI_Receive+0x218>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2251      	movs	r2, #81	@ 0x51
 8003a04:	2101      	movs	r1, #1
 8003a06:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2250      	movs	r2, #80	@ 0x50
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_SPI_Receive+0x234>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_SPI_Receive+0x236>
  }
  else
  {
    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
  }
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b007      	add	sp, #28
 8003a24:	bd90      	pop	{r4, r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	ffffbfff 	.word	0xffffbfff

08003a2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	001a      	movs	r2, r3
 8003a3a:	1cbb      	adds	r3, r7, #2
 8003a3c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a42:	f7fc fe71 	bl	8000728 <HAL_GetTick>
 8003a46:	0003      	movs	r3, r0
 8003a48:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a4a:	201f      	movs	r0, #31
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	2151      	movs	r1, #81	@ 0x51
 8003a52:	5c52      	ldrb	r2, [r2, r1]
 8003a54:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a5c:	2316      	movs	r3, #22
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	1cba      	adds	r2, r7, #2
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d00e      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x60>
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	2382      	movs	r3, #130	@ 0x82
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d107      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x5c>
 8003a80:	183b      	adds	r3, r7, r0
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d001      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e18a      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x376>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x74>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x74>
 8003a98:	1cbb      	adds	r3, r7, #2
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_SPI_TransmitReceive+0x78>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e17e      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x376>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2250      	movs	r2, #80	@ 0x50
 8003aa8:	5c9b      	ldrb	r3, [r3, r2]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x86>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e177      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x376>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2250      	movs	r2, #80	@ 0x50
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2251      	movs	r2, #81	@ 0x51
 8003abe:	5c9b      	ldrb	r3, [r3, r2]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2251      	movs	r2, #81	@ 0x51
 8003aca:	2105      	movs	r1, #5
 8003acc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1cba      	adds	r2, r7, #2
 8003ade:	8812      	ldrh	r2, [r2, #0]
 8003ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1cba      	adds	r2, r7, #2
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1cba      	adds	r2, r7, #2
 8003af4:	8812      	ldrh	r2, [r2, #0]
 8003af6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1cba      	adds	r2, r7, #2
 8003afc:	8812      	ldrh	r2, [r2, #0]
 8003afe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2240      	movs	r2, #64	@ 0x40
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d007      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2140      	movs	r1, #64	@ 0x40
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	2380      	movs	r3, #128	@ 0x80
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d000      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x10c>
 8003b36:	e080      	b.n	8003c3a <HAL_SPI_TransmitReceive+0x20e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x120>
 8003b40:	2316      	movs	r3, #22
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d000      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x120>
 8003b4a:	e06b      	b.n	8003c24 <HAL_SPI_TransmitReceive+0x1f8>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	1c9a      	adds	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b70:	e058      	b.n	8003c24 <HAL_SPI_TransmitReceive+0x1f8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x18c>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x18c>
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d113      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x18c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d119      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x1ce>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d014      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x1ce>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bfa:	f7fc fd95 	bl	8000728 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d80c      	bhi.n	8003c24 <HAL_SPI_TransmitReceive+0x1f8>
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	d009      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x1f8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2251      	movs	r2, #81	@ 0x51
 8003c14:	2101      	movs	r1, #1
 8003c16:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2250      	movs	r2, #80	@ 0x50
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0be      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1a1      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x146>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d19c      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x146>
 8003c38:	e084      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_SPI_TransmitReceive+0x222>
 8003c42:	2316      	movs	r3, #22
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d000      	beq.n	8003c4e <HAL_SPI_TransmitReceive+0x222>
 8003c4c:	e070      	b.n	8003d30 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c74:	e05c      	b.n	8003d30 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d11c      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x292>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d017      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x292>
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d114      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x292>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	7812      	ldrb	r2, [r2, #0]
 8003ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d119      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2d4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d014      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d00:	f7fc fd12 	bl	8000728 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d802      	bhi.n	8003d16 <HAL_SPI_TransmitReceive+0x2ea>
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	3301      	adds	r3, #1
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x2f0>
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_SPI_TransmitReceive+0x304>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2251      	movs	r2, #81	@ 0x51
 8003d20:	2101      	movs	r1, #1
 8003d22:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2250      	movs	r2, #80	@ 0x50
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e038      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d19d      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x24a>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d198      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x24a>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d44:	6a3a      	ldr	r2, [r7, #32]
 8003d46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 f926 	bl	8003f9c <SPI_EndRxTxTransaction>
 8003d50:	1e03      	subs	r3, r0, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x33a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2250      	movs	r2, #80	@ 0x50
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e01d      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x376>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2251      	movs	r2, #81	@ 0x51
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2250      	movs	r2, #80	@ 0x50
 8003d90:	2100      	movs	r1, #0
 8003d92:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x374>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_SPI_TransmitReceive+0x376>
  }
  else
  {
    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
  }
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b00a      	add	sp, #40	@ 0x28
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	1dfb      	adds	r3, r7, #7
 8003dba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dbc:	f7fc fcb4 	bl	8000728 <HAL_GetTick>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	18d3      	adds	r3, r2, r3
 8003dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dcc:	f7fc fcac 	bl	8000728 <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	015b      	lsls	r3, r3, #5
 8003dda:	0d1b      	lsrs	r3, r3, #20
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	4353      	muls	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de2:	e059      	b.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	d056      	beq.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dea:	f7fc fc9d 	bl	8000728 <HAL_GetTick>
 8003dee:	0002      	movs	r2, r0
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d902      	bls.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d142      	bne.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	21e0      	movs	r1, #224	@ 0xe0
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	2382      	movs	r3, #130	@ 0x82
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d113      	bne.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d005      	beq.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d107      	bne.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2140      	movs	r1, #64	@ 0x40
 8003e40:	438a      	bics	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	019b      	lsls	r3, r3, #6
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d110      	bne.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	491a      	ldr	r1, [pc, #104]	@ (8003ec4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2180      	movs	r1, #128	@ 0x80
 8003e6c:	0189      	lsls	r1, r1, #6
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2251      	movs	r2, #81	@ 0x51
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2250      	movs	r2, #80	@ 0x50
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e018      	b.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e002      	b.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	425a      	negs	r2, r3
 8003ea8:	4153      	adcs	r3, r2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	001a      	movs	r2, r3
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d196      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b008      	add	sp, #32
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	ffffdfff 	.word	0xffffdfff

08003ec8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	2382      	movs	r3, #130	@ 0x82
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d113      	bne.n	8003f08 <SPI_EndRxTransaction+0x40>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	2380      	movs	r3, #128	@ 0x80
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d005      	beq.n	8003ef8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2140      	movs	r1, #64	@ 0x40
 8003f04:	438a      	bics	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	2382      	movs	r3, #130	@ 0x82
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d12b      	bne.n	8003f6c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	2380      	movs	r3, #128	@ 0x80
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d012      	beq.n	8003f46 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	0013      	movs	r3, r2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2180      	movs	r1, #128	@ 0x80
 8003f2e:	f7ff ff3d 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d02d      	beq.n	8003f92 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e026      	b.n	8003f94 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	0013      	movs	r3, r2
 8003f50:	2200      	movs	r2, #0
 8003f52:	2101      	movs	r1, #1
 8003f54:	f7ff ff2a 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003f58:	1e03      	subs	r3, r0, #0
 8003f5a:	d01a      	beq.n	8003f92 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f60:	2220      	movs	r2, #32
 8003f62:	431a      	orrs	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e013      	b.n	8003f94 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	0013      	movs	r3, r2
 8003f76:	2200      	movs	r2, #0
 8003f78:	2101      	movs	r1, #1
 8003f7a:	f7ff ff17 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d007      	beq.n	8003f92 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	2220      	movs	r2, #32
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e000      	b.n	8003f94 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b004      	add	sp, #16
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	f7ff fef9 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d007      	beq.n	8003fce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e037      	b.n	800403e <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fce:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <SPI_EndRxTxTransaction+0xac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	491e      	ldr	r1, [pc, #120]	@ (800404c <SPI_EndRxTxTransaction+0xb0>)
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7fc f897 	bl	8000108 <__udivsi3>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	001a      	movs	r2, r3
 8003fde:	0013      	movs	r3, r2
 8003fe0:	015b      	lsls	r3, r3, #5
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	2382      	movs	r3, #130	@ 0x82
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d112      	bne.n	800401e <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	0013      	movs	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	2180      	movs	r1, #128	@ 0x80
 8004006:	f7ff fed1 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 800400a:	1e03      	subs	r3, r0, #0
 800400c:	d016      	beq.n	800403c <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	2220      	movs	r2, #32
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e00f      	b.n	800403e <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3b01      	subs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2280      	movs	r2, #128	@ 0x80
 8004032:	4013      	ands	r3, r2
 8004034:	2b80      	cmp	r3, #128	@ 0x80
 8004036:	d0f2      	beq.n	800401e <SPI_EndRxTxTransaction+0x82>
 8004038:	e000      	b.n	800403c <SPI_EndRxTxTransaction+0xa0>
        break;
 800403a:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b006      	add	sp, #24
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	20000000 	.word	0x20000000
 800404c:	016e3600 	.word	0x016e3600

08004050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2244      	movs	r2, #68	@ 0x44
 800405c:	2100      	movs	r1, #0
 800405e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <USB_EnableGlobalInt+0x28>)
 8004062:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	b299      	uxth	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2240      	movs	r2, #64	@ 0x40
 800406c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	0018      	movs	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	b004      	add	sp, #16
 8004076:	bd80      	pop	{r7, pc}
 8004078:	0000bf80 	.word	0x0000bf80

0800407c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <USB_DisableGlobalInt+0x30>)
 8004086:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2240      	movs	r2, #64	@ 0x40
 800408c:	5a9b      	ldrh	r3, [r3, r2]
 800408e:	b29b      	uxth	r3, r3
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	b292      	uxth	r2, r2
 8004094:	43d2      	mvns	r2, r2
 8004096:	b292      	uxth	r2, r2
 8004098:	4013      	ands	r3, r2
 800409a:	b299      	uxth	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2240      	movs	r2, #64	@ 0x40
 80040a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b004      	add	sp, #16
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0000bf80 	.word	0x0000bf80

080040b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	6019      	str	r1, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2240      	movs	r2, #64	@ 0x40
 80040c2:	2101      	movs	r1, #1
 80040c4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2240      	movs	r2, #64	@ 0x40
 80040ca:	2100      	movs	r1, #0
 80040cc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2244      	movs	r2, #68	@ 0x44
 80040d2:	2100      	movs	r1, #0
 80040d4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2250      	movs	r2, #80	@ 0x50
 80040da:	2100      	movs	r1, #0
 80040dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b0a6      	sub	sp, #152	@ 0x98
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040f2:	2397      	movs	r3, #151	@ 0x97
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29a      	uxth	r2, r3
 8004108:	2394      	movs	r3, #148	@ 0x94
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	49a5      	ldr	r1, [pc, #660]	@ (80043a4 <USB_ActivateEndpoint+0x2bc>)
 800410e:	400a      	ands	r2, r1
 8004110:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	78db      	ldrb	r3, [r3, #3]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d017      	beq.n	800414a <USB_ActivateEndpoint+0x62>
 800411a:	dc28      	bgt.n	800416e <USB_ActivateEndpoint+0x86>
 800411c:	2b02      	cmp	r3, #2
 800411e:	d00e      	beq.n	800413e <USB_ActivateEndpoint+0x56>
 8004120:	dc25      	bgt.n	800416e <USB_ActivateEndpoint+0x86>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <USB_ActivateEndpoint+0x44>
 8004126:	2b01      	cmp	r3, #1
 8004128:	d018      	beq.n	800415c <USB_ActivateEndpoint+0x74>
 800412a:	e020      	b.n	800416e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800412c:	2294      	movs	r2, #148	@ 0x94
 800412e:	18bb      	adds	r3, r7, r2
 8004130:	18ba      	adds	r2, r7, r2
 8004132:	8812      	ldrh	r2, [r2, #0]
 8004134:	2180      	movs	r1, #128	@ 0x80
 8004136:	0089      	lsls	r1, r1, #2
 8004138:	430a      	orrs	r2, r1
 800413a:	801a      	strh	r2, [r3, #0]
      break;
 800413c:	e01c      	b.n	8004178 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800413e:	2294      	movs	r2, #148	@ 0x94
 8004140:	18bb      	adds	r3, r7, r2
 8004142:	18ba      	adds	r2, r7, r2
 8004144:	8812      	ldrh	r2, [r2, #0]
 8004146:	801a      	strh	r2, [r3, #0]
      break;
 8004148:	e016      	b.n	8004178 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800414a:	2294      	movs	r2, #148	@ 0x94
 800414c:	18bb      	adds	r3, r7, r2
 800414e:	18ba      	adds	r2, r7, r2
 8004150:	8812      	ldrh	r2, [r2, #0]
 8004152:	21c0      	movs	r1, #192	@ 0xc0
 8004154:	00c9      	lsls	r1, r1, #3
 8004156:	430a      	orrs	r2, r1
 8004158:	801a      	strh	r2, [r3, #0]
      break;
 800415a:	e00d      	b.n	8004178 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800415c:	2294      	movs	r2, #148	@ 0x94
 800415e:	18bb      	adds	r3, r7, r2
 8004160:	18ba      	adds	r2, r7, r2
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	2180      	movs	r1, #128	@ 0x80
 8004166:	00c9      	lsls	r1, r1, #3
 8004168:	430a      	orrs	r2, r1
 800416a:	801a      	strh	r2, [r3, #0]
      break;
 800416c:	e004      	b.n	8004178 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800416e:	2397      	movs	r3, #151	@ 0x97
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
      break;
 8004176:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	18d3      	adds	r3, r2, r3
 8004182:	2294      	movs	r2, #148	@ 0x94
 8004184:	18ba      	adds	r2, r7, r2
 8004186:	8812      	ldrh	r2, [r2, #0]
 8004188:	4987      	ldr	r1, [pc, #540]	@ (80043a8 <USB_ActivateEndpoint+0x2c0>)
 800418a:	430a      	orrs	r2, r1
 800418c:	b292      	uxth	r2, r2
 800418e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	18d3      	adds	r3, r2, r3
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	b21b      	sxth	r3, r3
 80041a0:	4a82      	ldr	r2, [pc, #520]	@ (80043ac <USB_ActivateEndpoint+0x2c4>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	b21a      	sxth	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b21a      	sxth	r2, r3
 80041b0:	2186      	movs	r1, #134	@ 0x86
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	18d3      	adds	r3, r2, r3
 80041c0:	187a      	adds	r2, r7, r1
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	4978      	ldr	r1, [pc, #480]	@ (80043a8 <USB_ActivateEndpoint+0x2c0>)
 80041c6:	430a      	orrs	r2, r1
 80041c8:	b292      	uxth	r2, r2
 80041ca:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	7b1b      	ldrb	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d000      	beq.n	80041d6 <USB_ActivateEndpoint+0xee>
 80041d4:	e185      	b.n	80044e2 <USB_ActivateEndpoint+0x3fa>
  {
    if (ep->is_in != 0U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d100      	bne.n	80041e0 <USB_ActivateEndpoint+0xf8>
 80041de:	e07c      	b.n	80042da <USB_ActivateEndpoint+0x1f2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2250      	movs	r2, #80	@ 0x50
 80041e8:	5a9b      	ldrh	r3, [r3, r2]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	001a      	movs	r2, r3
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	00da      	lsls	r2, r3, #3
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	2280      	movs	r2, #128	@ 0x80
 8004200:	00d2      	lsls	r2, r2, #3
 8004202:	4694      	mov	ip, r2
 8004204:	4463      	add	r3, ip
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	88db      	ldrh	r3, [r3, #6]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	18db      	adds	r3, r3, r3
 8004212:	b29a      	uxth	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	18d2      	adds	r2, r2, r3
 8004222:	2112      	movs	r1, #18
 8004224:	187b      	adds	r3, r7, r1
 8004226:	8812      	ldrh	r2, [r2, #0]
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	187b      	adds	r3, r7, r1
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	2240      	movs	r2, #64	@ 0x40
 8004230:	4013      	ands	r3, r2
 8004232:	d016      	beq.n	8004262 <USB_ActivateEndpoint+0x17a>
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	18d3      	adds	r3, r2, r3
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29a      	uxth	r2, r3
 8004242:	2010      	movs	r0, #16
 8004244:	183b      	adds	r3, r7, r0
 8004246:	4959      	ldr	r1, [pc, #356]	@ (80043ac <USB_ActivateEndpoint+0x2c4>)
 8004248:	400a      	ands	r2, r1
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	18d3      	adds	r3, r2, r3
 8004256:	183a      	adds	r2, r7, r0
 8004258:	8812      	ldrh	r2, [r2, #0]
 800425a:	4955      	ldr	r1, [pc, #340]	@ (80043b0 <USB_ActivateEndpoint+0x2c8>)
 800425c:	430a      	orrs	r2, r1
 800425e:	b292      	uxth	r2, r2
 8004260:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	78db      	ldrb	r3, [r3, #3]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d01e      	beq.n	80042a8 <USB_ActivateEndpoint+0x1c0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	18d3      	adds	r3, r2, r3
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29a      	uxth	r2, r3
 8004278:	200c      	movs	r0, #12
 800427a:	183b      	adds	r3, r7, r0
 800427c:	494d      	ldr	r1, [pc, #308]	@ (80043b4 <USB_ActivateEndpoint+0x2cc>)
 800427e:	400a      	ands	r2, r1
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	183b      	adds	r3, r7, r0
 8004284:	183a      	adds	r2, r7, r0
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	2120      	movs	r1, #32
 800428a:	404a      	eors	r2, r1
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	18d3      	adds	r3, r2, r3
 8004298:	183a      	adds	r2, r7, r0
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	4942      	ldr	r1, [pc, #264]	@ (80043a8 <USB_ActivateEndpoint+0x2c0>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	b292      	uxth	r2, r2
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	f000 fbdb 	bl	8004a5e <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	18d3      	adds	r3, r2, r3
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	200e      	movs	r0, #14
 80042b8:	183b      	adds	r3, r7, r0
 80042ba:	493e      	ldr	r1, [pc, #248]	@ (80043b4 <USB_ActivateEndpoint+0x2cc>)
 80042bc:	400a      	ands	r2, r1
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	183a      	adds	r2, r7, r0
 80042cc:	8812      	ldrh	r2, [r2, #0]
 80042ce:	4936      	ldr	r1, [pc, #216]	@ (80043a8 <USB_ActivateEndpoint+0x2c0>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	b292      	uxth	r2, r2
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	f000 fbc2 	bl	8004a5e <USB_ActivateEndpoint+0x976>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2250      	movs	r2, #80	@ 0x50
 80042e2:	5a9b      	ldrh	r3, [r3, r2]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	001a      	movs	r2, r3
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	00da      	lsls	r2, r3, #3
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	4a2f      	ldr	r2, [pc, #188]	@ (80043b8 <USB_ActivateEndpoint+0x2d0>)
 80042fa:	4694      	mov	ip, r2
 80042fc:	4463      	add	r3, ip
 80042fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	88db      	ldrh	r3, [r3, #6]
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	b29b      	uxth	r3, r3
 8004308:	18db      	adds	r3, r3, r3
 800430a:	b29a      	uxth	r2, r3
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2250      	movs	r2, #80	@ 0x50
 8004318:	5a9b      	ldrh	r3, [r3, r2]
 800431a:	b29b      	uxth	r3, r3
 800431c:	001a      	movs	r2, r3
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	189b      	adds	r3, r3, r2
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	00da      	lsls	r2, r3, #3
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	18d3      	adds	r3, r2, r3
 800432e:	4a23      	ldr	r2, [pc, #140]	@ (80043bc <USB_ActivateEndpoint+0x2d4>)
 8004330:	4694      	mov	ip, r2
 8004332:	4463      	add	r3, ip
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	059b      	lsls	r3, r3, #22
 800433e:	0d9b      	lsrs	r3, r3, #22
 8004340:	b29a      	uxth	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <USB_ActivateEndpoint+0x278>
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <USB_ActivateEndpoint+0x2d8>)
 8004356:	4313      	orrs	r3, r2
 8004358:	b29a      	uxth	r2, r3
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e051      	b.n	8004404 <USB_ActivateEndpoint+0x31c>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b3e      	cmp	r3, #62	@ 0x3e
 8004366:	d82d      	bhi.n	80043c4 <USB_ActivateEndpoint+0x2dc>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	2190      	movs	r1, #144	@ 0x90
 8004370:	187a      	adds	r2, r7, r1
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2201      	movs	r2, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d004      	beq.n	8004388 <USB_ActivateEndpoint+0x2a0>
 800437e:	187b      	adds	r3, r7, r1
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	187a      	adds	r2, r7, r1
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29a      	uxth	r2, r3
 800438e:	2390      	movs	r3, #144	@ 0x90
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	b29b      	uxth	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b29a      	uxth	r2, r3
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	e02f      	b.n	8004404 <USB_ActivateEndpoint+0x31c>
 80043a4:	ffff898f 	.word	0xffff898f
 80043a8:	ffff8080 	.word	0xffff8080
 80043ac:	ffff8f8f 	.word	0xffff8f8f
 80043b0:	ffff80c0 	.word	0xffff80c0
 80043b4:	ffff8fbf 	.word	0xffff8fbf
 80043b8:	00000404 	.word	0x00000404
 80043bc:	00000406 	.word	0x00000406
 80043c0:	ffff8000 	.word	0xffff8000
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	2190      	movs	r1, #144	@ 0x90
 80043cc:	187a      	adds	r2, r7, r1
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	221f      	movs	r2, #31
 80043d6:	4013      	ands	r3, r2
 80043d8:	d104      	bne.n	80043e4 <USB_ActivateEndpoint+0x2fc>
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3b01      	subs	r3, #1
 80043e0:	187a      	adds	r2, r7, r1
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	2390      	movs	r3, #144	@ 0x90
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	029b      	lsls	r3, r3, #10
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4313      	orrs	r3, r2
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4acf      	ldr	r2, [pc, #828]	@ (8004738 <USB_ActivateEndpoint+0x650>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	18d2      	adds	r2, r2, r3
 800440e:	2122      	movs	r1, #34	@ 0x22
 8004410:	187b      	adds	r3, r7, r1
 8004412:	8812      	ldrh	r2, [r2, #0]
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	187b      	adds	r3, r7, r1
 8004418:	881a      	ldrh	r2, [r3, #0]
 800441a:	2380      	movs	r3, #128	@ 0x80
 800441c:	01db      	lsls	r3, r3, #7
 800441e:	4013      	ands	r3, r2
 8004420:	d016      	beq.n	8004450 <USB_ActivateEndpoint+0x368>
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	18d3      	adds	r3, r2, r3
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29a      	uxth	r2, r3
 8004430:	2020      	movs	r0, #32
 8004432:	183b      	adds	r3, r7, r0
 8004434:	49c1      	ldr	r1, [pc, #772]	@ (800473c <USB_ActivateEndpoint+0x654>)
 8004436:	400a      	ands	r2, r1
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	18d3      	adds	r3, r2, r3
 8004444:	183a      	adds	r2, r7, r0
 8004446:	8812      	ldrh	r2, [r2, #0]
 8004448:	49bd      	ldr	r1, [pc, #756]	@ (8004740 <USB_ActivateEndpoint+0x658>)
 800444a:	430a      	orrs	r2, r1
 800444c:	b292      	uxth	r2, r2
 800444e:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d125      	bne.n	80044a4 <USB_ActivateEndpoint+0x3bc>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	18d3      	adds	r3, r2, r3
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	201c      	movs	r0, #28
 8004468:	183b      	adds	r3, r7, r0
 800446a:	49b6      	ldr	r1, [pc, #728]	@ (8004744 <USB_ActivateEndpoint+0x65c>)
 800446c:	400a      	ands	r2, r1
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	183b      	adds	r3, r7, r0
 8004472:	183a      	adds	r2, r7, r0
 8004474:	8812      	ldrh	r2, [r2, #0]
 8004476:	2180      	movs	r1, #128	@ 0x80
 8004478:	0149      	lsls	r1, r1, #5
 800447a:	404a      	eors	r2, r1
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	183b      	adds	r3, r7, r0
 8004480:	183a      	adds	r2, r7, r0
 8004482:	8812      	ldrh	r2, [r2, #0]
 8004484:	2180      	movs	r1, #128	@ 0x80
 8004486:	0189      	lsls	r1, r1, #6
 8004488:	404a      	eors	r2, r1
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	18d3      	adds	r3, r2, r3
 8004496:	183a      	adds	r2, r7, r0
 8004498:	8812      	ldrh	r2, [r2, #0]
 800449a:	49ab      	ldr	r1, [pc, #684]	@ (8004748 <USB_ActivateEndpoint+0x660>)
 800449c:	430a      	orrs	r2, r1
 800449e:	b292      	uxth	r2, r2
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	e2dc      	b.n	8004a5e <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	201e      	movs	r0, #30
 80044b4:	183b      	adds	r3, r7, r0
 80044b6:	49a3      	ldr	r1, [pc, #652]	@ (8004744 <USB_ActivateEndpoint+0x65c>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	183a      	adds	r2, r7, r0
 80044c0:	8812      	ldrh	r2, [r2, #0]
 80044c2:	2180      	movs	r1, #128	@ 0x80
 80044c4:	0189      	lsls	r1, r1, #6
 80044c6:	404a      	eors	r2, r1
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	18d3      	adds	r3, r2, r3
 80044d4:	183a      	adds	r2, r7, r0
 80044d6:	8812      	ldrh	r2, [r2, #0]
 80044d8:	499b      	ldr	r1, [pc, #620]	@ (8004748 <USB_ActivateEndpoint+0x660>)
 80044da:	430a      	orrs	r2, r1
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	e2bd      	b.n	8004a5e <USB_ActivateEndpoint+0x976>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	78db      	ldrb	r3, [r3, #3]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d117      	bne.n	800451a <USB_ActivateEndpoint+0x432>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	18d3      	adds	r3, r2, r3
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	2082      	movs	r0, #130	@ 0x82
 80044fa:	183b      	adds	r3, r7, r0
 80044fc:	498f      	ldr	r1, [pc, #572]	@ (800473c <USB_ActivateEndpoint+0x654>)
 80044fe:	400a      	ands	r2, r1
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	18d3      	adds	r3, r2, r3
 800450c:	183a      	adds	r2, r7, r0
 800450e:	8812      	ldrh	r2, [r2, #0]
 8004510:	498e      	ldr	r1, [pc, #568]	@ (800474c <USB_ActivateEndpoint+0x664>)
 8004512:	430a      	orrs	r2, r1
 8004514:	b292      	uxth	r2, r2
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	e016      	b.n	8004548 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	18d3      	adds	r3, r2, r3
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29a      	uxth	r2, r3
 8004528:	2084      	movs	r0, #132	@ 0x84
 800452a:	183b      	adds	r3, r7, r0
 800452c:	4988      	ldr	r1, [pc, #544]	@ (8004750 <USB_ActivateEndpoint+0x668>)
 800452e:	400a      	ands	r2, r1
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	18d3      	adds	r3, r2, r3
 800453c:	183a      	adds	r2, r7, r0
 800453e:	8812      	ldrh	r2, [r2, #0]
 8004540:	4981      	ldr	r1, [pc, #516]	@ (8004748 <USB_ActivateEndpoint+0x660>)
 8004542:	430a      	orrs	r2, r1
 8004544:	b292      	uxth	r2, r2
 8004546:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2250      	movs	r2, #80	@ 0x50
 8004550:	5a9b      	ldrh	r3, [r3, r2]
 8004552:	b29b      	uxth	r3, r3
 8004554:	001a      	movs	r2, r3
 8004556:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004558:	189b      	adds	r3, r3, r2
 800455a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00da      	lsls	r2, r3, #3
 8004562:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	2280      	movs	r2, #128	@ 0x80
 8004568:	00d2      	lsls	r2, r2, #3
 800456a:	4694      	mov	ip, r2
 800456c:	4463      	add	r3, ip
 800456e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	891b      	ldrh	r3, [r3, #8]
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	b29b      	uxth	r3, r3
 8004578:	18db      	adds	r3, r3, r3
 800457a:	b29a      	uxth	r2, r3
 800457c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	677b      	str	r3, [r7, #116]	@ 0x74
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2250      	movs	r2, #80	@ 0x50
 8004588:	5a9b      	ldrh	r3, [r3, r2]
 800458a:	b29b      	uxth	r3, r3
 800458c:	001a      	movs	r2, r3
 800458e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004590:	189b      	adds	r3, r3, r2
 8004592:	677b      	str	r3, [r7, #116]	@ 0x74
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	00da      	lsls	r2, r3, #3
 800459a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800459c:	18d3      	adds	r3, r2, r3
 800459e:	4a6d      	ldr	r2, [pc, #436]	@ (8004754 <USB_ActivateEndpoint+0x66c>)
 80045a0:	4694      	mov	ip, r2
 80045a2:	4463      	add	r3, ip
 80045a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	895b      	ldrh	r3, [r3, #10]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	18db      	adds	r3, r3, r3
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d000      	beq.n	80045c0 <USB_ActivateEndpoint+0x4d8>
 80045be:	e1b3      	b.n	8004928 <USB_ActivateEndpoint+0x840>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	18d2      	adds	r2, r2, r3
 80045ca:	2160      	movs	r1, #96	@ 0x60
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	8812      	ldrh	r2, [r2, #0]
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	187b      	adds	r3, r7, r1
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	01db      	lsls	r3, r3, #7
 80045da:	4013      	ands	r3, r2
 80045dc:	d016      	beq.n	800460c <USB_ActivateEndpoint+0x524>
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	18d3      	adds	r3, r2, r3
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	205e      	movs	r0, #94	@ 0x5e
 80045ee:	183b      	adds	r3, r7, r0
 80045f0:	4952      	ldr	r1, [pc, #328]	@ (800473c <USB_ActivateEndpoint+0x654>)
 80045f2:	400a      	ands	r2, r1
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	18d3      	adds	r3, r2, r3
 8004600:	183a      	adds	r2, r7, r0
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	494e      	ldr	r1, [pc, #312]	@ (8004740 <USB_ActivateEndpoint+0x658>)
 8004606:	430a      	orrs	r2, r1
 8004608:	b292      	uxth	r2, r2
 800460a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	18d2      	adds	r2, r2, r3
 8004616:	215c      	movs	r1, #92	@ 0x5c
 8004618:	187b      	adds	r3, r7, r1
 800461a:	8812      	ldrh	r2, [r2, #0]
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	187b      	adds	r3, r7, r1
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	2240      	movs	r2, #64	@ 0x40
 8004624:	4013      	ands	r3, r2
 8004626:	d016      	beq.n	8004656 <USB_ActivateEndpoint+0x56e>
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	18d3      	adds	r3, r2, r3
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29a      	uxth	r2, r3
 8004636:	205a      	movs	r0, #90	@ 0x5a
 8004638:	183b      	adds	r3, r7, r0
 800463a:	4940      	ldr	r1, [pc, #256]	@ (800473c <USB_ActivateEndpoint+0x654>)
 800463c:	400a      	ands	r2, r1
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	183a      	adds	r2, r7, r0
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	4942      	ldr	r1, [pc, #264]	@ (8004758 <USB_ActivateEndpoint+0x670>)
 8004650:	430a      	orrs	r2, r1
 8004652:	b292      	uxth	r2, r2
 8004654:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d000      	beq.n	8004660 <USB_ActivateEndpoint+0x578>
 800465e:	e07f      	b.n	8004760 <USB_ActivateEndpoint+0x678>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2250      	movs	r2, #80	@ 0x50
 8004668:	5a9b      	ldrh	r3, [r3, r2]
 800466a:	b29b      	uxth	r3, r3
 800466c:	001a      	movs	r2, r3
 800466e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004670:	189b      	adds	r3, r3, r2
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	00da      	lsls	r2, r3, #3
 800467a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467c:	18d3      	adds	r3, r2, r3
 800467e:	4a37      	ldr	r2, [pc, #220]	@ (800475c <USB_ActivateEndpoint+0x674>)
 8004680:	4694      	mov	ip, r2
 8004682:	4463      	add	r3, ip
 8004684:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	059b      	lsls	r3, r3, #22
 800468e:	0d9b      	lsrs	r3, r3, #22
 8004690:	b29a      	uxth	r2, r3
 8004692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d108      	bne.n	80046b0 <USB_ActivateEndpoint+0x5c8>
 800469e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4a24      	ldr	r2, [pc, #144]	@ (8004738 <USB_ActivateEndpoint+0x650>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e073      	b.n	8004798 <USB_ActivateEndpoint+0x6b0>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80046b6:	d81d      	bhi.n	80046f4 <USB_ActivateEndpoint+0x60c>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	218c      	movs	r1, #140	@ 0x8c
 80046c0:	187a      	adds	r2, r7, r1
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2201      	movs	r2, #1
 80046ca:	4013      	ands	r3, r2
 80046cc:	d004      	beq.n	80046d8 <USB_ActivateEndpoint+0x5f0>
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	187a      	adds	r2, r7, r1
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29a      	uxth	r2, r3
 80046de:	238c      	movs	r3, #140	@ 0x8c
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e051      	b.n	8004798 <USB_ActivateEndpoint+0x6b0>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	218c      	movs	r1, #140	@ 0x8c
 80046fc:	187a      	adds	r2, r7, r1
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	221f      	movs	r2, #31
 8004706:	4013      	ands	r3, r2
 8004708:	d104      	bne.n	8004714 <USB_ActivateEndpoint+0x62c>
 800470a:	187b      	adds	r3, r7, r1
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	187a      	adds	r2, r7, r1
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29a      	uxth	r2, r3
 800471a:	238c      	movs	r3, #140	@ 0x8c
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	029b      	lsls	r3, r3, #10
 8004724:	b29b      	uxth	r3, r3
 8004726:	4313      	orrs	r3, r2
 8004728:	b29b      	uxth	r3, r3
 800472a:	4a03      	ldr	r2, [pc, #12]	@ (8004738 <USB_ActivateEndpoint+0x650>)
 800472c:	4313      	orrs	r3, r2
 800472e:	b29a      	uxth	r2, r3
 8004730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	e030      	b.n	8004798 <USB_ActivateEndpoint+0x6b0>
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	ffff8000 	.word	0xffff8000
 800473c:	ffff8f8f 	.word	0xffff8f8f
 8004740:	ffffc080 	.word	0xffffc080
 8004744:	ffffbf8f 	.word	0xffffbf8f
 8004748:	ffff8080 	.word	0xffff8080
 800474c:	ffff8180 	.word	0xffff8180
 8004750:	ffff8e8f 	.word	0xffff8e8f
 8004754:	00000404 	.word	0x00000404
 8004758:	ffff80c0 	.word	0xffff80c0
 800475c:	00000402 	.word	0x00000402
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d117      	bne.n	8004798 <USB_ActivateEndpoint+0x6b0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	657b      	str	r3, [r7, #84]	@ 0x54
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2250      	movs	r2, #80	@ 0x50
 8004770:	5a9b      	ldrh	r3, [r3, r2]
 8004772:	b29b      	uxth	r3, r3
 8004774:	001a      	movs	r2, r3
 8004776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004778:	189b      	adds	r3, r3, r2
 800477a:	657b      	str	r3, [r7, #84]	@ 0x54
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	00da      	lsls	r2, r3, #3
 8004782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004784:	18d3      	adds	r3, r2, r3
 8004786:	4ab9      	ldr	r2, [pc, #740]	@ (8004a6c <USB_ActivateEndpoint+0x984>)
 8004788:	4694      	mov	ip, r2
 800478a:	4463      	add	r3, ip
 800478c:	653b      	str	r3, [r7, #80]	@ 0x50
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	b29a      	uxth	r2, r3
 8004794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	647b      	str	r3, [r7, #68]	@ 0x44
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d16a      	bne.n	800487a <USB_ActivateEndpoint+0x792>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2250      	movs	r2, #80	@ 0x50
 80047ac:	5a9b      	ldrh	r3, [r3, r2]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	001a      	movs	r2, r3
 80047b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	00da      	lsls	r2, r3, #3
 80047be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c0:	18d3      	adds	r3, r2, r3
 80047c2:	4aab      	ldr	r2, [pc, #684]	@ (8004a70 <USB_ActivateEndpoint+0x988>)
 80047c4:	4694      	mov	ip, r2
 80047c6:	4463      	add	r3, ip
 80047c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	059b      	lsls	r3, r3, #22
 80047d2:	0d9b      	lsrs	r3, r3, #22
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <USB_ActivateEndpoint+0x70c>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	4aa2      	ldr	r2, [pc, #648]	@ (8004a74 <USB_ActivateEndpoint+0x98c>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	e05c      	b.n	80048ae <USB_ActivateEndpoint+0x7c6>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80047fa:	d81d      	bhi.n	8004838 <USB_ActivateEndpoint+0x750>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	2188      	movs	r1, #136	@ 0x88
 8004804:	187a      	adds	r2, r7, r1
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2201      	movs	r2, #1
 800480e:	4013      	ands	r3, r2
 8004810:	d004      	beq.n	800481c <USB_ActivateEndpoint+0x734>
 8004812:	187b      	adds	r3, r7, r1
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	187a      	adds	r2, r7, r1
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29a      	uxth	r2, r3
 8004822:	2388      	movs	r3, #136	@ 0x88
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29b      	uxth	r3, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	b29a      	uxth	r2, r3
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e03a      	b.n	80048ae <USB_ActivateEndpoint+0x7c6>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2188      	movs	r1, #136	@ 0x88
 8004840:	187a      	adds	r2, r7, r1
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	221f      	movs	r2, #31
 800484a:	4013      	ands	r3, r2
 800484c:	d104      	bne.n	8004858 <USB_ActivateEndpoint+0x770>
 800484e:	187b      	adds	r3, r7, r1
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3b01      	subs	r3, #1
 8004854:	187a      	adds	r2, r7, r1
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29a      	uxth	r2, r3
 800485e:	2388      	movs	r3, #136	@ 0x88
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	029b      	lsls	r3, r3, #10
 8004868:	b29b      	uxth	r3, r3
 800486a:	4313      	orrs	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	4a81      	ldr	r2, [pc, #516]	@ (8004a74 <USB_ActivateEndpoint+0x98c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	b29a      	uxth	r2, r3
 8004874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	e019      	b.n	80048ae <USB_ActivateEndpoint+0x7c6>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d115      	bne.n	80048ae <USB_ActivateEndpoint+0x7c6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2250      	movs	r2, #80	@ 0x50
 8004886:	5a9b      	ldrh	r3, [r3, r2]
 8004888:	b29b      	uxth	r3, r3
 800488a:	001a      	movs	r2, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	189b      	adds	r3, r3, r2
 8004890:	647b      	str	r3, [r7, #68]	@ 0x44
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	00da      	lsls	r2, r3, #3
 8004898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800489a:	18d3      	adds	r3, r2, r3
 800489c:	4a74      	ldr	r2, [pc, #464]	@ (8004a70 <USB_ActivateEndpoint+0x988>)
 800489e:	4694      	mov	ip, r2
 80048a0:	4463      	add	r3, ip
 80048a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ac:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	2036      	movs	r0, #54	@ 0x36
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	496d      	ldr	r1, [pc, #436]	@ (8004a78 <USB_ActivateEndpoint+0x990>)
 80048c2:	400a      	ands	r2, r1
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	183a      	adds	r2, r7, r0
 80048ca:	8812      	ldrh	r2, [r2, #0]
 80048cc:	2180      	movs	r1, #128	@ 0x80
 80048ce:	0149      	lsls	r1, r1, #5
 80048d0:	404a      	eors	r2, r1
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	183b      	adds	r3, r7, r0
 80048d6:	183a      	adds	r2, r7, r0
 80048d8:	8812      	ldrh	r2, [r2, #0]
 80048da:	2180      	movs	r1, #128	@ 0x80
 80048dc:	0189      	lsls	r1, r1, #6
 80048de:	404a      	eors	r2, r1
 80048e0:	801a      	strh	r2, [r3, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	18d3      	adds	r3, r2, r3
 80048ec:	183a      	adds	r2, r7, r0
 80048ee:	8812      	ldrh	r2, [r2, #0]
 80048f0:	4962      	ldr	r1, [pc, #392]	@ (8004a7c <USB_ActivateEndpoint+0x994>)
 80048f2:	430a      	orrs	r2, r1
 80048f4:	b292      	uxth	r2, r2
 80048f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	18d3      	adds	r3, r2, r3
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29a      	uxth	r2, r3
 8004906:	2034      	movs	r0, #52	@ 0x34
 8004908:	183b      	adds	r3, r7, r0
 800490a:	495d      	ldr	r1, [pc, #372]	@ (8004a80 <USB_ActivateEndpoint+0x998>)
 800490c:	400a      	ands	r2, r1
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	18d3      	adds	r3, r2, r3
 800491a:	183a      	adds	r2, r7, r0
 800491c:	8812      	ldrh	r2, [r2, #0]
 800491e:	4957      	ldr	r1, [pc, #348]	@ (8004a7c <USB_ActivateEndpoint+0x994>)
 8004920:	430a      	orrs	r2, r1
 8004922:	b292      	uxth	r2, r2
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	e09a      	b.n	8004a5e <USB_ActivateEndpoint+0x976>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	18d2      	adds	r2, r2, r3
 8004932:	216e      	movs	r1, #110	@ 0x6e
 8004934:	187b      	adds	r3, r7, r1
 8004936:	8812      	ldrh	r2, [r2, #0]
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	187b      	adds	r3, r7, r1
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	01db      	lsls	r3, r3, #7
 8004942:	4013      	ands	r3, r2
 8004944:	d016      	beq.n	8004974 <USB_ActivateEndpoint+0x88c>
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	18d3      	adds	r3, r2, r3
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29a      	uxth	r2, r3
 8004954:	206c      	movs	r0, #108	@ 0x6c
 8004956:	183b      	adds	r3, r7, r0
 8004958:	494a      	ldr	r1, [pc, #296]	@ (8004a84 <USB_ActivateEndpoint+0x99c>)
 800495a:	400a      	ands	r2, r1
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	18d3      	adds	r3, r2, r3
 8004968:	183a      	adds	r2, r7, r0
 800496a:	8812      	ldrh	r2, [r2, #0]
 800496c:	4946      	ldr	r1, [pc, #280]	@ (8004a88 <USB_ActivateEndpoint+0x9a0>)
 800496e:	430a      	orrs	r2, r1
 8004970:	b292      	uxth	r2, r2
 8004972:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	18d2      	adds	r2, r2, r3
 800497e:	216a      	movs	r1, #106	@ 0x6a
 8004980:	187b      	adds	r3, r7, r1
 8004982:	8812      	ldrh	r2, [r2, #0]
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	187b      	adds	r3, r7, r1
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	2240      	movs	r2, #64	@ 0x40
 800498c:	4013      	ands	r3, r2
 800498e:	d016      	beq.n	80049be <USB_ActivateEndpoint+0x8d6>
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29a      	uxth	r2, r3
 800499e:	2068      	movs	r0, #104	@ 0x68
 80049a0:	183b      	adds	r3, r7, r0
 80049a2:	4938      	ldr	r1, [pc, #224]	@ (8004a84 <USB_ActivateEndpoint+0x99c>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	801a      	strh	r2, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	18d3      	adds	r3, r2, r3
 80049b2:	183a      	adds	r2, r7, r0
 80049b4:	8812      	ldrh	r2, [r2, #0]
 80049b6:	4935      	ldr	r1, [pc, #212]	@ (8004a8c <USB_ActivateEndpoint+0x9a4>)
 80049b8:	430a      	orrs	r2, r1
 80049ba:	b292      	uxth	r2, r2
 80049bc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d01d      	beq.n	8004a02 <USB_ActivateEndpoint+0x91a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	18d3      	adds	r3, r2, r3
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	2064      	movs	r0, #100	@ 0x64
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	4929      	ldr	r1, [pc, #164]	@ (8004a80 <USB_ActivateEndpoint+0x998>)
 80049da:	400a      	ands	r2, r1
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	183a      	adds	r2, r7, r0
 80049e2:	8812      	ldrh	r2, [r2, #0]
 80049e4:	2120      	movs	r1, #32
 80049e6:	404a      	eors	r2, r1
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	18d3      	adds	r3, r2, r3
 80049f4:	183a      	adds	r2, r7, r0
 80049f6:	8812      	ldrh	r2, [r2, #0]
 80049f8:	4920      	ldr	r1, [pc, #128]	@ (8004a7c <USB_ActivateEndpoint+0x994>)
 80049fa:	430a      	orrs	r2, r1
 80049fc:	b292      	uxth	r2, r2
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	e016      	b.n	8004a30 <USB_ActivateEndpoint+0x948>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	18d3      	adds	r3, r2, r3
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	2066      	movs	r0, #102	@ 0x66
 8004a12:	183b      	adds	r3, r7, r0
 8004a14:	491a      	ldr	r1, [pc, #104]	@ (8004a80 <USB_ActivateEndpoint+0x998>)
 8004a16:	400a      	ands	r2, r1
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	18d3      	adds	r3, r2, r3
 8004a24:	183a      	adds	r2, r7, r0
 8004a26:	8812      	ldrh	r2, [r2, #0]
 8004a28:	4914      	ldr	r1, [pc, #80]	@ (8004a7c <USB_ActivateEndpoint+0x994>)
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	18d3      	adds	r3, r2, r3
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	2062      	movs	r0, #98	@ 0x62
 8004a40:	183b      	adds	r3, r7, r0
 8004a42:	490d      	ldr	r1, [pc, #52]	@ (8004a78 <USB_ActivateEndpoint+0x990>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	18d3      	adds	r3, r2, r3
 8004a52:	183a      	adds	r2, r7, r0
 8004a54:	8812      	ldrh	r2, [r2, #0]
 8004a56:	4909      	ldr	r1, [pc, #36]	@ (8004a7c <USB_ActivateEndpoint+0x994>)
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	b292      	uxth	r2, r2
 8004a5c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a5e:	2397      	movs	r3, #151	@ 0x97
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	781b      	ldrb	r3, [r3, #0]
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b026      	add	sp, #152	@ 0x98
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	00000402 	.word	0x00000402
 8004a70:	00000406 	.word	0x00000406
 8004a74:	ffff8000 	.word	0xffff8000
 8004a78:	ffffbf8f 	.word	0xffffbf8f
 8004a7c:	ffff8080 	.word	0xffff8080
 8004a80:	ffff8fbf 	.word	0xffff8fbf
 8004a84:	ffff8f8f 	.word	0xffff8f8f
 8004a88:	ffffc080 	.word	0xffffc080
 8004a8c:	ffff80c0 	.word	0xffff80c0

08004a90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	@ 0x30
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	7b1b      	ldrb	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d000      	beq.n	8004aa4 <USB_DeactivateEndpoint+0x14>
 8004aa2:	e07e      	b.n	8004ba2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d03c      	beq.n	8004b26 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	18d2      	adds	r2, r2, r3
 8004ab6:	210c      	movs	r1, #12
 8004ab8:	187b      	adds	r3, r7, r1
 8004aba:	8812      	ldrh	r2, [r2, #0]
 8004abc:	801a      	strh	r2, [r3, #0]
 8004abe:	187b      	adds	r3, r7, r1
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	2240      	movs	r2, #64	@ 0x40
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d016      	beq.n	8004af6 <USB_DeactivateEndpoint+0x66>
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	18d3      	adds	r3, r2, r3
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	200a      	movs	r0, #10
 8004ad8:	183b      	adds	r3, r7, r0
 8004ada:	49c7      	ldr	r1, [pc, #796]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004adc:	400a      	ands	r2, r1
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	183a      	adds	r2, r7, r0
 8004aec:	8812      	ldrh	r2, [r2, #0]
 8004aee:	49c3      	ldr	r1, [pc, #780]	@ (8004dfc <USB_DeactivateEndpoint+0x36c>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	b292      	uxth	r2, r2
 8004af4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	2008      	movs	r0, #8
 8004b06:	183b      	adds	r3, r7, r0
 8004b08:	49bd      	ldr	r1, [pc, #756]	@ (8004e00 <USB_DeactivateEndpoint+0x370>)
 8004b0a:	400a      	ands	r2, r1
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	18d3      	adds	r3, r2, r3
 8004b18:	183a      	adds	r2, r7, r0
 8004b1a:	8812      	ldrh	r2, [r2, #0]
 8004b1c:	49b9      	ldr	r1, [pc, #740]	@ (8004e04 <USB_DeactivateEndpoint+0x374>)
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	b292      	uxth	r2, r2
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	e163      	b.n	8004dee <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	18d2      	adds	r2, r2, r3
 8004b30:	2112      	movs	r1, #18
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	8812      	ldrh	r2, [r2, #0]
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	881a      	ldrh	r2, [r3, #0]
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	01db      	lsls	r3, r3, #7
 8004b40:	4013      	ands	r3, r2
 8004b42:	d016      	beq.n	8004b72 <USB_DeactivateEndpoint+0xe2>
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	18d3      	adds	r3, r2, r3
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	2010      	movs	r0, #16
 8004b54:	183b      	adds	r3, r7, r0
 8004b56:	49a8      	ldr	r1, [pc, #672]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	18d3      	adds	r3, r2, r3
 8004b66:	183a      	adds	r2, r7, r0
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	49a7      	ldr	r1, [pc, #668]	@ (8004e08 <USB_DeactivateEndpoint+0x378>)
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	18d3      	adds	r3, r2, r3
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	200e      	movs	r0, #14
 8004b82:	183b      	adds	r3, r7, r0
 8004b84:	49a1      	ldr	r1, [pc, #644]	@ (8004e0c <USB_DeactivateEndpoint+0x37c>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	183a      	adds	r2, r7, r0
 8004b96:	8812      	ldrh	r2, [r2, #0]
 8004b98:	499a      	ldr	r1, [pc, #616]	@ (8004e04 <USB_DeactivateEndpoint+0x374>)
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e125      	b.n	8004dee <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d000      	beq.n	8004bac <USB_DeactivateEndpoint+0x11c>
 8004baa:	e090      	b.n	8004cce <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	18d2      	adds	r2, r2, r3
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	8812      	ldrh	r2, [r2, #0]
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	881a      	ldrh	r2, [r3, #0]
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	01db      	lsls	r3, r3, #7
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d016      	beq.n	8004bf8 <USB_DeactivateEndpoint+0x168>
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	18d3      	adds	r3, r2, r3
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	201e      	movs	r0, #30
 8004bda:	183b      	adds	r3, r7, r0
 8004bdc:	4986      	ldr	r1, [pc, #536]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004bde:	400a      	ands	r2, r1
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	18d3      	adds	r3, r2, r3
 8004bec:	183a      	adds	r2, r7, r0
 8004bee:	8812      	ldrh	r2, [r2, #0]
 8004bf0:	4985      	ldr	r1, [pc, #532]	@ (8004e08 <USB_DeactivateEndpoint+0x378>)
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	b292      	uxth	r2, r2
 8004bf6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	18d2      	adds	r2, r2, r3
 8004c02:	211c      	movs	r1, #28
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	8812      	ldrh	r2, [r2, #0]
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	2240      	movs	r2, #64	@ 0x40
 8004c10:	4013      	ands	r3, r2
 8004c12:	d016      	beq.n	8004c42 <USB_DeactivateEndpoint+0x1b2>
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	18d3      	adds	r3, r2, r3
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	201a      	movs	r0, #26
 8004c24:	183b      	adds	r3, r7, r0
 8004c26:	4974      	ldr	r1, [pc, #464]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	801a      	strh	r2, [r3, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	18d3      	adds	r3, r2, r3
 8004c36:	183a      	adds	r2, r7, r0
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	4970      	ldr	r1, [pc, #448]	@ (8004dfc <USB_DeactivateEndpoint+0x36c>)
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	18d3      	adds	r3, r2, r3
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	2018      	movs	r0, #24
 8004c52:	183b      	adds	r3, r7, r0
 8004c54:	4968      	ldr	r1, [pc, #416]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004c56:	400a      	ands	r2, r1
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	18d3      	adds	r3, r2, r3
 8004c64:	183a      	adds	r2, r7, r0
 8004c66:	8812      	ldrh	r2, [r2, #0]
 8004c68:	4964      	ldr	r1, [pc, #400]	@ (8004dfc <USB_DeactivateEndpoint+0x36c>)
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	18d3      	adds	r3, r2, r3
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	2016      	movs	r0, #22
 8004c80:	183b      	adds	r3, r7, r0
 8004c82:	4962      	ldr	r1, [pc, #392]	@ (8004e0c <USB_DeactivateEndpoint+0x37c>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	18d3      	adds	r3, r2, r3
 8004c92:	183a      	adds	r2, r7, r0
 8004c94:	8812      	ldrh	r2, [r2, #0]
 8004c96:	495b      	ldr	r1, [pc, #364]	@ (8004e04 <USB_DeactivateEndpoint+0x374>)
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	b292      	uxth	r2, r2
 8004c9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	18d3      	adds	r3, r2, r3
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	2014      	movs	r0, #20
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	4953      	ldr	r1, [pc, #332]	@ (8004e00 <USB_DeactivateEndpoint+0x370>)
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	18d3      	adds	r3, r2, r3
 8004cc0:	183a      	adds	r2, r7, r0
 8004cc2:	8812      	ldrh	r2, [r2, #0]
 8004cc4:	494f      	ldr	r1, [pc, #316]	@ (8004e04 <USB_DeactivateEndpoint+0x374>)
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e08f      	b.n	8004dee <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	18d2      	adds	r2, r2, r3
 8004cd8:	212e      	movs	r1, #46	@ 0x2e
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	8812      	ldrh	r2, [r2, #0]
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	01db      	lsls	r3, r3, #7
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d016      	beq.n	8004d1a <USB_DeactivateEndpoint+0x28a>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	18d3      	adds	r3, r2, r3
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	202c      	movs	r0, #44	@ 0x2c
 8004cfc:	183b      	adds	r3, r7, r0
 8004cfe:	493e      	ldr	r1, [pc, #248]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004d00:	400a      	ands	r2, r1
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	183a      	adds	r2, r7, r0
 8004d10:	8812      	ldrh	r2, [r2, #0]
 8004d12:	493d      	ldr	r1, [pc, #244]	@ (8004e08 <USB_DeactivateEndpoint+0x378>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	b292      	uxth	r2, r2
 8004d18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	18d2      	adds	r2, r2, r3
 8004d24:	212a      	movs	r1, #42	@ 0x2a
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	2240      	movs	r2, #64	@ 0x40
 8004d32:	4013      	ands	r3, r2
 8004d34:	d016      	beq.n	8004d64 <USB_DeactivateEndpoint+0x2d4>
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	2028      	movs	r0, #40	@ 0x28
 8004d46:	183b      	adds	r3, r7, r0
 8004d48:	492b      	ldr	r1, [pc, #172]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	801a      	strh	r2, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	183a      	adds	r2, r7, r0
 8004d5a:	8812      	ldrh	r2, [r2, #0]
 8004d5c:	4927      	ldr	r1, [pc, #156]	@ (8004dfc <USB_DeactivateEndpoint+0x36c>)
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	b292      	uxth	r2, r2
 8004d62:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	2026      	movs	r0, #38	@ 0x26
 8004d74:	183b      	adds	r3, r7, r0
 8004d76:	4920      	ldr	r1, [pc, #128]	@ (8004df8 <USB_DeactivateEndpoint+0x368>)
 8004d78:	400a      	ands	r2, r1
 8004d7a:	801a      	strh	r2, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	18d3      	adds	r3, r2, r3
 8004d86:	183a      	adds	r2, r7, r0
 8004d88:	8812      	ldrh	r2, [r2, #0]
 8004d8a:	491f      	ldr	r1, [pc, #124]	@ (8004e08 <USB_DeactivateEndpoint+0x378>)
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	2024      	movs	r0, #36	@ 0x24
 8004da2:	183b      	adds	r3, r7, r0
 8004da4:	4916      	ldr	r1, [pc, #88]	@ (8004e00 <USB_DeactivateEndpoint+0x370>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	18d3      	adds	r3, r2, r3
 8004db4:	183a      	adds	r2, r7, r0
 8004db6:	8812      	ldrh	r2, [r2, #0]
 8004db8:	4912      	ldr	r1, [pc, #72]	@ (8004e04 <USB_DeactivateEndpoint+0x374>)
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	18d3      	adds	r3, r2, r3
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	2022      	movs	r0, #34	@ 0x22
 8004dd0:	183b      	adds	r3, r7, r0
 8004dd2:	490e      	ldr	r1, [pc, #56]	@ (8004e0c <USB_DeactivateEndpoint+0x37c>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	183a      	adds	r2, r7, r0
 8004de4:	8812      	ldrh	r2, [r2, #0]
 8004de6:	4907      	ldr	r1, [pc, #28]	@ (8004e04 <USB_DeactivateEndpoint+0x374>)
 8004de8:	430a      	orrs	r2, r1
 8004dea:	b292      	uxth	r2, r2
 8004dec:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	0018      	movs	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b00c      	add	sp, #48	@ 0x30
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	ffff8f8f 	.word	0xffff8f8f
 8004dfc:	ffff80c0 	.word	0xffff80c0
 8004e00:	ffff8fbf 	.word	0xffff8fbf
 8004e04:	ffff8080 	.word	0xffff8080
 8004e08:	ffffc080 	.word	0xffffc080
 8004e0c:	ffffbf8f 	.word	0xffffbf8f

08004e10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e10:	b5b0      	push	{r4, r5, r7, lr}
 8004e12:	b0ac      	sub	sp, #176	@ 0xb0
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <USB_EPStartXfer+0x16>
 8004e22:	f000 fd07 	bl	8005834 <USB_EPStartXfer+0xa24>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d905      	bls.n	8004e3e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	22ac      	movs	r2, #172	@ 0xac
 8004e38:	18ba      	adds	r2, r7, r2
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	e004      	b.n	8004e48 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	22ac      	movs	r2, #172	@ 0xac
 8004e44:	18ba      	adds	r2, r7, r2
 8004e46:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	7b1b      	ldrb	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d124      	bne.n	8004e9a <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6959      	ldr	r1, [r3, #20]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	88da      	ldrh	r2, [r3, #6]
 8004e58:	24ac      	movs	r4, #172	@ 0xac
 8004e5a:	193b      	adds	r3, r7, r4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fef5 	bl	8005c50 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2250      	movs	r2, #80	@ 0x50
 8004e6e:	5a9b      	ldrh	r3, [r3, r2]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	001a      	movs	r2, r3
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	00da      	lsls	r2, r3, #3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	18d3      	adds	r3, r2, r3
 8004e84:	4acf      	ldr	r2, [pc, #828]	@ (80051c4 <USB_EPStartXfer+0x3b4>)
 8004e86:	4694      	mov	ip, r2
 8004e88:	4463      	add	r3, ip
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	193b      	adds	r3, r7, r4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	f000 fca9 	bl	80057ec <USB_EPStartXfer+0x9dc>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	78db      	ldrb	r3, [r3, #3]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d000      	beq.n	8004ea4 <USB_EPStartXfer+0x94>
 8004ea2:	e347      	b.n	8005534 <USB_EPStartXfer+0x724>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d800      	bhi.n	8004eb2 <USB_EPStartXfer+0xa2>
 8004eb0:	e2f0      	b.n	8005494 <USB_EPStartXfer+0x684>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	18d3      	adds	r3, r2, r3
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	2056      	movs	r0, #86	@ 0x56
 8004ec2:	183b      	adds	r3, r7, r0
 8004ec4:	49c0      	ldr	r1, [pc, #768]	@ (80051c8 <USB_EPStartXfer+0x3b8>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	18d3      	adds	r3, r2, r3
 8004ed4:	183a      	adds	r2, r7, r0
 8004ed6:	8812      	ldrh	r2, [r2, #0]
 8004ed8:	49bc      	ldr	r1, [pc, #752]	@ (80051cc <USB_EPStartXfer+0x3bc>)
 8004eda:	430a      	orrs	r2, r1
 8004edc:	b292      	uxth	r2, r2
 8004ede:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	21ac      	movs	r1, #172	@ 0xac
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	18d3      	adds	r3, r2, r3
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	001a      	movs	r2, r3
 8004f00:	2340      	movs	r3, #64	@ 0x40
 8004f02:	4013      	ands	r3, r2
 8004f04:	d100      	bne.n	8004f08 <USB_EPStartXfer+0xf8>
 8004f06:	e167      	b.n	80051d8 <USB_EPStartXfer+0x3c8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d16c      	bne.n	8004fee <USB_EPStartXfer+0x1de>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2250      	movs	r2, #80	@ 0x50
 8004f1c:	5a9b      	ldrh	r3, [r3, r2]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	001a      	movs	r2, r3
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	189b      	adds	r3, r3, r2
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	00da      	lsls	r2, r3, #3
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	18d3      	adds	r3, r2, r3
 8004f32:	4aa7      	ldr	r2, [pc, #668]	@ (80051d0 <USB_EPStartXfer+0x3c0>)
 8004f34:	4694      	mov	ip, r2
 8004f36:	4463      	add	r3, ip
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	059b      	lsls	r3, r3, #22
 8004f42:	0d9b      	lsrs	r3, r3, #22
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <USB_EPStartXfer+0x154>
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4a9e      	ldr	r2, [pc, #632]	@ (80051d4 <USB_EPStartXfer+0x3c4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e05f      	b.n	8005024 <USB_EPStartXfer+0x214>
 8004f64:	22ac      	movs	r2, #172	@ 0xac
 8004f66:	18bb      	adds	r3, r7, r2
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f6c:	d81d      	bhi.n	8004faa <USB_EPStartXfer+0x19a>
 8004f6e:	18bb      	adds	r3, r7, r2
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	21a8      	movs	r1, #168	@ 0xa8
 8004f76:	1878      	adds	r0, r7, r1
 8004f78:	6003      	str	r3, [r0, #0]
 8004f7a:	18bb      	adds	r3, r7, r2
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4013      	ands	r3, r2
 8004f82:	d004      	beq.n	8004f8e <USB_EPStartXfer+0x17e>
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	187a      	adds	r2, r7, r1
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	23a8      	movs	r3, #168	@ 0xa8
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	029b      	lsls	r3, r3, #10
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	e03c      	b.n	8005024 <USB_EPStartXfer+0x214>
 8004faa:	22ac      	movs	r2, #172	@ 0xac
 8004fac:	18bb      	adds	r3, r7, r2
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	21a8      	movs	r1, #168	@ 0xa8
 8004fb4:	1878      	adds	r0, r7, r1
 8004fb6:	6003      	str	r3, [r0, #0]
 8004fb8:	18bb      	adds	r3, r7, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	221f      	movs	r2, #31
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d104      	bne.n	8004fcc <USB_EPStartXfer+0x1bc>
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	187a      	adds	r2, r7, r1
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	23a8      	movs	r3, #168	@ 0xa8
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	4a7c      	ldr	r2, [pc, #496]	@ (80051d4 <USB_EPStartXfer+0x3c4>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e01a      	b.n	8005024 <USB_EPStartXfer+0x214>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d116      	bne.n	8005024 <USB_EPStartXfer+0x214>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2250      	movs	r2, #80	@ 0x50
 8004ffa:	5a9b      	ldrh	r3, [r3, r2]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	001a      	movs	r2, r3
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	189b      	adds	r3, r3, r2
 8005004:	633b      	str	r3, [r7, #48]	@ 0x30
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	00da      	lsls	r2, r3, #3
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	4a6f      	ldr	r2, [pc, #444]	@ (80051d0 <USB_EPStartXfer+0x3c0>)
 8005012:	4694      	mov	ip, r2
 8005014:	4463      	add	r3, ip
 8005016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005018:	23ac      	movs	r3, #172	@ 0xac
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	b29a      	uxth	r2, r3
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005024:	2076      	movs	r0, #118	@ 0x76
 8005026:	183b      	adds	r3, r7, r0
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	8952      	ldrh	r2, [r2, #10]
 800502c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6959      	ldr	r1, [r3, #20]
 8005032:	25ac      	movs	r5, #172	@ 0xac
 8005034:	197b      	adds	r3, r7, r5
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b29c      	uxth	r4, r3
 800503a:	183b      	adds	r3, r7, r0
 800503c:	881a      	ldrh	r2, [r3, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	0023      	movs	r3, r4
 8005042:	f000 fe05 	bl	8005c50 <USB_WritePMA>
            ep->xfer_buff += len;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	197b      	adds	r3, r7, r5
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	18d2      	adds	r2, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d907      	bls.n	8005070 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	197b      	adds	r3, r7, r5
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1ad2      	subs	r2, r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	621a      	str	r2, [r3, #32]
 800506e:	e007      	b.n	8005080 <USB_EPStartXfer+0x270>
            }
            else
            {
              len = ep->xfer_len_db;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	22ac      	movs	r2, #172	@ 0xac
 8005076:	18ba      	adds	r2, r7, r2
 8005078:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d16d      	bne.n	8005164 <USB_EPStartXfer+0x354>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2250      	movs	r2, #80	@ 0x50
 8005090:	5a9b      	ldrh	r3, [r3, r2]
 8005092:	b29b      	uxth	r3, r3
 8005094:	001a      	movs	r2, r3
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	189b      	adds	r3, r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	00da      	lsls	r2, r3, #3
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	4a47      	ldr	r2, [pc, #284]	@ (80051c4 <USB_EPStartXfer+0x3b4>)
 80050a8:	4694      	mov	ip, r2
 80050aa:	4463      	add	r3, ip
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	059b      	lsls	r3, r3, #22
 80050b6:	0d9b      	lsrs	r3, r3, #22
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	801a      	strh	r2, [r3, #0]
 80050be:	23ac      	movs	r3, #172	@ 0xac
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d108      	bne.n	80050da <USB_EPStartXfer+0x2ca>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	4a41      	ldr	r2, [pc, #260]	@ (80051d4 <USB_EPStartXfer+0x3c4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	e061      	b.n	800519e <USB_EPStartXfer+0x38e>
 80050da:	22ac      	movs	r2, #172	@ 0xac
 80050dc:	18bb      	adds	r3, r7, r2
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80050e2:	d81d      	bhi.n	8005120 <USB_EPStartXfer+0x310>
 80050e4:	18bb      	adds	r3, r7, r2
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	21a4      	movs	r1, #164	@ 0xa4
 80050ec:	1878      	adds	r0, r7, r1
 80050ee:	6003      	str	r3, [r0, #0]
 80050f0:	18bb      	adds	r3, r7, r2
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2201      	movs	r2, #1
 80050f6:	4013      	ands	r3, r2
 80050f8:	d004      	beq.n	8005104 <USB_EPStartXfer+0x2f4>
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3301      	adds	r3, #1
 8005100:	187a      	adds	r2, r7, r1
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29a      	uxth	r2, r3
 800510a:	23a4      	movs	r3, #164	@ 0xa4
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	029b      	lsls	r3, r3, #10
 8005114:	b29b      	uxth	r3, r3
 8005116:	4313      	orrs	r3, r2
 8005118:	b29a      	uxth	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	e03e      	b.n	800519e <USB_EPStartXfer+0x38e>
 8005120:	22ac      	movs	r2, #172	@ 0xac
 8005122:	18bb      	adds	r3, r7, r2
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	21a4      	movs	r1, #164	@ 0xa4
 800512a:	1878      	adds	r0, r7, r1
 800512c:	6003      	str	r3, [r0, #0]
 800512e:	18bb      	adds	r3, r7, r2
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	221f      	movs	r2, #31
 8005134:	4013      	ands	r3, r2
 8005136:	d104      	bne.n	8005142 <USB_EPStartXfer+0x332>
 8005138:	187b      	adds	r3, r7, r1
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3b01      	subs	r3, #1
 800513e:	187a      	adds	r2, r7, r1
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29a      	uxth	r2, r3
 8005148:	23a4      	movs	r3, #164	@ 0xa4
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	4313      	orrs	r3, r2
 8005156:	b29b      	uxth	r3, r3
 8005158:	4a1e      	ldr	r2, [pc, #120]	@ (80051d4 <USB_EPStartXfer+0x3c4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	b29a      	uxth	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	e01c      	b.n	800519e <USB_EPStartXfer+0x38e>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d118      	bne.n	800519e <USB_EPStartXfer+0x38e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	623b      	str	r3, [r7, #32]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2250      	movs	r2, #80	@ 0x50
 8005174:	5a9b      	ldrh	r3, [r3, r2]
 8005176:	b29b      	uxth	r3, r3
 8005178:	001a      	movs	r2, r3
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	189b      	adds	r3, r3, r2
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	00da      	lsls	r2, r3, #3
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	18d3      	adds	r3, r2, r3
 800518a:	4a0e      	ldr	r2, [pc, #56]	@ (80051c4 <USB_EPStartXfer+0x3b4>)
 800518c:	4694      	mov	ip, r2
 800518e:	4463      	add	r3, ip
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	23ac      	movs	r3, #172	@ 0xac
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b29a      	uxth	r2, r3
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800519e:	2076      	movs	r0, #118	@ 0x76
 80051a0:	183b      	adds	r3, r7, r0
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	8912      	ldrh	r2, [r2, #8]
 80051a6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6959      	ldr	r1, [r3, #20]
 80051ac:	23ac      	movs	r3, #172	@ 0xac
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	b29c      	uxth	r4, r3
 80051b4:	183b      	adds	r3, r7, r0
 80051b6:	881a      	ldrh	r2, [r3, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	0023      	movs	r3, r4
 80051bc:	f000 fd48 	bl	8005c50 <USB_WritePMA>
 80051c0:	e314      	b.n	80057ec <USB_EPStartXfer+0x9dc>
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	00000402 	.word	0x00000402
 80051c8:	ffff8f8f 	.word	0xffff8f8f
 80051cc:	ffff8180 	.word	0xffff8180
 80051d0:	00000406 	.word	0x00000406
 80051d4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d16d      	bne.n	80052bc <USB_EPStartXfer+0x4ac>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2250      	movs	r2, #80	@ 0x50
 80051e8:	5a9b      	ldrh	r3, [r3, r2]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	001a      	movs	r2, r3
 80051ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f0:	189b      	adds	r3, r3, r2
 80051f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	00da      	lsls	r2, r3, #3
 80051fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051fc:	18d3      	adds	r3, r2, r3
 80051fe:	4ac8      	ldr	r2, [pc, #800]	@ (8005520 <USB_EPStartXfer+0x710>)
 8005200:	4694      	mov	ip, r2
 8005202:	4463      	add	r3, ip
 8005204:	647b      	str	r3, [r7, #68]	@ 0x44
 8005206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	059b      	lsls	r3, r3, #22
 800520e:	0d9b      	lsrs	r3, r3, #22
 8005210:	b29a      	uxth	r2, r3
 8005212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	23ac      	movs	r3, #172	@ 0xac
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d108      	bne.n	8005232 <USB_EPStartXfer+0x422>
 8005220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	4abf      	ldr	r2, [pc, #764]	@ (8005524 <USB_EPStartXfer+0x714>)
 8005228:	4313      	orrs	r3, r2
 800522a:	b29a      	uxth	r2, r3
 800522c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e061      	b.n	80052f6 <USB_EPStartXfer+0x4e6>
 8005232:	22ac      	movs	r2, #172	@ 0xac
 8005234:	18bb      	adds	r3, r7, r2
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b3e      	cmp	r3, #62	@ 0x3e
 800523a:	d81d      	bhi.n	8005278 <USB_EPStartXfer+0x468>
 800523c:	18bb      	adds	r3, r7, r2
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	21a0      	movs	r1, #160	@ 0xa0
 8005244:	1878      	adds	r0, r7, r1
 8005246:	6003      	str	r3, [r0, #0]
 8005248:	18bb      	adds	r3, r7, r2
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2201      	movs	r2, #1
 800524e:	4013      	ands	r3, r2
 8005250:	d004      	beq.n	800525c <USB_EPStartXfer+0x44c>
 8005252:	187b      	adds	r3, r7, r1
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	187a      	adds	r2, r7, r1
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29a      	uxth	r2, r3
 8005262:	23a0      	movs	r3, #160	@ 0xa0
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	b29b      	uxth	r3, r3
 800526e:	4313      	orrs	r3, r2
 8005270:	b29a      	uxth	r2, r3
 8005272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	e03e      	b.n	80052f6 <USB_EPStartXfer+0x4e6>
 8005278:	22ac      	movs	r2, #172	@ 0xac
 800527a:	18bb      	adds	r3, r7, r2
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	21a0      	movs	r1, #160	@ 0xa0
 8005282:	1878      	adds	r0, r7, r1
 8005284:	6003      	str	r3, [r0, #0]
 8005286:	18bb      	adds	r3, r7, r2
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	221f      	movs	r2, #31
 800528c:	4013      	ands	r3, r2
 800528e:	d104      	bne.n	800529a <USB_EPStartXfer+0x48a>
 8005290:	187b      	adds	r3, r7, r1
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	187a      	adds	r2, r7, r1
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29a      	uxth	r2, r3
 80052a0:	23a0      	movs	r3, #160	@ 0xa0
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4313      	orrs	r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	4a9c      	ldr	r2, [pc, #624]	@ (8005524 <USB_EPStartXfer+0x714>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e01c      	b.n	80052f6 <USB_EPStartXfer+0x4e6>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d118      	bne.n	80052f6 <USB_EPStartXfer+0x4e6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2250      	movs	r2, #80	@ 0x50
 80052cc:	5a9b      	ldrh	r3, [r3, r2]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	001a      	movs	r2, r3
 80052d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d4:	189b      	adds	r3, r3, r2
 80052d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	00da      	lsls	r2, r3, #3
 80052de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e0:	18d3      	adds	r3, r2, r3
 80052e2:	4a8f      	ldr	r2, [pc, #572]	@ (8005520 <USB_EPStartXfer+0x710>)
 80052e4:	4694      	mov	ip, r2
 80052e6:	4463      	add	r3, ip
 80052e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ea:	23ac      	movs	r3, #172	@ 0xac
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052f6:	2076      	movs	r0, #118	@ 0x76
 80052f8:	183b      	adds	r3, r7, r0
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	8912      	ldrh	r2, [r2, #8]
 80052fe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6959      	ldr	r1, [r3, #20]
 8005304:	25ac      	movs	r5, #172	@ 0xac
 8005306:	197b      	adds	r3, r7, r5
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	b29c      	uxth	r4, r3
 800530c:	183b      	adds	r3, r7, r0
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	0023      	movs	r3, r4
 8005314:	f000 fc9c 	bl	8005c50 <USB_WritePMA>
            ep->xfer_buff += len;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	197b      	adds	r3, r7, r5
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	18d2      	adds	r2, r2, r3
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d907      	bls.n	8005342 <USB_EPStartXfer+0x532>
            {
              ep->xfer_len_db -= len;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	197b      	adds	r3, r7, r5
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	621a      	str	r2, [r3, #32]
 8005340:	e007      	b.n	8005352 <USB_EPStartXfer+0x542>
            }
            else
            {
              len = ep->xfer_len_db;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	22ac      	movs	r2, #172	@ 0xac
 8005348:	18ba      	adds	r2, r7, r2
 800534a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	643b      	str	r3, [r7, #64]	@ 0x40
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d16d      	bne.n	800543a <USB_EPStartXfer+0x62a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2250      	movs	r2, #80	@ 0x50
 8005366:	5a9b      	ldrh	r3, [r3, r2]
 8005368:	b29b      	uxth	r3, r3
 800536a:	001a      	movs	r2, r3
 800536c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536e:	189b      	adds	r3, r3, r2
 8005370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	00da      	lsls	r2, r3, #3
 8005378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537a:	18d3      	adds	r3, r2, r3
 800537c:	4a6a      	ldr	r2, [pc, #424]	@ (8005528 <USB_EPStartXfer+0x718>)
 800537e:	4694      	mov	ip, r2
 8005380:	4463      	add	r3, ip
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
 8005384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	059b      	lsls	r3, r3, #22
 800538c:	0d9b      	lsrs	r3, r3, #22
 800538e:	b29a      	uxth	r2, r3
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	23ac      	movs	r3, #172	@ 0xac
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d108      	bne.n	80053b0 <USB_EPStartXfer+0x5a0>
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4a5f      	ldr	r2, [pc, #380]	@ (8005524 <USB_EPStartXfer+0x714>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	e05f      	b.n	8005470 <USB_EPStartXfer+0x660>
 80053b0:	22ac      	movs	r2, #172	@ 0xac
 80053b2:	18bb      	adds	r3, r7, r2
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80053b8:	d81d      	bhi.n	80053f6 <USB_EPStartXfer+0x5e6>
 80053ba:	18bb      	adds	r3, r7, r2
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	219c      	movs	r1, #156	@ 0x9c
 80053c2:	1878      	adds	r0, r7, r1
 80053c4:	6003      	str	r3, [r0, #0]
 80053c6:	18bb      	adds	r3, r7, r2
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	4013      	ands	r3, r2
 80053ce:	d004      	beq.n	80053da <USB_EPStartXfer+0x5ca>
 80053d0:	187b      	adds	r3, r7, r1
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	187a      	adds	r2, r7, r1
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29a      	uxth	r2, r3
 80053e0:	239c      	movs	r3, #156	@ 0x9c
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e03c      	b.n	8005470 <USB_EPStartXfer+0x660>
 80053f6:	22ac      	movs	r2, #172	@ 0xac
 80053f8:	18bb      	adds	r3, r7, r2
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	219c      	movs	r1, #156	@ 0x9c
 8005400:	1878      	adds	r0, r7, r1
 8005402:	6003      	str	r3, [r0, #0]
 8005404:	18bb      	adds	r3, r7, r2
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	221f      	movs	r2, #31
 800540a:	4013      	ands	r3, r2
 800540c:	d104      	bne.n	8005418 <USB_EPStartXfer+0x608>
 800540e:	187b      	adds	r3, r7, r1
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3b01      	subs	r3, #1
 8005414:	187a      	adds	r2, r7, r1
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	239c      	movs	r3, #156	@ 0x9c
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	b29b      	uxth	r3, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	b29b      	uxth	r3, r3
 800542e:	4a3d      	ldr	r2, [pc, #244]	@ (8005524 <USB_EPStartXfer+0x714>)
 8005430:	4313      	orrs	r3, r2
 8005432:	b29a      	uxth	r2, r3
 8005434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e01a      	b.n	8005470 <USB_EPStartXfer+0x660>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d116      	bne.n	8005470 <USB_EPStartXfer+0x660>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2250      	movs	r2, #80	@ 0x50
 8005446:	5a9b      	ldrh	r3, [r3, r2]
 8005448:	b29b      	uxth	r3, r3
 800544a:	001a      	movs	r2, r3
 800544c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800544e:	189b      	adds	r3, r3, r2
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	00da      	lsls	r2, r3, #3
 8005458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545a:	18d3      	adds	r3, r2, r3
 800545c:	4a32      	ldr	r2, [pc, #200]	@ (8005528 <USB_EPStartXfer+0x718>)
 800545e:	4694      	mov	ip, r2
 8005460:	4463      	add	r3, ip
 8005462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005464:	23ac      	movs	r3, #172	@ 0xac
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	b29a      	uxth	r2, r3
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005470:	2076      	movs	r0, #118	@ 0x76
 8005472:	183b      	adds	r3, r7, r0
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	8952      	ldrh	r2, [r2, #10]
 8005478:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6959      	ldr	r1, [r3, #20]
 800547e:	23ac      	movs	r3, #172	@ 0xac
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	b29c      	uxth	r4, r3
 8005486:	183b      	adds	r3, r7, r0
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	0023      	movs	r3, r4
 800548e:	f000 fbdf 	bl	8005c50 <USB_WritePMA>
 8005492:	e1ab      	b.n	80057ec <USB_EPStartXfer+0x9dc>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	20ac      	movs	r0, #172	@ 0xac
 800549a:	183a      	adds	r2, r7, r0
 800549c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	18d3      	adds	r3, r2, r3
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	2462      	movs	r4, #98	@ 0x62
 80054ae:	193b      	adds	r3, r7, r4
 80054b0:	491e      	ldr	r1, [pc, #120]	@ (800552c <USB_EPStartXfer+0x71c>)
 80054b2:	400a      	ands	r2, r1
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	193a      	adds	r2, r7, r4
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	491a      	ldr	r1, [pc, #104]	@ (8005530 <USB_EPStartXfer+0x720>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	b292      	uxth	r2, r2
 80054ca:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2250      	movs	r2, #80	@ 0x50
 80054d4:	5a9b      	ldrh	r3, [r3, r2]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	001a      	movs	r2, r3
 80054da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	00da      	lsls	r2, r3, #3
 80054e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054e8:	18d3      	adds	r3, r2, r3
 80054ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005520 <USB_EPStartXfer+0x710>)
 80054ec:	4694      	mov	ip, r2
 80054ee:	4463      	add	r3, ip
 80054f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054fc:	2576      	movs	r5, #118	@ 0x76
 80054fe:	197b      	adds	r3, r7, r5
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	8912      	ldrh	r2, [r2, #8]
 8005504:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6959      	ldr	r1, [r3, #20]
 800550a:	183b      	adds	r3, r7, r0
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	b29c      	uxth	r4, r3
 8005510:	197b      	adds	r3, r7, r5
 8005512:	881a      	ldrh	r2, [r3, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	0023      	movs	r3, r4
 8005518:	f000 fb9a 	bl	8005c50 <USB_WritePMA>
 800551c:	e166      	b.n	80057ec <USB_EPStartXfer+0x9dc>
 800551e:	46c0      	nop			@ (mov r8, r8)
 8005520:	00000402 	.word	0x00000402
 8005524:	ffff8000 	.word	0xffff8000
 8005528:	00000406 	.word	0x00000406
 800552c:	ffff8e8f 	.word	0xffff8e8f
 8005530:	ffff8080 	.word	0xffff8080
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	21ac      	movs	r1, #172	@ 0xac
 800553a:	187b      	adds	r3, r7, r1
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	18d3      	adds	r3, r2, r3
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	001a      	movs	r2, r3
 8005554:	2340      	movs	r3, #64	@ 0x40
 8005556:	4013      	ands	r3, r2
 8005558:	d100      	bne.n	800555c <USB_EPStartXfer+0x74c>
 800555a:	e09f      	b.n	800569c <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d16c      	bne.n	8005642 <USB_EPStartXfer+0x832>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2250      	movs	r2, #80	@ 0x50
 8005570:	5a9b      	ldrh	r3, [r3, r2]
 8005572:	b29b      	uxth	r3, r3
 8005574:	001a      	movs	r2, r3
 8005576:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005578:	189b      	adds	r3, r3, r2
 800557a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	00da      	lsls	r2, r3, #3
 8005582:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005584:	18d3      	adds	r3, r2, r3
 8005586:	4ad2      	ldr	r2, [pc, #840]	@ (80058d0 <USB_EPStartXfer+0xac0>)
 8005588:	4694      	mov	ip, r2
 800558a:	4463      	add	r3, ip
 800558c:	667b      	str	r3, [r7, #100]	@ 0x64
 800558e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	059b      	lsls	r3, r3, #22
 8005596:	0d9b      	lsrs	r3, r3, #22
 8005598:	b29a      	uxth	r2, r3
 800559a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d108      	bne.n	80055b8 <USB_EPStartXfer+0x7a8>
 80055a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	4ac9      	ldr	r2, [pc, #804]	@ (80058d4 <USB_EPStartXfer+0xac4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	e05f      	b.n	8005678 <USB_EPStartXfer+0x868>
 80055b8:	22ac      	movs	r2, #172	@ 0xac
 80055ba:	18bb      	adds	r3, r7, r2
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b3e      	cmp	r3, #62	@ 0x3e
 80055c0:	d81d      	bhi.n	80055fe <USB_EPStartXfer+0x7ee>
 80055c2:	18bb      	adds	r3, r7, r2
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	2198      	movs	r1, #152	@ 0x98
 80055ca:	1878      	adds	r0, r7, r1
 80055cc:	6003      	str	r3, [r0, #0]
 80055ce:	18bb      	adds	r3, r7, r2
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	4013      	ands	r3, r2
 80055d6:	d004      	beq.n	80055e2 <USB_EPStartXfer+0x7d2>
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	187a      	adds	r2, r7, r1
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	2398      	movs	r3, #152	@ 0x98
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	4313      	orrs	r3, r2
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e03c      	b.n	8005678 <USB_EPStartXfer+0x868>
 80055fe:	22ac      	movs	r2, #172	@ 0xac
 8005600:	18bb      	adds	r3, r7, r2
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2198      	movs	r1, #152	@ 0x98
 8005608:	1878      	adds	r0, r7, r1
 800560a:	6003      	str	r3, [r0, #0]
 800560c:	18bb      	adds	r3, r7, r2
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	221f      	movs	r2, #31
 8005612:	4013      	ands	r3, r2
 8005614:	d104      	bne.n	8005620 <USB_EPStartXfer+0x810>
 8005616:	187b      	adds	r3, r7, r1
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3b01      	subs	r3, #1
 800561c:	187a      	adds	r2, r7, r1
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	2398      	movs	r3, #152	@ 0x98
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	029b      	lsls	r3, r3, #10
 8005630:	b29b      	uxth	r3, r3
 8005632:	4313      	orrs	r3, r2
 8005634:	b29b      	uxth	r3, r3
 8005636:	4aa7      	ldr	r2, [pc, #668]	@ (80058d4 <USB_EPStartXfer+0xac4>)
 8005638:	4313      	orrs	r3, r2
 800563a:	b29a      	uxth	r2, r3
 800563c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e01a      	b.n	8005678 <USB_EPStartXfer+0x868>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d116      	bne.n	8005678 <USB_EPStartXfer+0x868>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2250      	movs	r2, #80	@ 0x50
 800564e:	5a9b      	ldrh	r3, [r3, r2]
 8005650:	b29b      	uxth	r3, r3
 8005652:	001a      	movs	r2, r3
 8005654:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005656:	189b      	adds	r3, r3, r2
 8005658:	673b      	str	r3, [r7, #112]	@ 0x70
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	00da      	lsls	r2, r3, #3
 8005660:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005662:	18d3      	adds	r3, r2, r3
 8005664:	4a9a      	ldr	r2, [pc, #616]	@ (80058d0 <USB_EPStartXfer+0xac0>)
 8005666:	4694      	mov	ip, r2
 8005668:	4463      	add	r3, ip
 800566a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800566c:	23ac      	movs	r3, #172	@ 0xac
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	b29a      	uxth	r2, r3
 8005674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005676:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005678:	2076      	movs	r0, #118	@ 0x76
 800567a:	183b      	adds	r3, r7, r0
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	8952      	ldrh	r2, [r2, #10]
 8005680:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6959      	ldr	r1, [r3, #20]
 8005686:	23ac      	movs	r3, #172	@ 0xac
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	b29c      	uxth	r4, r3
 800568e:	183b      	adds	r3, r7, r0
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	0023      	movs	r3, r4
 8005696:	f000 fadb 	bl	8005c50 <USB_WritePMA>
 800569a:	e0a7      	b.n	80057ec <USB_EPStartXfer+0x9dc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d16d      	bne.n	8005780 <USB_EPStartXfer+0x970>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2250      	movs	r2, #80	@ 0x50
 80056ac:	5a9b      	ldrh	r3, [r3, r2]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	001a      	movs	r2, r3
 80056b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056b4:	189b      	adds	r3, r3, r2
 80056b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	00da      	lsls	r2, r3, #3
 80056be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056c0:	18d3      	adds	r3, r2, r3
 80056c2:	4a85      	ldr	r2, [pc, #532]	@ (80058d8 <USB_EPStartXfer+0xac8>)
 80056c4:	4694      	mov	ip, r2
 80056c6:	4463      	add	r3, ip
 80056c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	059b      	lsls	r3, r3, #22
 80056d2:	0d9b      	lsrs	r3, r3, #22
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	23ac      	movs	r3, #172	@ 0xac
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d108      	bne.n	80056f6 <USB_EPStartXfer+0x8e6>
 80056e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	4a7a      	ldr	r2, [pc, #488]	@ (80058d4 <USB_EPStartXfer+0xac4>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e069      	b.n	80057ca <USB_EPStartXfer+0x9ba>
 80056f6:	22ac      	movs	r2, #172	@ 0xac
 80056f8:	18bb      	adds	r3, r7, r2
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80056fe:	d81d      	bhi.n	800573c <USB_EPStartXfer+0x92c>
 8005700:	18bb      	adds	r3, r7, r2
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	2194      	movs	r1, #148	@ 0x94
 8005708:	1878      	adds	r0, r7, r1
 800570a:	6003      	str	r3, [r0, #0]
 800570c:	18bb      	adds	r3, r7, r2
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	4013      	ands	r3, r2
 8005714:	d004      	beq.n	8005720 <USB_EPStartXfer+0x910>
 8005716:	187b      	adds	r3, r7, r1
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	187a      	adds	r2, r7, r1
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29a      	uxth	r2, r3
 8005726:	2394      	movs	r3, #148	@ 0x94
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	029b      	lsls	r3, r3, #10
 8005730:	b29b      	uxth	r3, r3
 8005732:	4313      	orrs	r3, r2
 8005734:	b29a      	uxth	r2, r3
 8005736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e046      	b.n	80057ca <USB_EPStartXfer+0x9ba>
 800573c:	22ac      	movs	r2, #172	@ 0xac
 800573e:	18bb      	adds	r3, r7, r2
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	2194      	movs	r1, #148	@ 0x94
 8005746:	1878      	adds	r0, r7, r1
 8005748:	6003      	str	r3, [r0, #0]
 800574a:	18bb      	adds	r3, r7, r2
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	221f      	movs	r2, #31
 8005750:	4013      	ands	r3, r2
 8005752:	d104      	bne.n	800575e <USB_EPStartXfer+0x94e>
 8005754:	187b      	adds	r3, r7, r1
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3b01      	subs	r3, #1
 800575a:	187a      	adds	r2, r7, r1
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29a      	uxth	r2, r3
 8005764:	2394      	movs	r3, #148	@ 0x94
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	029b      	lsls	r3, r3, #10
 800576e:	b29b      	uxth	r3, r3
 8005770:	4313      	orrs	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	4a57      	ldr	r2, [pc, #348]	@ (80058d4 <USB_EPStartXfer+0xac4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	b29a      	uxth	r2, r3
 800577a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	e024      	b.n	80057ca <USB_EPStartXfer+0x9ba>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d120      	bne.n	80057ca <USB_EPStartXfer+0x9ba>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2184      	movs	r1, #132	@ 0x84
 800578c:	187a      	adds	r2, r7, r1
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2250      	movs	r2, #80	@ 0x50
 8005794:	5a9b      	ldrh	r3, [r3, r2]
 8005796:	b29b      	uxth	r3, r3
 8005798:	001a      	movs	r2, r3
 800579a:	187b      	adds	r3, r7, r1
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	189b      	adds	r3, r3, r2
 80057a0:	187a      	adds	r2, r7, r1
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	00da      	lsls	r2, r3, #3
 80057aa:	187b      	adds	r3, r7, r1
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	18d3      	adds	r3, r2, r3
 80057b0:	4a49      	ldr	r2, [pc, #292]	@ (80058d8 <USB_EPStartXfer+0xac8>)
 80057b2:	4694      	mov	ip, r2
 80057b4:	4463      	add	r3, ip
 80057b6:	2180      	movs	r1, #128	@ 0x80
 80057b8:	187a      	adds	r2, r7, r1
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	23ac      	movs	r3, #172	@ 0xac
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	187b      	adds	r3, r7, r1
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057ca:	2076      	movs	r0, #118	@ 0x76
 80057cc:	183b      	adds	r3, r7, r0
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	8912      	ldrh	r2, [r2, #8]
 80057d2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6959      	ldr	r1, [r3, #20]
 80057d8:	23ac      	movs	r3, #172	@ 0xac
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	b29c      	uxth	r4, r3
 80057e0:	183b      	adds	r3, r7, r0
 80057e2:	881a      	ldrh	r2, [r3, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	0023      	movs	r3, r4
 80057e8:	f000 fa32 	bl	8005c50 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	18d3      	adds	r3, r2, r3
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	200a      	movs	r0, #10
 80057fc:	183b      	adds	r3, r7, r0
 80057fe:	4937      	ldr	r1, [pc, #220]	@ (80058dc <USB_EPStartXfer+0xacc>)
 8005800:	400a      	ands	r2, r1
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	183b      	adds	r3, r7, r0
 8005806:	183a      	adds	r2, r7, r0
 8005808:	8812      	ldrh	r2, [r2, #0]
 800580a:	2110      	movs	r1, #16
 800580c:	404a      	eors	r2, r1
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	183b      	adds	r3, r7, r0
 8005812:	183a      	adds	r2, r7, r0
 8005814:	8812      	ldrh	r2, [r2, #0]
 8005816:	2120      	movs	r1, #32
 8005818:	404a      	eors	r2, r1
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	18d3      	adds	r3, r2, r3
 8005826:	183a      	adds	r2, r7, r0
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	492d      	ldr	r1, [pc, #180]	@ (80058e0 <USB_EPStartXfer+0xad0>)
 800582c:	430a      	orrs	r2, r1
 800582e:	b292      	uxth	r2, r2
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	e0cc      	b.n	80059ce <USB_EPStartXfer+0xbbe>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	7b1b      	ldrb	r3, [r3, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d159      	bne.n	80058f0 <USB_EPStartXfer+0xae0>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d11b      	bne.n	800587c <USB_EPStartXfer+0xa6c>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d117      	bne.n	800587c <USB_EPStartXfer+0xa6c>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29a      	uxth	r2, r3
 800585a:	208e      	movs	r0, #142	@ 0x8e
 800585c:	183b      	adds	r3, r7, r0
 800585e:	4921      	ldr	r1, [pc, #132]	@ (80058e4 <USB_EPStartXfer+0xad4>)
 8005860:	400a      	ands	r2, r1
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	18d3      	adds	r3, r2, r3
 800586e:	183a      	adds	r2, r7, r0
 8005870:	8812      	ldrh	r2, [r2, #0]
 8005872:	491d      	ldr	r1, [pc, #116]	@ (80058e8 <USB_EPStartXfer+0xad8>)
 8005874:	430a      	orrs	r2, r1
 8005876:	b292      	uxth	r2, r2
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	e016      	b.n	80058aa <USB_EPStartXfer+0xa9a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	18d3      	adds	r3, r2, r3
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29a      	uxth	r2, r3
 800588a:	208c      	movs	r0, #140	@ 0x8c
 800588c:	183b      	adds	r3, r7, r0
 800588e:	4917      	ldr	r1, [pc, #92]	@ (80058ec <USB_EPStartXfer+0xadc>)
 8005890:	400a      	ands	r2, r1
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	18d3      	adds	r3, r2, r3
 800589e:	183a      	adds	r2, r7, r0
 80058a0:	8812      	ldrh	r2, [r2, #0]
 80058a2:	490f      	ldr	r1, [pc, #60]	@ (80058e0 <USB_EPStartXfer+0xad0>)
 80058a4:	430a      	orrs	r2, r1
 80058a6:	b292      	uxth	r2, r2
 80058a8:	801a      	strh	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d907      	bls.n	80058c6 <USB_EPStartXfer+0xab6>
      {
        ep->xfer_len -= ep->maxpacket;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	619a      	str	r2, [r3, #24]
 80058c4:	e05e      	b.n	8005984 <USB_EPStartXfer+0xb74>
      }
      else
      {
        ep->xfer_len = 0U;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	619a      	str	r2, [r3, #24]
 80058cc:	e05a      	b.n	8005984 <USB_EPStartXfer+0xb74>
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	00000406 	.word	0x00000406
 80058d4:	ffff8000 	.word	0xffff8000
 80058d8:	00000402 	.word	0x00000402
 80058dc:	ffff8fbf 	.word	0xffff8fbf
 80058e0:	ffff8080 	.word	0xffff8080
 80058e4:	ffff8f8f 	.word	0xffff8f8f
 80058e8:	ffff8180 	.word	0xffff8180
 80058ec:	ffff8e8f 	.word	0xffff8e8f
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	78db      	ldrb	r3, [r3, #3]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d13b      	bne.n	8005970 <USB_EPStartXfer+0xb60>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d041      	beq.n	8005984 <USB_EPStartXfer+0xb74>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	18d2      	adds	r2, r2, r3
 800590a:	2192      	movs	r1, #146	@ 0x92
 800590c:	187b      	adds	r3, r7, r1
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005912:	187b      	adds	r3, r7, r1
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	2380      	movs	r3, #128	@ 0x80
 8005918:	01db      	lsls	r3, r3, #7
 800591a:	4013      	ands	r3, r2
 800591c:	d004      	beq.n	8005928 <USB_EPStartXfer+0xb18>
 800591e:	187b      	adds	r3, r7, r1
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	2240      	movs	r2, #64	@ 0x40
 8005924:	4013      	ands	r3, r2
 8005926:	d10b      	bne.n	8005940 <USB_EPStartXfer+0xb30>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005928:	2192      	movs	r1, #146	@ 0x92
 800592a:	187b      	adds	r3, r7, r1
 800592c:	881a      	ldrh	r2, [r3, #0]
 800592e:	2380      	movs	r3, #128	@ 0x80
 8005930:	01db      	lsls	r3, r3, #7
 8005932:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005934:	d126      	bne.n	8005984 <USB_EPStartXfer+0xb74>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005936:	187b      	adds	r3, r7, r1
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	2240      	movs	r2, #64	@ 0x40
 800593c:	4013      	ands	r3, r2
 800593e:	d121      	bne.n	8005984 <USB_EPStartXfer+0xb74>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29a      	uxth	r2, r3
 800594e:	2090      	movs	r0, #144	@ 0x90
 8005950:	183b      	adds	r3, r7, r0
 8005952:	4921      	ldr	r1, [pc, #132]	@ (80059d8 <USB_EPStartXfer+0xbc8>)
 8005954:	400a      	ands	r2, r1
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	18d3      	adds	r3, r2, r3
 8005962:	183a      	adds	r2, r7, r0
 8005964:	8812      	ldrh	r2, [r2, #0]
 8005966:	491d      	ldr	r1, [pc, #116]	@ (80059dc <USB_EPStartXfer+0xbcc>)
 8005968:	430a      	orrs	r2, r1
 800596a:	b292      	uxth	r2, r2
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	e009      	b.n	8005984 <USB_EPStartXfer+0xb74>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	78db      	ldrb	r3, [r3, #3]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d103      	bne.n	8005980 <USB_EPStartXfer+0xb70>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2200      	movs	r2, #0
 800597c:	619a      	str	r2, [r3, #24]
 800597e:	e001      	b.n	8005984 <USB_EPStartXfer+0xb74>
      }
      else
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e025      	b.n	80059d0 <USB_EPStartXfer+0xbc0>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	18d3      	adds	r3, r2, r3
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29a      	uxth	r2, r3
 8005992:	208a      	movs	r0, #138	@ 0x8a
 8005994:	183b      	adds	r3, r7, r0
 8005996:	4912      	ldr	r1, [pc, #72]	@ (80059e0 <USB_EPStartXfer+0xbd0>)
 8005998:	400a      	ands	r2, r1
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	183b      	adds	r3, r7, r0
 800599e:	183a      	adds	r2, r7, r0
 80059a0:	8812      	ldrh	r2, [r2, #0]
 80059a2:	2180      	movs	r1, #128	@ 0x80
 80059a4:	0149      	lsls	r1, r1, #5
 80059a6:	404a      	eors	r2, r1
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	183b      	adds	r3, r7, r0
 80059ac:	183a      	adds	r2, r7, r0
 80059ae:	8812      	ldrh	r2, [r2, #0]
 80059b0:	2180      	movs	r1, #128	@ 0x80
 80059b2:	0189      	lsls	r1, r1, #6
 80059b4:	404a      	eors	r2, r1
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	18d3      	adds	r3, r2, r3
 80059c2:	183a      	adds	r2, r7, r0
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	4907      	ldr	r1, [pc, #28]	@ (80059e4 <USB_EPStartXfer+0xbd4>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	b292      	uxth	r2, r2
 80059cc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b02c      	add	sp, #176	@ 0xb0
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}
 80059d8:	ffff8f8f 	.word	0xffff8f8f
 80059dc:	ffff80c0 	.word	0xffff80c0
 80059e0:	ffffbf8f 	.word	0xffffbf8f
 80059e4:	ffff8080 	.word	0xffff8080

080059e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01d      	beq.n	8005a36 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	18d3      	adds	r3, r2, r3
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	200c      	movs	r0, #12
 8005a0a:	183b      	adds	r3, r7, r0
 8005a0c:	491b      	ldr	r1, [pc, #108]	@ (8005a7c <USB_EPSetStall+0x94>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	183b      	adds	r3, r7, r0
 8005a14:	183a      	adds	r2, r7, r0
 8005a16:	8812      	ldrh	r2, [r2, #0]
 8005a18:	2110      	movs	r1, #16
 8005a1a:	404a      	eors	r2, r1
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	18d3      	adds	r3, r2, r3
 8005a28:	183a      	adds	r2, r7, r0
 8005a2a:	8812      	ldrh	r2, [r2, #0]
 8005a2c:	4914      	ldr	r1, [pc, #80]	@ (8005a80 <USB_EPSetStall+0x98>)
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	b292      	uxth	r2, r2
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e01d      	b.n	8005a72 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	18d3      	adds	r3, r2, r3
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	200e      	movs	r0, #14
 8005a46:	183b      	adds	r3, r7, r0
 8005a48:	490e      	ldr	r1, [pc, #56]	@ (8005a84 <USB_EPSetStall+0x9c>)
 8005a4a:	400a      	ands	r2, r1
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	183b      	adds	r3, r7, r0
 8005a50:	183a      	adds	r2, r7, r0
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	2180      	movs	r1, #128	@ 0x80
 8005a56:	0149      	lsls	r1, r1, #5
 8005a58:	404a      	eors	r2, r1
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	18d3      	adds	r3, r2, r3
 8005a66:	183a      	adds	r2, r7, r0
 8005a68:	8812      	ldrh	r2, [r2, #0]
 8005a6a:	4905      	ldr	r1, [pc, #20]	@ (8005a80 <USB_EPSetStall+0x98>)
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	b292      	uxth	r2, r2
 8005a70:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b004      	add	sp, #16
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	ffff8fbf 	.word	0xffff8fbf
 8005a80:	ffff8080 	.word	0xffff8080
 8005a84:	ffffbf8f 	.word	0xffffbf8f

08005a88 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d046      	beq.n	8005b28 <USB_EPClearStall+0xa0>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	18d2      	adds	r2, r2, r3
 8005aa4:	2110      	movs	r1, #16
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	8812      	ldrh	r2, [r2, #0]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	2240      	movs	r2, #64	@ 0x40
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d016      	beq.n	8005ae4 <USB_EPClearStall+0x5c>
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	18d3      	adds	r3, r2, r3
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	200e      	movs	r0, #14
 8005ac6:	183b      	adds	r3, r7, r0
 8005ac8:	493f      	ldr	r1, [pc, #252]	@ (8005bc8 <USB_EPClearStall+0x140>)
 8005aca:	400a      	ands	r2, r1
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	18d3      	adds	r3, r2, r3
 8005ad8:	183a      	adds	r2, r7, r0
 8005ada:	8812      	ldrh	r2, [r2, #0]
 8005adc:	493b      	ldr	r1, [pc, #236]	@ (8005bcc <USB_EPClearStall+0x144>)
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	b292      	uxth	r2, r2
 8005ae2:	801a      	strh	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d068      	beq.n	8005bbe <USB_EPClearStall+0x136>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	18d3      	adds	r3, r2, r3
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	200c      	movs	r0, #12
 8005afc:	183b      	adds	r3, r7, r0
 8005afe:	4934      	ldr	r1, [pc, #208]	@ (8005bd0 <USB_EPClearStall+0x148>)
 8005b00:	400a      	ands	r2, r1
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	183b      	adds	r3, r7, r0
 8005b06:	183a      	adds	r2, r7, r0
 8005b08:	8812      	ldrh	r2, [r2, #0]
 8005b0a:	2120      	movs	r1, #32
 8005b0c:	404a      	eors	r2, r1
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	18d3      	adds	r3, r2, r3
 8005b1a:	183a      	adds	r2, r7, r0
 8005b1c:	8812      	ldrh	r2, [r2, #0]
 8005b1e:	492d      	ldr	r1, [pc, #180]	@ (8005bd4 <USB_EPClearStall+0x14c>)
 8005b20:	430a      	orrs	r2, r1
 8005b22:	b292      	uxth	r2, r2
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e04a      	b.n	8005bbe <USB_EPClearStall+0x136>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	2116      	movs	r1, #22
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	2380      	movs	r3, #128	@ 0x80
 8005b40:	01db      	lsls	r3, r3, #7
 8005b42:	4013      	ands	r3, r2
 8005b44:	d016      	beq.n	8005b74 <USB_EPClearStall+0xec>
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	18d3      	adds	r3, r2, r3
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	2014      	movs	r0, #20
 8005b56:	183b      	adds	r3, r7, r0
 8005b58:	491b      	ldr	r1, [pc, #108]	@ (8005bc8 <USB_EPClearStall+0x140>)
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	18d3      	adds	r3, r2, r3
 8005b68:	183a      	adds	r2, r7, r0
 8005b6a:	8812      	ldrh	r2, [r2, #0]
 8005b6c:	491a      	ldr	r1, [pc, #104]	@ (8005bd8 <USB_EPClearStall+0x150>)
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	b292      	uxth	r2, r2
 8005b72:	801a      	strh	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	18d3      	adds	r3, r2, r3
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	2012      	movs	r0, #18
 8005b84:	183b      	adds	r3, r7, r0
 8005b86:	4915      	ldr	r1, [pc, #84]	@ (8005bdc <USB_EPClearStall+0x154>)
 8005b88:	400a      	ands	r2, r1
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	183b      	adds	r3, r7, r0
 8005b8e:	183a      	adds	r2, r7, r0
 8005b90:	8812      	ldrh	r2, [r2, #0]
 8005b92:	2180      	movs	r1, #128	@ 0x80
 8005b94:	0149      	lsls	r1, r1, #5
 8005b96:	404a      	eors	r2, r1
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	183b      	adds	r3, r7, r0
 8005b9c:	183a      	adds	r2, r7, r0
 8005b9e:	8812      	ldrh	r2, [r2, #0]
 8005ba0:	2180      	movs	r1, #128	@ 0x80
 8005ba2:	0189      	lsls	r1, r1, #6
 8005ba4:	404a      	eors	r2, r1
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	18d3      	adds	r3, r2, r3
 8005bb2:	183a      	adds	r2, r7, r0
 8005bb4:	8812      	ldrh	r2, [r2, #0]
 8005bb6:	4907      	ldr	r1, [pc, #28]	@ (8005bd4 <USB_EPClearStall+0x14c>)
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b006      	add	sp, #24
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	ffff8f8f 	.word	0xffff8f8f
 8005bcc:	ffff80c0 	.word	0xffff80c0
 8005bd0:	ffff8fbf 	.word	0xffff8fbf
 8005bd4:	ffff8080 	.word	0xffff8080
 8005bd8:	ffffc080 	.word	0xffffc080
 8005bdc:	ffffbf8f 	.word	0xffffbf8f

08005be0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	000a      	movs	r2, r1
 8005bea:	1cfb      	adds	r3, r7, #3
 8005bec:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005bee:	1cfb      	adds	r3, r7, #3
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d103      	bne.n	8005bfe <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	224c      	movs	r2, #76	@ 0x4c
 8005bfa:	2180      	movs	r1, #128	@ 0x80
 8005bfc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	0018      	movs	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2258      	movs	r2, #88	@ 0x58
 8005c14:	5a9b      	ldrh	r3, [r3, r2]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4a05      	ldr	r2, [pc, #20]	@ (8005c30 <USB_DevConnect+0x28>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	b299      	uxth	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2258      	movs	r2, #88	@ 0x58
 8005c22:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b002      	add	sp, #8
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	46c0      	nop			@ (mov r8, r8)
 8005c30:	ffff8000 	.word	0xffff8000

08005c34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2244      	movs	r2, #68	@ 0x44
 8005c40:	5a9b      	ldrh	r3, [r3, r2]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005c46:	68fb      	ldr	r3, [r7, #12]
}
 8005c48:	0018      	movs	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b004      	add	sp, #16
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	@ 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	1dbb      	adds	r3, r7, #6
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	1d3b      	adds	r3, r7, #4
 8005c62:	1c0a      	adds	r2, r1, #0
 8005c64:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c78:	1dbb      	adds	r3, r7, #6
 8005c7a:	881a      	ldrh	r2, [r3, #0]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	18d3      	adds	r3, r2, r3
 8005c80:	2280      	movs	r2, #128	@ 0x80
 8005c82:	00d2      	lsls	r2, r2, #3
 8005c84:	4694      	mov	ip, r2
 8005c86:	4463      	add	r3, ip
 8005c88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8e:	e021      	b.n	8005cd4 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	2112      	movs	r1, #18
 8005c96:	187b      	adds	r3, r7, r1
 8005c98:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b21b      	sxth	r3, r3
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	b21a      	sxth	r2, r3
 8005ca6:	187b      	adds	r3, r7, r1
 8005ca8:	2000      	movs	r0, #0
 8005caa:	5e1b      	ldrsh	r3, [r3, r0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	b21a      	sxth	r2, r3
 8005cb0:	187b      	adds	r3, r7, r1
 8005cb2:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	187a      	adds	r2, r7, r1
 8005cb8:	8812      	ldrh	r2, [r2, #0]
 8005cba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1da      	bne.n	8005c90 <USB_WritePMA+0x40>
  }
}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	46c0      	nop			@ (mov r8, r8)
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b00a      	add	sp, #40	@ 0x28
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	@ 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	0019      	movs	r1, r3
 8005cf0:	1dbb      	adds	r3, r7, #6
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	1c0a      	adds	r2, r1, #0
 8005cf8:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d0c:	1dbb      	adds	r3, r7, #6
 8005d0e:	881a      	ldrh	r2, [r3, #0]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	18d3      	adds	r3, r2, r3
 8005d14:	2280      	movs	r2, #128	@ 0x80
 8005d16:	00d2      	lsls	r2, r2, #3
 8005d18:	4694      	mov	ip, r2
 8005d1a:	4463      	add	r3, ip
 8005d1c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d22:	e018      	b.n	8005d56 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	3302      	adds	r3, #2
 8005d30:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	3b01      	subs	r3, #1
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e3      	bne.n	8005d24 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005d5c:	1d3b      	adds	r3, r7, #4
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	2201      	movs	r2, #1
 8005d62:	4013      	ands	r3, r2
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	701a      	strb	r2, [r3, #0]
  }
}
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b00a      	add	sp, #40	@ 0x28
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	000a      	movs	r2, r1
 8005d8c:	1cfb      	adds	r3, r7, #3
 8005d8e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005d90:	230f      	movs	r3, #15
 8005d92:	18fb      	adds	r3, r7, r3
 8005d94:	2200      	movs	r2, #0
 8005d96:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7c1b      	ldrb	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d116      	bne.n	8005dce <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005da0:	2380      	movs	r3, #128	@ 0x80
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	2181      	movs	r1, #129	@ 0x81
 8005daa:	f002 f81e 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005db4:	2380      	movs	r3, #128	@ 0x80
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	f002 f814 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	23b6      	movs	r3, #182	@ 0xb6
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	2101      	movs	r1, #1
 8005dca:	50d1      	str	r1, [r2, r3]
 8005dcc:	e013      	b.n	8005df6 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	2340      	movs	r3, #64	@ 0x40
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	2181      	movs	r1, #129	@ 0x81
 8005dd6:	f002 f808 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	2340      	movs	r3, #64	@ 0x40
 8005de4:	2202      	movs	r2, #2
 8005de6:	2101      	movs	r1, #1
 8005de8:	f001 ffff 	bl	8007dea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	23b6      	movs	r3, #182	@ 0xb6
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2101      	movs	r1, #1
 8005df4:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	2308      	movs	r3, #8
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	2182      	movs	r1, #130	@ 0x82
 8005dfe:	f001 fff4 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e08:	2387      	movs	r3, #135	@ 0x87
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f002 f983 	bl	8008118 <USBD_static_malloc>
 8005e12:	0001      	movs	r1, r0
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	23ae      	movs	r3, #174	@ 0xae
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	23ae      	movs	r3, #174	@ 0xae
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	58d3      	ldr	r3, [r2, r3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005e28:	230f      	movs	r3, #15
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	e02c      	b.n	8005e8c <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	23ae      	movs	r3, #174	@ 0xae
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	58d3      	ldr	r3, [r2, r3]
 8005e3a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	23af      	movs	r3, #175	@ 0xaf
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	58d3      	ldr	r3, [r2, r3]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	2385      	movs	r3, #133	@ 0x85
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	2100      	movs	r1, #0
 8005e50:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	2386      	movs	r3, #134	@ 0x86
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	2100      	movs	r1, #0
 8005e5a:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7c1b      	ldrb	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	2381      	movs	r3, #129	@ 0x81
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	58d2      	ldr	r2, [r2, r3]
 8005e6c:	2380      	movs	r3, #128	@ 0x80
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	2101      	movs	r1, #1
 8005e74:	f002 f903 	bl	800807e <USBD_LL_PrepareReceive>
 8005e78:	e008      	b.n	8005e8c <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	2381      	movs	r3, #129	@ 0x81
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	58d2      	ldr	r2, [r2, r3]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	2340      	movs	r3, #64	@ 0x40
 8005e86:	2101      	movs	r1, #1
 8005e88:	f002 f8f9 	bl	800807e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005e8c:	230f      	movs	r3, #15
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	781b      	ldrb	r3, [r3, #0]
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b004      	add	sp, #16
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	000a      	movs	r2, r1
 8005ea4:	1cfb      	adds	r3, r7, #3
 8005ea6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005ea8:	230f      	movs	r3, #15
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2181      	movs	r1, #129	@ 0x81
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f001 ffcf 	bl	8007e58 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f001 ffc7 	bl	8007e58 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	23b6      	movs	r3, #182	@ 0xb6
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2182      	movs	r1, #130	@ 0x82
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f001 ffbd 	bl	8007e58 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	23ae      	movs	r3, #174	@ 0xae
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	58d3      	ldr	r3, [r2, r3]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d011      	beq.n	8005f14 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	23af      	movs	r3, #175	@ 0xaf
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	58d3      	ldr	r3, [r2, r3]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	23ae      	movs	r3, #174	@ 0xae
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	58d3      	ldr	r3, [r2, r3]
 8005f04:	0018      	movs	r0, r3
 8005f06:	f002 f913 	bl	8008130 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	23ae      	movs	r3, #174	@ 0xae
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	2100      	movs	r1, #0
 8005f12:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005f14:	230f      	movs	r3, #15
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	781b      	ldrb	r3, [r3, #0]
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b004      	add	sp, #16
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	23ae      	movs	r3, #174	@ 0xae
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	58d3      	ldr	r3, [r2, r3]
 8005f36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f38:	230f      	movs	r3, #15
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005f40:	230c      	movs	r3, #12
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	2200      	movs	r2, #0
 8005f46:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005f48:	2317      	movs	r3, #23
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	001a      	movs	r2, r3
 8005f56:	2360      	movs	r3, #96	@ 0x60
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d03d      	beq.n	8005fd8 <USBD_CDC_Setup+0xb4>
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d000      	beq.n	8005f62 <USBD_CDC_Setup+0x3e>
 8005f60:	e094      	b.n	800608c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	88db      	ldrh	r3, [r3, #6]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d02b      	beq.n	8005fc2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b25b      	sxtb	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da12      	bge.n	8005f9a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	23af      	movs	r3, #175	@ 0xaf
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	58d3      	ldr	r3, [r2, r3]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005f82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	88d2      	ldrh	r2, [r2, #6]
 8005f88:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005f8a:	6939      	ldr	r1, [r7, #16]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	88da      	ldrh	r2, [r3, #6]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f001 fb79 	bl	800768a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005f98:	e083      	b.n	80060a2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	7859      	ldrb	r1, [r3, #1]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	88db      	ldrh	r3, [r3, #6]
 8005faa:	b2d9      	uxtb	r1, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4a40      	ldr	r2, [pc, #256]	@ (80060b0 <USBD_CDC_Setup+0x18c>)
 8005fb0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005fb2:	6939      	ldr	r1, [r7, #16]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	88da      	ldrh	r2, [r3, #6]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f001 fb98 	bl	80076f0 <USBD_CtlPrepareRx>
      break;
 8005fc0:	e06f      	b.n	80060a2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	23af      	movs	r3, #175	@ 0xaf
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	58d3      	ldr	r3, [r2, r3]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	7850      	ldrb	r0, [r2, #1]
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4798      	blx	r3
      break;
 8005fd6:	e064      	b.n	80060a2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b0b      	cmp	r3, #11
 8005fde:	d037      	beq.n	8006050 <USBD_CDC_Setup+0x12c>
 8005fe0:	dc47      	bgt.n	8006072 <USBD_CDC_Setup+0x14e>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <USBD_CDC_Setup+0xc8>
 8005fe6:	2b0a      	cmp	r3, #10
 8005fe8:	d019      	beq.n	800601e <USBD_CDC_Setup+0xfa>
 8005fea:	e042      	b.n	8006072 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	23a7      	movs	r3, #167	@ 0xa7
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	5cd3      	ldrb	r3, [r2, r3]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d107      	bne.n	8006008 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005ff8:	230c      	movs	r3, #12
 8005ffa:	18f9      	adds	r1, r7, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	0018      	movs	r0, r3
 8006002:	f001 fb42 	bl	800768a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006006:	e040      	b.n	800608a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	0011      	movs	r1, r2
 800600e:	0018      	movs	r0, r3
 8006010:	f001 fabd 	bl	800758e <USBD_CtlError>
            ret = USBD_FAIL;
 8006014:	2317      	movs	r3, #23
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	2202      	movs	r2, #2
 800601a:	701a      	strb	r2, [r3, #0]
          break;
 800601c:	e035      	b.n	800608a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	23a7      	movs	r3, #167	@ 0xa7
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	5cd3      	ldrb	r3, [r2, r3]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d107      	bne.n	800603a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800602a:	230f      	movs	r3, #15
 800602c:	18f9      	adds	r1, r7, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	0018      	movs	r0, r3
 8006034:	f001 fb29 	bl	800768a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006038:	e027      	b.n	800608a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	0011      	movs	r1, r2
 8006040:	0018      	movs	r0, r3
 8006042:	f001 faa4 	bl	800758e <USBD_CtlError>
            ret = USBD_FAIL;
 8006046:	2317      	movs	r3, #23
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
          break;
 800604e:	e01c      	b.n	800608a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	23a7      	movs	r3, #167	@ 0xa7
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	5cd3      	ldrb	r3, [r2, r3]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d015      	beq.n	8006088 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	0011      	movs	r1, r2
 8006062:	0018      	movs	r0, r3
 8006064:	f001 fa93 	bl	800758e <USBD_CtlError>
            ret = USBD_FAIL;
 8006068:	2317      	movs	r3, #23
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	2202      	movs	r2, #2
 800606e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8006070:	e00a      	b.n	8006088 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0011      	movs	r1, r2
 8006078:	0018      	movs	r0, r3
 800607a:	f001 fa88 	bl	800758e <USBD_CtlError>
          ret = USBD_FAIL;
 800607e:	2317      	movs	r3, #23
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	2202      	movs	r2, #2
 8006084:	701a      	strb	r2, [r3, #0]
          break;
 8006086:	e000      	b.n	800608a <USBD_CDC_Setup+0x166>
          break;
 8006088:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800608a:	e00a      	b.n	80060a2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0011      	movs	r1, r2
 8006092:	0018      	movs	r0, r3
 8006094:	f001 fa7b 	bl	800758e <USBD_CtlError>
      ret = USBD_FAIL;
 8006098:	2317      	movs	r3, #23
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	2202      	movs	r2, #2
 800609e:	701a      	strb	r2, [r3, #0]
      break;
 80060a0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80060a2:	2317      	movs	r3, #23
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	781b      	ldrb	r3, [r3, #0]
}
 80060a8:	0018      	movs	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b006      	add	sp, #24
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	00000201 	.word	0x00000201

080060b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	000a      	movs	r2, r1
 80060be:	1cfb      	adds	r3, r7, #3
 80060c0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	23ae      	movs	r3, #174	@ 0xae
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	58d3      	ldr	r3, [r2, r3]
 80060ca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	23b0      	movs	r3, #176	@ 0xb0
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	58d3      	ldr	r3, [r2, r3]
 80060d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	23ae      	movs	r3, #174	@ 0xae
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	58d3      	ldr	r3, [r2, r3]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03e      	beq.n	8006160 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060e2:	1cfb      	adds	r3, r7, #3
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	0013      	movs	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	189b      	adds	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	18cb      	adds	r3, r1, r3
 80060f2:	331c      	adds	r3, #28
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d02b      	beq.n	8006152 <USBD_CDC_DataIn+0x9e>
 80060fa:	1cfb      	adds	r3, r7, #3
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	0013      	movs	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	189b      	adds	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	18cb      	adds	r3, r1, r3
 800610a:	331c      	adds	r3, #28
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	1cfb      	adds	r3, r7, #3
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	0013      	movs	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	189b      	adds	r3, r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	18cb      	adds	r3, r1, r3
 800611e:	3320      	adds	r3, #32
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	0019      	movs	r1, r3
 8006124:	f7fa f876 	bl	8000214 <__aeabi_uidivmod>
 8006128:	1e0b      	subs	r3, r1, #0
 800612a:	d112      	bne.n	8006152 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800612c:	1cfb      	adds	r3, r7, #3
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	0013      	movs	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	189b      	adds	r3, r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	18cb      	adds	r3, r1, r3
 800613c:	331c      	adds	r3, #28
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006142:	1cfb      	adds	r3, r7, #3
 8006144:	7819      	ldrb	r1, [r3, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	2300      	movs	r3, #0
 800614a:	2200      	movs	r2, #0
 800614c:	f001 ff60 	bl	8008010 <USBD_LL_Transmit>
 8006150:	e004      	b.n	800615c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	2385      	movs	r3, #133	@ 0x85
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	2100      	movs	r1, #0
 800615a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b004      	add	sp, #16
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	000a      	movs	r2, r1
 8006174:	1cfb      	adds	r3, r7, #3
 8006176:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	23ae      	movs	r3, #174	@ 0xae
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	58d3      	ldr	r3, [r2, r3]
 8006180:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006182:	1cfb      	adds	r3, r7, #3
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	0011      	movs	r1, r2
 800618a:	0018      	movs	r0, r3
 800618c:	f001 ffae 	bl	80080ec <USBD_LL_GetRxDataSize>
 8006190:	0001      	movs	r1, r0
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	2383      	movs	r3, #131	@ 0x83
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	23ae      	movs	r3, #174	@ 0xae
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	58d3      	ldr	r3, [r2, r3]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d011      	beq.n	80061ca <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	23af      	movs	r3, #175	@ 0xaf
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	58d3      	ldr	r3, [r2, r3]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	2381      	movs	r3, #129	@ 0x81
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	58c8      	ldr	r0, [r1, r3]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2183      	movs	r1, #131	@ 0x83
 80061bc:	0089      	lsls	r1, r1, #2
 80061be:	468c      	mov	ip, r1
 80061c0:	4463      	add	r3, ip
 80061c2:	0019      	movs	r1, r3
 80061c4:	4790      	blx	r2

    return USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80061ca:	2302      	movs	r3, #2
  }
}
 80061cc:	0018      	movs	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b004      	add	sp, #16
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	23ae      	movs	r3, #174	@ 0xae
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	58d3      	ldr	r3, [r2, r3]
 80061e4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	23af      	movs	r3, #175	@ 0xaf
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	58d3      	ldr	r3, [r2, r3]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d018      	beq.n	8006224 <USBD_CDC_EP0_RxReady+0x50>
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	2380      	movs	r3, #128	@ 0x80
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
 80061fa:	2bff      	cmp	r3, #255	@ 0xff
 80061fc:	d012      	beq.n	8006224 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	23af      	movs	r3, #175	@ 0xaf
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	58d3      	ldr	r3, [r2, r3]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	68f9      	ldr	r1, [r7, #12]
 800620a:	2280      	movs	r2, #128	@ 0x80
 800620c:	0092      	lsls	r2, r2, #2
 800620e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8006210:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4c06      	ldr	r4, [pc, #24]	@ (8006230 <USBD_CDC_EP0_RxReady+0x5c>)
 8006216:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006218:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	2380      	movs	r3, #128	@ 0x80
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	21ff      	movs	r1, #255	@ 0xff
 8006222:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b005      	add	sp, #20
 800622c:	bd90      	pop	{r4, r7, pc}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	00000201 	.word	0x00000201

08006234 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2243      	movs	r2, #67	@ 0x43
 8006240:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006242:	4b02      	ldr	r3, [pc, #8]	@ (800624c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b002      	add	sp, #8
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000094 	.word	0x20000094

08006250 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2243      	movs	r2, #67	@ 0x43
 800625c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800625e:	4b02      	ldr	r3, [pc, #8]	@ (8006268 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8006260:	0018      	movs	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	b002      	add	sp, #8
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000050 	.word	0x20000050

0800626c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2243      	movs	r2, #67	@ 0x43
 8006278:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800627a:	4b02      	ldr	r3, [pc, #8]	@ (8006284 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b002      	add	sp, #8
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200000d8 	.word	0x200000d8

08006288 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	220a      	movs	r2, #10
 8006294:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006296:	4b02      	ldr	r3, [pc, #8]	@ (80062a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8006298:	0018      	movs	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	b002      	add	sp, #8
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	2000000c 	.word	0x2000000c

080062a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80062ae:	200f      	movs	r0, #15
 80062b0:	183b      	adds	r3, r7, r0
 80062b2:	2202      	movs	r2, #2
 80062b4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	23af      	movs	r3, #175	@ 0xaf
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80062c6:	183b      	adds	r3, r7, r0
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80062cc:	230f      	movs	r3, #15
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	781b      	ldrb	r3, [r3, #0]
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b004      	add	sp, #16
 80062d8:	bd80      	pop	{r7, pc}

080062da <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b086      	sub	sp, #24
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	1dbb      	adds	r3, r7, #6
 80062e6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	23ae      	movs	r3, #174	@ 0xae
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	58d3      	ldr	r3, [r2, r3]
 80062f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	2382      	movs	r3, #130	@ 0x82
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80062fc:	1dbb      	adds	r3, r7, #6
 80062fe:	8819      	ldrh	r1, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	2384      	movs	r3, #132	@ 0x84
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	0018      	movs	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	b006      	add	sp, #24
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	23ae      	movs	r3, #174	@ 0xae
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	58d3      	ldr	r3, [r2, r3]
 8006324:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	2381      	movs	r3, #129	@ 0x81
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	0018      	movs	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	b004      	add	sp, #16
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	23ae      	movs	r3, #174	@ 0xae
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	58d3      	ldr	r3, [r2, r3]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	23ae      	movs	r3, #174	@ 0xae
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	58d3      	ldr	r3, [r2, r3]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d019      	beq.n	800638c <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7c1b      	ldrb	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	2381      	movs	r3, #129	@ 0x81
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	58d2      	ldr	r2, [r2, r3]
 8006368:	2380      	movs	r3, #128	@ 0x80
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	2101      	movs	r1, #1
 8006370:	f001 fe85 	bl	800807e <USBD_LL_PrepareReceive>
 8006374:	e008      	b.n	8006388 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	2381      	movs	r3, #129	@ 0x81
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	58d2      	ldr	r2, [r2, r3]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	2340      	movs	r3, #64	@ 0x40
 8006382:	2101      	movs	r1, #1
 8006384:	f001 fe7b 	bl	800807e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800638c:	2302      	movs	r3, #2
  }
}
 800638e:	0018      	movs	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	b004      	add	sp, #16
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	1dfb      	adds	r3, r7, #7
 80063a2:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063aa:	2302      	movs	r3, #2
 80063ac:	e020      	b.n	80063f0 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	23ad      	movs	r3, #173	@ 0xad
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	58d3      	ldr	r3, [r2, r3]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	23ad      	movs	r3, #173	@ 0xad
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	2100      	movs	r1, #0
 80063c2:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	23ac      	movs	r3, #172	@ 0xac
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	23a7      	movs	r3, #167	@ 0xa7
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	2101      	movs	r1, #1
 80063dc:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1dfa      	adds	r2, r7, #7
 80063e2:	7812      	ldrb	r2, [r2, #0]
 80063e4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f001 fc75 	bl	8007cd8 <USBD_LL_Init>

  return USBD_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	0018      	movs	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b004      	add	sp, #16
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006402:	200f      	movs	r0, #15
 8006404:	183b      	adds	r3, r7, r0
 8006406:	2200      	movs	r2, #0
 8006408:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d008      	beq.n	8006422 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	23ad      	movs	r3, #173	@ 0xad
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800641a:	183b      	adds	r3, r7, r0
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e003      	b.n	800642a <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006422:	230f      	movs	r3, #15
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	2202      	movs	r2, #2
 8006428:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800642a:	230f      	movs	r3, #15
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	781b      	ldrb	r3, [r3, #0]
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f001 fcac 	bl	8007da0 <USBD_LL_Start>

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	0018      	movs	r0, r3
 800644c:	46bd      	mov	sp, r7
 800644e:	b002      	add	sp, #8
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	0018      	movs	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	b002      	add	sp, #8
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	000a      	movs	r2, r1
 800646e:	1cfb      	adds	r3, r7, #3
 8006470:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006472:	240f      	movs	r4, #15
 8006474:	193b      	adds	r3, r7, r4
 8006476:	2202      	movs	r2, #2
 8006478:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	23ad      	movs	r3, #173	@ 0xad
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	58d3      	ldr	r3, [r2, r3]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	23ad      	movs	r3, #173	@ 0xad
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	58d3      	ldr	r3, [r2, r3]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	1cfa      	adds	r2, r7, #3
 8006492:	7811      	ldrb	r1, [r2, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	0010      	movs	r0, r2
 8006498:	4798      	blx	r3
 800649a:	1e03      	subs	r3, r0, #0
 800649c:	d102      	bne.n	80064a4 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800649e:	193b      	adds	r3, r7, r4
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80064a4:	230f      	movs	r3, #15
 80064a6:	18fb      	adds	r3, r7, r3
 80064a8:	781b      	ldrb	r3, [r3, #0]
}
 80064aa:	0018      	movs	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b005      	add	sp, #20
 80064b0:	bd90      	pop	{r4, r7, pc}

080064b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	000a      	movs	r2, r1
 80064bc:	1cfb      	adds	r3, r7, #3
 80064be:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	23ad      	movs	r3, #173	@ 0xad
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	58d3      	ldr	r3, [r2, r3]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	1cfa      	adds	r2, r7, #3
 80064cc:	7811      	ldrb	r1, [r2, #0]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	0010      	movs	r0, r2
 80064d2:	4798      	blx	r3

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	0018      	movs	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	b002      	add	sp, #8
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	22aa      	movs	r2, #170	@ 0xaa
 80064ee:	0092      	lsls	r2, r2, #2
 80064f0:	4694      	mov	ip, r2
 80064f2:	4463      	add	r3, ip
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	0011      	movs	r1, r2
 80064f8:	0018      	movs	r0, r3
 80064fa:	f001 f810 	bl	800751e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	23a5      	movs	r3, #165	@ 0xa5
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	2101      	movs	r1, #1
 8006506:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a23      	ldr	r2, [pc, #140]	@ (8006598 <USBD_LL_SetupStage+0xb8>)
 800650c:	5a9b      	ldrh	r3, [r3, r2]
 800650e:	0019      	movs	r1, r3
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	23a6      	movs	r3, #166	@ 0xa6
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	23aa      	movs	r3, #170	@ 0xaa
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	5cd3      	ldrb	r3, [r2, r3]
 8006520:	001a      	movs	r2, r3
 8006522:	231f      	movs	r3, #31
 8006524:	4013      	ands	r3, r2
 8006526:	2b02      	cmp	r3, #2
 8006528:	d019      	beq.n	800655e <USBD_LL_SetupStage+0x7e>
 800652a:	d822      	bhi.n	8006572 <USBD_LL_SetupStage+0x92>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <USBD_LL_SetupStage+0x56>
 8006530:	2b01      	cmp	r3, #1
 8006532:	d00a      	beq.n	800654a <USBD_LL_SetupStage+0x6a>
 8006534:	e01d      	b.n	8006572 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	22aa      	movs	r2, #170	@ 0xaa
 800653a:	0092      	lsls	r2, r2, #2
 800653c:	189a      	adds	r2, r3, r2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	0011      	movs	r1, r2
 8006542:	0018      	movs	r0, r3
 8006544:	f000 fa10 	bl	8006968 <USBD_StdDevReq>
      break;
 8006548:	e020      	b.n	800658c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	22aa      	movs	r2, #170	@ 0xaa
 800654e:	0092      	lsls	r2, r2, #2
 8006550:	189a      	adds	r2, r3, r2
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0011      	movs	r1, r2
 8006556:	0018      	movs	r0, r3
 8006558:	f000 fa78 	bl	8006a4c <USBD_StdItfReq>
      break;
 800655c:	e016      	b.n	800658c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	22aa      	movs	r2, #170	@ 0xaa
 8006562:	0092      	lsls	r2, r2, #2
 8006564:	189a      	adds	r2, r3, r2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0011      	movs	r1, r2
 800656a:	0018      	movs	r0, r3
 800656c:	f000 fac5 	bl	8006afa <USBD_StdEPReq>
      break;
 8006570:	e00c      	b.n	800658c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	23aa      	movs	r3, #170	@ 0xaa
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	5cd3      	ldrb	r3, [r2, r3]
 800657a:	227f      	movs	r2, #127	@ 0x7f
 800657c:	4393      	bics	r3, r2
 800657e:	b2da      	uxtb	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	0011      	movs	r1, r2
 8006584:	0018      	movs	r0, r3
 8006586:	f001 fc92 	bl	8007eae <USBD_LL_StallEP>
      break;
 800658a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	0018      	movs	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	b002      	add	sp, #8
 8006594:	bd80      	pop	{r7, pc}
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	000002ae 	.word	0x000002ae

0800659c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	200b      	movs	r0, #11
 80065a8:	183b      	adds	r3, r7, r0
 80065aa:	1c0a      	adds	r2, r1, #0
 80065ac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065ae:	183b      	adds	r3, r7, r0
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d154      	bne.n	8006660 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3355      	adds	r3, #85	@ 0x55
 80065ba:	33ff      	adds	r3, #255	@ 0xff
 80065bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	23a5      	movs	r3, #165	@ 0xa5
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	58d3      	ldr	r3, [r2, r3]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d139      	bne.n	800663e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d919      	bls.n	800660a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d203      	bcs.n	80065f8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	e002      	b.n	80065fe <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	001a      	movs	r2, r3
 8006604:	f001 f898 	bl	8007738 <USBD_CtlContinueRx>
 8006608:	e045      	b.n	8006696 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	23ad      	movs	r3, #173	@ 0xad
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	58d3      	ldr	r3, [r2, r3]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00d      	beq.n	8006634 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	23a7      	movs	r3, #167	@ 0xa7
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006620:	2b03      	cmp	r3, #3
 8006622:	d107      	bne.n	8006634 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	23ad      	movs	r3, #173	@ 0xad
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	58d3      	ldr	r3, [r2, r3]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	0010      	movs	r0, r2
 8006632:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	0018      	movs	r0, r3
 8006638:	f001 f891 	bl	800775e <USBD_CtlSendStatus>
 800663c:	e02b      	b.n	8006696 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	23a5      	movs	r3, #165	@ 0xa5
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	58d3      	ldr	r3, [r2, r3]
 8006646:	2b05      	cmp	r3, #5
 8006648:	d125      	bne.n	8006696 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	23a5      	movs	r3, #165	@ 0xa5
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	2100      	movs	r1, #0
 8006652:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2100      	movs	r1, #0
 8006658:	0018      	movs	r0, r3
 800665a:	f001 fc28 	bl	8007eae <USBD_LL_StallEP>
 800665e:	e01a      	b.n	8006696 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	23ad      	movs	r3, #173	@ 0xad
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	58d3      	ldr	r3, [r2, r3]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d011      	beq.n	8006692 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	23a7      	movs	r3, #167	@ 0xa7
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006676:	2b03      	cmp	r3, #3
 8006678:	d10b      	bne.n	8006692 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	23ad      	movs	r3, #173	@ 0xad
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	58d3      	ldr	r3, [r2, r3]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	220b      	movs	r2, #11
 8006686:	18ba      	adds	r2, r7, r2
 8006688:	7811      	ldrb	r1, [r2, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	0010      	movs	r0, r2
 800668e:	4798      	blx	r3
 8006690:	e001      	b.n	8006696 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006692:	2302      	movs	r3, #2
 8006694:	e000      	b.n	8006698 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	0018      	movs	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	b006      	add	sp, #24
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	200b      	movs	r0, #11
 80066ac:	183b      	adds	r3, r7, r0
 80066ae:	1c0a      	adds	r2, r1, #0
 80066b0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066b2:	183b      	adds	r3, r7, r0
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d000      	beq.n	80066bc <USBD_LL_DataInStage+0x1c>
 80066ba:	e08e      	b.n	80067da <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3314      	adds	r3, #20
 80066c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	23a5      	movs	r3, #165	@ 0xa5
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	58d3      	ldr	r3, [r2, r3]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d164      	bne.n	8006798 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d915      	bls.n	8006706 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	1ad2      	subs	r2, r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	0018      	movs	r0, r3
 80066f4:	f000 ffe9 	bl	80076ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	2300      	movs	r3, #0
 80066fc:	2200      	movs	r2, #0
 80066fe:	2100      	movs	r1, #0
 8006700:	f001 fcbd 	bl	800807e <USBD_LL_PrepareReceive>
 8006704:	e059      	b.n	80067ba <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	0019      	movs	r1, r3
 8006710:	0010      	movs	r0, r2
 8006712:	f7f9 fd7f 	bl	8000214 <__aeabi_uidivmod>
 8006716:	1e0b      	subs	r3, r1, #0
 8006718:	d11f      	bne.n	800675a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006722:	429a      	cmp	r2, r3
 8006724:	d319      	bcc.n	800675a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	23a6      	movs	r3, #166	@ 0xa6
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006732:	429a      	cmp	r2, r3
 8006734:	d211      	bcs.n	800675a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	2100      	movs	r1, #0
 800673c:	0018      	movs	r0, r3
 800673e:	f000 ffc4 	bl	80076ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	23a6      	movs	r3, #166	@ 0xa6
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	2100      	movs	r1, #0
 800674a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	2300      	movs	r3, #0
 8006750:	2200      	movs	r2, #0
 8006752:	2100      	movs	r1, #0
 8006754:	f001 fc93 	bl	800807e <USBD_LL_PrepareReceive>
 8006758:	e02f      	b.n	80067ba <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	23ad      	movs	r3, #173	@ 0xad
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	58d3      	ldr	r3, [r2, r3]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00d      	beq.n	8006784 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	23a7      	movs	r3, #167	@ 0xa7
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006770:	2b03      	cmp	r3, #3
 8006772:	d107      	bne.n	8006784 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	23ad      	movs	r3, #173	@ 0xad
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	58d3      	ldr	r3, [r2, r3]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	0010      	movs	r0, r2
 8006782:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2180      	movs	r1, #128	@ 0x80
 8006788:	0018      	movs	r0, r3
 800678a:	f001 fb90 	bl	8007eae <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	0018      	movs	r0, r3
 8006792:	f000 fff8 	bl	8007786 <USBD_CtlReceiveStatus>
 8006796:	e010      	b.n	80067ba <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	23a5      	movs	r3, #165	@ 0xa5
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	58d3      	ldr	r3, [r2, r3]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d005      	beq.n	80067b0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	23a5      	movs	r3, #165	@ 0xa5
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2180      	movs	r1, #128	@ 0x80
 80067b4:	0018      	movs	r0, r3
 80067b6:	f001 fb7a 	bl	8007eae <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	23a8      	movs	r3, #168	@ 0xa8
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	5cd3      	ldrb	r3, [r2, r3]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d124      	bne.n	8006810 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7ff fe42 	bl	8006452 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	23a8      	movs	r3, #168	@ 0xa8
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	2100      	movs	r1, #0
 80067d6:	54d1      	strb	r1, [r2, r3]
 80067d8:	e01a      	b.n	8006810 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	23ad      	movs	r3, #173	@ 0xad
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	58d3      	ldr	r3, [r2, r3]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d011      	beq.n	800680c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	23a7      	movs	r3, #167	@ 0xa7
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d10b      	bne.n	800680c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	23ad      	movs	r3, #173	@ 0xad
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	58d3      	ldr	r3, [r2, r3]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	220b      	movs	r2, #11
 8006800:	18ba      	adds	r2, r7, r2
 8006802:	7811      	ldrb	r1, [r2, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	0010      	movs	r0, r2
 8006808:	4798      	blx	r3
 800680a:	e001      	b.n	8006810 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800680c:	2302      	movs	r3, #2
 800680e:	e000      	b.n	8006812 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b006      	add	sp, #24
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	2340      	movs	r3, #64	@ 0x40
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	f001 fade 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	23ac      	movs	r3, #172	@ 0xac
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	2101      	movs	r1, #1
 8006836:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	23b2      	movs	r3, #178	@ 0xb2
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	2140      	movs	r1, #64	@ 0x40
 8006840:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	2340      	movs	r3, #64	@ 0x40
 8006846:	2200      	movs	r2, #0
 8006848:	2180      	movs	r1, #128	@ 0x80
 800684a:	f001 face 	bl	8007dea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2240      	movs	r2, #64	@ 0x40
 8006858:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	23a7      	movs	r3, #167	@ 0xa7
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	2101      	movs	r1, #1
 8006862:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	23a5      	movs	r3, #165	@ 0xa5
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	2100      	movs	r1, #0
 800686c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	23a9      	movs	r3, #169	@ 0xa9
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	2100      	movs	r1, #0
 800687c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	23ae      	movs	r3, #174	@ 0xae
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	58d3      	ldr	r3, [r2, r3]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	23ad      	movs	r3, #173	@ 0xad
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	58d3      	ldr	r3, [r2, r3]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	b2d9      	uxtb	r1, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	0018      	movs	r0, r3
 800689e:	4790      	blx	r2
  }

  return USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	0018      	movs	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b002      	add	sp, #8
 80068a8:	bd80      	pop	{r7, pc}

080068aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	000a      	movs	r2, r1
 80068b4:	1cfb      	adds	r3, r7, #3
 80068b6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1cfa      	adds	r2, r7, #3
 80068bc:	7812      	ldrb	r2, [r2, #0]
 80068be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b002      	add	sp, #8
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	23a7      	movs	r3, #167	@ 0xa7
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	5cd1      	ldrb	r1, [r2, r3]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a06      	ldr	r2, [pc, #24]	@ (80068f8 <USBD_LL_Suspend+0x2c>)
 80068e0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	23a7      	movs	r3, #167	@ 0xa7
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	2104      	movs	r1, #4
 80068ea:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	0018      	movs	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	b002      	add	sp, #8
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	46c0      	nop			@ (mov r8, r8)
 80068f8:	0000029d 	.word	0x0000029d

080068fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	23a7      	movs	r3, #167	@ 0xa7
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	5cd3      	ldrb	r3, [r2, r3]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d106      	bne.n	800691e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a05      	ldr	r2, [pc, #20]	@ (8006928 <USBD_LL_Resume+0x2c>)
 8006914:	5c99      	ldrb	r1, [r3, r2]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	23a7      	movs	r3, #167	@ 0xa7
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	0018      	movs	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	b002      	add	sp, #8
 8006926:	bd80      	pop	{r7, pc}
 8006928:	0000029d 	.word	0x0000029d

0800692c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	23a7      	movs	r3, #167	@ 0xa7
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	5cd3      	ldrb	r3, [r2, r3]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d10e      	bne.n	800695e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	23ad      	movs	r3, #173	@ 0xad
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	58d3      	ldr	r3, [r2, r3]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	23ad      	movs	r3, #173	@ 0xad
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	58d3      	ldr	r3, [r2, r3]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	0010      	movs	r0, r2
 800695c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	0018      	movs	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	b002      	add	sp, #8
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	230f      	movs	r3, #15
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	2200      	movs	r2, #0
 8006978:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	001a      	movs	r2, r3
 8006980:	2360      	movs	r3, #96	@ 0x60
 8006982:	4013      	ands	r3, r2
 8006984:	2b40      	cmp	r3, #64	@ 0x40
 8006986:	d004      	beq.n	8006992 <USBD_StdDevReq+0x2a>
 8006988:	d84f      	bhi.n	8006a2a <USBD_StdDevReq+0xc2>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <USBD_StdDevReq+0x3e>
 800698e:	2b20      	cmp	r3, #32
 8006990:	d14b      	bne.n	8006a2a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	23ad      	movs	r3, #173	@ 0xad
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	58d3      	ldr	r3, [r2, r3]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	0010      	movs	r0, r2
 80069a2:	4798      	blx	r3
      break;
 80069a4:	e048      	b.n	8006a38 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b09      	cmp	r3, #9
 80069ac:	d835      	bhi.n	8006a1a <USBD_StdDevReq+0xb2>
 80069ae:	009a      	lsls	r2, r3, #2
 80069b0:	4b25      	ldr	r3, [pc, #148]	@ (8006a48 <USBD_StdDevReq+0xe0>)
 80069b2:	18d3      	adds	r3, r2, r3
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0011      	movs	r1, r2
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 fa52 	bl	8006e68 <USBD_GetDescriptor>
          break;
 80069c4:	e030      	b.n	8006a28 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0011      	movs	r1, r2
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 fbfd 	bl	80071cc <USBD_SetAddress>
          break;
 80069d2:	e029      	b.n	8006a28 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	0011      	movs	r1, r2
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 fc4a 	bl	8007274 <USBD_SetConfig>
          break;
 80069e0:	e022      	b.n	8006a28 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	0011      	movs	r1, r2
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 fce7 	bl	80073bc <USBD_GetConfig>
          break;
 80069ee:	e01b      	b.n	8006a28 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0011      	movs	r1, r2
 80069f6:	0018      	movs	r0, r3
 80069f8:	f000 fd1b 	bl	8007432 <USBD_GetStatus>
          break;
 80069fc:	e014      	b.n	8006a28 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	0011      	movs	r1, r2
 8006a04:	0018      	movs	r0, r3
 8006a06:	f000 fd4e 	bl	80074a6 <USBD_SetFeature>
          break;
 8006a0a:	e00d      	b.n	8006a28 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 fd5d 	bl	80074d2 <USBD_ClrFeature>
          break;
 8006a18:	e006      	b.n	8006a28 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0011      	movs	r1, r2
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 fdb4 	bl	800758e <USBD_CtlError>
          break;
 8006a26:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006a28:	e006      	b.n	8006a38 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	0011      	movs	r1, r2
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 fdac 	bl	800758e <USBD_CtlError>
      break;
 8006a36:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006a38:	230f      	movs	r3, #15
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	781b      	ldrb	r3, [r3, #0]
}
 8006a3e:	0018      	movs	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b004      	add	sp, #16
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	08008290 	.word	0x08008290

08006a4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a4c:	b5b0      	push	{r4, r5, r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a56:	230f      	movs	r3, #15
 8006a58:	18fb      	adds	r3, r7, r3
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	001a      	movs	r2, r3
 8006a64:	2360      	movs	r3, #96	@ 0x60
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b40      	cmp	r3, #64	@ 0x40
 8006a6a:	d004      	beq.n	8006a76 <USBD_StdItfReq+0x2a>
 8006a6c:	d839      	bhi.n	8006ae2 <USBD_StdItfReq+0x96>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <USBD_StdItfReq+0x2a>
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d135      	bne.n	8006ae2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	23a7      	movs	r3, #167	@ 0xa7
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	5cd3      	ldrb	r3, [r2, r3]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d825      	bhi.n	8006ad0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	889b      	ldrh	r3, [r3, #4]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d819      	bhi.n	8006ac2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	23ad      	movs	r3, #173	@ 0xad
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	58d3      	ldr	r3, [r2, r3]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	250f      	movs	r5, #15
 8006a9a:	197c      	adds	r4, r7, r5
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	0010      	movs	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	88db      	ldrh	r3, [r3, #6]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d116      	bne.n	8006ade <USBD_StdItfReq+0x92>
 8006ab0:	197b      	adds	r3, r7, r5
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d112      	bne.n	8006ade <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 fe4f 	bl	800775e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ac0:	e00d      	b.n	8006ade <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 fd60 	bl	800758e <USBD_CtlError>
          break;
 8006ace:	e006      	b.n	8006ade <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0011      	movs	r1, r2
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 fd59 	bl	800758e <USBD_CtlError>
          break;
 8006adc:	e000      	b.n	8006ae0 <USBD_StdItfReq+0x94>
          break;
 8006ade:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006ae0:	e006      	b.n	8006af0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	0011      	movs	r1, r2
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f000 fd50 	bl	800758e <USBD_CtlError>
      break;
 8006aee:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	0018      	movs	r0, r3
 8006af4:	46bd      	mov	sp, r7
 8006af6:	b004      	add	sp, #16
 8006af8:	bdb0      	pop	{r4, r5, r7, pc}

08006afa <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006afa:	b5b0      	push	{r4, r5, r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b04:	230f      	movs	r3, #15
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	889a      	ldrh	r2, [r3, #4]
 8006b10:	230e      	movs	r3, #14
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	001a      	movs	r2, r3
 8006b1c:	2360      	movs	r3, #96	@ 0x60
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b40      	cmp	r3, #64	@ 0x40
 8006b22:	d006      	beq.n	8006b32 <USBD_StdEPReq+0x38>
 8006b24:	d900      	bls.n	8006b28 <USBD_StdEPReq+0x2e>
 8006b26:	e190      	b.n	8006e4a <USBD_StdEPReq+0x350>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <USBD_StdEPReq+0x4c>
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d000      	beq.n	8006b32 <USBD_StdEPReq+0x38>
 8006b30:	e18b      	b.n	8006e4a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	23ad      	movs	r3, #173	@ 0xad
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	58d3      	ldr	r3, [r2, r3]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	0010      	movs	r0, r2
 8006b42:	4798      	blx	r3
      break;
 8006b44:	e188      	b.n	8006e58 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	2360      	movs	r3, #96	@ 0x60
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d10f      	bne.n	8006b74 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	23ad      	movs	r3, #173	@ 0xad
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	58d3      	ldr	r3, [r2, r3]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	250f      	movs	r5, #15
 8006b60:	197c      	adds	r4, r7, r5
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	0010      	movs	r0, r2
 8006b68:	4798      	blx	r3
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	7023      	strb	r3, [r4, #0]

        return ret;
 8006b6e:	197b      	adds	r3, r7, r5
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	e174      	b.n	8006e5e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d007      	beq.n	8006b8c <USBD_StdEPReq+0x92>
 8006b7c:	dd00      	ble.n	8006b80 <USBD_StdEPReq+0x86>
 8006b7e:	e15c      	b.n	8006e3a <USBD_StdEPReq+0x340>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d100      	bne.n	8006b86 <USBD_StdEPReq+0x8c>
 8006b84:	e092      	b.n	8006cac <USBD_StdEPReq+0x1b2>
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d04b      	beq.n	8006c22 <USBD_StdEPReq+0x128>
 8006b8a:	e156      	b.n	8006e3a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	23a7      	movs	r3, #167	@ 0xa7
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	5cd3      	ldrb	r3, [r2, r3]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d002      	beq.n	8006b9e <USBD_StdEPReq+0xa4>
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d01d      	beq.n	8006bd8 <USBD_StdEPReq+0xde>
 8006b9c:	e039      	b.n	8006c12 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b9e:	220e      	movs	r2, #14
 8006ba0:	18bb      	adds	r3, r7, r2
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d010      	beq.n	8006bca <USBD_StdEPReq+0xd0>
 8006ba8:	18bb      	adds	r3, r7, r2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b80      	cmp	r3, #128	@ 0x80
 8006bae:	d00c      	beq.n	8006bca <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bb0:	18bb      	adds	r3, r7, r2
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	0011      	movs	r1, r2
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f001 f978 	bl	8007eae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2180      	movs	r1, #128	@ 0x80
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f001 f973 	bl	8007eae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bc8:	e02a      	b.n	8006c20 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	0011      	movs	r1, r2
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f000 fcdc 	bl	800758e <USBD_CtlError>
              break;
 8006bd6:	e023      	b.n	8006c20 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d113      	bne.n	8006c08 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006be0:	220e      	movs	r2, #14
 8006be2:	18bb      	adds	r3, r7, r2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00e      	beq.n	8006c08 <USBD_StdEPReq+0x10e>
 8006bea:	18bb      	adds	r3, r7, r2
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b80      	cmp	r3, #128	@ 0x80
 8006bf0:	d00a      	beq.n	8006c08 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006bfa:	18bb      	adds	r3, r7, r2
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0011      	movs	r1, r2
 8006c02:	0018      	movs	r0, r3
 8006c04:	f001 f953 	bl	8007eae <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f000 fda7 	bl	800775e <USBD_CtlSendStatus>

              break;
 8006c10:	e006      	b.n	8006c20 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	0011      	movs	r1, r2
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 fcb8 	bl	800758e <USBD_CtlError>
              break;
 8006c1e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006c20:	e112      	b.n	8006e48 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	23a7      	movs	r3, #167	@ 0xa7
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	5cd3      	ldrb	r3, [r2, r3]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d002      	beq.n	8006c34 <USBD_StdEPReq+0x13a>
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d01d      	beq.n	8006c6e <USBD_StdEPReq+0x174>
 8006c32:	e032      	b.n	8006c9a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c34:	220e      	movs	r2, #14
 8006c36:	18bb      	adds	r3, r7, r2
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d010      	beq.n	8006c60 <USBD_StdEPReq+0x166>
 8006c3e:	18bb      	adds	r3, r7, r2
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b80      	cmp	r3, #128	@ 0x80
 8006c44:	d00c      	beq.n	8006c60 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c46:	18bb      	adds	r3, r7, r2
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	0011      	movs	r1, r2
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f001 f92d 	bl	8007eae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2180      	movs	r1, #128	@ 0x80
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f001 f928 	bl	8007eae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c5e:	e024      	b.n	8006caa <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0011      	movs	r1, r2
 8006c66:	0018      	movs	r0, r3
 8006c68:	f000 fc91 	bl	800758e <USBD_CtlError>
              break;
 8006c6c:	e01d      	b.n	8006caa <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	885b      	ldrh	r3, [r3, #2]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d118      	bne.n	8006ca8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c76:	210e      	movs	r1, #14
 8006c78:	187b      	adds	r3, r7, r1
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	227f      	movs	r2, #127	@ 0x7f
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d006      	beq.n	8006c90 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c82:	187b      	adds	r3, r7, r1
 8006c84:	781a      	ldrb	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f001 f93a 	bl	8007f04 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 fd63 	bl	800775e <USBD_CtlSendStatus>
              }
              break;
 8006c98:	e006      	b.n	8006ca8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	0011      	movs	r1, r2
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f000 fc74 	bl	800758e <USBD_CtlError>
              break;
 8006ca6:	e000      	b.n	8006caa <USBD_StdEPReq+0x1b0>
              break;
 8006ca8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006caa:	e0cd      	b.n	8006e48 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	23a7      	movs	r3, #167	@ 0xa7
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	5cd3      	ldrb	r3, [r2, r3]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d002      	beq.n	8006cbe <USBD_StdEPReq+0x1c4>
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d03c      	beq.n	8006d36 <USBD_StdEPReq+0x23c>
 8006cbc:	e0b5      	b.n	8006e2a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cbe:	220e      	movs	r2, #14
 8006cc0:	18bb      	adds	r3, r7, r2
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <USBD_StdEPReq+0x1e4>
 8006cc8:	18bb      	adds	r3, r7, r2
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b80      	cmp	r3, #128	@ 0x80
 8006cce:	d006      	beq.n	8006cde <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	0011      	movs	r1, r2
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 fc59 	bl	800758e <USBD_CtlError>
                break;
 8006cdc:	e0ac      	b.n	8006e38 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cde:	220e      	movs	r2, #14
 8006ce0:	18bb      	adds	r3, r7, r2
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da0c      	bge.n	8006d04 <USBD_StdEPReq+0x20a>
 8006cea:	18bb      	adds	r3, r7, r2
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	227f      	movs	r2, #127	@ 0x7f
 8006cf0:	401a      	ands	r2, r3
 8006cf2:	0013      	movs	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	189b      	adds	r3, r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	18d3      	adds	r3, r2, r3
 8006d00:	3304      	adds	r3, #4
 8006d02:	e00d      	b.n	8006d20 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d04:	230e      	movs	r3, #14
 8006d06:	18fb      	adds	r3, r7, r3
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	227f      	movs	r2, #127	@ 0x7f
 8006d0c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d0e:	0013      	movs	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	189b      	adds	r3, r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	3351      	adds	r3, #81	@ 0x51
 8006d18:	33ff      	adds	r3, #255	@ 0xff
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	18d3      	adds	r3, r2, r3
 8006d1e:	3304      	adds	r3, #4
 8006d20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f000 fcab 	bl	800768a <USBD_CtlSendData>
              break;
 8006d34:	e080      	b.n	8006e38 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d36:	220e      	movs	r2, #14
 8006d38:	18bb      	adds	r3, r7, r2
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b25b      	sxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	da14      	bge.n	8006d6c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d42:	18bb      	adds	r3, r7, r2
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	220f      	movs	r2, #15
 8006d48:	401a      	ands	r2, r3
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	0013      	movs	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	189b      	adds	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	18cb      	adds	r3, r1, r3
 8006d56:	3318      	adds	r3, #24
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d11e      	bne.n	8006d9c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	0011      	movs	r1, r2
 8006d64:	0018      	movs	r0, r3
 8006d66:	f000 fc12 	bl	800758e <USBD_CtlError>
                  break;
 8006d6a:	e065      	b.n	8006e38 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d6c:	230e      	movs	r3, #14
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	220f      	movs	r2, #15
 8006d74:	401a      	ands	r2, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	23ac      	movs	r3, #172	@ 0xac
 8006d7a:	0059      	lsls	r1, r3, #1
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	18c3      	adds	r3, r0, r3
 8006d86:	185b      	adds	r3, r3, r1
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0011      	movs	r1, r2
 8006d94:	0018      	movs	r0, r3
 8006d96:	f000 fbfa 	bl	800758e <USBD_CtlError>
                  break;
 8006d9a:	e04d      	b.n	8006e38 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d9c:	220e      	movs	r2, #14
 8006d9e:	18bb      	adds	r3, r7, r2
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	b25b      	sxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	da0c      	bge.n	8006dc2 <USBD_StdEPReq+0x2c8>
 8006da8:	18bb      	adds	r3, r7, r2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	227f      	movs	r2, #127	@ 0x7f
 8006dae:	401a      	ands	r2, r3
 8006db0:	0013      	movs	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	189b      	adds	r3, r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3310      	adds	r3, #16
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	e00d      	b.n	8006dde <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dc2:	230e      	movs	r3, #14
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	227f      	movs	r2, #127	@ 0x7f
 8006dca:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dcc:	0013      	movs	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	189b      	adds	r3, r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	3351      	adds	r3, #81	@ 0x51
 8006dd6:	33ff      	adds	r3, #255	@ 0xff
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	18d3      	adds	r3, r2, r3
 8006ddc:	3304      	adds	r3, #4
 8006dde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006de0:	220e      	movs	r2, #14
 8006de2:	18bb      	adds	r3, r7, r2
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <USBD_StdEPReq+0x2f8>
 8006dea:	18bb      	adds	r3, r7, r2
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b80      	cmp	r3, #128	@ 0x80
 8006df0:	d103      	bne.n	8006dfa <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	e010      	b.n	8006e1c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006dfa:	230e      	movs	r3, #14
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	781a      	ldrb	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	0011      	movs	r1, r2
 8006e04:	0018      	movs	r0, r3
 8006e06:	f001 f8a8 	bl	8007f5a <USBD_LL_IsStallEP>
 8006e0a:	1e03      	subs	r3, r0, #0
 8006e0c:	d003      	beq.n	8006e16 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e002      	b.n	8006e1c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	0018      	movs	r0, r3
 8006e24:	f000 fc31 	bl	800768a <USBD_CtlSendData>
              break;
 8006e28:	e006      	b.n	8006e38 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	0011      	movs	r1, r2
 8006e30:	0018      	movs	r0, r3
 8006e32:	f000 fbac 	bl	800758e <USBD_CtlError>
              break;
 8006e36:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006e38:	e006      	b.n	8006e48 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	0011      	movs	r1, r2
 8006e40:	0018      	movs	r0, r3
 8006e42:	f000 fba4 	bl	800758e <USBD_CtlError>
          break;
 8006e46:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006e48:	e006      	b.n	8006e58 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0011      	movs	r1, r2
 8006e50:	0018      	movs	r0, r3
 8006e52:	f000 fb9c 	bl	800758e <USBD_CtlError>
      break;
 8006e56:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006e58:	230f      	movs	r3, #15
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	781b      	ldrb	r3, [r3, #0]
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b004      	add	sp, #16
 8006e64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e72:	2308      	movs	r3, #8
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	2200      	movs	r2, #0
 8006e78:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e7e:	230b      	movs	r3, #11
 8006e80:	18fb      	adds	r3, r7, r3
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b07      	cmp	r3, #7
 8006e90:	d900      	bls.n	8006e94 <USBD_GetDescriptor+0x2c>
 8006e92:	e159      	b.n	8007148 <USBD_GetDescriptor+0x2e0>
 8006e94:	009a      	lsls	r2, r3, #2
 8006e96:	4bcb      	ldr	r3, [pc, #812]	@ (80071c4 <USBD_GetDescriptor+0x35c>)
 8006e98:	18d3      	adds	r3, r2, r3
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	23ac      	movs	r3, #172	@ 0xac
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	58d3      	ldr	r3, [r2, r3]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7c12      	ldrb	r2, [r2, #16]
 8006eac:	2108      	movs	r1, #8
 8006eae:	1879      	adds	r1, r7, r1
 8006eb0:	0010      	movs	r0, r2
 8006eb2:	4798      	blx	r3
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	60fb      	str	r3, [r7, #12]
      break;
 8006eb8:	e153      	b.n	8007162 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	7c1b      	ldrb	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10f      	bne.n	8006ee2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	23ad      	movs	r3, #173	@ 0xad
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	58d3      	ldr	r3, [r2, r3]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ecc:	2208      	movs	r2, #8
 8006ece:	18ba      	adds	r2, r7, r2
 8006ed0:	0010      	movs	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	2202      	movs	r2, #2
 8006ede:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ee0:	e13f      	b.n	8007162 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	23ad      	movs	r3, #173	@ 0xad
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	58d3      	ldr	r3, [r2, r3]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	2208      	movs	r2, #8
 8006eee:	18ba      	adds	r2, r7, r2
 8006ef0:	0010      	movs	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	2202      	movs	r2, #2
 8006efe:	701a      	strb	r2, [r3, #0]
      break;
 8006f00:	e12f      	b.n	8007162 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b05      	cmp	r3, #5
 8006f0a:	d900      	bls.n	8006f0e <USBD_GetDescriptor+0xa6>
 8006f0c:	e0d0      	b.n	80070b0 <USBD_GetDescriptor+0x248>
 8006f0e:	009a      	lsls	r2, r3, #2
 8006f10:	4bad      	ldr	r3, [pc, #692]	@ (80071c8 <USBD_GetDescriptor+0x360>)
 8006f12:	18d3      	adds	r3, r2, r3
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	23ac      	movs	r3, #172	@ 0xac
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	58d3      	ldr	r3, [r2, r3]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00d      	beq.n	8006f42 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	23ac      	movs	r3, #172	@ 0xac
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	58d3      	ldr	r3, [r2, r3]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	2108      	movs	r1, #8
 8006f36:	1879      	adds	r1, r7, r1
 8006f38:	0010      	movs	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	0003      	movs	r3, r0
 8006f3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f40:	e0c3      	b.n	80070ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	0011      	movs	r1, r2
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 fb20 	bl	800758e <USBD_CtlError>
            err++;
 8006f4e:	210b      	movs	r1, #11
 8006f50:	187b      	adds	r3, r7, r1
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	3201      	adds	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
          break;
 8006f5a:	e0b6      	b.n	80070ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	23ac      	movs	r3, #172	@ 0xac
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	58d3      	ldr	r3, [r2, r3]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00d      	beq.n	8006f86 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	23ac      	movs	r3, #172	@ 0xac
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	58d3      	ldr	r3, [r2, r3]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7c12      	ldrb	r2, [r2, #16]
 8006f78:	2108      	movs	r1, #8
 8006f7a:	1879      	adds	r1, r7, r1
 8006f7c:	0010      	movs	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	0003      	movs	r3, r0
 8006f82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f84:	e0a1      	b.n	80070ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	0011      	movs	r1, r2
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f000 fafe 	bl	800758e <USBD_CtlError>
            err++;
 8006f92:	210b      	movs	r1, #11
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	781a      	ldrb	r2, [r3, #0]
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	3201      	adds	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]
          break;
 8006f9e:	e094      	b.n	80070ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	23ac      	movs	r3, #172	@ 0xac
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	58d3      	ldr	r3, [r2, r3]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00d      	beq.n	8006fca <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	23ac      	movs	r3, #172	@ 0xac
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	58d3      	ldr	r3, [r2, r3]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	7c12      	ldrb	r2, [r2, #16]
 8006fbc:	2108      	movs	r1, #8
 8006fbe:	1879      	adds	r1, r7, r1
 8006fc0:	0010      	movs	r0, r2
 8006fc2:	4798      	blx	r3
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fc8:	e07f      	b.n	80070ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0011      	movs	r1, r2
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f000 fadc 	bl	800758e <USBD_CtlError>
            err++;
 8006fd6:	210b      	movs	r1, #11
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	187b      	adds	r3, r7, r1
 8006fde:	3201      	adds	r2, #1
 8006fe0:	701a      	strb	r2, [r3, #0]
          break;
 8006fe2:	e072      	b.n	80070ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	23ac      	movs	r3, #172	@ 0xac
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	58d3      	ldr	r3, [r2, r3]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00d      	beq.n	800700e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	23ac      	movs	r3, #172	@ 0xac
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	58d3      	ldr	r3, [r2, r3]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	2108      	movs	r1, #8
 8007002:	1879      	adds	r1, r7, r1
 8007004:	0010      	movs	r0, r2
 8007006:	4798      	blx	r3
 8007008:	0003      	movs	r3, r0
 800700a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700c:	e05d      	b.n	80070ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	0011      	movs	r1, r2
 8007014:	0018      	movs	r0, r3
 8007016:	f000 faba 	bl	800758e <USBD_CtlError>
            err++;
 800701a:	210b      	movs	r1, #11
 800701c:	187b      	adds	r3, r7, r1
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	187b      	adds	r3, r7, r1
 8007022:	3201      	adds	r2, #1
 8007024:	701a      	strb	r2, [r3, #0]
          break;
 8007026:	e050      	b.n	80070ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	23ac      	movs	r3, #172	@ 0xac
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	58d3      	ldr	r3, [r2, r3]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	23ac      	movs	r3, #172	@ 0xac
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	58d3      	ldr	r3, [r2, r3]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	7c12      	ldrb	r2, [r2, #16]
 8007044:	2108      	movs	r1, #8
 8007046:	1879      	adds	r1, r7, r1
 8007048:	0010      	movs	r0, r2
 800704a:	4798      	blx	r3
 800704c:	0003      	movs	r3, r0
 800704e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007050:	e03b      	b.n	80070ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	0011      	movs	r1, r2
 8007058:	0018      	movs	r0, r3
 800705a:	f000 fa98 	bl	800758e <USBD_CtlError>
            err++;
 800705e:	210b      	movs	r1, #11
 8007060:	187b      	adds	r3, r7, r1
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	187b      	adds	r3, r7, r1
 8007066:	3201      	adds	r2, #1
 8007068:	701a      	strb	r2, [r3, #0]
          break;
 800706a:	e02e      	b.n	80070ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	23ac      	movs	r3, #172	@ 0xac
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	58d3      	ldr	r3, [r2, r3]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	23ac      	movs	r3, #172	@ 0xac
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	58d3      	ldr	r3, [r2, r3]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	2108      	movs	r1, #8
 800708a:	1879      	adds	r1, r7, r1
 800708c:	0010      	movs	r0, r2
 800708e:	4798      	blx	r3
 8007090:	0003      	movs	r3, r0
 8007092:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007094:	e019      	b.n	80070ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0011      	movs	r1, r2
 800709c:	0018      	movs	r0, r3
 800709e:	f000 fa76 	bl	800758e <USBD_CtlError>
            err++;
 80070a2:	210b      	movs	r1, #11
 80070a4:	187b      	adds	r3, r7, r1
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	187b      	adds	r3, r7, r1
 80070aa:	3201      	adds	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
          break;
 80070ae:	e00c      	b.n	80070ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	0011      	movs	r1, r2
 80070b6:	0018      	movs	r0, r3
 80070b8:	f000 fa69 	bl	800758e <USBD_CtlError>
          err++;
 80070bc:	210b      	movs	r1, #11
 80070be:	187b      	adds	r3, r7, r1
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	187b      	adds	r3, r7, r1
 80070c4:	3201      	adds	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80070c8:	e04b      	b.n	8007162 <USBD_GetDescriptor+0x2fa>
 80070ca:	e04a      	b.n	8007162 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	7c1b      	ldrb	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	23ad      	movs	r3, #173	@ 0xad
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	58d3      	ldr	r3, [r2, r3]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070de:	2208      	movs	r2, #8
 80070e0:	18ba      	adds	r2, r7, r2
 80070e2:	0010      	movs	r0, r2
 80070e4:	4798      	blx	r3
 80070e6:	0003      	movs	r3, r0
 80070e8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ea:	e03a      	b.n	8007162 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	0011      	movs	r1, r2
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 fa4b 	bl	800758e <USBD_CtlError>
        err++;
 80070f8:	210b      	movs	r1, #11
 80070fa:	187b      	adds	r3, r7, r1
 80070fc:	781a      	ldrb	r2, [r3, #0]
 80070fe:	187b      	adds	r3, r7, r1
 8007100:	3201      	adds	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
      break;
 8007104:	e02d      	b.n	8007162 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7c1b      	ldrb	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10f      	bne.n	800712e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	23ad      	movs	r3, #173	@ 0xad
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	58d3      	ldr	r3, [r2, r3]
 8007116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007118:	2208      	movs	r2, #8
 800711a:	18ba      	adds	r2, r7, r2
 800711c:	0010      	movs	r0, r2
 800711e:	4798      	blx	r3
 8007120:	0003      	movs	r3, r0
 8007122:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	2207      	movs	r2, #7
 800712a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800712c:	e019      	b.n	8007162 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0011      	movs	r1, r2
 8007134:	0018      	movs	r0, r3
 8007136:	f000 fa2a 	bl	800758e <USBD_CtlError>
        err++;
 800713a:	210b      	movs	r1, #11
 800713c:	187b      	adds	r3, r7, r1
 800713e:	781a      	ldrb	r2, [r3, #0]
 8007140:	187b      	adds	r3, r7, r1
 8007142:	3201      	adds	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
      break;
 8007146:	e00c      	b.n	8007162 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	0011      	movs	r1, r2
 800714e:	0018      	movs	r0, r3
 8007150:	f000 fa1d 	bl	800758e <USBD_CtlError>
      err++;
 8007154:	210b      	movs	r1, #11
 8007156:	187b      	adds	r3, r7, r1
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	187b      	adds	r3, r7, r1
 800715c:	3201      	adds	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
      break;
 8007160:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8007162:	230b      	movs	r3, #11
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d127      	bne.n	80071bc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800716c:	2108      	movs	r1, #8
 800716e:	187b      	adds	r3, r7, r1
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d019      	beq.n	80071aa <USBD_GetDescriptor+0x342>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d015      	beq.n	80071aa <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	88da      	ldrh	r2, [r3, #6]
 8007182:	187b      	adds	r3, r7, r1
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	1c18      	adds	r0, r3, #0
 8007188:	1c11      	adds	r1, r2, #0
 800718a:	b28a      	uxth	r2, r1
 800718c:	b283      	uxth	r3, r0
 800718e:	429a      	cmp	r2, r3
 8007190:	d900      	bls.n	8007194 <USBD_GetDescriptor+0x32c>
 8007192:	1c01      	adds	r1, r0, #0
 8007194:	b28a      	uxth	r2, r1
 8007196:	2108      	movs	r1, #8
 8007198:	187b      	adds	r3, r7, r1
 800719a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800719c:	187b      	adds	r3, r7, r1
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	0018      	movs	r0, r3
 80071a6:	f000 fa70 	bl	800768a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d105      	bne.n	80071be <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	0018      	movs	r0, r3
 80071b6:	f000 fad2 	bl	800775e <USBD_CtlSendStatus>
 80071ba:	e000      	b.n	80071be <USBD_GetDescriptor+0x356>
    return;
 80071bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80071be:	46bd      	mov	sp, r7
 80071c0:	b004      	add	sp, #16
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	080082b8 	.word	0x080082b8
 80071c8:	080082d8 	.word	0x080082d8

080071cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	889b      	ldrh	r3, [r3, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d13d      	bne.n	800725a <USBD_SetAddress+0x8e>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	88db      	ldrh	r3, [r3, #6]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d139      	bne.n	800725a <USBD_SetAddress+0x8e>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ec:	d835      	bhi.n	800725a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	885b      	ldrh	r3, [r3, #2]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	230f      	movs	r3, #15
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	217f      	movs	r1, #127	@ 0x7f
 80071fa:	400a      	ands	r2, r1
 80071fc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	23a7      	movs	r3, #167	@ 0xa7
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	5cd3      	ldrb	r3, [r2, r3]
 8007206:	2b03      	cmp	r3, #3
 8007208:	d106      	bne.n	8007218 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	0011      	movs	r1, r2
 8007210:	0018      	movs	r0, r3
 8007212:	f000 f9bc 	bl	800758e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007216:	e027      	b.n	8007268 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	240f      	movs	r4, #15
 800721c:	193a      	adds	r2, r7, r4
 800721e:	4914      	ldr	r1, [pc, #80]	@ (8007270 <USBD_SetAddress+0xa4>)
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007224:	193b      	adds	r3, r7, r4
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	0011      	movs	r1, r2
 800722c:	0018      	movs	r0, r3
 800722e:	f000 fec4 	bl	8007fba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	0018      	movs	r0, r3
 8007236:	f000 fa92 	bl	800775e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800723a:	193b      	adds	r3, r7, r4
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	23a7      	movs	r3, #167	@ 0xa7
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	2102      	movs	r1, #2
 800724a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724c:	e00c      	b.n	8007268 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	23a7      	movs	r3, #167	@ 0xa7
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	2101      	movs	r1, #1
 8007256:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007258:	e006      	b.n	8007268 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	0011      	movs	r1, r2
 8007260:	0018      	movs	r0, r3
 8007262:	f000 f994 	bl	800758e <USBD_CtlError>
  }
}
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	46c0      	nop			@ (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	b005      	add	sp, #20
 800726e:	bd90      	pop	{r4, r7, pc}
 8007270:	0000029e 	.word	0x0000029e

08007274 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	885b      	ldrh	r3, [r3, #2]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	4b4c      	ldr	r3, [pc, #304]	@ (80073b8 <USBD_SetConfig+0x144>)
 8007286:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007288:	4b4b      	ldr	r3, [pc, #300]	@ (80073b8 <USBD_SetConfig+0x144>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d906      	bls.n	800729e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	0011      	movs	r1, r2
 8007296:	0018      	movs	r0, r3
 8007298:	f000 f979 	bl	800758e <USBD_CtlError>
 800729c:	e088      	b.n	80073b0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	23a7      	movs	r3, #167	@ 0xa7
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	5cd3      	ldrb	r3, [r2, r3]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d002      	beq.n	80072b0 <USBD_SetConfig+0x3c>
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d029      	beq.n	8007302 <USBD_SetConfig+0x8e>
 80072ae:	e071      	b.n	8007394 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80072b0:	4b41      	ldr	r3, [pc, #260]	@ (80073b8 <USBD_SetConfig+0x144>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01f      	beq.n	80072f8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80072b8:	4b3f      	ldr	r3, [pc, #252]	@ (80073b8 <USBD_SetConfig+0x144>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	001a      	movs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	23a7      	movs	r3, #167	@ 0xa7
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	2103      	movs	r1, #3
 80072ca:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072cc:	4b3a      	ldr	r3, [pc, #232]	@ (80073b8 <USBD_SetConfig+0x144>)
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	0011      	movs	r1, r2
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7ff f8c5 	bl	8006464 <USBD_SetClassConfig>
 80072da:	0003      	movs	r3, r0
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d106      	bne.n	80072ee <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	0011      	movs	r1, r2
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 f951 	bl	800758e <USBD_CtlError>
            return;
 80072ec:	e060      	b.n	80073b0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f000 fa34 	bl	800775e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072f6:	e05b      	b.n	80073b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	0018      	movs	r0, r3
 80072fc:	f000 fa2f 	bl	800775e <USBD_CtlSendStatus>
        break;
 8007300:	e056      	b.n	80073b0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007302:	4b2d      	ldr	r3, [pc, #180]	@ (80073b8 <USBD_SetConfig+0x144>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d115      	bne.n	8007336 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	23a7      	movs	r3, #167	@ 0xa7
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	2102      	movs	r1, #2
 8007312:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007314:	4b28      	ldr	r3, [pc, #160]	@ (80073b8 <USBD_SetConfig+0x144>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	001a      	movs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800731e:	4b26      	ldr	r3, [pc, #152]	@ (80073b8 <USBD_SetConfig+0x144>)
 8007320:	781a      	ldrb	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	0011      	movs	r1, r2
 8007326:	0018      	movs	r0, r3
 8007328:	f7ff f8c3 	bl	80064b2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0018      	movs	r0, r3
 8007330:	f000 fa15 	bl	800775e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007334:	e03c      	b.n	80073b0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007336:	4b20      	ldr	r3, [pc, #128]	@ (80073b8 <USBD_SetConfig+0x144>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	001a      	movs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d022      	beq.n	800738a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	0011      	movs	r1, r2
 800734e:	0018      	movs	r0, r3
 8007350:	f7ff f8af 	bl	80064b2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007354:	4b18      	ldr	r3, [pc, #96]	@ (80073b8 <USBD_SetConfig+0x144>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	001a      	movs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800735e:	4b16      	ldr	r3, [pc, #88]	@ (80073b8 <USBD_SetConfig+0x144>)
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	0011      	movs	r1, r2
 8007366:	0018      	movs	r0, r3
 8007368:	f7ff f87c 	bl	8006464 <USBD_SetClassConfig>
 800736c:	0003      	movs	r3, r0
 800736e:	2b02      	cmp	r3, #2
 8007370:	d106      	bne.n	8007380 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	0011      	movs	r1, r2
 8007378:	0018      	movs	r0, r3
 800737a:	f000 f908 	bl	800758e <USBD_CtlError>
            return;
 800737e:	e017      	b.n	80073b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	0018      	movs	r0, r3
 8007384:	f000 f9eb 	bl	800775e <USBD_CtlSendStatus>
        break;
 8007388:	e012      	b.n	80073b0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	0018      	movs	r0, r3
 800738e:	f000 f9e6 	bl	800775e <USBD_CtlSendStatus>
        break;
 8007392:	e00d      	b.n	80073b0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f000 f8f7 	bl	800758e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <USBD_SetConfig+0x144>)
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	0011      	movs	r1, r2
 80073a8:	0018      	movs	r0, r3
 80073aa:	f7ff f882 	bl	80064b2 <USBD_ClrClassConfig>
        break;
 80073ae:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80073b0:	46bd      	mov	sp, r7
 80073b2:	b002      	add	sp, #8
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	200001f4 	.word	0x200001f4

080073bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	88db      	ldrh	r3, [r3, #6]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d006      	beq.n	80073dc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	0011      	movs	r1, r2
 80073d4:	0018      	movs	r0, r3
 80073d6:	f000 f8da 	bl	800758e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073da:	e026      	b.n	800742a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	23a7      	movs	r3, #167	@ 0xa7
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	dc02      	bgt.n	80073ee <USBD_GetConfig+0x32>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc03      	bgt.n	80073f4 <USBD_GetConfig+0x38>
 80073ec:	e016      	b.n	800741c <USBD_GetConfig+0x60>
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d00c      	beq.n	800740c <USBD_GetConfig+0x50>
 80073f2:	e013      	b.n	800741c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3308      	adds	r3, #8
 80073fe:	0019      	movs	r1, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	0018      	movs	r0, r3
 8007406:	f000 f940 	bl	800768a <USBD_CtlSendData>
        break;
 800740a:	e00e      	b.n	800742a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1d19      	adds	r1, r3, #4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	0018      	movs	r0, r3
 8007416:	f000 f938 	bl	800768a <USBD_CtlSendData>
        break;
 800741a:	e006      	b.n	800742a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	0011      	movs	r1, r2
 8007422:	0018      	movs	r0, r3
 8007424:	f000 f8b3 	bl	800758e <USBD_CtlError>
        break;
 8007428:	46c0      	nop			@ (mov r8, r8)
}
 800742a:	46c0      	nop			@ (mov r8, r8)
 800742c:	46bd      	mov	sp, r7
 800742e:	b002      	add	sp, #8
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	23a7      	movs	r3, #167	@ 0xa7
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	5cd3      	ldrb	r3, [r2, r3]
 8007444:	3b01      	subs	r3, #1
 8007446:	2b02      	cmp	r3, #2
 8007448:	d822      	bhi.n	8007490 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	88db      	ldrh	r3, [r3, #6]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d006      	beq.n	8007460 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	0011      	movs	r1, r2
 8007458:	0018      	movs	r0, r3
 800745a:	f000 f898 	bl	800758e <USBD_CtlError>
        break;
 800745e:	e01e      	b.n	800749e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	23a9      	movs	r3, #169	@ 0xa9
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	58d3      	ldr	r3, [r2, r3]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2202      	movs	r2, #2
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	330c      	adds	r3, #12
 8007482:	0019      	movs	r1, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	0018      	movs	r0, r3
 800748a:	f000 f8fe 	bl	800768a <USBD_CtlSendData>
      break;
 800748e:	e006      	b.n	800749e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	0011      	movs	r1, r2
 8007496:	0018      	movs	r0, r3
 8007498:	f000 f879 	bl	800758e <USBD_CtlError>
      break;
 800749c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800749e:	46c0      	nop			@ (mov r8, r8)
 80074a0:	46bd      	mov	sp, r7
 80074a2:	b002      	add	sp, #8
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	885b      	ldrh	r3, [r3, #2]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d108      	bne.n	80074ca <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	23a9      	movs	r3, #169	@ 0xa9
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	2101      	movs	r1, #1
 80074c0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	0018      	movs	r0, r3
 80074c6:	f000 f94a 	bl	800775e <USBD_CtlSendStatus>
  }
}
 80074ca:	46c0      	nop			@ (mov r8, r8)
 80074cc:	46bd      	mov	sp, r7
 80074ce:	b002      	add	sp, #8
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	23a7      	movs	r3, #167	@ 0xa7
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	5cd3      	ldrb	r3, [r2, r3]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d80d      	bhi.n	8007506 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d110      	bne.n	8007514 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	23a9      	movs	r3, #169	@ 0xa9
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	2100      	movs	r1, #0
 80074fa:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	0018      	movs	r0, r3
 8007500:	f000 f92d 	bl	800775e <USBD_CtlSendStatus>
      }
      break;
 8007504:	e006      	b.n	8007514 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	0011      	movs	r1, r2
 800750c:	0018      	movs	r0, r3
 800750e:	f000 f83e 	bl	800758e <USBD_CtlError>
      break;
 8007512:	e000      	b.n	8007516 <USBD_ClrFeature+0x44>
      break;
 8007514:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007516:	46c0      	nop			@ (mov r8, r8)
 8007518:	46bd      	mov	sp, r7
 800751a:	b002      	add	sp, #8
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781a      	ldrb	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	785a      	ldrb	r2, [r3, #1]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	3302      	adds	r3, #2
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	001a      	movs	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	3303      	adds	r3, #3
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	b29b      	uxth	r3, r3
 800754a:	18d3      	adds	r3, r2, r3
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	3304      	adds	r3, #4
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	001a      	movs	r2, r3
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	3305      	adds	r3, #5
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	b29b      	uxth	r3, r3
 8007564:	18d3      	adds	r3, r2, r3
 8007566:	b29a      	uxth	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	3306      	adds	r3, #6
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	001a      	movs	r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	3307      	adds	r3, #7
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	b29b      	uxth	r3, r3
 800757e:	18d3      	adds	r3, r2, r3
 8007580:	b29a      	uxth	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	80da      	strh	r2, [r3, #6]

}
 8007586:	46c0      	nop			@ (mov r8, r8)
 8007588:	46bd      	mov	sp, r7
 800758a:	b002      	add	sp, #8
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2180      	movs	r1, #128	@ 0x80
 800759c:	0018      	movs	r0, r3
 800759e:	f000 fc86 	bl	8007eae <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2100      	movs	r1, #0
 80075a6:	0018      	movs	r0, r3
 80075a8:	f000 fc81 	bl	8007eae <USBD_LL_StallEP>
}
 80075ac:	46c0      	nop			@ (mov r8, r8)
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b002      	add	sp, #8
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075c0:	2417      	movs	r4, #23
 80075c2:	193b      	adds	r3, r7, r4
 80075c4:	2200      	movs	r2, #0
 80075c6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d03c      	beq.n	8007648 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 f83d 	bl	8007650 <USBD_GetLen>
 80075d6:	0003      	movs	r3, r0
 80075d8:	3301      	adds	r3, #1
 80075da:	b29b      	uxth	r3, r3
 80075dc:	18db      	adds	r3, r3, r3
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80075e4:	193b      	adds	r3, r7, r4
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	193a      	adds	r2, r7, r4
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	7011      	strb	r1, [r2, #0]
 80075ee:	001a      	movs	r2, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	189b      	adds	r3, r3, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80075fa:	193b      	adds	r3, r7, r4
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	193a      	adds	r2, r7, r4
 8007600:	1c59      	adds	r1, r3, #1
 8007602:	7011      	strb	r1, [r2, #0]
 8007604:	001a      	movs	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	189b      	adds	r3, r3, r2
 800760a:	2203      	movs	r2, #3
 800760c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800760e:	e017      	b.n	8007640 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	60fa      	str	r2, [r7, #12]
 8007616:	2417      	movs	r4, #23
 8007618:	193a      	adds	r2, r7, r4
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	1939      	adds	r1, r7, r4
 800761e:	1c50      	adds	r0, r2, #1
 8007620:	7008      	strb	r0, [r1, #0]
 8007622:	0011      	movs	r1, r2
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	1852      	adds	r2, r2, r1
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800762c:	193b      	adds	r3, r7, r4
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	193a      	adds	r2, r7, r4
 8007632:	1c59      	adds	r1, r3, #1
 8007634:	7011      	strb	r1, [r2, #0]
 8007636:	001a      	movs	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	189b      	adds	r3, r3, r2
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e3      	bne.n	8007610 <USBD_GetString+0x5c>
    }
  }
}
 8007648:	46c0      	nop			@ (mov r8, r8)
 800764a:	46bd      	mov	sp, r7
 800764c:	b007      	add	sp, #28
 800764e:	bd90      	pop	{r4, r7, pc}

08007650 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007658:	230f      	movs	r3, #15
 800765a:	18fb      	adds	r3, r7, r3
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007660:	e008      	b.n	8007674 <USBD_GetLen+0x24>
  {
    len++;
 8007662:	210f      	movs	r1, #15
 8007664:	187b      	adds	r3, r7, r1
 8007666:	781a      	ldrb	r2, [r3, #0]
 8007668:	187b      	adds	r3, r7, r1
 800766a:	3201      	adds	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
    buf++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3301      	adds	r3, #1
 8007672:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f2      	bne.n	8007662 <USBD_GetLen+0x12>
  }

  return len;
 800767c:	230f      	movs	r3, #15
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	781b      	ldrb	r3, [r3, #0]
}
 8007682:	0018      	movs	r0, r3
 8007684:	46bd      	mov	sp, r7
 8007686:	b004      	add	sp, #16
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	1dbb      	adds	r3, r7, #6
 8007696:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	23a5      	movs	r3, #165	@ 0xa5
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	2102      	movs	r1, #2
 80076a0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80076a2:	1dbb      	adds	r3, r7, #6
 80076a4:	881a      	ldrh	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80076aa:	1dbb      	adds	r3, r7, #6
 80076ac:	881a      	ldrh	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076b2:	1dbb      	adds	r3, r7, #6
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	2100      	movs	r1, #0
 80076bc:	f000 fca8 	bl	8008010 <USBD_LL_Transmit>

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	0018      	movs	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b004      	add	sp, #16
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	1dbb      	adds	r3, r7, #6
 80076d6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076d8:	1dbb      	adds	r3, r7, #6
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	2100      	movs	r1, #0
 80076e2:	f000 fc95 	bl	8008010 <USBD_LL_Transmit>

  return USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	0018      	movs	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b004      	add	sp, #16
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	1dbb      	adds	r3, r7, #6
 80076fc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	23a5      	movs	r3, #165	@ 0xa5
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	2103      	movs	r1, #3
 8007706:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007708:	1dbb      	adds	r3, r7, #6
 800770a:	8819      	ldrh	r1, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	23ae      	movs	r3, #174	@ 0xae
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8007714:	1dbb      	adds	r3, r7, #6
 8007716:	8819      	ldrh	r1, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	23b0      	movs	r3, #176	@ 0xb0
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007720:	1dbb      	adds	r3, r7, #6
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	2100      	movs	r1, #0
 800772a:	f000 fca8 	bl	800807e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	0018      	movs	r0, r3
 8007732:	46bd      	mov	sp, r7
 8007734:	b004      	add	sp, #16
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	1dbb      	adds	r3, r7, #6
 8007744:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007746:	1dbb      	adds	r3, r7, #6
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	2100      	movs	r1, #0
 8007750:	f000 fc95 	bl	800807e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	0018      	movs	r0, r3
 8007758:	46bd      	mov	sp, r7
 800775a:	b004      	add	sp, #16
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	23a5      	movs	r3, #165	@ 0xa5
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	2104      	movs	r1, #4
 800776e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	2300      	movs	r3, #0
 8007774:	2200      	movs	r2, #0
 8007776:	2100      	movs	r1, #0
 8007778:	f000 fc4a 	bl	8008010 <USBD_LL_Transmit>

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	0018      	movs	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	b002      	add	sp, #8
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	23a5      	movs	r3, #165	@ 0xa5
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	2105      	movs	r1, #5
 8007796:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	2300      	movs	r3, #0
 800779c:	2200      	movs	r2, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	f000 fc6d 	bl	800807e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	0018      	movs	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	b002      	add	sp, #8
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077b4:	4914      	ldr	r1, [pc, #80]	@ (8007808 <MX_USB_DEVICE_Init+0x58>)
 80077b6:	4b15      	ldr	r3, [pc, #84]	@ (800780c <MX_USB_DEVICE_Init+0x5c>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7fe fdeb 	bl	8006396 <USBD_Init>
 80077c0:	1e03      	subs	r3, r0, #0
 80077c2:	d001      	beq.n	80077c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077c4:	f7f8 fe96 	bl	80004f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077c8:	4a11      	ldr	r2, [pc, #68]	@ (8007810 <MX_USB_DEVICE_Init+0x60>)
 80077ca:	4b10      	ldr	r3, [pc, #64]	@ (800780c <MX_USB_DEVICE_Init+0x5c>)
 80077cc:	0011      	movs	r1, r2
 80077ce:	0018      	movs	r0, r3
 80077d0:	f7fe fe12 	bl	80063f8 <USBD_RegisterClass>
 80077d4:	1e03      	subs	r3, r0, #0
 80077d6:	d001      	beq.n	80077dc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80077d8:	f7f8 fe8c 	bl	80004f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007814 <MX_USB_DEVICE_Init+0x64>)
 80077de:	4b0b      	ldr	r3, [pc, #44]	@ (800780c <MX_USB_DEVICE_Init+0x5c>)
 80077e0:	0011      	movs	r1, r2
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7fe fd5e 	bl	80062a4 <USBD_CDC_RegisterInterface>
 80077e8:	1e03      	subs	r3, r0, #0
 80077ea:	d001      	beq.n	80077f0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80077ec:	f7f8 fe82 	bl	80004f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077f0:	4b06      	ldr	r3, [pc, #24]	@ (800780c <MX_USB_DEVICE_Init+0x5c>)
 80077f2:	0018      	movs	r0, r3
 80077f4:	f7fe fe20 	bl	8006438 <USBD_Start>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d001      	beq.n	8007800 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80077fc:	f7f8 fe7a 	bl	80004f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007800:	46c0      	nop			@ (mov r8, r8)
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	46c0      	nop			@ (mov r8, r8)
 8007808:	2000012c 	.word	0x2000012c
 800780c:	200001f8 	.word	0x200001f8
 8007810:	20000018 	.word	0x20000018
 8007814:	2000011c 	.word	0x2000011c

08007818 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800781c:	4907      	ldr	r1, [pc, #28]	@ (800783c <CDC_Init_FS+0x24>)
 800781e:	4b08      	ldr	r3, [pc, #32]	@ (8007840 <CDC_Init_FS+0x28>)
 8007820:	2200      	movs	r2, #0
 8007822:	0018      	movs	r0, r3
 8007824:	f7fe fd59 	bl	80062da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007828:	4a06      	ldr	r2, [pc, #24]	@ (8007844 <CDC_Init_FS+0x2c>)
 800782a:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <CDC_Init_FS+0x28>)
 800782c:	0011      	movs	r1, r2
 800782e:	0018      	movs	r0, r3
 8007830:	f7fe fd6f 	bl	8006312 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007834:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007836:	0018      	movs	r0, r3
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	200008bc 	.word	0x200008bc
 8007840:	200001f8 	.word	0x200001f8
 8007844:	200004bc 	.word	0x200004bc

08007848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800784c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800784e:	0018      	movs	r0, r3
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6039      	str	r1, [r7, #0]
 800785c:	0011      	movs	r1, r2
 800785e:	1dfb      	adds	r3, r7, #7
 8007860:	1c02      	adds	r2, r0, #0
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	1d3b      	adds	r3, r7, #4
 8007866:	1c0a      	adds	r2, r1, #0
 8007868:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800786a:	1dfb      	adds	r3, r7, #7
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b23      	cmp	r3, #35	@ 0x23
 8007870:	d804      	bhi.n	800787c <CDC_Control_FS+0x28>
 8007872:	009a      	lsls	r2, r3, #2
 8007874:	4b04      	ldr	r3, [pc, #16]	@ (8007888 <CDC_Control_FS+0x34>)
 8007876:	18d3      	adds	r3, r2, r3
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800787c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800787e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b002      	add	sp, #8
 8007886:	bd80      	pop	{r7, pc}
 8007888:	080082f0 	.word	0x080082f0

0800788c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4b06      	ldr	r3, [pc, #24]	@ (80078b4 <CDC_Receive_FS+0x28>)
 800789a:	0011      	movs	r1, r2
 800789c:	0018      	movs	r0, r3
 800789e:	f7fe fd38 	bl	8006312 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078a2:	4b04      	ldr	r3, [pc, #16]	@ (80078b4 <CDC_Receive_FS+0x28>)
 80078a4:	0018      	movs	r0, r3
 80078a6:	f7fe fd48 	bl	800633a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80078aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078ac:	0018      	movs	r0, r3
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b002      	add	sp, #8
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200001f8 	.word	0x200001f8

080078b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	0002      	movs	r2, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	1dfb      	adds	r3, r7, #7
 80078c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2212      	movs	r2, #18
 80078ca:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078cc:	4b02      	ldr	r3, [pc, #8]	@ (80078d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b002      	add	sp, #8
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	20000148 	.word	0x20000148

080078dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	0002      	movs	r2, r0
 80078e4:	6039      	str	r1, [r7, #0]
 80078e6:	1dfb      	adds	r3, r7, #7
 80078e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2204      	movs	r2, #4
 80078ee:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078f2:	0018      	movs	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	b002      	add	sp, #8
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	46c0      	nop			@ (mov r8, r8)
 80078fc:	2000015c 	.word	0x2000015c

08007900 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	0002      	movs	r2, r0
 8007908:	6039      	str	r1, [r7, #0]
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800790e:	1dfb      	adds	r3, r7, #7
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	4908      	ldr	r1, [pc, #32]	@ (800793c <USBD_FS_ProductStrDescriptor+0x3c>)
 800791a:	4b09      	ldr	r3, [pc, #36]	@ (8007940 <USBD_FS_ProductStrDescriptor+0x40>)
 800791c:	0018      	movs	r0, r3
 800791e:	f7ff fe49 	bl	80075b4 <USBD_GetString>
 8007922:	e005      	b.n	8007930 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	4905      	ldr	r1, [pc, #20]	@ (800793c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007928:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <USBD_FS_ProductStrDescriptor+0x40>)
 800792a:	0018      	movs	r0, r3
 800792c:	f7ff fe42 	bl	80075b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007930:	4b02      	ldr	r3, [pc, #8]	@ (800793c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007932:	0018      	movs	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	20000cbc 	.word	0x20000cbc
 8007940:	0800822c 	.word	0x0800822c

08007944 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	0002      	movs	r2, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	1dfb      	adds	r3, r7, #7
 8007950:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4904      	ldr	r1, [pc, #16]	@ (8007968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007956:	4b05      	ldr	r3, [pc, #20]	@ (800796c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007958:	0018      	movs	r0, r3
 800795a:	f7ff fe2b 	bl	80075b4 <USBD_GetString>
  return USBD_StrDesc;
 800795e:	4b02      	ldr	r3, [pc, #8]	@ (8007968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007960:	0018      	movs	r0, r3
 8007962:	46bd      	mov	sp, r7
 8007964:	b002      	add	sp, #8
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000cbc 	.word	0x20000cbc
 800796c:	08008244 	.word	0x08008244

08007970 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	0002      	movs	r2, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	1dfb      	adds	r3, r7, #7
 800797c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	221a      	movs	r2, #26
 8007982:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007984:	f000 f84c 	bl	8007a20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007988:	4b02      	ldr	r3, [pc, #8]	@ (8007994 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800798a:	0018      	movs	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	b002      	add	sp, #8
 8007990:	bd80      	pop	{r7, pc}
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	20000160 	.word	0x20000160

08007998 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	0002      	movs	r2, r0
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	1dfb      	adds	r3, r7, #7
 80079a4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80079a6:	1dfb      	adds	r3, r7, #7
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4908      	ldr	r1, [pc, #32]	@ (80079d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80079b2:	4b09      	ldr	r3, [pc, #36]	@ (80079d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7ff fdfd 	bl	80075b4 <USBD_GetString>
 80079ba:	e005      	b.n	80079c8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	4905      	ldr	r1, [pc, #20]	@ (80079d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80079c2:	0018      	movs	r0, r3
 80079c4:	f7ff fdf6 	bl	80075b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079c8:	4b02      	ldr	r3, [pc, #8]	@ (80079d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80079ca:	0018      	movs	r0, r3
 80079cc:	46bd      	mov	sp, r7
 80079ce:	b002      	add	sp, #8
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	46c0      	nop			@ (mov r8, r8)
 80079d4:	20000cbc 	.word	0x20000cbc
 80079d8:	08008258 	.word	0x08008258

080079dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	0002      	movs	r2, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	1dfb      	adds	r3, r7, #7
 80079e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80079ea:	1dfb      	adds	r3, r7, #7
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	4908      	ldr	r1, [pc, #32]	@ (8007a18 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80079f6:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <USBD_FS_InterfaceStrDescriptor+0x40>)
 80079f8:	0018      	movs	r0, r3
 80079fa:	f7ff fddb 	bl	80075b4 <USBD_GetString>
 80079fe:	e005      	b.n	8007a0c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	4905      	ldr	r1, [pc, #20]	@ (8007a18 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007a04:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7ff fdd4 	bl	80075b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a0c:	4b02      	ldr	r3, [pc, #8]	@ (8007a18 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007a0e:	0018      	movs	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b002      	add	sp, #8
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	20000cbc 	.word	0x20000cbc
 8007a1c:	08008264 	.word	0x08008264

08007a20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a26:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <Get_SerialNum+0x48>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a6c <Get_SerialNum+0x4c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a32:	4b0f      	ldr	r3, [pc, #60]	@ (8007a70 <Get_SerialNum+0x50>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	18d3      	adds	r3, r2, r3
 8007a3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a46:	490b      	ldr	r1, [pc, #44]	@ (8007a74 <Get_SerialNum+0x54>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2208      	movs	r2, #8
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 f815 	bl	8007a7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a52:	4909      	ldr	r1, [pc, #36]	@ (8007a78 <Get_SerialNum+0x58>)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2204      	movs	r2, #4
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f000 f80f 	bl	8007a7c <IntToUnicode>
  }
}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b004      	add	sp, #16
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	1ff80050 	.word	0x1ff80050
 8007a6c:	1ff80054 	.word	0x1ff80054
 8007a70:	1ff80058 	.word	0x1ff80058
 8007a74:	20000162 	.word	0x20000162
 8007a78:	20000172 	.word	0x20000172

08007a7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	1dfb      	adds	r3, r7, #7
 8007a88:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007a8a:	2117      	movs	r1, #23
 8007a8c:	187b      	adds	r3, r7, r1
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007a92:	187b      	adds	r3, r7, r1
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	e02f      	b.n	8007afa <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	0f1b      	lsrs	r3, r3, #28
 8007a9e:	2b09      	cmp	r3, #9
 8007aa0:	d80d      	bhi.n	8007abe <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	0f1b      	lsrs	r3, r3, #28
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	2317      	movs	r3, #23
 8007aaa:	18fb      	adds	r3, r7, r3
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	0019      	movs	r1, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	185b      	adds	r3, r3, r1
 8007ab6:	3230      	adds	r2, #48	@ 0x30
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	e00c      	b.n	8007ad8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	0f1b      	lsrs	r3, r3, #28
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	2317      	movs	r3, #23
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	0019      	movs	r1, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	185b      	adds	r3, r3, r1
 8007ad2:	3237      	adds	r2, #55	@ 0x37
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ade:	2117      	movs	r1, #23
 8007ae0:	187b      	adds	r3, r7, r1
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	18d3      	adds	r3, r2, r3
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007af0:	187b      	adds	r3, r7, r1
 8007af2:	781a      	ldrb	r2, [r3, #0]
 8007af4:	187b      	adds	r3, r7, r1
 8007af6:	3201      	adds	r2, #1
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	2317      	movs	r3, #23
 8007afc:	18fa      	adds	r2, r7, r3
 8007afe:	1dfb      	adds	r3, r7, #7
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3c8      	bcc.n	8007a9a <IntToUnicode+0x1e>
  }
}
 8007b08:	46c0      	nop			@ (mov r8, r8)
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b006      	add	sp, #24
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0a      	ldr	r2, [pc, #40]	@ (8007b4c <HAL_PCD_MspInit+0x38>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d10e      	bne.n	8007b44 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b26:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <HAL_PCD_MspInit+0x3c>)
 8007b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b2a:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <HAL_PCD_MspInit+0x3c>)
 8007b2c:	2180      	movs	r1, #128	@ 0x80
 8007b2e:	0409      	lsls	r1, r1, #16
 8007b30:	430a      	orrs	r2, r1
 8007b32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	201f      	movs	r0, #31
 8007b3a:	f7f8 feab 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007b3e:	201f      	movs	r0, #31
 8007b40:	f7f8 febd 	bl	80008be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b44:	46c0      	nop			@ (mov r8, r8)
 8007b46:	46bd      	mov	sp, r7
 8007b48:	b002      	add	sp, #8
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40005c00 	.word	0x40005c00
 8007b50:	40021000 	.word	0x40021000

08007b54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	23b6      	movs	r3, #182	@ 0xb6
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	58d2      	ldr	r2, [r2, r3]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	21a6      	movs	r1, #166	@ 0xa6
 8007b68:	0089      	lsls	r1, r1, #2
 8007b6a:	468c      	mov	ip, r1
 8007b6c:	4463      	add	r3, ip
 8007b6e:	0019      	movs	r1, r3
 8007b70:	0010      	movs	r0, r2
 8007b72:	f7fe fcb5 	bl	80064e0 <USBD_LL_SetupStage>
}
 8007b76:	46c0      	nop			@ (mov r8, r8)
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	b002      	add	sp, #8
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7e:	b590      	push	{r4, r7, lr}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	000a      	movs	r2, r1
 8007b88:	1cfb      	adds	r3, r7, #3
 8007b8a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	23b6      	movs	r3, #182	@ 0xb6
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	58d4      	ldr	r4, [r2, r3]
 8007b94:	1cfb      	adds	r3, r7, #3
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	23b2      	movs	r3, #178	@ 0xb2
 8007b9c:	0059      	lsls	r1, r3, #1
 8007b9e:	0013      	movs	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	189b      	adds	r3, r3, r2
 8007ba4:	00db      	lsls	r3, r3, #3
 8007ba6:	18c3      	adds	r3, r0, r3
 8007ba8:	185b      	adds	r3, r3, r1
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	1cfb      	adds	r3, r7, #3
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	0019      	movs	r1, r3
 8007bb2:	0020      	movs	r0, r4
 8007bb4:	f7fe fcf2 	bl	800659c <USBD_LL_DataOutStage>
}
 8007bb8:	46c0      	nop			@ (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b003      	add	sp, #12
 8007bbe:	bd90      	pop	{r4, r7, pc}

08007bc0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	000a      	movs	r2, r1
 8007bca:	1cfb      	adds	r3, r7, #3
 8007bcc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	23b6      	movs	r3, #182	@ 0xb6
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	58d0      	ldr	r0, [r2, r3]
 8007bd6:	1cfb      	adds	r3, r7, #3
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	0013      	movs	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	189b      	adds	r3, r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	18cb      	adds	r3, r1, r3
 8007be6:	3324      	adds	r3, #36	@ 0x24
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	1cfb      	adds	r3, r7, #3
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	0019      	movs	r1, r3
 8007bf0:	f7fe fd56 	bl	80066a0 <USBD_LL_DataInStage>
}
 8007bf4:	46c0      	nop			@ (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	23b6      	movs	r3, #182	@ 0xb6
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	58d3      	ldr	r3, [r2, r3]
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f7fe fe8d 	bl	800692c <USBD_LL_SOF>
}
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	46bd      	mov	sp, r7
 8007c16:	b002      	add	sp, #8
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c22:	230f      	movs	r3, #15
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	2201      	movs	r2, #1
 8007c28:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	795b      	ldrb	r3, [r3, #5]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d001      	beq.n	8007c36 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007c32:	f7f8 fc5f 	bl	80004f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	23b6      	movs	r3, #182	@ 0xb6
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	58d2      	ldr	r2, [r2, r3]
 8007c3e:	230f      	movs	r3, #15
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	0019      	movs	r1, r3
 8007c46:	0010      	movs	r0, r2
 8007c48:	f7fe fe2f 	bl	80068aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	23b6      	movs	r3, #182	@ 0xb6
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	58d3      	ldr	r3, [r2, r3]
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7fe fde0 	bl	800681a <USBD_LL_Reset>
}
 8007c5a:	46c0      	nop			@ (mov r8, r8)
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b004      	add	sp, #16
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	23b6      	movs	r3, #182	@ 0xb6
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	58d3      	ldr	r3, [r2, r3]
 8007c74:	0018      	movs	r0, r3
 8007c76:	f7fe fe29 	bl	80068cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7a5b      	ldrb	r3, [r3, #9]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c82:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <HAL_PCD_SuspendCallback+0x34>)
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	4b04      	ldr	r3, [pc, #16]	@ (8007c98 <HAL_PCD_SuspendCallback+0x34>)
 8007c88:	2106      	movs	r1, #6
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007c8e:	46c0      	nop			@ (mov r8, r8)
 8007c90:	46bd      	mov	sp, r7
 8007c92:	b002      	add	sp, #8
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	46c0      	nop			@ (mov r8, r8)
 8007c98:	e000ed00 	.word	0xe000ed00

08007c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7a5b      	ldrb	r3, [r3, #9]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cac:	4b09      	ldr	r3, [pc, #36]	@ (8007cd4 <HAL_PCD_ResumeCallback+0x38>)
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <HAL_PCD_ResumeCallback+0x38>)
 8007cb2:	2106      	movs	r1, #6
 8007cb4:	438a      	bics	r2, r1
 8007cb6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007cb8:	f000 fa42 	bl	8008140 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	23b6      	movs	r3, #182	@ 0xb6
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	58d3      	ldr	r3, [r2, r3]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f7fe fe19 	bl	80068fc <USBD_LL_Resume>
}
 8007cca:	46c0      	nop			@ (mov r8, r8)
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	b002      	add	sp, #8
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	46c0      	nop			@ (mov r8, r8)
 8007cd4:	e000ed00 	.word	0xe000ed00

08007cd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007ce2:	23b6      	movs	r3, #182	@ 0xb6
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	23b0      	movs	r3, #176	@ 0xb0
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4929      	ldr	r1, [pc, #164]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007cf2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007cf4:	4b28      	ldr	r3, [pc, #160]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007cf6:	4a29      	ldr	r2, [pc, #164]	@ (8007d9c <USBD_LL_Init+0xc4>)
 8007cf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007cfa:	4b27      	ldr	r3, [pc, #156]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d00:	4b25      	ldr	r3, [pc, #148]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007d02:	2202      	movs	r2, #2
 8007d04:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d06:	4b24      	ldr	r3, [pc, #144]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007d08:	2202      	movs	r2, #2
 8007d0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d0c:	4b22      	ldr	r3, [pc, #136]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d12:	4b21      	ldr	r3, [pc, #132]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d18:	4b1f      	ldr	r3, [pc, #124]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d98 <USBD_LL_Init+0xc0>)
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7f8 ff85 	bl	8000c30 <HAL_PCD_Init>
 8007d26:	1e03      	subs	r3, r0, #0
 8007d28:	d001      	beq.n	8007d2e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007d2a:	f7f8 fbe3 	bl	80004f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	23b0      	movs	r3, #176	@ 0xb0
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	58d0      	ldr	r0, [r2, r3]
 8007d36:	2318      	movs	r3, #24
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	f7fa fd40 	bl	80027c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	23b0      	movs	r3, #176	@ 0xb0
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	58d0      	ldr	r0, [r2, r3]
 8007d48:	2358      	movs	r3, #88	@ 0x58
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2180      	movs	r1, #128	@ 0x80
 8007d4e:	f7fa fd37 	bl	80027c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	23b0      	movs	r3, #176	@ 0xb0
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	58d0      	ldr	r0, [r2, r3]
 8007d5a:	23c0      	movs	r3, #192	@ 0xc0
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2181      	movs	r1, #129	@ 0x81
 8007d60:	f7fa fd2e 	bl	80027c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	23b0      	movs	r3, #176	@ 0xb0
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	58d0      	ldr	r0, [r2, r3]
 8007d6c:	2388      	movs	r3, #136	@ 0x88
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	2200      	movs	r2, #0
 8007d72:	2101      	movs	r1, #1
 8007d74:	f7fa fd24 	bl	80027c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	23b0      	movs	r3, #176	@ 0xb0
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	58d0      	ldr	r0, [r2, r3]
 8007d80:	2380      	movs	r3, #128	@ 0x80
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	2200      	movs	r2, #0
 8007d86:	2182      	movs	r1, #130	@ 0x82
 8007d88:	f7fa fd1a 	bl	80027c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	0018      	movs	r0, r3
 8007d90:	46bd      	mov	sp, r7
 8007d92:	b002      	add	sp, #8
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	46c0      	nop			@ (mov r8, r8)
 8007d98:	20000ebc 	.word	0x20000ebc
 8007d9c:	40005c00 	.word	0x40005c00

08007da0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da8:	210f      	movs	r1, #15
 8007daa:	187b      	adds	r3, r7, r1
 8007dac:	2200      	movs	r2, #0
 8007dae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db0:	260e      	movs	r6, #14
 8007db2:	19bb      	adds	r3, r7, r6
 8007db4:	2200      	movs	r2, #0
 8007db6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	23b0      	movs	r3, #176	@ 0xb0
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	58d3      	ldr	r3, [r2, r3]
 8007dc0:	000d      	movs	r5, r1
 8007dc2:	187c      	adds	r4, r7, r1
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f7f9 f827 	bl	8000e18 <HAL_PCD_Start>
 8007dca:	0003      	movs	r3, r0
 8007dcc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dce:	19bc      	adds	r4, r7, r6
 8007dd0:	197b      	adds	r3, r7, r5
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f000 f9ba 	bl	800814e <USBD_Get_USB_Status>
 8007dda:	0003      	movs	r3, r0
 8007ddc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007dde:	19bb      	adds	r3, r7, r6
 8007de0:	781b      	ldrb	r3, [r3, #0]
}
 8007de2:	0018      	movs	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b005      	add	sp, #20
 8007de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	000c      	movs	r4, r1
 8007df4:	0010      	movs	r0, r2
 8007df6:	0019      	movs	r1, r3
 8007df8:	1cfb      	adds	r3, r7, #3
 8007dfa:	1c22      	adds	r2, r4, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	1cbb      	adds	r3, r7, #2
 8007e00:	1c02      	adds	r2, r0, #0
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	003b      	movs	r3, r7
 8007e06:	1c0a      	adds	r2, r1, #0
 8007e08:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e0a:	260f      	movs	r6, #15
 8007e0c:	19bb      	adds	r3, r7, r6
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e12:	250e      	movs	r5, #14
 8007e14:	197b      	adds	r3, r7, r5
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	23b0      	movs	r3, #176	@ 0xb0
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	58d0      	ldr	r0, [r2, r3]
 8007e22:	19bc      	adds	r4, r7, r6
 8007e24:	1cbb      	adds	r3, r7, #2
 8007e26:	781d      	ldrb	r5, [r3, #0]
 8007e28:	003b      	movs	r3, r7
 8007e2a:	881a      	ldrh	r2, [r3, #0]
 8007e2c:	1cfb      	adds	r3, r7, #3
 8007e2e:	7819      	ldrb	r1, [r3, #0]
 8007e30:	002b      	movs	r3, r5
 8007e32:	f7f9 f985 	bl	8001140 <HAL_PCD_EP_Open>
 8007e36:	0003      	movs	r3, r0
 8007e38:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e3a:	250e      	movs	r5, #14
 8007e3c:	197c      	adds	r4, r7, r5
 8007e3e:	19bb      	adds	r3, r7, r6
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f000 f983 	bl	800814e <USBD_Get_USB_Status>
 8007e48:	0003      	movs	r3, r0
 8007e4a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e4c:	197b      	adds	r3, r7, r5
 8007e4e:	781b      	ldrb	r3, [r3, #0]
}
 8007e50:	0018      	movs	r0, r3
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b005      	add	sp, #20
 8007e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e58 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	000a      	movs	r2, r1
 8007e62:	1cfb      	adds	r3, r7, #3
 8007e64:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e66:	210f      	movs	r1, #15
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e6e:	260e      	movs	r6, #14
 8007e70:	19bb      	adds	r3, r7, r6
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	23b0      	movs	r3, #176	@ 0xb0
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	58d2      	ldr	r2, [r2, r3]
 8007e7e:	000d      	movs	r5, r1
 8007e80:	187c      	adds	r4, r7, r1
 8007e82:	1cfb      	adds	r3, r7, #3
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	0019      	movs	r1, r3
 8007e88:	0010      	movs	r0, r2
 8007e8a:	f7f9 f9ca 	bl	8001222 <HAL_PCD_EP_Close>
 8007e8e:	0003      	movs	r3, r0
 8007e90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e92:	19bc      	adds	r4, r7, r6
 8007e94:	197b      	adds	r3, r7, r5
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f000 f958 	bl	800814e <USBD_Get_USB_Status>
 8007e9e:	0003      	movs	r3, r0
 8007ea0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ea2:	19bb      	adds	r3, r7, r6
 8007ea4:	781b      	ldrb	r3, [r3, #0]
}
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	b005      	add	sp, #20
 8007eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007eae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	000a      	movs	r2, r1
 8007eb8:	1cfb      	adds	r3, r7, #3
 8007eba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ebc:	210f      	movs	r1, #15
 8007ebe:	187b      	adds	r3, r7, r1
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec4:	260e      	movs	r6, #14
 8007ec6:	19bb      	adds	r3, r7, r6
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	23b0      	movs	r3, #176	@ 0xb0
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	58d2      	ldr	r2, [r2, r3]
 8007ed4:	000d      	movs	r5, r1
 8007ed6:	187c      	adds	r4, r7, r1
 8007ed8:	1cfb      	adds	r3, r7, #3
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	0019      	movs	r1, r3
 8007ede:	0010      	movs	r0, r2
 8007ee0:	f7f9 fa7c 	bl	80013dc <HAL_PCD_EP_SetStall>
 8007ee4:	0003      	movs	r3, r0
 8007ee6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee8:	19bc      	adds	r4, r7, r6
 8007eea:	197b      	adds	r3, r7, r5
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f000 f92d 	bl	800814e <USBD_Get_USB_Status>
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ef8:	19bb      	adds	r3, r7, r6
 8007efa:	781b      	ldrb	r3, [r3, #0]
}
 8007efc:	0018      	movs	r0, r3
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b005      	add	sp, #20
 8007f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	000a      	movs	r2, r1
 8007f0e:	1cfb      	adds	r3, r7, #3
 8007f10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f12:	210f      	movs	r1, #15
 8007f14:	187b      	adds	r3, r7, r1
 8007f16:	2200      	movs	r2, #0
 8007f18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1a:	260e      	movs	r6, #14
 8007f1c:	19bb      	adds	r3, r7, r6
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	23b0      	movs	r3, #176	@ 0xb0
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	58d2      	ldr	r2, [r2, r3]
 8007f2a:	000d      	movs	r5, r1
 8007f2c:	187c      	adds	r4, r7, r1
 8007f2e:	1cfb      	adds	r3, r7, #3
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	0019      	movs	r1, r3
 8007f34:	0010      	movs	r0, r2
 8007f36:	f7f9 faad 	bl	8001494 <HAL_PCD_EP_ClrStall>
 8007f3a:	0003      	movs	r3, r0
 8007f3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3e:	19bc      	adds	r4, r7, r6
 8007f40:	197b      	adds	r3, r7, r5
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	0018      	movs	r0, r3
 8007f46:	f000 f902 	bl	800814e <USBD_Get_USB_Status>
 8007f4a:	0003      	movs	r3, r0
 8007f4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007f4e:	19bb      	adds	r3, r7, r6
 8007f50:	781b      	ldrb	r3, [r3, #0]
}
 8007f52:	0018      	movs	r0, r3
 8007f54:	46bd      	mov	sp, r7
 8007f56:	b005      	add	sp, #20
 8007f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f5a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	000a      	movs	r2, r1
 8007f64:	1cfb      	adds	r3, r7, #3
 8007f66:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	23b0      	movs	r3, #176	@ 0xb0
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	58d3      	ldr	r3, [r2, r3]
 8007f70:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f72:	1cfb      	adds	r3, r7, #3
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da0c      	bge.n	8007f96 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f7c:	1cfb      	adds	r3, r7, #3
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	227f      	movs	r2, #127	@ 0x7f
 8007f82:	401a      	ands	r2, r3
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	0013      	movs	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	189b      	adds	r3, r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	18cb      	adds	r3, r1, r3
 8007f90:	3312      	adds	r3, #18
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	e00d      	b.n	8007fb2 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f96:	1cfb      	adds	r3, r7, #3
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	227f      	movs	r2, #127	@ 0x7f
 8007f9c:	401a      	ands	r2, r3
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	23a9      	movs	r3, #169	@ 0xa9
 8007fa2:	0059      	lsls	r1, r3, #1
 8007fa4:	0013      	movs	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	189b      	adds	r3, r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	18c3      	adds	r3, r0, r3
 8007fae:	185b      	adds	r3, r3, r1
 8007fb0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b004      	add	sp, #16
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	000a      	movs	r2, r1
 8007fc4:	1cfb      	adds	r3, r7, #3
 8007fc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc8:	210f      	movs	r1, #15
 8007fca:	187b      	adds	r3, r7, r1
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd0:	260e      	movs	r6, #14
 8007fd2:	19bb      	adds	r3, r7, r6
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	23b0      	movs	r3, #176	@ 0xb0
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	58d2      	ldr	r2, [r2, r3]
 8007fe0:	000d      	movs	r5, r1
 8007fe2:	187c      	adds	r4, r7, r1
 8007fe4:	1cfb      	adds	r3, r7, #3
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	0019      	movs	r1, r3
 8007fea:	0010      	movs	r0, r2
 8007fec:	f7f9 f87e 	bl	80010ec <HAL_PCD_SetAddress>
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff4:	19bc      	adds	r4, r7, r6
 8007ff6:	197b      	adds	r3, r7, r5
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f000 f8a7 	bl	800814e <USBD_Get_USB_Status>
 8008000:	0003      	movs	r3, r0
 8008002:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008004:	19bb      	adds	r3, r7, r6
 8008006:	781b      	ldrb	r3, [r3, #0]
}
 8008008:	0018      	movs	r0, r3
 800800a:	46bd      	mov	sp, r7
 800800c:	b005      	add	sp, #20
 800800e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008010 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	0008      	movs	r0, r1
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	0019      	movs	r1, r3
 800801e:	230b      	movs	r3, #11
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	1c02      	adds	r2, r0, #0
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	2408      	movs	r4, #8
 8008028:	193b      	adds	r3, r7, r4
 800802a:	1c0a      	adds	r2, r1, #0
 800802c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802e:	2117      	movs	r1, #23
 8008030:	187b      	adds	r3, r7, r1
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008036:	2516      	movs	r5, #22
 8008038:	197b      	adds	r3, r7, r5
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	23b0      	movs	r3, #176	@ 0xb0
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	58d0      	ldr	r0, [r2, r3]
 8008046:	193b      	adds	r3, r7, r4
 8008048:	881d      	ldrh	r5, [r3, #0]
 800804a:	000e      	movs	r6, r1
 800804c:	187c      	adds	r4, r7, r1
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	230b      	movs	r3, #11
 8008052:	18fb      	adds	r3, r7, r3
 8008054:	7819      	ldrb	r1, [r3, #0]
 8008056:	002b      	movs	r3, r5
 8008058:	f7f9 f984 	bl	8001364 <HAL_PCD_EP_Transmit>
 800805c:	0003      	movs	r3, r0
 800805e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008060:	2516      	movs	r5, #22
 8008062:	197c      	adds	r4, r7, r5
 8008064:	19bb      	adds	r3, r7, r6
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	0018      	movs	r0, r3
 800806a:	f000 f870 	bl	800814e <USBD_Get_USB_Status>
 800806e:	0003      	movs	r3, r0
 8008070:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008072:	197b      	adds	r3, r7, r5
 8008074:	781b      	ldrb	r3, [r3, #0]
}
 8008076:	0018      	movs	r0, r3
 8008078:	46bd      	mov	sp, r7
 800807a:	b007      	add	sp, #28
 800807c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800807e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800807e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008080:	b087      	sub	sp, #28
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	0008      	movs	r0, r1
 8008088:	607a      	str	r2, [r7, #4]
 800808a:	0019      	movs	r1, r3
 800808c:	230b      	movs	r3, #11
 800808e:	18fb      	adds	r3, r7, r3
 8008090:	1c02      	adds	r2, r0, #0
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	2408      	movs	r4, #8
 8008096:	193b      	adds	r3, r7, r4
 8008098:	1c0a      	adds	r2, r1, #0
 800809a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809c:	2117      	movs	r1, #23
 800809e:	187b      	adds	r3, r7, r1
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a4:	2516      	movs	r5, #22
 80080a6:	197b      	adds	r3, r7, r5
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	23b0      	movs	r3, #176	@ 0xb0
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	58d0      	ldr	r0, [r2, r3]
 80080b4:	193b      	adds	r3, r7, r4
 80080b6:	881d      	ldrh	r5, [r3, #0]
 80080b8:	000e      	movs	r6, r1
 80080ba:	187c      	adds	r4, r7, r1
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	230b      	movs	r3, #11
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	7819      	ldrb	r1, [r3, #0]
 80080c4:	002b      	movs	r3, r5
 80080c6:	f7f9 f8fd 	bl	80012c4 <HAL_PCD_EP_Receive>
 80080ca:	0003      	movs	r3, r0
 80080cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ce:	2516      	movs	r5, #22
 80080d0:	197c      	adds	r4, r7, r5
 80080d2:	19bb      	adds	r3, r7, r6
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	0018      	movs	r0, r3
 80080d8:	f000 f839 	bl	800814e <USBD_Get_USB_Status>
 80080dc:	0003      	movs	r3, r0
 80080de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80080e0:	197b      	adds	r3, r7, r5
 80080e2:	781b      	ldrb	r3, [r3, #0]
}
 80080e4:	0018      	movs	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b007      	add	sp, #28
 80080ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	000a      	movs	r2, r1
 80080f6:	1cfb      	adds	r3, r7, #3
 80080f8:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	23b0      	movs	r3, #176	@ 0xb0
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	58d2      	ldr	r2, [r2, r3]
 8008102:	1cfb      	adds	r3, r7, #3
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	0019      	movs	r1, r3
 8008108:	0010      	movs	r0, r2
 800810a:	f7f9 f912 	bl	8001332 <HAL_PCD_EP_GetRxCount>
 800810e:	0003      	movs	r3, r0
}
 8008110:	0018      	movs	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	b002      	add	sp, #8
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <USBD_static_malloc+0x14>)
}
 8008122:	0018      	movs	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	b002      	add	sp, #8
 8008128:	bd80      	pop	{r7, pc}
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	20001198 	.word	0x20001198

08008130 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]

}
 8008138:	46c0      	nop			@ (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b002      	add	sp, #8
 800813e:	bd80      	pop	{r7, pc}

08008140 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008144:	f7f8 f8a6 	bl	8000294 <SystemClock_Config>
}
 8008148:	46c0      	nop			@ (mov r8, r8)
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	0002      	movs	r2, r0
 8008156:	1dfb      	adds	r3, r7, #7
 8008158:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815a:	230f      	movs	r3, #15
 800815c:	18fb      	adds	r3, r7, r3
 800815e:	2200      	movs	r2, #0
 8008160:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008162:	1dfb      	adds	r3, r7, #7
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b03      	cmp	r3, #3
 8008168:	d017      	beq.n	800819a <USBD_Get_USB_Status+0x4c>
 800816a:	dc1b      	bgt.n	80081a4 <USBD_Get_USB_Status+0x56>
 800816c:	2b02      	cmp	r3, #2
 800816e:	d00f      	beq.n	8008190 <USBD_Get_USB_Status+0x42>
 8008170:	dc18      	bgt.n	80081a4 <USBD_Get_USB_Status+0x56>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <USBD_Get_USB_Status+0x2e>
 8008176:	2b01      	cmp	r3, #1
 8008178:	d005      	beq.n	8008186 <USBD_Get_USB_Status+0x38>
 800817a:	e013      	b.n	80081a4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800817c:	230f      	movs	r3, #15
 800817e:	18fb      	adds	r3, r7, r3
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
    break;
 8008184:	e013      	b.n	80081ae <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008186:	230f      	movs	r3, #15
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	2202      	movs	r2, #2
 800818c:	701a      	strb	r2, [r3, #0]
    break;
 800818e:	e00e      	b.n	80081ae <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008190:	230f      	movs	r3, #15
 8008192:	18fb      	adds	r3, r7, r3
 8008194:	2201      	movs	r2, #1
 8008196:	701a      	strb	r2, [r3, #0]
    break;
 8008198:	e009      	b.n	80081ae <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800819a:	230f      	movs	r3, #15
 800819c:	18fb      	adds	r3, r7, r3
 800819e:	2202      	movs	r2, #2
 80081a0:	701a      	strb	r2, [r3, #0]
    break;
 80081a2:	e004      	b.n	80081ae <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80081a4:	230f      	movs	r3, #15
 80081a6:	18fb      	adds	r3, r7, r3
 80081a8:	2202      	movs	r2, #2
 80081aa:	701a      	strb	r2, [r3, #0]
    break;
 80081ac:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80081ae:	230f      	movs	r3, #15
 80081b0:	18fb      	adds	r3, r7, r3
 80081b2:	781b      	ldrb	r3, [r3, #0]
}
 80081b4:	0018      	movs	r0, r3
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b004      	add	sp, #16
 80081ba:	bd80      	pop	{r7, pc}

080081bc <memset>:
 80081bc:	0003      	movs	r3, r0
 80081be:	1882      	adds	r2, r0, r2
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d100      	bne.n	80081c6 <memset+0xa>
 80081c4:	4770      	bx	lr
 80081c6:	7019      	strb	r1, [r3, #0]
 80081c8:	3301      	adds	r3, #1
 80081ca:	e7f9      	b.n	80081c0 <memset+0x4>

080081cc <__libc_init_array>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	2600      	movs	r6, #0
 80081d0:	4c0c      	ldr	r4, [pc, #48]	@ (8008204 <__libc_init_array+0x38>)
 80081d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008208 <__libc_init_array+0x3c>)
 80081d4:	1b64      	subs	r4, r4, r5
 80081d6:	10a4      	asrs	r4, r4, #2
 80081d8:	42a6      	cmp	r6, r4
 80081da:	d109      	bne.n	80081f0 <__libc_init_array+0x24>
 80081dc:	2600      	movs	r6, #0
 80081de:	f000 f819 	bl	8008214 <_init>
 80081e2:	4c0a      	ldr	r4, [pc, #40]	@ (800820c <__libc_init_array+0x40>)
 80081e4:	4d0a      	ldr	r5, [pc, #40]	@ (8008210 <__libc_init_array+0x44>)
 80081e6:	1b64      	subs	r4, r4, r5
 80081e8:	10a4      	asrs	r4, r4, #2
 80081ea:	42a6      	cmp	r6, r4
 80081ec:	d105      	bne.n	80081fa <__libc_init_array+0x2e>
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	00b3      	lsls	r3, r6, #2
 80081f2:	58eb      	ldr	r3, [r5, r3]
 80081f4:	4798      	blx	r3
 80081f6:	3601      	adds	r6, #1
 80081f8:	e7ee      	b.n	80081d8 <__libc_init_array+0xc>
 80081fa:	00b3      	lsls	r3, r6, #2
 80081fc:	58eb      	ldr	r3, [r5, r3]
 80081fe:	4798      	blx	r3
 8008200:	3601      	adds	r6, #1
 8008202:	e7f2      	b.n	80081ea <__libc_init_array+0x1e>
 8008204:	08008380 	.word	0x08008380
 8008208:	08008380 	.word	0x08008380
 800820c:	08008384 	.word	0x08008384
 8008210:	08008380 	.word	0x08008380

08008214 <_init>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821a:	bc08      	pop	{r3}
 800821c:	469e      	mov	lr, r3
 800821e:	4770      	bx	lr

08008220 <_fini>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	46c0      	nop			@ (mov r8, r8)
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr
