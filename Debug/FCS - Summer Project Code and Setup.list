
FCS - Summer Project Code and Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d40  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008e00  08008e00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f94  08008f94  0000a1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008f94  08008f94  0000a1cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008f94  08008f94  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08008f9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  200001cc  08009168  0000a1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  08009168  0000a558  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e834  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fae  00000000  00000000  00018a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000995  00000000  00000000  0001c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016720  00000000  00000000  0001d05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113e4  00000000  00000000  0003377d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ce76  00000000  00000000  00044b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c19d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003104  00000000  00000000  000c1a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c4b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001cc 	.word	0x200001cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008de8 	.word	0x08008de8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d0 	.word	0x200001d0
 8000104:	08008de8 	.word	0x08008de8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <Imu_Start_Transmission>:
 *
 * Takes: void
 * Returns: void
 */
void Imu_Start_Transmission(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_RESET);
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <Imu_Start_Transmission+0x18>)
 800024a:	2200      	movs	r2, #0
 800024c:	2101      	movs	r1, #1
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fe20 	bl	8000e94 <HAL_GPIO_WritePin>
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	50000400 	.word	0x50000400

08000260 <Imu_Stop_Transmission>:
 *
 * Takes: void
 * Returns: void
 */
void Imu_Stop_Transmission(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <Imu_Stop_Transmission+0x18>)
 8000266:	2201      	movs	r2, #1
 8000268:	2101      	movs	r1, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fe12 	bl	8000e94 <HAL_GPIO_WritePin>
}
 8000270:	46c0      	nop			@ (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	50000400 	.word	0x50000400

0800027c <Imu_Reg16_Read>:
 *
 * Takes: uint8_t address and 2 pointers
 * Returns: uint8_t status
 */
uint8_t Imu_Reg16_Read(uint8_t addr, uint8_t *low_byte, uint8_t *high_byte)
{
 800027c:	b5b0      	push	{r4, r5, r7, lr}
 800027e:	b08a      	sub	sp, #40	@ 0x28
 8000280:	af02      	add	r7, sp, #8
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	607a      	str	r2, [r7, #4]
 8000286:	210f      	movs	r1, #15
 8000288:	187b      	adds	r3, r7, r1
 800028a:	1c02      	adds	r2, r0, #0
 800028c:	701a      	strb	r2, [r3, #0]
     * Create a transmit array that will set the transmit data to READ
     * Will have 4 bytes [(read set + addr), 0x00, 0x00, 0x00]
     *
     * Command byte: RnW = 1 (read) | Adress [6:0]
     */
    uint8_t tx_buf[4] = { ((addr & 0x7F) | 0x80), 0x00, 0x00, 0x00 };
 800028e:	187b      	adds	r3, r7, r1
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	4252      	negs	r2, r2
 8000296:	4313      	orrs	r3, r2
 8000298:	b2da      	uxtb	r2, r3
 800029a:	2418      	movs	r4, #24
 800029c:	193b      	adds	r3, r7, r4
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2200      	movs	r2, #0
 80002a4:	705a      	strb	r2, [r3, #1]
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	2200      	movs	r2, #0
 80002aa:	709a      	strb	r2, [r3, #2]
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	2200      	movs	r2, #0
 80002b0:	70da      	strb	r2, [r3, #3]
    uint8_t rx_buf[4] = { 0 };
 80002b2:	2514      	movs	r5, #20
 80002b4:	197b      	adds	r3, r7, r5
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]

    Imu_Start_Transmission();
 80002ba:	f7ff ffc3 	bl	8000244 <Imu_Start_Transmission>

    // Send and get data while seeing if out status is ok
    uint8_t status = (HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 4,
 80002be:	197a      	adds	r2, r7, r5
 80002c0:	1939      	adds	r1, r7, r4
 80002c2:	480f      	ldr	r0, [pc, #60]	@ (8000300 <Imu_Reg16_Read+0x84>)
 80002c4:	2301      	movs	r3, #1
 80002c6:	425b      	negs	r3, r3
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2304      	movs	r3, #4
 80002cc:	f003 fd2c 	bl	8003d28 <HAL_SPI_TransmitReceive>
 80002d0:	0003      	movs	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 80002d2:	425a      	negs	r2, r3
 80002d4:	4153      	adcs	r3, r2
 80002d6:	b2da      	uxtb	r2, r3
    uint8_t status = (HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 4,
 80002d8:	241f      	movs	r4, #31
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	701a      	strb	r2, [r3, #0]

    Imu_Stop_Transmission();
 80002de:	f7ff ffbf 	bl	8000260 <Imu_Stop_Transmission>

    *low_byte = rx_buf[2];
 80002e2:	197b      	adds	r3, r7, r5
 80002e4:	789a      	ldrb	r2, [r3, #2]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	701a      	strb	r2, [r3, #0]
    *high_byte = rx_buf[3];
 80002ea:	197b      	adds	r3, r7, r5
 80002ec:	78da      	ldrb	r2, [r3, #3]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	701a      	strb	r2, [r3, #0]
    return status;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	781b      	ldrb	r3, [r3, #0]
}
 80002f6:	0018      	movs	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b008      	add	sp, #32
 80002fc:	bdb0      	pop	{r4, r5, r7, pc}
 80002fe:	46c0      	nop			@ (mov r8, r8)
 8000300:	200001e8 	.word	0x200001e8

08000304 <Imu_Reg16_Write>:
 * Takes: uint8_t addr and 2 uint8_t instructions
 * Returns: uint8_t status
 */
uint8_t Imu_Reg16_Write(uint8_t addr, uint8_t low_instruction_byte,
        uint8_t high_instruction_byte)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	0004      	movs	r4, r0
 800030c:	0008      	movs	r0, r1
 800030e:	0011      	movs	r1, r2
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	1c22      	adds	r2, r4, #0
 8000314:	701a      	strb	r2, [r3, #0]
 8000316:	1dbb      	adds	r3, r7, #6
 8000318:	1c02      	adds	r2, r0, #0
 800031a:	701a      	strb	r2, [r3, #0]
 800031c:	1d7b      	adds	r3, r7, #5
 800031e:	1c0a      	adds	r2, r1, #0
 8000320:	701a      	strb	r2, [r3, #0]
    // Store the addr, then the instruction with low byte first
    // Command byte: RnW = 0 (write) | Adress [6:0]
    uint8_t tx_buf[3] = { (addr & 0x7F), low_instruction_byte,
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	227f      	movs	r2, #127	@ 0x7f
 8000328:	4013      	ands	r3, r2
 800032a:	b2da      	uxtb	r2, r3
 800032c:	240c      	movs	r4, #12
 800032e:	193b      	adds	r3, r7, r4
 8000330:	701a      	strb	r2, [r3, #0]
 8000332:	193b      	adds	r3, r7, r4
 8000334:	1dba      	adds	r2, r7, #6
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	705a      	strb	r2, [r3, #1]
 800033a:	193b      	adds	r3, r7, r4
 800033c:	1d7a      	adds	r2, r7, #5
 800033e:	7812      	ldrb	r2, [r2, #0]
 8000340:	709a      	strb	r2, [r3, #2]
            high_instruction_byte };

    // Tranasmit data
    Imu_Start_Transmission();
 8000342:	f7ff ff7f 	bl	8000244 <Imu_Start_Transmission>
    uint8_t status = (HAL_SPI_Transmit(&hspi1, tx_buf, sizeof(tx_buf),
 8000346:	2301      	movs	r3, #1
 8000348:	425b      	negs	r3, r3
 800034a:	1939      	adds	r1, r7, r4
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <Imu_Reg16_Write+0x70>)
 800034e:	2203      	movs	r2, #3
 8000350:	f003 fb9a 	bl	8003a88 <HAL_SPI_Transmit>
 8000354:	0003      	movs	r3, r0
            HAL_MAX_DELAY) == HAL_OK);
 8000356:	425a      	negs	r2, r3
 8000358:	4153      	adcs	r3, r2
 800035a:	b2da      	uxtb	r2, r3
    uint8_t status = (HAL_SPI_Transmit(&hspi1, tx_buf, sizeof(tx_buf),
 800035c:	240f      	movs	r4, #15
 800035e:	193b      	adds	r3, r7, r4
 8000360:	701a      	strb	r2, [r3, #0]
    Imu_Stop_Transmission();
 8000362:	f7ff ff7d 	bl	8000260 <Imu_Stop_Transmission>

    //uint8_t status = ( HAL_SPI_Transmit(&hspi1, tx_buf, , Timeout))
    return status;
 8000366:	193b      	adds	r3, r7, r4
 8000368:	781b      	ldrb	r3, [r3, #0]
}
 800036a:	0018      	movs	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	b005      	add	sp, #20
 8000370:	bd90      	pop	{r4, r7, pc}
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	200001e8 	.word	0x200001e8

08000378 <Imu_SetUp>:
 * Take: Void
 * Return: Void
 *
 */
void Imu_SetUp(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
    // Set the data bytes
    uint8_t low_byte = 0x00;
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
    uint8_t high_byte = 0x00;
 8000384:	1dbb      	adds	r3, r7, #6
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]

    // Initialize SPI
    Imu_Reg16_Read(IMU_REG_CHIP_ADDR, 0x00, 0x00);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ff74 	bl	800027c <Imu_Reg16_Read>

    // Check chip_id
    Imu_Reg16_Read(IMU_REG_CHIP_ADDR, &low_byte, &high_byte);
 8000394:	1dba      	adds	r2, r7, #6
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	0019      	movs	r1, r3
 800039a:	2000      	movs	r0, #0
 800039c:	f7ff ff6e 	bl	800027c <Imu_Reg16_Read>
    if (low_byte == IMU_REG_CHIP_ID)
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b43      	cmp	r3, #67	@ 0x43
 80003a6:	d105      	bne.n	80003b4 <Imu_SetUp+0x3c>
    {
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80003a8:	4b19      	ldr	r3, [pc, #100]	@ (8000410 <Imu_SetUp+0x98>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	2140      	movs	r1, #64	@ 0x40
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fd70 	bl	8000e94 <HAL_GPIO_WritePin>
    }

    // Check if power is ok
    Imu_Reg16_Read(IMU_ERR_ADDR, &low_byte, &high_byte);
 80003b4:	1dba      	adds	r2, r7, #6
 80003b6:	1dfb      	adds	r3, r7, #7
 80003b8:	0019      	movs	r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ff5e 	bl	800027c <Imu_Reg16_Read>
    if ((low_byte & 0x01) == 0x00) // Bitmask on low_byte to make sure only comparing LSB
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	001a      	movs	r2, r3
 80003c6:	2301      	movs	r3, #1
 80003c8:	4013      	ands	r3, r2
 80003ca:	d105      	bne.n	80003d8 <Imu_SetUp+0x60>
    {
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80003cc:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <Imu_SetUp+0x98>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	2120      	movs	r1, #32
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fd5e 	bl	8000e94 <HAL_GPIO_WritePin>
    // Check if sensor status is ok
    /*
     * NOTE: Sometimes this needs a hard reset (removing power)
     *         since the register is instantly reset after 1 read
     */
    Imu_Reg16_Read(IMU_STATUS_ADDR, &low_byte, &high_byte);
 80003d8:	1dba      	adds	r2, r7, #6
 80003da:	1dfb      	adds	r3, r7, #7
 80003dc:	0019      	movs	r1, r3
 80003de:	2002      	movs	r0, #2
 80003e0:	f7ff ff4c 	bl	800027c <Imu_Reg16_Read>
    if ((low_byte & 0x01) == 0x01)
 80003e4:	1dfb      	adds	r3, r7, #7
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	001a      	movs	r2, r3
 80003ea:	2301      	movs	r3, #1
 80003ec:	4013      	ands	r3, r2
 80003ee:	d005      	beq.n	80003fc <Imu_SetUp+0x84>
    {
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80003f0:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <Imu_SetUp+0x98>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	2120      	movs	r1, #32
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fd4c 	bl	8000e94 <HAL_GPIO_WritePin>
    }

    // Setup of Gyro
    Imu_Reg16_Write(IMU_GYRO_CONFIG_ADDR, IMU_GYRO_CONFIG_LOW,
 80003fc:	2240      	movs	r2, #64	@ 0x40
 80003fe:	214b      	movs	r1, #75	@ 0x4b
 8000400:	2021      	movs	r0, #33	@ 0x21
 8000402:	f7ff ff7f 	bl	8000304 <Imu_Reg16_Write>
//    }
//    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);

    // Excelente! Successful init!

} /* END of Imu_Setup */
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	50000400 	.word	0x50000400

08000414 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800041a:	f000 fa6f 	bl	80008fc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800041e:	f000 f853 	bl	80004c8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000422:	f000 f8fb 	bl	800061c <MX_GPIO_Init>
    MX_SPI1_Init();
 8000426:	f000 f8c1 	bl	80005ac <MX_SPI1_Init>
    MX_USB_DEVICE_Init();
 800042a:	f007 fb0b 	bl	8007a44 <MX_USB_DEVICE_Init>
    // Create rx array to store read information
    while (1)
    {

        /* START of uncommented code for while loop*/
        if (!imu_first_time)
 800042e:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <main+0xa8>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2201      	movs	r2, #1
 8000434:	4053      	eors	r3, r2
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d004      	beq.n	8000446 <main+0x32>
        {
            Imu_SetUp();
 800043c:	f7ff ff9c 	bl	8000378 <Imu_SetUp>
            imu_first_time = true;
 8000440:	4b1e      	ldr	r3, [pc, #120]	@ (80004bc <main+0xa8>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
        }
        // Set the data bytes
        uint8_t data_low_byte = 0x00;
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]
        uint8_t data_high_byte = 0x00;
 800044c:	1dbb      	adds	r3, r7, #6
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]

        uint8_t read_low_byte = 0x00;
 8000452:	1d7b      	adds	r3, r7, #5
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
        uint8_t read__high_byte = 0x00;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]

        Imu_Reg16_Read(IMU_STATUS_ADDR, &read_low_byte, &read__high_byte);
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	1d7b      	adds	r3, r7, #5
 8000462:	0019      	movs	r1, r3
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff ff09 	bl	800027c <Imu_Reg16_Read>

        if ((read_low_byte & 0x40) == 0x40)
 800046a:	1d7b      	adds	r3, r7, #5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	001a      	movs	r2, r3
 8000470:	2340      	movs	r3, #64	@ 0x40
 8000472:	4013      	ands	r3, r2
 8000474:	d0db      	beq.n	800042e <main+0x1a>
        {
            Imu_Reg16_Read(0x03, &data_low_byte, &data_high_byte);
 8000476:	1dba      	adds	r2, r7, #6
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	0019      	movs	r1, r3
 800047c:	2003      	movs	r0, #3
 800047e:	f7ff fefd 	bl	800027c <Imu_Reg16_Read>
            sprintf(tx_buf, "%u", data_high_byte);
 8000482:	1dbb      	adds	r3, r7, #6
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	001a      	movs	r2, r3
 8000488:	490d      	ldr	r1, [pc, #52]	@ (80004c0 <main+0xac>)
 800048a:	2408      	movs	r4, #8
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	f008 f80e 	bl	80084b0 <siprintf>
            sprintf(tx_buf, "%u\r\n", data_low_byte);
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	001a      	movs	r2, r3
 800049a:	490a      	ldr	r1, [pc, #40]	@ (80004c4 <main+0xb0>)
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	f008 f806 	bl	80084b0 <siprintf>
            CDC_Transmit_FS((uint8_t*) tx_buf, strlen(tx_buf));
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	f7ff fe2e 	bl	8000108 <strlen>
 80004ac:	0002      	movs	r2, r0
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f007 fb4a 	bl	8007b4c <CDC_Transmit_FS>
    {
 80004b8:	e7b9      	b.n	800042e <main+0x1a>
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	20000240 	.word	0x20000240
 80004c0:	08008e00 	.word	0x08008e00
 80004c4:	08008e04 	.word	0x08008e04

080004c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b09d      	sub	sp, #116	@ 0x74
 80004cc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004ce:	2438      	movs	r4, #56	@ 0x38
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2338      	movs	r3, #56	@ 0x38
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f008 f80b 	bl	80084f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004de:	2324      	movs	r3, #36	@ 0x24
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f008 f803 	bl	80084f4 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	2324      	movs	r3, #36	@ 0x24
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f007 fffc 	bl	80084f4 <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	4b29      	ldr	r3, [pc, #164]	@ (80005a4 <SystemClock_Config+0xdc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a29      	ldr	r2, [pc, #164]	@ (80005a8 <SystemClock_Config+0xe0>)
 8000502:	401a      	ands	r2, r3
 8000504:	4b27      	ldr	r3, [pc, #156]	@ (80005a4 <SystemClock_Config+0xdc>)
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	0109      	lsls	r1, r1, #4
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	0252      	lsls	r2, r2, #9
 800051c:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2202      	movs	r2, #2
 8000522:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	0252      	lsls	r2, r2, #9
 800052a:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	0312      	lsls	r2, r2, #12
 8000532:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	0412      	lsls	r2, r2, #16
 800053a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	187b      	adds	r3, r7, r1
 800053e:	0018      	movs	r0, r3
 8000540:	f002 fb12 	bl	8002b68 <HAL_RCC_OscConfig>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x84>
    {
        Error_Handler();
 8000548:	f000 f8ee 	bl	8000728 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800054c:	2124      	movs	r1, #36	@ 0x24
 800054e:	187b      	adds	r3, r7, r1
 8000550:	220f      	movs	r2, #15
 8000552:	601a      	str	r2, [r3, #0]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2202      	movs	r2, #2
 8000558:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2100      	movs	r1, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fecd 	bl	8003310 <HAL_RCC_ClockConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xb6>
    {
        Error_Handler();
 800057a:	f000 f8d5 	bl	8000728 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800057e:	003b      	movs	r3, r7
 8000580:	2240      	movs	r2, #64	@ 0x40
 8000582:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000584:	003b      	movs	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058a:	003b      	movs	r3, r7
 800058c:	0018      	movs	r0, r3
 800058e:	f003 f88b 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xd2>
    {
        Error_Handler();
 8000596:	f000 f8c7 	bl	8000728 <Error_Handler>
    }
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b01d      	add	sp, #116	@ 0x74
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40007000 	.word	0x40007000
 80005a8:	ffffe7ff 	.word	0xffffe7ff

080005ac <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005b2:	4a19      	ldr	r2, [pc, #100]	@ (8000618 <MX_SPI1_Init+0x6c>)
 80005b4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80005b6:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005b8:	2282      	movs	r2, #130	@ 0x82
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005c4:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d0:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005e0:	2208      	movs	r2, #8
 80005e2:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 7;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005f8:	2207      	movs	r2, #7
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <MX_SPI1_Init+0x68>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f003 f9ae 	bl	8003960 <HAL_SPI_Init>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8000608:	f000 f88e 	bl	8000728 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	200001e8 	.word	0x200001e8
 8000618:	40013000 	.word	0x40013000

0800061c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c
 8000620:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f007 ff61 	bl	80084f4 <memset>
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b3b      	ldr	r3, [pc, #236]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000636:	4b3a      	ldr	r3, [pc, #232]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800063e:	4b38      	ldr	r3, [pc, #224]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b35      	ldr	r3, [pc, #212]	@ (8000720 <MX_GPIO_Init+0x104>)
 800064c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800064e:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000650:	2180      	movs	r1, #128	@ 0x80
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000656:	4b32      	ldr	r3, [pc, #200]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	2280      	movs	r2, #128	@ 0x80
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000666:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800066e:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <MX_GPIO_Init+0x104>)
 800067c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800067e:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <MX_GPIO_Init+0x104>)
 8000688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin | FLASH_HOLD_RST_Pin | FLASH_WP_Pin,
 8000692:	23a0      	movs	r3, #160	@ 0xa0
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2200      	movs	r2, #0
 8000698:	2107      	movs	r1, #7
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fbfa 	bl	8000e94 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, IMU_NCS_Pin | LED_YELLOW_Pin | LED_GREEN_Pin,
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <MX_GPIO_Init+0x108>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	2161      	movs	r1, #97	@ 0x61
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fbf4 	bl	8000e94 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pins : FLASH_CS_Pin FLASH_HOLD_RST_Pin FLASH_WP_Pin */
    GPIO_InitStruct.Pin = FLASH_CS_Pin | FLASH_HOLD_RST_Pin | FLASH_WP_Pin;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2207      	movs	r2, #7
 80006b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	193a      	adds	r2, r7, r4
 80006c6:	23a0      	movs	r3, #160	@ 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fa63 	bl	8000b98 <HAL_GPIO_Init>

    /*Configure GPIO pins : IMU_NCS_Pin LED_YELLOW_Pin LED_GREEN_Pin */
    GPIO_InitStruct.Pin = IMU_NCS_Pin | LED_YELLOW_Pin | LED_GREEN_Pin;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2261      	movs	r2, #97	@ 0x61
 80006d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <MX_GPIO_Init+0x108>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f000 fa51 	bl	8000b98 <HAL_GPIO_Init>

    /*Configure GPIO pin : IMU_INT1_Pin */
    GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2202      	movs	r2, #2
 80006fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2288      	movs	r2, #136	@ 0x88
 8000702:	0352      	lsls	r2, r2, #13
 8000704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 800070c:	187b      	adds	r3, r7, r1
 800070e:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <MX_GPIO_Init+0x108>)
 8000710:	0019      	movs	r1, r3
 8000712:	0010      	movs	r0, r2
 8000714:	f000 fa40 	bl	8000b98 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b00b      	add	sp, #44	@ 0x2c
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	50000400 	.word	0x50000400

08000728 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	e7fd      	b.n	8000730 <Error_Handler+0x8>

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <HAL_MspInit+0x24>)
 800073a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_MspInit+0x24>)
 800073e:	2101      	movs	r1, #1
 8000740:	430a      	orrs	r2, r1
 8000742:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <HAL_MspInit+0x24>)
 8000746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000748:	4b03      	ldr	r3, [pc, #12]	@ (8000758 <HAL_MspInit+0x24>)
 800074a:	2180      	movs	r1, #128	@ 0x80
 800074c:	0549      	lsls	r1, r1, #21
 800074e:	430a      	orrs	r2, r1
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b089      	sub	sp, #36	@ 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	240c      	movs	r4, #12
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	2314      	movs	r3, #20
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f007 fec0 	bl	80084f4 <memset>
  if(hspi->Instance==SPI1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <HAL_SPI_MspInit+0x80>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d129      	bne.n	80007d2 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_SPI_MspInit+0x84>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_SPI_MspInit+0x84>)
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	0149      	lsls	r1, r1, #5
 8000788:	430a      	orrs	r2, r1
 800078a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_SPI_MspInit+0x84>)
 800078e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000790:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <HAL_SPI_MspInit+0x84>)
 8000792:	2101      	movs	r1, #1
 8000794:	430a      	orrs	r2, r1
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_SPI_MspInit+0x84>)
 800079a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079c:	2201      	movs	r2, #1
 800079e:	4013      	ands	r3, r2
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	22e0      	movs	r2, #224	@ 0xe0
 80007aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2203      	movs	r2, #3
 80007bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	187a      	adds	r2, r7, r1
 80007c6:	23a0      	movs	r3, #160	@ 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 f9e3 	bl	8000b98 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b009      	add	sp, #36	@ 0x24
 80007d8:	bd90      	pop	{r4, r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 f8ca 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800081c:	4b03      	ldr	r3, [pc, #12]	@ (800082c <USB_IRQHandler+0x14>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fc70 	bl	8001104 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	20000f14 	.word	0x20000f14

08000830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000838:	4a14      	ldr	r2, [pc, #80]	@ (800088c <_sbrk+0x5c>)
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <_sbrk+0x60>)
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <_sbrk+0x64>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <_sbrk+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d207      	bcs.n	8000870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000860:	f007 fe50 	bl	8008504 <__errno>
 8000864:	0003      	movs	r3, r0
 8000866:	220c      	movs	r2, #12
 8000868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086a:	2301      	movs	r3, #1
 800086c:	425b      	negs	r3, r3
 800086e:	e009      	b.n	8000884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	18d2      	adds	r2, r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <_sbrk+0x64>)
 8000880:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b006      	add	sp, #24
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20005000 	.word	0x20005000
 8000890:	00000400 	.word	0x00000400
 8000894:	20000244 	.word	0x20000244
 8000898:	20001558 	.word	0x20001558

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008a8:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008aa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ac:	f7ff fff6 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	@ (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	@ (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f007 fe1b 	bl	8008510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008da:	f7ff fd9b 	bl	8000414 <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
   ldr   r0, =_estack
 80008e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80008ec:	08008f9c 	.word	0x08008f9c
  ldr r2, =_sbss
 80008f0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80008f4:	20001558 	.word	0x20001558

080008f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_COMP_IRQHandler>
	...

080008fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_Init+0x3c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_Init+0x3c>)
 800090e:	2140      	movs	r1, #64	@ 0x40
 8000910:	430a      	orrs	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f811 	bl	800093c <HAL_InitTick>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d003      	beq.n	8000926 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e001      	b.n	800092a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000926:	f7ff ff05 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <HAL_InitTick+0x5c>)
 8000946:	681c      	ldr	r4, [r3, #0]
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_InitTick+0x60>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	0019      	movs	r1, r3
 800094e:	23fa      	movs	r3, #250	@ 0xfa
 8000950:	0098      	lsls	r0, r3, #2
 8000952:	f7ff fbeb 	bl	800012c <__udivsi3>
 8000956:	0003      	movs	r3, r0
 8000958:	0019      	movs	r1, r3
 800095a:	0020      	movs	r0, r4
 800095c:	f7ff fbe6 	bl	800012c <__udivsi3>
 8000960:	0003      	movs	r3, r0
 8000962:	0018      	movs	r0, r3
 8000964:	f000 f90b 	bl	8000b7e <HAL_SYSTICK_Config>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e00f      	b.n	8000990 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d80b      	bhi.n	800098e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	2301      	movs	r3, #1
 800097a:	425b      	negs	r3, r3
 800097c:	2200      	movs	r2, #0
 800097e:	0018      	movs	r0, r3
 8000980:	f000 f8d8 	bl	8000b34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_InitTick+0x64>)
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	b003      	add	sp, #12
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	18d2      	adds	r2, r2, r3
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000248 	.word	0x20000248

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	@ (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	20000248 	.word	0x20000248

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ee:	d809      	bhi.n	8000a04 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	001a      	movs	r2, r3
 80009f6:	231f      	movs	r3, #31
 80009f8:	401a      	ands	r2, r3
 80009fa:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_EnableIRQ+0x30>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	4091      	lsls	r1, r2
 8000a00:	000a      	movs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
  }
}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a24:	d828      	bhi.n	8000a78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a26:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae4 <__NVIC_SetPriority+0xd4>)
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	33c0      	adds	r3, #192	@ 0xc0
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	589b      	ldr	r3, [r3, r2]
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	400a      	ands	r2, r1
 8000a40:	00d2      	lsls	r2, r2, #3
 8000a42:	21ff      	movs	r1, #255	@ 0xff
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	019b      	lsls	r3, r3, #6
 8000a52:	22ff      	movs	r2, #255	@ 0xff
 8000a54:	401a      	ands	r2, r3
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	4003      	ands	r3, r0
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	481f      	ldr	r0, [pc, #124]	@ (8000ae4 <__NVIC_SetPriority+0xd4>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	33c0      	adds	r3, #192	@ 0xc0
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a76:	e031      	b.n	8000adc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae8 <__NVIC_SetPriority+0xd8>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0019      	movs	r1, r3
 8000a80:	230f      	movs	r3, #15
 8000a82:	400b      	ands	r3, r1
 8000a84:	3b08      	subs	r3, #8
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3306      	adds	r3, #6
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	3304      	adds	r3, #4
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1dfa      	adds	r2, r7, #7
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	0011      	movs	r1, r2
 8000a98:	2203      	movs	r2, #3
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	21ff      	movs	r1, #255	@ 0xff
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	22ff      	movs	r2, #255	@ 0xff
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2303      	movs	r3, #3
 8000aba:	4003      	ands	r3, r0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <__NVIC_SetPriority+0xd8>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	001c      	movs	r4, r3
 8000ac8:	230f      	movs	r3, #15
 8000aca:	4023      	ands	r3, r4
 8000acc:	3b08      	subs	r3, #8
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	3306      	adds	r3, #6
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	18c3      	adds	r3, r0, r3
 8000ad8:	3304      	adds	r3, #4
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b003      	add	sp, #12
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1e5a      	subs	r2, r3, #1
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	045b      	lsls	r3, r3, #17
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d301      	bcc.n	8000b04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b00:	2301      	movs	r3, #1
 8000b02:	e010      	b.n	8000b26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <SysTick_Config+0x44>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	2103      	movs	r1, #3
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ff7c 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x44>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x44>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	210f      	movs	r1, #15
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	1c02      	adds	r2, r0, #0
 8000b44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	0002      	movs	r2, r0
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff ff33 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ffaf 	bl	8000aec <SysTick_Config>
 8000b8e:	0003      	movs	r3, r0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bae:	e155      	b.n	8000e5c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <HAL_GPIO_Init+0x30>
 8000bc6:	e146      	b.n	8000e56 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d005      	beq.n	8000be0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d130      	bne.n	8000c42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	409a      	lsls	r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2203      	movs	r2, #3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d017      	beq.n	8000c7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2203      	movs	r2, #3
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d123      	bne.n	8000cd2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3208      	adds	r2, #8
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	58d3      	ldr	r3, [r2, r3]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	691a      	ldr	r2, [r3, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2107      	movs	r1, #7
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	6939      	ldr	r1, [r7, #16]
 8000cd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2203      	movs	r2, #3
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	23c0      	movs	r3, #192	@ 0xc0
 8000d0c:	029b      	lsls	r3, r3, #10
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d100      	bne.n	8000d14 <HAL_GPIO_Init+0x17c>
 8000d12:	e0a0      	b.n	8000e56 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d14:	4b57      	ldr	r3, [pc, #348]	@ (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d18:	4b56      	ldr	r3, [pc, #344]	@ (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d20:	4a55      	ldr	r2, [pc, #340]	@ (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	589b      	ldr	r3, [r3, r2]
 8000d2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4013      	ands	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	23a0      	movs	r3, #160	@ 0xa0
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d01f      	beq.n	8000d8e <HAL_GPIO_Init+0x1f6>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4a      	ldr	r2, [pc, #296]	@ (8000e7c <HAL_GPIO_Init+0x2e4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d019      	beq.n	8000d8a <HAL_GPIO_Init+0x1f2>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a49      	ldr	r2, [pc, #292]	@ (8000e80 <HAL_GPIO_Init+0x2e8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d013      	beq.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a48      	ldr	r2, [pc, #288]	@ (8000e84 <HAL_GPIO_Init+0x2ec>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00d      	beq.n	8000d82 <HAL_GPIO_Init+0x1ea>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a47      	ldr	r2, [pc, #284]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x1e6>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a46      	ldr	r2, [pc, #280]	@ (8000e8c <HAL_GPIO_Init+0x2f4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_GPIO_Init+0x1e2>
 8000d76:	2305      	movs	r3, #5
 8000d78:	e00a      	b.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	e008      	b.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e004      	b.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_GPIO_Init+0x1f8>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	2103      	movs	r1, #3
 8000d94:	400a      	ands	r2, r1
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	4093      	lsls	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da0:	4935      	ldr	r1, [pc, #212]	@ (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dae:	4b38      	ldr	r3, [pc, #224]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	035b      	lsls	r3, r3, #13
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43da      	mvns	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	2380      	movs	r3, #128	@ 0x80
 8000dee:	039b      	lsls	r3, r3, #14
 8000df0:	4013      	ands	r3, r2
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	029b      	lsls	r3, r3, #10
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43da      	mvns	r2, r3
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	025b      	lsls	r3, r3, #9
 8000e44:	4013      	ands	r3, r2
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <HAL_GPIO_Init+0x2f8>)
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	40da      	lsrs	r2, r3
 8000e64:	1e13      	subs	r3, r2, #0
 8000e66:	d000      	beq.n	8000e6a <HAL_GPIO_Init+0x2d2>
 8000e68:	e6a2      	b.n	8000bb0 <HAL_GPIO_Init+0x18>
  }
}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b006      	add	sp, #24
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	50000400 	.word	0x50000400
 8000e80:	50000800 	.word	0x50000800
 8000e84:	50000c00 	.word	0x50000c00
 8000e88:	50001000 	.word	0x50001000
 8000e8c:	50001c00 	.word	0x50001c00
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	0008      	movs	r0, r1
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	1cbb      	adds	r3, r7, #2
 8000ea2:	1c02      	adds	r2, r0, #0
 8000ea4:	801a      	strh	r2, [r3, #0]
 8000ea6:	1c7b      	adds	r3, r7, #1
 8000ea8:	1c0a      	adds	r2, r1, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eac:	1c7b      	adds	r3, r7, #1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb4:	1cbb      	adds	r3, r7, #2
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ebc:	e003      	b.n	8000ec6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ebe:	1cbb      	adds	r3, r7, #2
 8000ec0:	881a      	ldrh	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0e4      	b.n	80010ac <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a73      	ldr	r2, [pc, #460]	@ (80010b4 <HAL_PCD_Init+0x1e4>)
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d108      	bne.n	8000f00 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	23a4      	movs	r3, #164	@ 0xa4
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	0018      	movs	r0, r3
 8000efc:	f006 ff84 	bl	8007e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a6c      	ldr	r2, [pc, #432]	@ (80010b4 <HAL_PCD_Init+0x1e4>)
 8000f04:	2103      	movs	r1, #3
 8000f06:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f003 f9c9 	bl	80042a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f12:	230f      	movs	r3, #15
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	e047      	b.n	8000fac <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f1c:	200f      	movs	r0, #15
 8000f1e:	183b      	adds	r3, r7, r0
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	0013      	movs	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	189b      	adds	r3, r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	18cb      	adds	r3, r1, r3
 8000f2e:	3311      	adds	r3, #17
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f34:	183b      	adds	r3, r7, r0
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	18cb      	adds	r3, r1, r3
 8000f44:	3310      	adds	r3, #16
 8000f46:	183a      	adds	r2, r7, r0
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f4c:	183b      	adds	r3, r7, r0
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	0013      	movs	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	18cb      	adds	r3, r1, r3
 8000f5c:	3313      	adds	r3, #19
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f62:	183b      	adds	r3, r7, r0
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	0013      	movs	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	189b      	adds	r3, r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	18cb      	adds	r3, r1, r3
 8000f72:	3320      	adds	r3, #32
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	0013      	movs	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	189b      	adds	r3, r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	18cb      	adds	r3, r1, r3
 8000f88:	3324      	adds	r3, #36	@ 0x24
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f8e:	183b      	adds	r3, r7, r0
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	0013      	movs	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	189b      	adds	r3, r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa2:	183b      	adds	r3, r7, r0
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	183b      	adds	r3, r7, r0
 8000fa8:	3201      	adds	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3b0      	bcc.n	8000f1c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e056      	b.n	8001070 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc2:	240f      	movs	r4, #15
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	2352      	movs	r3, #82	@ 0x52
 8000fcc:	33ff      	adds	r3, #255	@ 0xff
 8000fce:	0019      	movs	r1, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	189b      	adds	r3, r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	18c3      	adds	r3, r0, r3
 8000fda:	185b      	adds	r3, r3, r1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	23a8      	movs	r3, #168	@ 0xa8
 8000fe8:	0059      	lsls	r1, r3, #1
 8000fea:	0013      	movs	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	189b      	adds	r3, r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	18c3      	adds	r3, r0, r3
 8000ff4:	185b      	adds	r3, r3, r1
 8000ff6:	193a      	adds	r2, r7, r4
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	2354      	movs	r3, #84	@ 0x54
 8001004:	33ff      	adds	r3, #255	@ 0xff
 8001006:	0019      	movs	r1, r3
 8001008:	0013      	movs	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	189b      	adds	r3, r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	18c3      	adds	r3, r0, r3
 8001012:	185b      	adds	r3, r3, r1
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001018:	193b      	adds	r3, r7, r4
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	23b0      	movs	r3, #176	@ 0xb0
 8001020:	0059      	lsls	r1, r3, #1
 8001022:	0013      	movs	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	189b      	adds	r3, r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	18c3      	adds	r3, r0, r3
 800102c:	185b      	adds	r3, r3, r1
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	23b2      	movs	r3, #178	@ 0xb2
 800103a:	0059      	lsls	r1, r3, #1
 800103c:	0013      	movs	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	189b      	adds	r3, r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	18c3      	adds	r3, r0, r3
 8001046:	185b      	adds	r3, r3, r1
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	23b4      	movs	r3, #180	@ 0xb4
 8001054:	0059      	lsls	r1, r3, #1
 8001056:	0013      	movs	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	189b      	adds	r3, r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	18c3      	adds	r3, r0, r3
 8001060:	185b      	adds	r3, r3, r1
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001066:	193b      	adds	r3, r7, r4
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	193b      	adds	r3, r7, r4
 800106c:	3201      	adds	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	220f      	movs	r2, #15
 8001076:	18ba      	adds	r2, r7, r2
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3a1      	bcc.n	8000fc2 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6859      	ldr	r1, [r3, #4]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	f003 f926 	bl	80042d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <HAL_PCD_Init+0x1e4>)
 8001096:	2101      	movs	r1, #1
 8001098:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a9b      	ldrb	r3, [r3, #10]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d103      	bne.n	80010aa <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 fd29 	bl	8002afc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b005      	add	sp, #20
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	00000291 	.word	0x00000291

080010b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	23a4      	movs	r3, #164	@ 0xa4
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_PCD_Start+0x18>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e014      	b.n	80010fa <HAL_PCD_Start+0x42>
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	23a4      	movs	r3, #164	@ 0xa4
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	2101      	movs	r1, #1
 80010d8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	f003 f8ca 	bl	8004278 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f004 fea1 	bl	8005e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	23a4      	movs	r3, #164	@ 0xa4
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	2100      	movs	r1, #0
 80010f6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0018      	movs	r0, r3
 8001112:	f004 fea3 	bl	8005e5c <USB_ReadInterrupts>
 8001116:	0003      	movs	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	4013      	ands	r3, r2
 8001122:	d004      	beq.n	800112e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	0018      	movs	r0, r3
 8001128:	f000 fb62 	bl	80017f0 <PCD_EP_ISR_Handler>

    return;
 800112c:	e11d      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4013      	ands	r3, r2
 8001136:	d015      	beq.n	8001164 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2244      	movs	r2, #68	@ 0x44
 800113e:	5a9b      	ldrh	r3, [r3, r2]
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	498a      	ldr	r1, [pc, #552]	@ (8001370 <HAL_PCD_IRQHandler+0x26c>)
 8001148:	400a      	ands	r2, r1
 800114a:	b291      	uxth	r1, r2
 800114c:	2244      	movs	r2, #68	@ 0x44
 800114e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	0018      	movs	r0, r3
 8001154:	f006 fedb 	bl	8007f0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2100      	movs	r1, #0
 800115c:	0018      	movs	r0, r3
 800115e:	f000 f915 	bl	800138c <HAL_PCD_SetAddress>

    return;
 8001162:	e102      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	01db      	lsls	r3, r3, #7
 800116a:	4013      	ands	r3, r2
 800116c:	d00c      	beq.n	8001188 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2244      	movs	r2, #68	@ 0x44
 8001174:	5a9b      	ldrh	r3, [r3, r2]
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	497d      	ldr	r1, [pc, #500]	@ (8001374 <HAL_PCD_IRQHandler+0x270>)
 800117e:	400a      	ands	r2, r1
 8001180:	b291      	uxth	r1, r2
 8001182:	2244      	movs	r2, #68	@ 0x44
 8001184:	5299      	strh	r1, [r3, r2]

    return;
 8001186:	e0f0      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	2380      	movs	r3, #128	@ 0x80
 800118c:	019b      	lsls	r3, r3, #6
 800118e:	4013      	ands	r3, r2
 8001190:	d00c      	beq.n	80011ac <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2244      	movs	r2, #68	@ 0x44
 8001198:	5a9b      	ldrh	r3, [r3, r2]
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4975      	ldr	r1, [pc, #468]	@ (8001378 <HAL_PCD_IRQHandler+0x274>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	b291      	uxth	r1, r2
 80011a6:	2244      	movs	r2, #68	@ 0x44
 80011a8:	5299      	strh	r1, [r3, r2]

    return;
 80011aa:	e0de      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	4013      	ands	r3, r2
 80011b4:	d038      	beq.n	8001228 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2240      	movs	r2, #64	@ 0x40
 80011bc:	5a9b      	ldrh	r3, [r3, r2]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2104      	movs	r1, #4
 80011c6:	438a      	bics	r2, r1
 80011c8:	b291      	uxth	r1, r2
 80011ca:	2240      	movs	r2, #64	@ 0x40
 80011cc:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2240      	movs	r2, #64	@ 0x40
 80011d4:	5a9b      	ldrh	r3, [r3, r2]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2108      	movs	r1, #8
 80011de:	438a      	bics	r2, r1
 80011e0:	b291      	uxth	r1, r2
 80011e2:	2240      	movs	r2, #64	@ 0x40
 80011e4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	23b2      	movs	r3, #178	@ 0xb2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d109      	bne.n	8001206 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	23b2      	movs	r3, #178	@ 0xb2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	2100      	movs	r1, #0
 80011fa:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2100      	movs	r1, #0
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fca5 	bl	8002b50 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0018      	movs	r0, r3
 800120a:	f006 fec1 	bl	8007f90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2244      	movs	r2, #68	@ 0x44
 8001214:	5a9b      	ldrh	r3, [r3, r2]
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4957      	ldr	r1, [pc, #348]	@ (800137c <HAL_PCD_IRQHandler+0x278>)
 800121e:	400a      	ands	r2, r1
 8001220:	b291      	uxth	r1, r2
 8001222:	2244      	movs	r2, #68	@ 0x44
 8001224:	5299      	strh	r1, [r3, r2]

    return;
 8001226:	e0a0      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d028      	beq.n	8001284 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	5a9b      	ldrh	r3, [r3, r2]
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2108      	movs	r1, #8
 8001242:	430a      	orrs	r2, r1
 8001244:	b291      	uxth	r1, r2
 8001246:	2240      	movs	r2, #64	@ 0x40
 8001248:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2244      	movs	r2, #68	@ 0x44
 8001250:	5a9b      	ldrh	r3, [r3, r2]
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4949      	ldr	r1, [pc, #292]	@ (8001380 <HAL_PCD_IRQHandler+0x27c>)
 800125a:	400a      	ands	r2, r1
 800125c:	b291      	uxth	r1, r2
 800125e:	2244      	movs	r2, #68	@ 0x44
 8001260:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2240      	movs	r2, #64	@ 0x40
 8001268:	5a9b      	ldrh	r3, [r3, r2]
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2104      	movs	r1, #4
 8001272:	430a      	orrs	r2, r1
 8001274:	b291      	uxth	r1, r2
 8001276:	2240      	movs	r2, #64	@ 0x40
 8001278:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f006 fe6b 	bl	8007f58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001282:	e072      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	4013      	ands	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2244      	movs	r2, #68	@ 0x44
 8001292:	5a9b      	ldrh	r3, [r3, r2]
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2180      	movs	r1, #128	@ 0x80
 800129c:	438a      	bics	r2, r1
 800129e:	b291      	uxth	r1, r2
 80012a0:	2244      	movs	r2, #68	@ 0x44
 80012a2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	23b2      	movs	r3, #178	@ 0xb2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d12f      	bne.n	8001310 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2240      	movs	r2, #64	@ 0x40
 80012b6:	5a9b      	ldrh	r3, [r3, r2]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2104      	movs	r1, #4
 80012c0:	430a      	orrs	r2, r1
 80012c2:	b291      	uxth	r1, r2
 80012c4:	2240      	movs	r2, #64	@ 0x40
 80012c6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2240      	movs	r2, #64	@ 0x40
 80012ce:	5a9b      	ldrh	r3, [r3, r2]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2108      	movs	r1, #8
 80012d8:	430a      	orrs	r2, r1
 80012da:	b291      	uxth	r1, r2
 80012dc:	2240      	movs	r2, #64	@ 0x40
 80012de:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	23b2      	movs	r3, #178	@ 0xb2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	2101      	movs	r1, #1
 80012e8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2254      	movs	r2, #84	@ 0x54
 80012f0:	5a9b      	ldrh	r3, [r3, r2]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	223c      	movs	r2, #60	@ 0x3c
 80012f8:	4013      	ands	r3, r2
 80012fa:	0019      	movs	r1, r3
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	23b3      	movs	r3, #179	@ 0xb3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2101      	movs	r1, #1
 8001308:	0018      	movs	r0, r3
 800130a:	f001 fc21 	bl	8002b50 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800130e:	e02c      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	0018      	movs	r0, r3
 8001314:	f006 fe20 	bl	8007f58 <HAL_PCD_SuspendCallback>
    return;
 8001318:	e027      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d010      	beq.n	8001346 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2244      	movs	r2, #68	@ 0x44
 800132a:	5a9b      	ldrh	r3, [r3, r2]
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4914      	ldr	r1, [pc, #80]	@ (8001384 <HAL_PCD_IRQHandler+0x280>)
 8001334:	400a      	ands	r2, r1
 8001336:	b291      	uxth	r1, r2
 8001338:	2244      	movs	r2, #68	@ 0x44
 800133a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	0018      	movs	r0, r3
 8001340:	f006 fdd6 	bl	8007ef0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001344:	e011      	b.n	800136a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4013      	ands	r3, r2
 800134e:	d00c      	beq.n	800136a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2244      	movs	r2, #68	@ 0x44
 8001356:	5a9b      	ldrh	r3, [r3, r2]
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	490a      	ldr	r1, [pc, #40]	@ (8001388 <HAL_PCD_IRQHandler+0x284>)
 8001360:	400a      	ands	r2, r1
 8001362:	b291      	uxth	r1, r2
 8001364:	2244      	movs	r2, #68	@ 0x44
 8001366:	5299      	strh	r1, [r3, r2]

    return;
 8001368:	46c0      	nop			@ (mov r8, r8)
  }
}
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bd80      	pop	{r7, pc}
 8001370:	fffffbff 	.word	0xfffffbff
 8001374:	ffffbfff 	.word	0xffffbfff
 8001378:	ffffdfff 	.word	0xffffdfff
 800137c:	ffffefff 	.word	0xffffefff
 8001380:	fffff7ff 	.word	0xfffff7ff
 8001384:	fffffdff 	.word	0xfffffdff
 8001388:	fffffeff 	.word	0xfffffeff

0800138c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	000a      	movs	r2, r1
 8001396:	1cfb      	adds	r3, r7, #3
 8001398:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	23a4      	movs	r3, #164	@ 0xa4
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	5cd3      	ldrb	r3, [r2, r3]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_PCD_SetAddress+0x1e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e016      	b.n	80013d8 <HAL_PCD_SetAddress+0x4c>
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	23a4      	movs	r3, #164	@ 0xa4
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	2101      	movs	r1, #1
 80013b2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	1cfa      	adds	r2, r7, #3
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	1cfb      	adds	r3, r7, #3
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	0019      	movs	r1, r3
 80013c6:	0010      	movs	r0, r2
 80013c8:	f004 fd1e 	bl	8005e08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	23a4      	movs	r3, #164	@ 0xa4
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	2100      	movs	r1, #0
 80013d4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	000c      	movs	r4, r1
 80013ea:	0010      	movs	r0, r2
 80013ec:	0019      	movs	r1, r3
 80013ee:	1cfb      	adds	r3, r7, #3
 80013f0:	1c22      	adds	r2, r4, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	003b      	movs	r3, r7
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	1cbb      	adds	r3, r7, #2
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8001400:	230b      	movs	r3, #11
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001408:	1cfb      	adds	r3, r7, #3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	da0f      	bge.n	8001432 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001412:	1cfb      	adds	r3, r7, #3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2207      	movs	r2, #7
 8001418:	401a      	ands	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	189b      	adds	r3, r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	3310      	adds	r3, #16
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	705a      	strb	r2, [r3, #1]
 8001430:	e00f      	b.n	8001452 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001432:	1cfb      	adds	r3, r7, #3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2207      	movs	r2, #7
 8001438:	401a      	ands	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	189b      	adds	r3, r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	3351      	adds	r3, #81	@ 0x51
 8001444:	33ff      	adds	r3, #255	@ 0xff
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001452:	1cfb      	adds	r3, r7, #3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2207      	movs	r2, #7
 8001458:	4013      	ands	r3, r2
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001460:	003b      	movs	r3, r7
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	055b      	lsls	r3, r3, #21
 8001466:	0d5a      	lsrs	r2, r3, #21
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1cba      	adds	r2, r7, #2
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001474:	1cbb      	adds	r3, r7, #2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d102      	bne.n	8001482 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	23a4      	movs	r3, #164	@ 0xa4
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_PCD_EP_Open+0xb2>
 800148e:	2302      	movs	r3, #2
 8001490:	e013      	b.n	80014ba <HAL_PCD_EP_Open+0xda>
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	23a4      	movs	r3, #164	@ 0xa4
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	2101      	movs	r1, #1
 800149a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f002 ff33 	bl	8004310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	23a4      	movs	r3, #164	@ 0xa4
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	2100      	movs	r1, #0
 80014b2:	54d1      	strb	r1, [r2, r3]

  return ret;
 80014b4:	230b      	movs	r3, #11
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	781b      	ldrb	r3, [r3, #0]
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b005      	add	sp, #20
 80014c0:	bd90      	pop	{r4, r7, pc}

080014c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	000a      	movs	r2, r1
 80014cc:	1cfb      	adds	r3, r7, #3
 80014ce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014d0:	1cfb      	adds	r3, r7, #3
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da0f      	bge.n	80014fa <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014da:	1cfb      	adds	r3, r7, #3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2207      	movs	r2, #7
 80014e0:	401a      	ands	r2, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	189b      	adds	r3, r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	3310      	adds	r3, #16
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	18d3      	adds	r3, r2, r3
 80014f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2201      	movs	r2, #1
 80014f6:	705a      	strb	r2, [r3, #1]
 80014f8:	e00f      	b.n	800151a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014fa:	1cfb      	adds	r3, r7, #3
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2207      	movs	r2, #7
 8001500:	401a      	ands	r2, r3
 8001502:	0013      	movs	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	189b      	adds	r3, r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	3351      	adds	r3, #81	@ 0x51
 800150c:	33ff      	adds	r3, #255	@ 0xff
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	18d3      	adds	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800151a:	1cfb      	adds	r3, r7, #3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2207      	movs	r2, #7
 8001520:	4013      	ands	r3, r2
 8001522:	b2da      	uxtb	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	23a4      	movs	r3, #164	@ 0xa4
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_PCD_EP_Close+0x76>
 8001534:	2302      	movs	r3, #2
 8001536:	e011      	b.n	800155c <HAL_PCD_EP_Close+0x9a>
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	23a4      	movs	r3, #164	@ 0xa4
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	2101      	movs	r1, #1
 8001540:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	0011      	movs	r1, r2
 800154a:	0018      	movs	r0, r3
 800154c:	f003 fbb4 	bl	8004cb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	23a4      	movs	r3, #164	@ 0xa4
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	2100      	movs	r1, #0
 8001558:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	200b      	movs	r0, #11
 8001572:	183b      	adds	r3, r7, r0
 8001574:	1c0a      	adds	r2, r1, #0
 8001576:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001578:	0001      	movs	r1, r0
 800157a:	187b      	adds	r3, r7, r1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2207      	movs	r2, #7
 8001580:	401a      	ands	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	189b      	adds	r3, r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	3351      	adds	r3, #81	@ 0x51
 800158c:	33ff      	adds	r3, #255	@ 0xff
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2200      	movs	r2, #0
 80015aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2207      	movs	r2, #7
 80015b2:	4013      	ands	r3, r2
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	0011      	movs	r1, r2
 80015c2:	0018      	movs	r0, r3
 80015c4:	f003 fd38 	bl	8005038 <USB_EPStartXfer>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b006      	add	sp, #24
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	000a      	movs	r2, r1
 80015dc:	1cfb      	adds	r3, r7, #3
 80015de:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80015e0:	1cfb      	adds	r3, r7, #3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2207      	movs	r2, #7
 80015e6:	401a      	ands	r2, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	23b6      	movs	r3, #182	@ 0xb6
 80015ec:	0059      	lsls	r1, r3, #1
 80015ee:	0013      	movs	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	189b      	adds	r3, r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	18c3      	adds	r3, r0, r3
 80015f8:	185b      	adds	r3, r3, r1
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	200b      	movs	r0, #11
 8001612:	183b      	adds	r3, r7, r0
 8001614:	1c0a      	adds	r2, r1, #0
 8001616:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001618:	183b      	adds	r3, r7, r0
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2207      	movs	r2, #7
 800161e:	401a      	ands	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	189b      	adds	r3, r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	3310      	adds	r3, #16
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2224      	movs	r2, #36	@ 0x24
 8001640:	2101      	movs	r1, #1
 8001642:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2201      	movs	r2, #1
 8001654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001656:	183b      	adds	r3, r7, r0
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2207      	movs	r2, #7
 800165c:	4013      	ands	r3, r2
 800165e:	b2da      	uxtb	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	0011      	movs	r1, r2
 800166c:	0018      	movs	r0, r3
 800166e:	f003 fce3 	bl	8005038 <USB_EPStartXfer>

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b006      	add	sp, #24
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	000a      	movs	r2, r1
 8001686:	1cfb      	adds	r3, r7, #3
 8001688:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800168a:	1cfb      	adds	r3, r7, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2207      	movs	r2, #7
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	7912      	ldrb	r2, [r2, #4]
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e046      	b.n	800172c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800169e:	1cfb      	adds	r3, r7, #3
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da0f      	bge.n	80016c8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2207      	movs	r2, #7
 80016ae:	401a      	ands	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	3310      	adds	r3, #16
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	18d3      	adds	r3, r2, r3
 80016be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	705a      	strb	r2, [r3, #1]
 80016c6:	e00d      	b.n	80016e4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016c8:	1cfb      	adds	r3, r7, #3
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	0013      	movs	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	189b      	adds	r3, r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	3351      	adds	r3, #81	@ 0x51
 80016d6:	33ff      	adds	r3, #255	@ 0xff
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	18d3      	adds	r3, r2, r3
 80016dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ea:	1cfb      	adds	r3, r7, #3
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2207      	movs	r2, #7
 80016f0:	4013      	ands	r3, r2
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	23a4      	movs	r3, #164	@ 0xa4
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	5cd3      	ldrb	r3, [r2, r3]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_PCD_EP_SetStall+0x8c>
 8001704:	2302      	movs	r3, #2
 8001706:	e011      	b.n	800172c <HAL_PCD_EP_SetStall+0xb0>
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	23a4      	movs	r3, #164	@ 0xa4
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	2101      	movs	r1, #1
 8001710:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f004 fa78 	bl	8005c10 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	23a4      	movs	r3, #164	@ 0xa4
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	2100      	movs	r1, #0
 8001728:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	000a      	movs	r2, r1
 800173e:	1cfb      	adds	r3, r7, #3
 8001740:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001742:	1cfb      	adds	r3, r7, #3
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	220f      	movs	r2, #15
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	7912      	ldrb	r2, [r2, #4]
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e048      	b.n	80017e8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001756:	1cfb      	adds	r3, r7, #3
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b25b      	sxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	da0f      	bge.n	8001780 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001760:	1cfb      	adds	r3, r7, #3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2207      	movs	r2, #7
 8001766:	401a      	ands	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	189b      	adds	r3, r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	3310      	adds	r3, #16
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	18d3      	adds	r3, r2, r3
 8001776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	705a      	strb	r2, [r3, #1]
 800177e:	e00f      	b.n	80017a0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001780:	1cfb      	adds	r3, r7, #3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2207      	movs	r2, #7
 8001786:	401a      	ands	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	189b      	adds	r3, r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	3351      	adds	r3, #81	@ 0x51
 8001792:	33ff      	adds	r3, #255	@ 0xff
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	18d3      	adds	r3, r2, r3
 8001798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a6:	1cfb      	adds	r3, r7, #3
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2207      	movs	r2, #7
 80017ac:	4013      	ands	r3, r2
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	23a4      	movs	r3, #164	@ 0xa4
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_PCD_EP_ClrStall+0x90>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e011      	b.n	80017e8 <HAL_PCD_EP_ClrStall+0xb4>
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	23a4      	movs	r3, #164	@ 0xa4
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	2101      	movs	r1, #1
 80017cc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	0011      	movs	r1, r2
 80017d6:	0018      	movs	r0, r3
 80017d8:	f004 fa6a 	bl	8005cb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	23a4      	movs	r3, #164	@ 0xa4
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	2100      	movs	r1, #0
 80017e4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b094      	sub	sp, #80	@ 0x50
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017f8:	f000 fbbf 	bl	8001f7a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2042      	movs	r0, #66	@ 0x42
 8001802:	183b      	adds	r3, r7, r0
 8001804:	2144      	movs	r1, #68	@ 0x44
 8001806:	5a52      	ldrh	r2, [r2, r1]
 8001808:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800180a:	183b      	adds	r3, r7, r0
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	2441      	movs	r4, #65	@ 0x41
 8001812:	193b      	adds	r3, r7, r4
 8001814:	210f      	movs	r1, #15
 8001816:	400a      	ands	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800181a:	193b      	adds	r3, r7, r4
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d000      	beq.n	8001824 <PCD_EP_ISR_Handler+0x34>
 8001822:	e151      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001824:	183b      	adds	r3, r7, r0
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	2210      	movs	r2, #16
 800182a:	4013      	ands	r3, r2
 800182c:	d14f      	bne.n	80018ce <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29a      	uxth	r2, r3
 8001836:	200a      	movs	r0, #10
 8001838:	183b      	adds	r3, r7, r0
 800183a:	49dd      	ldr	r1, [pc, #884]	@ (8001bb0 <PCD_EP_ISR_Handler+0x3c0>)
 800183c:	400a      	ands	r2, r1
 800183e:	801a      	strh	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	183a      	adds	r2, r7, r0
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	49da      	ldr	r1, [pc, #872]	@ (8001bb4 <PCD_EP_ISR_Handler+0x3c4>)
 800184a:	430a      	orrs	r2, r1
 800184c:	b292      	uxth	r2, r2
 800184e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3310      	adds	r3, #16
 8001854:	64bb      	str	r3, [r7, #72]	@ 0x48

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2250      	movs	r2, #80	@ 0x50
 800185c:	5a9b      	ldrh	r3, [r3, r2]
 800185e:	b29b      	uxth	r3, r3
 8001860:	001a      	movs	r2, r3
 8001862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	18d2      	adds	r2, r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	18d3      	adds	r3, r2, r3
 8001870:	4ad1      	ldr	r2, [pc, #836]	@ (8001bb8 <PCD_EP_ISR_Handler+0x3c8>)
 8001872:	4694      	mov	ip, r2
 8001874:	4463      	add	r3, ip
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	059b      	lsls	r3, r3, #22
 800187a:	0d9a      	lsrs	r2, r3, #22
 800187c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800187e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	18d2      	adds	r2, r2, r3
 800188a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2100      	movs	r1, #0
 8001892:	0018      	movs	r0, r3
 8001894:	f006 fb0e 	bl	8007eb4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d100      	bne.n	80018a4 <PCD_EP_ISR_Handler+0xb4>
 80018a2:	e36a      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
 80018a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d000      	beq.n	80018ae <PCD_EP_ISR_Handler+0xbe>
 80018ac:	e365      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7b1b      	ldrb	r3, [r3, #12]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2280      	movs	r2, #128	@ 0x80
 80018b6:	4252      	negs	r2, r2
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0011      	movs	r1, r2
 80018c2:	224c      	movs	r2, #76	@ 0x4c
 80018c4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	731a      	strb	r2, [r3, #12]
 80018cc:	e355      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3351      	adds	r3, #81	@ 0x51
 80018d2:	33ff      	adds	r3, #255	@ 0xff
 80018d4:	64bb      	str	r3, [r7, #72]	@ 0x48
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	213e      	movs	r1, #62	@ 0x3e
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	8812      	ldrh	r2, [r2, #0]
 80018e0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	881a      	ldrh	r2, [r3, #0]
 80018e6:	2380      	movs	r3, #128	@ 0x80
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4013      	ands	r3, r2
 80018ec:	d100      	bne.n	80018f0 <PCD_EP_ISR_Handler+0x100>
 80018ee:	e07d      	b.n	80019ec <PCD_EP_ISR_Handler+0x1fc>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2250      	movs	r2, #80	@ 0x50
 80018f6:	5a9b      	ldrh	r3, [r3, r2]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	001a      	movs	r2, r3
 80018fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	18d2      	adds	r2, r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	18d3      	adds	r3, r2, r3
 800190a:	4aac      	ldr	r2, [pc, #688]	@ (8001bbc <PCD_EP_ISR_Handler+0x3cc>)
 800190c:	4694      	mov	ip, r2
 800190e:	4463      	add	r3, ip
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	059b      	lsls	r3, r3, #22
 8001914:	0d9a      	lsrs	r2, r3, #22
 8001916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001918:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 8U)
 800191a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b08      	cmp	r3, #8
 8001920:	d041      	beq.n	80019a6 <PCD_EP_ISR_Handler+0x1b6>
          {
            /* Set Stall condition for EP0 IN/OUT */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b29a      	uxth	r2, r3
 800192a:	2010      	movs	r0, #16
 800192c:	183b      	adds	r3, r7, r0
 800192e:	49a4      	ldr	r1, [pc, #656]	@ (8001bc0 <PCD_EP_ISR_Handler+0x3d0>)
 8001930:	400a      	ands	r2, r1
 8001932:	801a      	strh	r2, [r3, #0]
 8001934:	183b      	adds	r3, r7, r0
 8001936:	183a      	adds	r2, r7, r0
 8001938:	8812      	ldrh	r2, [r2, #0]
 800193a:	2180      	movs	r1, #128	@ 0x80
 800193c:	0149      	lsls	r1, r1, #5
 800193e:	404a      	eors	r2, r1
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	183a      	adds	r2, r7, r0
 8001948:	8812      	ldrh	r2, [r2, #0]
 800194a:	499e      	ldr	r1, [pc, #632]	@ (8001bc4 <PCD_EP_ISR_Handler+0x3d4>)
 800194c:	430a      	orrs	r2, r1
 800194e:	b292      	uxth	r2, r2
 8001950:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29a      	uxth	r2, r3
 800195a:	200e      	movs	r0, #14
 800195c:	183b      	adds	r3, r7, r0
 800195e:	499a      	ldr	r1, [pc, #616]	@ (8001bc8 <PCD_EP_ISR_Handler+0x3d8>)
 8001960:	400a      	ands	r2, r1
 8001962:	801a      	strh	r2, [r3, #0]
 8001964:	183b      	adds	r3, r7, r0
 8001966:	183a      	adds	r2, r7, r0
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	2110      	movs	r1, #16
 800196c:	404a      	eors	r2, r1
 800196e:	801a      	strh	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	183a      	adds	r2, r7, r0
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	4992      	ldr	r1, [pc, #584]	@ (8001bc4 <PCD_EP_ISR_Handler+0x3d4>)
 800197a:	430a      	orrs	r2, r1
 800197c:	b292      	uxth	r2, r2
 800197e:	801a      	strh	r2, [r3, #0]

            /* SETUP bit kept frozen while CTR_RX = 1 */
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29a      	uxth	r2, r3
 8001988:	200c      	movs	r0, #12
 800198a:	183b      	adds	r3, r7, r0
 800198c:	498f      	ldr	r1, [pc, #572]	@ (8001bcc <PCD_EP_ISR_Handler+0x3dc>)
 800198e:	400a      	ands	r2, r1
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	183a      	adds	r2, r7, r0
 8001998:	8812      	ldrh	r2, [r2, #0]
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	430a      	orrs	r2, r1
 800199e:	b292      	uxth	r2, r2
 80019a0:	801a      	strh	r2, [r3, #0]

            return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e2f4      	b.n	8001f90 <PCD_EP_ISR_Handler+0x7a0>
          }

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	22a6      	movs	r2, #166	@ 0xa6
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	1899      	adds	r1, r3, r2
 80019b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f004 faa6 	bl	8005f0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	2012      	movs	r0, #18
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	497f      	ldr	r1, [pc, #508]	@ (8001bcc <PCD_EP_ISR_Handler+0x3dc>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	183a      	adds	r2, r7, r0
 80019d8:	8812      	ldrh	r2, [r2, #0]
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	430a      	orrs	r2, r1
 80019de:	b292      	uxth	r2, r2
 80019e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f006 fa2f 	bl	8007e48 <HAL_PCD_SetupStageCallback>
 80019ea:	e2c6      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019ec:	233e      	movs	r3, #62	@ 0x3e
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	5e9b      	ldrsh	r3, [r3, r2]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db00      	blt.n	80019fa <PCD_EP_ISR_Handler+0x20a>
 80019f8:	e2bf      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	2016      	movs	r0, #22
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	4971      	ldr	r1, [pc, #452]	@ (8001bcc <PCD_EP_ISR_Handler+0x3dc>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	801a      	strh	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	183a      	adds	r2, r7, r0
 8001a12:	8812      	ldrh	r2, [r2, #0]
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	430a      	orrs	r2, r1
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2250      	movs	r2, #80	@ 0x50
 8001a22:	5a9b      	ldrh	r3, [r3, r2]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	001a      	movs	r2, r3
 8001a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	18d2      	adds	r2, r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	18d3      	adds	r3, r2, r3
 8001a36:	4a61      	ldr	r2, [pc, #388]	@ (8001bbc <PCD_EP_ISR_Handler+0x3cc>)
 8001a38:	4694      	mov	ip, r2
 8001a3a:	4463      	add	r3, ip
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	059b      	lsls	r3, r3, #22
 8001a40:	0d9a      	lsrs	r2, r3, #22
 8001a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a44:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count == 0U)
 8001a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11f      	bne.n	8001a8e <PCD_EP_ISR_Handler+0x29e>
          {
            /* Status phase re-arm for next setup */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	2014      	movs	r0, #20
 8001a58:	183b      	adds	r3, r7, r0
 8001a5a:	4959      	ldr	r1, [pc, #356]	@ (8001bc0 <PCD_EP_ISR_Handler+0x3d0>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	183b      	adds	r3, r7, r0
 8001a62:	183a      	adds	r2, r7, r0
 8001a64:	8812      	ldrh	r2, [r2, #0]
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	0149      	lsls	r1, r1, #5
 8001a6a:	404a      	eors	r2, r1
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	183b      	adds	r3, r7, r0
 8001a70:	183a      	adds	r2, r7, r0
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0189      	lsls	r1, r1, #6
 8001a78:	404a      	eors	r2, r1
 8001a7a:	801a      	strh	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	183a      	adds	r2, r7, r0
 8001a82:	8812      	ldrh	r2, [r2, #0]
 8001a84:	494f      	ldr	r1, [pc, #316]	@ (8001bc4 <PCD_EP_ISR_Handler+0x3d4>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	801a      	strh	r2, [r3, #0]
 8001a8c:	e275      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
          }
          else
          {
            if (ep->xfer_buff != 0U)
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d100      	bne.n	8001a98 <PCD_EP_ISR_Handler+0x2a8>
 8001a96:	e270      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a9e:	6959      	ldr	r1, [r3, #20]
 8001aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aa2:	88da      	ldrh	r2, [r3, #6]
                          ep->pmaadress, (uint16_t)ep->xfer_count);  /* max 64bytes */
 8001aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aa6:	69db      	ldr	r3, [r3, #28]
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f004 fa2f 	bl	8005f0c <USB_ReadPMA>

              ep->xfer_buff += ep->xfer_count;
 8001aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	18d2      	adds	r2, r2, r3
 8001ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aba:	615a      	str	r2, [r3, #20]

              /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataOutStageCallback(hpcd, 0U);
#else
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f006 f9d6 	bl	8007e72 <HAL_PCD_DataOutStageCallback>
 8001ac6:	e258      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	2041      	movs	r0, #65	@ 0x41
 8001ad0:	183b      	adds	r3, r7, r0
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	18d2      	adds	r2, r2, r3
 8001ad8:	213e      	movs	r1, #62	@ 0x3e
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	8812      	ldrh	r2, [r2, #0]
 8001ade:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	5e9b      	ldrsh	r3, [r3, r2]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db00      	blt.n	8001aec <PCD_EP_ISR_Handler+0x2fc>
 8001aea:	e10c      	b.n	8001d06 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	001a      	movs	r2, r3
 8001af2:	183b      	adds	r3, r7, r0
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	18d3      	adds	r3, r2, r3
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	2446      	movs	r4, #70	@ 0x46
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	4932      	ldr	r1, [pc, #200]	@ (8001bcc <PCD_EP_ISR_Handler+0x3dc>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	801a      	strh	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	183b      	adds	r3, r7, r0
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	18d3      	adds	r3, r2, r3
 8001b16:	193a      	adds	r2, r7, r4
 8001b18:	8812      	ldrh	r2, [r2, #0]
 8001b1a:	2180      	movs	r1, #128	@ 0x80
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	0013      	movs	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	189b      	adds	r3, r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	3351      	adds	r3, #81	@ 0x51
 8001b30:	33ff      	adds	r3, #255	@ 0xff
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d125      	bne.n	8001b8c <PCD_EP_ISR_Handler+0x39c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2250      	movs	r2, #80	@ 0x50
 8001b46:	5a9b      	ldrh	r3, [r3, r2]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	18d2      	adds	r2, r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	18d3      	adds	r3, r2, r3
 8001b5a:	4a18      	ldr	r2, [pc, #96]	@ (8001bbc <PCD_EP_ISR_Handler+0x3cc>)
 8001b5c:	4694      	mov	ip, r2
 8001b5e:	4463      	add	r3, ip
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	244e      	movs	r4, #78	@ 0x4e
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	0592      	lsls	r2, r2, #22
 8001b68:	0d92      	lsrs	r2, r2, #22
 8001b6a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <PCD_EP_ISR_Handler+0x386>
 8001b74:	e09e      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x4c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7c:	6959      	ldr	r1, [r3, #20]
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b80:	88da      	ldrh	r2, [r3, #6]
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	f004 f9c1 	bl	8005f0c <USB_ReadPMA>
 8001b8a:	e093      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x4c4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d11d      	bne.n	8001bd0 <PCD_EP_ISR_Handler+0x3e0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b94:	234e      	movs	r3, #78	@ 0x4e
 8001b96:	18fc      	adds	r4, r7, r3
 8001b98:	233e      	movs	r3, #62	@ 0x3e
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 f9f8 	bl	8001f98 <HAL_PCD_EP_DB_Receive>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	8023      	strh	r3, [r4, #0]
 8001bac:	e082      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x4c4>
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	ffff8f0f 	.word	0xffff8f0f
 8001bb4:	ffff8000 	.word	0xffff8000
 8001bb8:	00000402 	.word	0x00000402
 8001bbc:	00000406 	.word	0x00000406
 8001bc0:	ffffbf8f 	.word	0xffffbf8f
 8001bc4:	ffff8080 	.word	0xffff8080
 8001bc8:	ffff8fbf 	.word	0xffff8fbf
 8001bcc:	00000f8f 	.word	0x00000f8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	2044      	movs	r0, #68	@ 0x44
 8001be4:	183b      	adds	r3, r7, r0
 8001be6:	49cf      	ldr	r1, [pc, #828]	@ (8001f24 <PCD_EP_ISR_Handler+0x734>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	801a      	strh	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	18d3      	adds	r3, r2, r3
 8001bfa:	183a      	adds	r2, r7, r0
 8001bfc:	8812      	ldrh	r2, [r2, #0]
 8001bfe:	49ca      	ldr	r1, [pc, #808]	@ (8001f28 <PCD_EP_ISR_Handler+0x738>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	b292      	uxth	r2, r2
 8001c04:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	18d3      	adds	r3, r2, r3
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	001a      	movs	r2, r3
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	01db      	lsls	r3, r3, #7
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d024      	beq.n	8001c6c <PCD_EP_ISR_Handler+0x47c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2250      	movs	r2, #80	@ 0x50
 8001c28:	5a9b      	ldrh	r3, [r3, r2]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	18d2      	adds	r2, r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	18d3      	adds	r3, r2, r3
 8001c3c:	4abb      	ldr	r2, [pc, #748]	@ (8001f2c <PCD_EP_ISR_Handler+0x73c>)
 8001c3e:	4694      	mov	ip, r2
 8001c40:	4463      	add	r3, ip
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	244e      	movs	r4, #78	@ 0x4e
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	0592      	lsls	r2, r2, #22
 8001c4a:	0d92      	lsrs	r2, r2, #22
 8001c4c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d02e      	beq.n	8001cb4 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c5c:	6959      	ldr	r1, [r3, #20]
 8001c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c60:	891a      	ldrh	r2, [r3, #8]
 8001c62:	193b      	adds	r3, r7, r4
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	f004 f951 	bl	8005f0c <USB_ReadPMA>
 8001c6a:	e023      	b.n	8001cb4 <PCD_EP_ISR_Handler+0x4c4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2250      	movs	r2, #80	@ 0x50
 8001c72:	5a9b      	ldrh	r3, [r3, r2]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	001a      	movs	r2, r3
 8001c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	18d2      	adds	r2, r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	18d3      	adds	r3, r2, r3
 8001c86:	4aaa      	ldr	r2, [pc, #680]	@ (8001f30 <PCD_EP_ISR_Handler+0x740>)
 8001c88:	4694      	mov	ip, r2
 8001c8a:	4463      	add	r3, ip
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	244e      	movs	r4, #78	@ 0x4e
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	0592      	lsls	r2, r2, #22
 8001c94:	0d92      	lsrs	r2, r2, #22
 8001c96:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001c98:	193b      	adds	r3, r7, r4
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001caa:	895a      	ldrh	r2, [r3, #10]
 8001cac:	193b      	adds	r3, r7, r4
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	f004 f92c 	bl	8005f0c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	214e      	movs	r1, #78	@ 0x4e
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	18d2      	adds	r2, r2, r3
 8001cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cc2:	61da      	str	r2, [r3, #28]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <PCD_EP_ISR_Handler+0x4e8>
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <PCD_EP_ISR_Handler+0x4f8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0011      	movs	r1, r2
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f006 f8c6 	bl	8007e72 <HAL_PCD_DataOutStageCallback>
 8001ce6:	e00e      	b.n	8001d06 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
           ep->xfer_buff += count;
 8001ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	234e      	movs	r3, #78	@ 0x4e
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	18d2      	adds	r2, r2, r3
 8001cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cf6:	615a      	str	r2, [r3, #20]
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cfe:	0011      	movs	r1, r2
 8001d00:	0018      	movs	r0, r3
 8001d02:	f003 f999 	bl	8005038 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d06:	243e      	movs	r4, #62	@ 0x3e
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	2280      	movs	r2, #128	@ 0x80
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d100      	bne.n	8001d14 <PCD_EP_ISR_Handler+0x524>
 8001d12:	e132      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d14:	2041      	movs	r0, #65	@ 0x41
 8001d16:	183b      	adds	r3, r7, r0
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	189b      	adds	r3, r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	3310      	adds	r3, #16
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	18d3      	adds	r3, r2, r3
 8001d28:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	001a      	movs	r2, r3
 8001d30:	183b      	adds	r3, r7, r0
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	18d3      	adds	r3, r2, r3
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	253c      	movs	r5, #60	@ 0x3c
 8001d3e:	197b      	adds	r3, r7, r5
 8001d40:	497c      	ldr	r1, [pc, #496]	@ (8001f34 <PCD_EP_ISR_Handler+0x744>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	183b      	adds	r3, r7, r0
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	18d3      	adds	r3, r2, r3
 8001d54:	197a      	adds	r2, r7, r5
 8001d56:	8812      	ldrh	r2, [r2, #0]
 8001d58:	4977      	ldr	r1, [pc, #476]	@ (8001f38 <PCD_EP_ISR_Handler+0x748>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d000      	beq.n	8001d6a <PCD_EP_ISR_Handler+0x57a>
 8001d68:	e0a1      	b.n	8001eae <PCD_EP_ISR_Handler+0x6be>
        {
          ep->xfer_len = 0U;
 8001d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d100      	bne.n	8001d7a <PCD_EP_ISR_Handler+0x58a>
 8001d78:	e091      	b.n	8001e9e <PCD_EP_ISR_Handler+0x6ae>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d7a:	193b      	adds	r3, r7, r4
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	4013      	ands	r3, r2
 8001d82:	d046      	beq.n	8001e12 <PCD_EP_ISR_Handler+0x622>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d125      	bne.n	8001dd8 <PCD_EP_ISR_Handler+0x5e8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2250      	movs	r2, #80	@ 0x50
 8001d98:	5a9b      	ldrh	r3, [r3, r2]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	189b      	adds	r3, r3, r2
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	00da      	lsls	r2, r3, #3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	18d3      	adds	r3, r2, r3
 8001dae:	4a5f      	ldr	r2, [pc, #380]	@ (8001f2c <PCD_EP_ISR_Handler+0x73c>)
 8001db0:	4694      	mov	ip, r2
 8001db2:	4463      	add	r3, ip
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	059b      	lsls	r3, r3, #22
 8001dbe:	0d9b      	lsrs	r3, r3, #22
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f38 <PCD_EP_ISR_Handler+0x748>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	801a      	strh	r2, [r3, #0]
 8001dd6:	e062      	b.n	8001e9e <PCD_EP_ISR_Handler+0x6ae>
 8001dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d15e      	bne.n	8001e9e <PCD_EP_ISR_Handler+0x6ae>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2250      	movs	r2, #80	@ 0x50
 8001dec:	5a9b      	ldrh	r3, [r3, r2]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	001a      	movs	r2, r3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	189b      	adds	r3, r3, r2
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	00da      	lsls	r2, r3, #3
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	4a4a      	ldr	r2, [pc, #296]	@ (8001f2c <PCD_EP_ISR_Handler+0x73c>)
 8001e04:	4694      	mov	ip, r2
 8001e06:	4463      	add	r3, ip
 8001e08:	623b      	str	r3, [r7, #32]
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	e045      	b.n	8001e9e <PCD_EP_ISR_Handler+0x6ae>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d125      	bne.n	8001e6c <PCD_EP_ISR_Handler+0x67c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2250      	movs	r2, #80	@ 0x50
 8001e2c:	5a9b      	ldrh	r3, [r3, r2]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	001a      	movs	r2, r3
 8001e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e34:	189b      	adds	r3, r3, r2
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00da      	lsls	r2, r3, #3
 8001e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e40:	18d3      	adds	r3, r2, r3
 8001e42:	4a3b      	ldr	r2, [pc, #236]	@ (8001f30 <PCD_EP_ISR_Handler+0x740>)
 8001e44:	4694      	mov	ip, r2
 8001e46:	4463      	add	r3, ip
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	059b      	lsls	r3, r3, #22
 8001e52:	0d9b      	lsrs	r3, r3, #22
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4a35      	ldr	r2, [pc, #212]	@ (8001f38 <PCD_EP_ISR_Handler+0x748>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	e018      	b.n	8001e9e <PCD_EP_ISR_Handler+0x6ae>
 8001e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d114      	bne.n	8001e9e <PCD_EP_ISR_Handler+0x6ae>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2250      	movs	r2, #80	@ 0x50
 8001e7a:	5a9b      	ldrh	r3, [r3, r2]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	001a      	movs	r2, r3
 8001e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e82:	189b      	adds	r3, r3, r2
 8001e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	00da      	lsls	r2, r3, #3
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8e:	18d3      	adds	r3, r2, r3
 8001e90:	4a27      	ldr	r2, [pc, #156]	@ (8001f30 <PCD_EP_ISR_Handler+0x740>)
 8001e92:	4694      	mov	ip, r2
 8001e94:	4463      	add	r3, ip
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f006 f804 	bl	8007eb4 <HAL_PCD_DataInStageCallback>
 8001eac:	e065      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001eae:	233e      	movs	r3, #62	@ 0x3e
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d156      	bne.n	8001f6a <PCD_EP_ISR_Handler+0x77a>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2250      	movs	r2, #80	@ 0x50
 8001ec2:	5a9b      	ldrh	r3, [r3, r2]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	18d2      	adds	r2, r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	18d3      	adds	r3, r2, r3
 8001ed6:	4a15      	ldr	r2, [pc, #84]	@ (8001f2c <PCD_EP_ISR_Handler+0x73c>)
 8001ed8:	4694      	mov	ip, r2
 8001eda:	4463      	add	r3, ip
 8001edc:	881a      	ldrh	r2, [r3, #0]
 8001ede:	213a      	movs	r1, #58	@ 0x3a
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	0592      	lsls	r2, r2, #22
 8001ee4:	0d92      	lsrs	r2, r2, #22
 8001ee6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001ee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d907      	bls.n	8001f04 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	1ad2      	subs	r2, r2, r3
 8001efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	e002      	b.n	8001f0a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d114      	bne.n	8001f3c <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0011      	movs	r1, r2
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f005 ffca 	bl	8007eb4 <HAL_PCD_DataInStageCallback>
 8001f20:	e02b      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	ffff8f8f 	.word	0xffff8f8f
 8001f28:	ffff80c0 	.word	0xffff80c0
 8001f2c:	00000402 	.word	0x00000402
 8001f30:	00000406 	.word	0x00000406
 8001f34:	ffff8f0f 	.word	0xffff8f0f
 8001f38:	ffff8000 	.word	0xffff8000
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	213a      	movs	r1, #58	@ 0x3a
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	18d2      	adds	r2, r2, r3
 8001f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f4a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	18d2      	adds	r2, r2, r3
 8001f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f58:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f60:	0011      	movs	r1, r2
 8001f62:	0018      	movs	r0, r3
 8001f64:	f003 f868 	bl	8005038 <USB_EPStartXfer>
 8001f68:	e007      	b.n	8001f7a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f6a:	233e      	movs	r3, #62	@ 0x3e
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	881a      	ldrh	r2, [r3, #0]
 8001f70:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f92b 	bl	80021d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2244      	movs	r2, #68	@ 0x44
 8001f80:	5a9b      	ldrh	r3, [r3, r2]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da01      	bge.n	8001f8e <PCD_EP_ISR_Handler+0x79e>
 8001f8a:	f7ff fc37 	bl	80017fc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b014      	add	sp, #80	@ 0x50
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}

08001f98 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b089      	sub	sp, #36	@ 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	1dbb      	adds	r3, r7, #6
 8001fa4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fa6:	1dbb      	adds	r3, r7, #6
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	01db      	lsls	r3, r3, #7
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d100      	bne.n	8001fb4 <HAL_PCD_EP_DB_Receive+0x1c>
 8001fb2:	e07d      	b.n	80020b0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2250      	movs	r2, #80	@ 0x50
 8001fba:	5a9b      	ldrh	r3, [r3, r2]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	18d2      	adds	r2, r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	4a7a      	ldr	r2, [pc, #488]	@ (80021b8 <HAL_PCD_EP_DB_Receive+0x220>)
 8001fd0:	4694      	mov	ip, r2
 8001fd2:	4463      	add	r3, ip
 8001fd4:	881a      	ldrh	r2, [r3, #0]
 8001fd6:	211a      	movs	r1, #26
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	0592      	lsls	r2, r2, #22
 8001fdc:	0d92      	lsrs	r2, r2, #22
 8001fde:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	699a      	ldr	r2, [r3, #24]
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d307      	bcc.n	8001ffc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	e002      	b.n	8002002 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d121      	bne.n	800204e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	001a      	movs	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	18d3      	adds	r3, r2, r3
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29a      	uxth	r2, r3
 800201c:	2018      	movs	r0, #24
 800201e:	183b      	adds	r3, r7, r0
 8002020:	4966      	ldr	r1, [pc, #408]	@ (80021bc <HAL_PCD_EP_DB_Receive+0x224>)
 8002022:	400a      	ands	r2, r1
 8002024:	801a      	strh	r2, [r3, #0]
 8002026:	183b      	adds	r3, r7, r0
 8002028:	183a      	adds	r2, r7, r0
 800202a:	8812      	ldrh	r2, [r2, #0]
 800202c:	2180      	movs	r1, #128	@ 0x80
 800202e:	0189      	lsls	r1, r1, #6
 8002030:	404a      	eors	r2, r1
 8002032:	801a      	strh	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	001a      	movs	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	183a      	adds	r2, r7, r0
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	495e      	ldr	r1, [pc, #376]	@ (80021c0 <HAL_PCD_EP_DB_Receive+0x228>)
 8002048:	430a      	orrs	r2, r1
 800204a:	b292      	uxth	r2, r2
 800204c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800204e:	1dbb      	adds	r3, r7, #6
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	2240      	movs	r2, #64	@ 0x40
 8002054:	4013      	ands	r3, r2
 8002056:	d01a      	beq.n	800208e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	001a      	movs	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29a      	uxth	r2, r3
 800206a:	2016      	movs	r0, #22
 800206c:	183b      	adds	r3, r7, r0
 800206e:	4955      	ldr	r1, [pc, #340]	@ (80021c4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002070:	400a      	ands	r2, r1
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	001a      	movs	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	183a      	adds	r2, r7, r0
 8002084:	8812      	ldrh	r2, [r2, #0]
 8002086:	4950      	ldr	r1, [pc, #320]	@ (80021c8 <HAL_PCD_EP_DB_Receive+0x230>)
 8002088:	430a      	orrs	r2, r1
 800208a:	b292      	uxth	r2, r2
 800208c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800208e:	241a      	movs	r4, #26
 8002090:	193b      	adds	r3, r7, r4
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d100      	bne.n	800209a <HAL_PCD_EP_DB_Receive+0x102>
 8002098:	e086      	b.n	80021a8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	6959      	ldr	r1, [r3, #20]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	891a      	ldrh	r2, [r3, #8]
 80020a6:	193b      	adds	r3, r7, r4
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	f003 ff2f 	bl	8005f0c <USB_ReadPMA>
 80020ae:	e07b      	b.n	80021a8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2250      	movs	r2, #80	@ 0x50
 80020b6:	5a9b      	ldrh	r3, [r3, r2]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	001a      	movs	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	18d2      	adds	r2, r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	18d3      	adds	r3, r2, r3
 80020ca:	4a40      	ldr	r2, [pc, #256]	@ (80021cc <HAL_PCD_EP_DB_Receive+0x234>)
 80020cc:	4694      	mov	ip, r2
 80020ce:	4463      	add	r3, ip
 80020d0:	881a      	ldrh	r2, [r3, #0]
 80020d2:	211a      	movs	r1, #26
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	0592      	lsls	r2, r2, #22
 80020d8:	0d92      	lsrs	r2, r2, #22
 80020da:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	187b      	adds	r3, r7, r1
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d307      	bcc.n	80020f8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	1ad2      	subs	r2, r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	619a      	str	r2, [r3, #24]
 80020f6:	e002      	b.n	80020fe <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d121      	bne.n	800214a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	001a      	movs	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	18d3      	adds	r3, r2, r3
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29a      	uxth	r2, r3
 8002118:	201e      	movs	r0, #30
 800211a:	183b      	adds	r3, r7, r0
 800211c:	4927      	ldr	r1, [pc, #156]	@ (80021bc <HAL_PCD_EP_DB_Receive+0x224>)
 800211e:	400a      	ands	r2, r1
 8002120:	801a      	strh	r2, [r3, #0]
 8002122:	183b      	adds	r3, r7, r0
 8002124:	183a      	adds	r2, r7, r0
 8002126:	8812      	ldrh	r2, [r2, #0]
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	0189      	lsls	r1, r1, #6
 800212c:	404a      	eors	r2, r1
 800212e:	801a      	strh	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	001a      	movs	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	183a      	adds	r2, r7, r0
 8002140:	8812      	ldrh	r2, [r2, #0]
 8002142:	491f      	ldr	r1, [pc, #124]	@ (80021c0 <HAL_PCD_EP_DB_Receive+0x228>)
 8002144:	430a      	orrs	r2, r1
 8002146:	b292      	uxth	r2, r2
 8002148:	801a      	strh	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800214a:	1dbb      	adds	r3, r7, #6
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	4013      	ands	r3, r2
 8002152:	d11a      	bne.n	800218a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	001a      	movs	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29a      	uxth	r2, r3
 8002166:	201c      	movs	r0, #28
 8002168:	183b      	adds	r3, r7, r0
 800216a:	4916      	ldr	r1, [pc, #88]	@ (80021c4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800216c:	400a      	ands	r2, r1
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	001a      	movs	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	18d3      	adds	r3, r2, r3
 800217e:	183a      	adds	r2, r7, r0
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	4911      	ldr	r1, [pc, #68]	@ (80021c8 <HAL_PCD_EP_DB_Receive+0x230>)
 8002184:	430a      	orrs	r2, r1
 8002186:	b292      	uxth	r2, r2
 8002188:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800218a:	241a      	movs	r4, #26
 800218c:	193b      	adds	r3, r7, r4
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6959      	ldr	r1, [r3, #20]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	895a      	ldrh	r2, [r3, #10]
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	f003 feb2 	bl	8005f0c <USB_ReadPMA>
    }
  }

  return count;
 80021a8:	231a      	movs	r3, #26
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	881b      	ldrh	r3, [r3, #0]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b009      	add	sp, #36	@ 0x24
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	00000402 	.word	0x00000402
 80021bc:	ffffbf8f 	.word	0xffffbf8f
 80021c0:	ffff8080 	.word	0xffff8080
 80021c4:	ffff8f8f 	.word	0xffff8f8f
 80021c8:	ffff80c0 	.word	0xffff80c0
 80021cc:	00000406 	.word	0x00000406

080021d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0a6      	sub	sp, #152	@ 0x98
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	2240      	movs	r2, #64	@ 0x40
 80021e4:	4013      	ands	r3, r2
 80021e6:	d100      	bne.n	80021ea <HAL_PCD_EP_DB_Transmit+0x1a>
 80021e8:	e1f9      	b.n	80025de <HAL_PCD_EP_DB_Transmit+0x40e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2250      	movs	r2, #80	@ 0x50
 80021f0:	5a9b      	ldrh	r3, [r3, r2]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	001a      	movs	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	18d2      	adds	r2, r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	4ace      	ldr	r2, [pc, #824]	@ (8002540 <HAL_PCD_EP_DB_Transmit+0x370>)
 8002206:	4694      	mov	ip, r2
 8002208:	4463      	add	r3, ip
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	2196      	movs	r1, #150	@ 0x96
 800220e:	187b      	adds	r3, r7, r1
 8002210:	0592      	lsls	r2, r2, #22
 8002212:	0d92      	lsrs	r2, r2, #22
 8002214:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	187b      	adds	r3, r7, r1
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d907      	bls.n	8002232 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	187b      	adds	r3, r7, r1
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	619a      	str	r2, [r3, #24]
 8002230:	e002      	b.n	8002238 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d000      	beq.n	8002242 <HAL_PCD_EP_DB_Transmit+0x72>
 8002240:	e0da      	b.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x228>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d125      	bne.n	8002296 <HAL_PCD_EP_DB_Transmit+0xc6>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2250      	movs	r2, #80	@ 0x50
 8002256:	5a9b      	ldrh	r3, [r3, r2]
 8002258:	b29b      	uxth	r3, r3
 800225a:	001a      	movs	r2, r3
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	189b      	adds	r3, r3, r2
 8002260:	633b      	str	r3, [r7, #48]	@ 0x30
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	00da      	lsls	r2, r3, #3
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	18d3      	adds	r3, r2, r3
 800226c:	4ab4      	ldr	r2, [pc, #720]	@ (8002540 <HAL_PCD_EP_DB_Transmit+0x370>)
 800226e:	4694      	mov	ip, r2
 8002270:	4463      	add	r3, ip
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	059b      	lsls	r3, r3, #22
 800227c:	0d9b      	lsrs	r3, r3, #22
 800227e:	b29a      	uxth	r2, r3
 8002280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4aae      	ldr	r2, [pc, #696]	@ (8002544 <HAL_PCD_EP_DB_Transmit+0x374>)
 800228c:	4313      	orrs	r3, r2
 800228e:	b29a      	uxth	r2, r3
 8002290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002292:	801a      	strh	r2, [r3, #0]
 8002294:	e01b      	b.n	80022ce <HAL_PCD_EP_DB_Transmit+0xfe>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d117      	bne.n	80022ce <HAL_PCD_EP_DB_Transmit+0xfe>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2250      	movs	r2, #80	@ 0x50
 80022aa:	5a9b      	ldrh	r3, [r3, r2]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	001a      	movs	r2, r3
 80022b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00da      	lsls	r2, r3, #3
 80022bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022be:	18d3      	adds	r3, r2, r3
 80022c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002540 <HAL_PCD_EP_DB_Transmit+0x370>)
 80022c2:	4694      	mov	ip, r2
 80022c4:	4463      	add	r3, ip
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ca:	2200      	movs	r2, #0
 80022cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d125      	bne.n	8002328 <HAL_PCD_EP_DB_Transmit+0x158>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	623b      	str	r3, [r7, #32]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2250      	movs	r2, #80	@ 0x50
 80022e8:	5a9b      	ldrh	r3, [r3, r2]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	001a      	movs	r2, r3
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	00da      	lsls	r2, r3, #3
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	4a92      	ldr	r2, [pc, #584]	@ (8002548 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002300:	4694      	mov	ip, r2
 8002302:	4463      	add	r3, ip
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	059b      	lsls	r3, r3, #22
 800230e:	0d9b      	lsrs	r3, r3, #22
 8002310:	b29a      	uxth	r2, r3
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	801a      	strh	r2, [r3, #0]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4a89      	ldr	r2, [pc, #548]	@ (8002544 <HAL_PCD_EP_DB_Transmit+0x374>)
 800231e:	4313      	orrs	r3, r2
 8002320:	b29a      	uxth	r2, r3
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	e018      	b.n	800235a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d114      	bne.n	800235a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2250      	movs	r2, #80	@ 0x50
 8002336:	5a9b      	ldrh	r3, [r3, r2]
 8002338:	b29b      	uxth	r3, r3
 800233a:	001a      	movs	r2, r3
 800233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233e:	189b      	adds	r3, r3, r2
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00da      	lsls	r2, r3, #3
 8002348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234a:	18d3      	adds	r3, r2, r3
 800234c:	4a7e      	ldr	r2, [pc, #504]	@ (8002548 <HAL_PCD_EP_DB_Transmit+0x378>)
 800234e:	4694      	mov	ip, r2
 8002350:	4463      	add	r3, ip
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	78db      	ldrb	r3, [r3, #3]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d120      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x1d4>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	001a      	movs	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	18d3      	adds	r3, r2, r3
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29a      	uxth	r2, r3
 8002374:	201a      	movs	r0, #26
 8002376:	183b      	adds	r3, r7, r0
 8002378:	4974      	ldr	r1, [pc, #464]	@ (800254c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800237a:	400a      	ands	r2, r1
 800237c:	801a      	strh	r2, [r3, #0]
 800237e:	183b      	adds	r3, r7, r0
 8002380:	183a      	adds	r2, r7, r0
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	2120      	movs	r1, #32
 8002386:	404a      	eors	r2, r1
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	001a      	movs	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	18d3      	adds	r3, r2, r3
 8002398:	183a      	adds	r2, r7, r0
 800239a:	8812      	ldrh	r2, [r2, #0]
 800239c:	496c      	ldr	r1, [pc, #432]	@ (8002550 <HAL_PCD_EP_DB_Transmit+0x380>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	b292      	uxth	r2, r2
 80023a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	0011      	movs	r1, r2
 80023ac:	0018      	movs	r0, r3
 80023ae:	f005 fd81 	bl	8007eb4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023b2:	1dbb      	adds	r3, r7, #6
 80023b4:	881a      	ldrh	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	01db      	lsls	r3, r3, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	d01a      	beq.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x224>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	001a      	movs	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	2018      	movs	r0, #24
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	495f      	ldr	r1, [pc, #380]	@ (8002554 <HAL_PCD_EP_DB_Transmit+0x384>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	001a      	movs	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	18d3      	adds	r3, r2, r3
 80023e8:	183a      	adds	r2, r7, r0
 80023ea:	8812      	ldrh	r2, [r2, #0]
 80023ec:	495a      	ldr	r1, [pc, #360]	@ (8002558 <HAL_PCD_EP_DB_Transmit+0x388>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	b292      	uxth	r2, r2
 80023f2:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e327      	b.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	881a      	ldrh	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	01db      	lsls	r3, r3, #7
 8002400:	4013      	ands	r3, r2
 8002402:	d01a      	beq.n	800243a <HAL_PCD_EP_DB_Transmit+0x26a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	001a      	movs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	18d3      	adds	r3, r2, r3
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	204e      	movs	r0, #78	@ 0x4e
 8002418:	183b      	adds	r3, r7, r0
 800241a:	494e      	ldr	r1, [pc, #312]	@ (8002554 <HAL_PCD_EP_DB_Transmit+0x384>)
 800241c:	400a      	ands	r2, r1
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	001a      	movs	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	183a      	adds	r2, r7, r0
 8002430:	8812      	ldrh	r2, [r2, #0]
 8002432:	4949      	ldr	r1, [pc, #292]	@ (8002558 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002434:	430a      	orrs	r2, r1
 8002436:	b292      	uxth	r2, r2
 8002438:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2224      	movs	r2, #36	@ 0x24
 800243e:	5c9b      	ldrb	r3, [r3, r2]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d000      	beq.n	8002446 <HAL_PCD_EP_DB_Transmit+0x276>
 8002444:	e2d8      	b.n	80029f8 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	2196      	movs	r1, #150	@ 0x96
 800244c:	187b      	adds	r3, r7, r1
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	18d2      	adds	r2, r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	187b      	adds	r3, r7, r1
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	18d2      	adds	r2, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d309      	bcc.n	8002484 <HAL_PCD_EP_DB_Transmit+0x2b4>
        {
          len = ep->maxpacket;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800247c:	1ad2      	subs	r2, r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	621a      	str	r2, [r3, #32]
 8002482:	e016      	b.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else if (ep->xfer_len_db == 0U)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d108      	bne.n	800249e <HAL_PCD_EP_DB_Transmit+0x2ce>
        {
          len = TxPctSize;
 800248c:	2396      	movs	r3, #150	@ 0x96
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2224      	movs	r2, #36	@ 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]
 800249c:	e009      	b.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2224      	movs	r2, #36	@ 0x24
 80024a2:	2100      	movs	r1, #0
 80024a4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	785b      	ldrb	r3, [r3, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d169      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0x3be>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	643b      	str	r3, [r7, #64]	@ 0x40
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2250      	movs	r2, #80	@ 0x50
 80024c6:	5a9b      	ldrh	r3, [r3, r2]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	001a      	movs	r2, r3
 80024cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	00da      	lsls	r2, r3, #3
 80024d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024da:	18d3      	adds	r3, r2, r3
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_PCD_EP_DB_Transmit+0x370>)
 80024de:	4694      	mov	ip, r2
 80024e0:	4463      	add	r3, ip
 80024e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	059b      	lsls	r3, r3, #22
 80024ec:	0d9b      	lsrs	r3, r3, #22
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <HAL_PCD_EP_DB_Transmit+0x33c>
 80024fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4a10      	ldr	r2, [pc, #64]	@ (8002544 <HAL_PCD_EP_DB_Transmit+0x374>)
 8002502:	4313      	orrs	r3, r2
 8002504:	b29a      	uxth	r2, r3
 8002506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	e05d      	b.n	80025c8 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800250c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800250e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002510:	d824      	bhi.n	800255c <HAL_PCD_EP_DB_Transmit+0x38c>
 8002512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	653b      	str	r3, [r7, #80]	@ 0x50
 8002518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d002      	beq.n	8002526 <HAL_PCD_EP_DB_Transmit+0x356>
 8002520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002522:	3301      	adds	r3, #1
 8002524:	653b      	str	r3, [r7, #80]	@ 0x50
 8002526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29a      	uxth	r2, r3
 800252c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	029b      	lsls	r3, r3, #10
 8002532:	b29b      	uxth	r3, r3
 8002534:	4313      	orrs	r3, r2
 8002536:	b29a      	uxth	r2, r3
 8002538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800253a:	801a      	strh	r2, [r3, #0]
 800253c:	e044      	b.n	80025c8 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	00000402 	.word	0x00000402
 8002544:	ffff8000 	.word	0xffff8000
 8002548:	00000406 	.word	0x00000406
 800254c:	ffff8fbf 	.word	0xffff8fbf
 8002550:	ffff8080 	.word	0xffff8080
 8002554:	ffff8f8f 	.word	0xffff8f8f
 8002558:	ffffc080 	.word	0xffffc080
 800255c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	653b      	str	r3, [r7, #80]	@ 0x50
 8002562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002564:	221f      	movs	r2, #31
 8002566:	4013      	ands	r3, r2
 8002568:	d102      	bne.n	8002570 <HAL_PCD_EP_DB_Transmit+0x3a0>
 800256a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800256c:	3b01      	subs	r3, #1
 800256e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002578:	b29b      	uxth	r3, r3
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	b29b      	uxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	4ace      	ldr	r2, [pc, #824]	@ (80028bc <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	b29a      	uxth	r2, r3
 8002588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	e01c      	b.n	80025c8 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d118      	bne.n	80025c8 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2250      	movs	r2, #80	@ 0x50
 80025a2:	5a9b      	ldrh	r3, [r3, r2]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	001a      	movs	r2, r3
 80025a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	00da      	lsls	r2, r3, #3
 80025b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	4ac1      	ldr	r2, [pc, #772]	@ (80028c0 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80025ba:	4694      	mov	ip, r2
 80025bc:	4463      	add	r3, ip
 80025be:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	6959      	ldr	r1, [r3, #20]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	891a      	ldrh	r2, [r3, #8]
 80025d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f003 fc4e 	bl	8005e78 <USB_WritePMA>
 80025dc:	e20c      	b.n	80029f8 <HAL_PCD_EP_DB_Transmit+0x828>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2250      	movs	r2, #80	@ 0x50
 80025e4:	5a9b      	ldrh	r3, [r3, r2]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	001a      	movs	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	18d2      	adds	r2, r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	18d3      	adds	r3, r2, r3
 80025f8:	4ab2      	ldr	r2, [pc, #712]	@ (80028c4 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80025fa:	4694      	mov	ip, r2
 80025fc:	4463      	add	r3, ip
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	2196      	movs	r1, #150	@ 0x96
 8002602:	187b      	adds	r3, r7, r1
 8002604:	0592      	lsls	r2, r2, #22
 8002606:	0d92      	lsrs	r2, r2, #22
 8002608:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	187b      	adds	r3, r7, r1
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d307      	bcc.n	8002626 <HAL_PCD_EP_DB_Transmit+0x456>
    {
      ep->xfer_len -= TxPctSize;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	187b      	adds	r3, r7, r1
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	619a      	str	r2, [r3, #24]
 8002624:	e002      	b.n	800262c <HAL_PCD_EP_DB_Transmit+0x45c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d000      	beq.n	8002636 <HAL_PCD_EP_DB_Transmit+0x466>
 8002634:	e0ee      	b.n	8002814 <HAL_PCD_EP_DB_Transmit+0x644>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d125      	bne.n	800268a <HAL_PCD_EP_DB_Transmit+0x4ba>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	677b      	str	r3, [r7, #116]	@ 0x74
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2250      	movs	r2, #80	@ 0x50
 800264a:	5a9b      	ldrh	r3, [r3, r2]
 800264c:	b29b      	uxth	r3, r3
 800264e:	001a      	movs	r2, r3
 8002650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002652:	189b      	adds	r3, r3, r2
 8002654:	677b      	str	r3, [r7, #116]	@ 0x74
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	00da      	lsls	r2, r3, #3
 800265c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	4a97      	ldr	r2, [pc, #604]	@ (80028c0 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002662:	4694      	mov	ip, r2
 8002664:	4463      	add	r3, ip
 8002666:	673b      	str	r3, [r7, #112]	@ 0x70
 8002668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	059b      	lsls	r3, r3, #22
 8002670:	0d9b      	lsrs	r3, r3, #22
 8002672:	b29a      	uxth	r2, r3
 8002674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002676:	801a      	strh	r2, [r3, #0]
 8002678:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4a8f      	ldr	r2, [pc, #572]	@ (80028bc <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8002680:	4313      	orrs	r3, r2
 8002682:	b29a      	uxth	r2, r3
 8002684:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	e01b      	b.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d117      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2250      	movs	r2, #80	@ 0x50
 800269e:	5a9b      	ldrh	r3, [r3, r2]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	001a      	movs	r2, r3
 80026a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	00da      	lsls	r2, r3, #3
 80026b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	4a82      	ldr	r2, [pc, #520]	@ (80028c0 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80026b6:	4694      	mov	ip, r2
 80026b8:	4463      	add	r3, ip
 80026ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026be:	2200      	movs	r2, #0
 80026c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2284      	movs	r2, #132	@ 0x84
 80026c8:	18ba      	adds	r2, r7, r2
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d130      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x566>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	218c      	movs	r1, #140	@ 0x8c
 80026da:	187a      	adds	r2, r7, r1
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2250      	movs	r2, #80	@ 0x50
 80026e4:	5a9b      	ldrh	r3, [r3, r2]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	001a      	movs	r2, r3
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	187a      	adds	r2, r7, r1
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	00da      	lsls	r2, r3, #3
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	18d3      	adds	r3, r2, r3
 8002700:	4a70      	ldr	r2, [pc, #448]	@ (80028c4 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002702:	4694      	mov	ip, r2
 8002704:	4463      	add	r3, ip
 8002706:	2188      	movs	r1, #136	@ 0x88
 8002708:	187a      	adds	r2, r7, r1
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	187b      	adds	r3, r7, r1
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	059b      	lsls	r3, r3, #22
 8002716:	0d9b      	lsrs	r3, r3, #22
 8002718:	b29a      	uxth	r2, r3
 800271a:	187b      	adds	r3, r7, r1
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	187b      	adds	r3, r7, r1
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4a64      	ldr	r2, [pc, #400]	@ (80028bc <HAL_PCD_EP_DB_Transmit+0x6ec>)
 800272a:	4313      	orrs	r3, r2
 800272c:	b29a      	uxth	r2, r3
 800272e:	187b      	adds	r3, r7, r1
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	e01f      	b.n	8002776 <HAL_PCD_EP_DB_Transmit+0x5a6>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d11b      	bne.n	8002776 <HAL_PCD_EP_DB_Transmit+0x5a6>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2250      	movs	r2, #80	@ 0x50
 8002744:	5a9b      	ldrh	r3, [r3, r2]
 8002746:	b29b      	uxth	r3, r3
 8002748:	001a      	movs	r2, r3
 800274a:	2184      	movs	r1, #132	@ 0x84
 800274c:	187b      	adds	r3, r7, r1
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	189b      	adds	r3, r3, r2
 8002752:	187a      	adds	r2, r7, r1
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	00da      	lsls	r2, r3, #3
 800275c:	187b      	adds	r3, r7, r1
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	18d3      	adds	r3, r2, r3
 8002762:	4a58      	ldr	r2, [pc, #352]	@ (80028c4 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002764:	4694      	mov	ip, r2
 8002766:	4463      	add	r3, ip
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	18b9      	adds	r1, r7, r2
 800276c:	600b      	str	r3, [r1, #0]
 800276e:	18bb      	adds	r3, r7, r2
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	78db      	ldrb	r3, [r3, #3]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d120      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x5f0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	001a      	movs	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	18d3      	adds	r3, r2, r3
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29a      	uxth	r2, r3
 8002790:	2094      	movs	r0, #148	@ 0x94
 8002792:	183b      	adds	r3, r7, r0
 8002794:	494c      	ldr	r1, [pc, #304]	@ (80028c8 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002796:	400a      	ands	r2, r1
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	183b      	adds	r3, r7, r0
 800279c:	183a      	adds	r2, r7, r0
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	2120      	movs	r1, #32
 80027a2:	404a      	eors	r2, r1
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	001a      	movs	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	18d3      	adds	r3, r2, r3
 80027b4:	183a      	adds	r2, r7, r0
 80027b6:	8812      	ldrh	r2, [r2, #0]
 80027b8:	4944      	ldr	r1, [pc, #272]	@ (80028cc <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80027ba:	430a      	orrs	r2, r1
 80027bc:	b292      	uxth	r2, r2
 80027be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f005 fb73 	bl	8007eb4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027ce:	1dbb      	adds	r3, r7, #6
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	01db      	lsls	r3, r3, #7
 80027d6:	4013      	ands	r3, r2
 80027d8:	d11a      	bne.n	8002810 <HAL_PCD_EP_DB_Transmit+0x640>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	001a      	movs	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	18d3      	adds	r3, r2, r3
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2092      	movs	r0, #146	@ 0x92
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	4937      	ldr	r1, [pc, #220]	@ (80028d0 <HAL_PCD_EP_DB_Transmit+0x700>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	001a      	movs	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	18d3      	adds	r3, r2, r3
 8002804:	183a      	adds	r2, r7, r0
 8002806:	8812      	ldrh	r2, [r2, #0]
 8002808:	4932      	ldr	r1, [pc, #200]	@ (80028d4 <HAL_PCD_EP_DB_Transmit+0x704>)
 800280a:	430a      	orrs	r2, r1
 800280c:	b292      	uxth	r2, r2
 800280e:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e119      	b.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002814:	1dbb      	adds	r3, r7, #6
 8002816:	881a      	ldrh	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	01db      	lsls	r3, r3, #7
 800281c:	4013      	ands	r3, r2
 800281e:	d11a      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0x686>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	001a      	movs	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	18d3      	adds	r3, r2, r3
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29a      	uxth	r2, r3
 8002832:	2056      	movs	r0, #86	@ 0x56
 8002834:	183b      	adds	r3, r7, r0
 8002836:	4926      	ldr	r1, [pc, #152]	@ (80028d0 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002838:	400a      	ands	r2, r1
 800283a:	801a      	strh	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	001a      	movs	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	18d3      	adds	r3, r2, r3
 800284a:	183a      	adds	r2, r7, r0
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	4921      	ldr	r1, [pc, #132]	@ (80028d4 <HAL_PCD_EP_DB_Transmit+0x704>)
 8002850:	430a      	orrs	r2, r1
 8002852:	b292      	uxth	r2, r2
 8002854:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2224      	movs	r2, #36	@ 0x24
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d000      	beq.n	8002862 <HAL_PCD_EP_DB_Transmit+0x692>
 8002860:	e0ca      	b.n	80029f8 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	2196      	movs	r1, #150	@ 0x96
 8002868:	187b      	adds	r3, r7, r1
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	18d2      	adds	r2, r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	187b      	adds	r3, r7, r1
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	18d2      	adds	r2, r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d309      	bcc.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x6d0>
        {
          len = ep->maxpacket;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	621a      	str	r2, [r3, #32]
 800289e:	e025      	b.n	80028ec <HAL_PCD_EP_DB_Transmit+0x71c>
        }
        else if (ep->xfer_len_db == 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d117      	bne.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x708>
        {
          len = TxPctSize;
 80028a8:	2396      	movs	r3, #150	@ 0x96
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2224      	movs	r2, #36	@ 0x24
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
 80028b8:	e018      	b.n	80028ec <HAL_PCD_EP_DB_Transmit+0x71c>
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	ffff8000 	.word	0xffff8000
 80028c0:	00000402 	.word	0x00000402
 80028c4:	00000406 	.word	0x00000406
 80028c8:	ffff8fbf 	.word	0xffff8fbf
 80028cc:	ffff8080 	.word	0xffff8080
 80028d0:	ffff8f8f 	.word	0xffff8f8f
 80028d4:	ffffc080 	.word	0xffffc080
        }
        else
        {
          len = ep->xfer_len_db;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2224      	movs	r2, #36	@ 0x24
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d15a      	bne.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x7e0>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2250      	movs	r2, #80	@ 0x50
 8002906:	5a9b      	ldrh	r3, [r3, r2]
 8002908:	b29b      	uxth	r3, r3
 800290a:	001a      	movs	r2, r3
 800290c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800290e:	189b      	adds	r3, r3, r2
 8002910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	00da      	lsls	r2, r3, #3
 8002918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800291a:	18d3      	adds	r3, r2, r3
 800291c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a50 <HAL_PCD_EP_DB_Transmit+0x880>)
 800291e:	4694      	mov	ip, r2
 8002920:	4463      	add	r3, ip
 8002922:	667b      	str	r3, [r7, #100]	@ 0x64
 8002924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	059b      	lsls	r3, r3, #22
 800292c:	0d9b      	lsrs	r3, r3, #22
 800292e:	b29a      	uxth	r2, r3
 8002930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002932:	801a      	strh	r2, [r3, #0]
 8002934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HAL_PCD_EP_DB_Transmit+0x77c>
 800293a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4a44      	ldr	r2, [pc, #272]	@ (8002a54 <HAL_PCD_EP_DB_Transmit+0x884>)
 8002942:	4313      	orrs	r3, r2
 8002944:	b29a      	uxth	r2, r3
 8002946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	e04b      	b.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x814>
 800294c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800294e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002950:	d815      	bhi.n	800297e <HAL_PCD_EP_DB_Transmit+0x7ae>
 8002952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	663b      	str	r3, [r7, #96]	@ 0x60
 8002958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800295a:	2201      	movs	r2, #1
 800295c:	4013      	ands	r3, r2
 800295e:	d002      	beq.n	8002966 <HAL_PCD_EP_DB_Transmit+0x796>
 8002960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002962:	3301      	adds	r3, #1
 8002964:	663b      	str	r3, [r7, #96]	@ 0x60
 8002966:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29a      	uxth	r2, r3
 800296c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296e:	b29b      	uxth	r3, r3
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	b29b      	uxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b29a      	uxth	r2, r3
 8002978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297a:	801a      	strh	r2, [r3, #0]
 800297c:	e032      	b.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x814>
 800297e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	663b      	str	r3, [r7, #96]	@ 0x60
 8002984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002986:	221f      	movs	r2, #31
 8002988:	4013      	ands	r3, r2
 800298a:	d102      	bne.n	8002992 <HAL_PCD_EP_DB_Transmit+0x7c2>
 800298c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800298e:	3b01      	subs	r3, #1
 8002990:	663b      	str	r3, [r7, #96]	@ 0x60
 8002992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29a      	uxth	r2, r3
 8002998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800299a:	b29b      	uxth	r3, r3
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a54 <HAL_PCD_EP_DB_Transmit+0x884>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	e019      	b.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x814>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d115      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x814>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2250      	movs	r2, #80	@ 0x50
 80029be:	5a9b      	ldrh	r3, [r3, r2]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	001a      	movs	r2, r3
 80029c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c6:	189b      	adds	r3, r3, r2
 80029c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	00da      	lsls	r2, r3, #3
 80029d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d2:	18d3      	adds	r3, r2, r3
 80029d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a50 <HAL_PCD_EP_DB_Transmit+0x880>)
 80029d6:	4694      	mov	ip, r2
 80029d8:	4463      	add	r3, ip
 80029da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029de:	b29a      	uxth	r2, r3
 80029e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	6959      	ldr	r1, [r3, #20]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	895a      	ldrh	r2, [r3, #10]
 80029f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f003 fa40 	bl	8005e78 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	001a      	movs	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	18d3      	adds	r3, r2, r3
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	2016      	movs	r0, #22
 8002a0c:	183b      	adds	r3, r7, r0
 8002a0e:	4912      	ldr	r1, [pc, #72]	@ (8002a58 <HAL_PCD_EP_DB_Transmit+0x888>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	183b      	adds	r3, r7, r0
 8002a16:	183a      	adds	r2, r7, r0
 8002a18:	8812      	ldrh	r2, [r2, #0]
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	404a      	eors	r2, r1
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	183a      	adds	r2, r7, r0
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	2120      	movs	r1, #32
 8002a28:	404a      	eors	r2, r1
 8002a2a:	801a      	strh	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	001a      	movs	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	18d3      	adds	r3, r2, r3
 8002a3a:	183a      	adds	r2, r7, r0
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	4907      	ldr	r1, [pc, #28]	@ (8002a5c <HAL_PCD_EP_DB_Transmit+0x88c>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	b292      	uxth	r2, r2
 8002a44:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b026      	add	sp, #152	@ 0x98
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	00000406 	.word	0x00000406
 8002a54:	ffff8000 	.word	0xffff8000
 8002a58:	ffff8fbf 	.word	0xffff8fbf
 8002a5c:	ffff8080 	.word	0xffff8080

08002a60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	0008      	movs	r0, r1
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	240a      	movs	r4, #10
 8002a70:	193b      	adds	r3, r7, r4
 8002a72:	1c02      	adds	r2, r0, #0
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	2308      	movs	r3, #8
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	1c0a      	adds	r2, r1, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a7e:	0021      	movs	r1, r4
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	2207      	movs	r2, #7
 8002a94:	401a      	ands	r2, r3
 8002a96:	0013      	movs	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	881a      	ldrh	r2, [r3, #0]
 8002aae:	0013      	movs	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	189b      	adds	r3, r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3351      	adds	r3, #81	@ 0x51
 8002ab8:	33ff      	adds	r3, #255	@ 0xff
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	18d3      	adds	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	80da      	strh	r2, [r3, #6]
 8002ad8:	e00b      	b.n	8002af2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2201      	movs	r2, #1
 8002ade:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b007      	add	sp, #28
 8002afa:	bd90      	pop	{r4, r7, pc}

08002afc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	23b4      	movs	r3, #180	@ 0xb4
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	2101      	movs	r1, #1
 8002b12:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	23b2      	movs	r3, #178	@ 0xb2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2254      	movs	r2, #84	@ 0x54
 8002b22:	5a9b      	ldrh	r3, [r3, r2]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b299      	uxth	r1, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2254      	movs	r2, #84	@ 0x54
 8002b30:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2254      	movs	r2, #84	@ 0x54
 8002b36:	5a9b      	ldrh	r3, [r3, r2]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b299      	uxth	r1, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2254      	movs	r2, #84	@ 0x54
 8002b44:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	000a      	movs	r2, r1
 8002b5a:	1cfb      	adds	r3, r7, #3
 8002b5c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f000 fbbf 	bl	80032fa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7c:	4bc9      	ldr	r3, [pc, #804]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	220c      	movs	r2, #12
 8002b82:	4013      	ands	r3, r2
 8002b84:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b86:	4bc7      	ldr	r3, [pc, #796]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	025b      	lsls	r3, r3, #9
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x36>
 8002b9c:	e07e      	b.n	8002c9c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d007      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d112      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x68>
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	025b      	lsls	r3, r3, #9
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	4bbb      	ldr	r3, [pc, #748]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x5a>
 8002bc0:	e06b      	b.n	8002c9a <HAL_RCC_OscConfig+0x132>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d167      	bne.n	8002c9a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f000 fb95 	bl	80032fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x84>
 8002bdc:	4bb1      	ldr	r3, [pc, #708]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4bb0      	ldr	r3, [pc, #704]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002be2:	2180      	movs	r1, #128	@ 0x80
 8002be4:	0249      	lsls	r1, r1, #9
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e027      	b.n	8002c3c <HAL_RCC_OscConfig+0xd4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	23a0      	movs	r3, #160	@ 0xa0
 8002bf2:	02db      	lsls	r3, r3, #11
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10e      	bne.n	8002c16 <HAL_RCC_OscConfig+0xae>
 8002bf8:	4baa      	ldr	r3, [pc, #680]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4ba9      	ldr	r3, [pc, #676]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	02c9      	lsls	r1, r1, #11
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	4ba7      	ldr	r3, [pc, #668]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c0c:	2180      	movs	r1, #128	@ 0x80
 8002c0e:	0249      	lsls	r1, r1, #9
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e012      	b.n	8002c3c <HAL_RCC_OscConfig+0xd4>
 8002c16:	4ba3      	ldr	r3, [pc, #652]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4ba2      	ldr	r3, [pc, #648]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c1c:	49a2      	ldr	r1, [pc, #648]	@ (8002ea8 <HAL_RCC_OscConfig+0x340>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	4ba0      	ldr	r3, [pc, #640]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	025b      	lsls	r3, r3, #9
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4b9c      	ldr	r3, [pc, #624]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b9b      	ldr	r3, [pc, #620]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c36:	499d      	ldr	r1, [pc, #628]	@ (8002eac <HAL_RCC_OscConfig+0x344>)
 8002c38:	400a      	ands	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d015      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fd fec0 	bl	80009c8 <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c4c:	e009      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4e:	f7fd febb 	bl	80009c8 <HAL_GetTick>
 8002c52:	0002      	movs	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b64      	cmp	r3, #100	@ 0x64
 8002c5a:	d902      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f000 fb4c 	bl	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c62:	4b90      	ldr	r3, [pc, #576]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	029b      	lsls	r3, r3, #10
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d0ef      	beq.n	8002c4e <HAL_RCC_OscConfig+0xe6>
 8002c6e:	e015      	b.n	8002c9c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fd feaa 	bl	80009c8 <HAL_GetTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7a:	f7fd fea5 	bl	80009c8 <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b64      	cmp	r3, #100	@ 0x64
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e336      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c8c:	4b85      	ldr	r3, [pc, #532]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	029b      	lsls	r3, r3, #10
 8002c94:	4013      	ands	r3, r2
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x112>
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d100      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x140>
 8002ca6:	e099      	b.n	8002ddc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002cbc:	2120      	movs	r1, #32
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	4393      	bics	r3, r2
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d13e      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d13b      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002cdc:	4b71      	ldr	r3, [pc, #452]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x188>
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e304      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8002eb0 <HAL_RCC_OscConfig+0x348>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	021a      	lsls	r2, r3, #8
 8002d00:	4b68      	ldr	r3, [pc, #416]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d06:	4b67      	ldr	r3, [pc, #412]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2209      	movs	r2, #9
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	4b64      	ldr	r3, [pc, #400]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d18:	f000 fc42 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8002d1c:	0001      	movs	r1, r0
 8002d1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	220f      	movs	r2, #15
 8002d26:	4013      	ands	r3, r2
 8002d28:	4a62      	ldr	r2, [pc, #392]	@ (8002eb4 <HAL_RCC_OscConfig+0x34c>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	000a      	movs	r2, r1
 8002d2e:	40da      	lsrs	r2, r3
 8002d30:	4b61      	ldr	r3, [pc, #388]	@ (8002eb8 <HAL_RCC_OscConfig+0x350>)
 8002d32:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002d34:	4b61      	ldr	r3, [pc, #388]	@ (8002ebc <HAL_RCC_OscConfig+0x354>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2513      	movs	r5, #19
 8002d3a:	197c      	adds	r4, r7, r5
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7fd fdfd 	bl	800093c <HAL_InitTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002d46:	197b      	adds	r3, r7, r5
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d046      	beq.n	8002ddc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	e2d2      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d027      	beq.n	8002daa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d5a:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2209      	movs	r2, #9
 8002d60:	4393      	bics	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fd fe2c 	bl	80009c8 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fd fe27 	bl	80009c8 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e2b8      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d88:	4b46      	ldr	r3, [pc, #280]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d0f1      	beq.n	8002d76 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a46      	ldr	r2, [pc, #280]	@ (8002eb0 <HAL_RCC_OscConfig+0x348>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	021a      	lsls	r2, r3, #8
 8002da2:	4b40      	ldr	r3, [pc, #256]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	e018      	b.n	8002ddc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002db0:	2101      	movs	r1, #1
 8002db2:	438a      	bics	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fd fe07 	bl	80009c8 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fd fe02 	bl	80009c8 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e293      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d1f1      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2210      	movs	r2, #16
 8002de2:	4013      	ands	r3, r2
 8002de4:	d100      	bne.n	8002de8 <HAL_RCC_OscConfig+0x280>
 8002de6:	e0a2      	b.n	8002f2e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d140      	bne.n	8002e70 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x29e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e279      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e06:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec0 <HAL_RCC_OscConfig+0x358>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e14:	4b23      	ldr	r3, [pc, #140]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	0a19      	lsrs	r1, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	061a      	lsls	r2, r3, #24
 8002e28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	0b5b      	lsrs	r3, r3, #13
 8002e34:	3301      	adds	r3, #1
 8002e36:	2280      	movs	r2, #128	@ 0x80
 8002e38:	0212      	lsls	r2, r2, #8
 8002e3a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	210f      	movs	r1, #15
 8002e44:	400b      	ands	r3, r1
 8002e46:	491b      	ldr	r1, [pc, #108]	@ (8002eb4 <HAL_RCC_OscConfig+0x34c>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_RCC_OscConfig+0x350>)
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002e50:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <HAL_RCC_OscConfig+0x354>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2513      	movs	r5, #19
 8002e56:	197c      	adds	r4, r7, r5
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7fd fd6f 	bl	800093c <HAL_InitTick>
 8002e5e:	0003      	movs	r3, r0
 8002e60:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002e62:	197b      	adds	r3, r7, r5
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d061      	beq.n	8002f2e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002e6a:	197b      	adds	r3, r7, r5
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	e244      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d040      	beq.n	8002efa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCC_OscConfig+0x33c>)
 8002e7e:	2180      	movs	r1, #128	@ 0x80
 8002e80:	0049      	lsls	r1, r1, #1
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fd fd9f 	bl	80009c8 <HAL_GetTick>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e8e:	e019      	b.n	8002ec4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e90:	f7fd fd9a 	bl	80009c8 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d912      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e22b      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	fffeffff 	.word	0xfffeffff
 8002eac:	fffbffff 	.word	0xfffbffff
 8002eb0:	ffffe0ff 	.word	0xffffe0ff
 8002eb4:	08008e54 	.word	0x08008e54
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20000004 	.word	0x20000004
 8002ec0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ec4:	4bca      	ldr	r3, [pc, #808]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d0df      	beq.n	8002e90 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed0:	4bc7      	ldr	r3, [pc, #796]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4ac7      	ldr	r2, [pc, #796]	@ (80031f4 <HAL_RCC_OscConfig+0x68c>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ede:	4bc4      	ldr	r3, [pc, #784]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee4:	4bc2      	ldr	r3, [pc, #776]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	0a19      	lsrs	r1, r3, #8
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	061a      	lsls	r2, r3, #24
 8002ef2:	4bbf      	ldr	r3, [pc, #764]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	e019      	b.n	8002f2e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002efa:	4bbd      	ldr	r3, [pc, #756]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4bbc      	ldr	r3, [pc, #752]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f00:	49bd      	ldr	r1, [pc, #756]	@ (80031f8 <HAL_RCC_OscConfig+0x690>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fd5f 	bl	80009c8 <HAL_GetTick>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f10:	f7fd fd5a 	bl	80009c8 <HAL_GetTick>
 8002f14:	0002      	movs	r2, r0
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1eb      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f22:	4bb3      	ldr	r3, [pc, #716]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	@ 0x80
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2208      	movs	r2, #8
 8002f34:	4013      	ands	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d019      	beq.n	8002f74 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f40:	4bab      	ldr	r3, [pc, #684]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f44:	4baa      	ldr	r3, [pc, #680]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f46:	2101      	movs	r1, #1
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7fd fd3c 	bl	80009c8 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fd fd37 	bl	80009c8 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1c8      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f68:	4ba1      	ldr	r3, [pc, #644]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d0f1      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3ee>
 8002f72:	e018      	b.n	8002fa6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f74:	4b9e      	ldr	r3, [pc, #632]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f78:	4b9d      	ldr	r3, [pc, #628]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f80:	f7fd fd22 	bl	80009c8 <HAL_GetTick>
 8002f84:	0003      	movs	r3, r0
 8002f86:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fd fd1d 	bl	80009c8 <HAL_GetTick>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1ae      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f9c:	4b94      	ldr	r3, [pc, #592]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1f1      	bne.n	8002f8a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2204      	movs	r2, #4
 8002fac:	4013      	ands	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x44a>
 8002fb0:	e0ae      	b.n	8003110 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2023      	movs	r0, #35	@ 0x23
 8002fb4:	183b      	adds	r3, r7, r0
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b8d      	ldr	r3, [pc, #564]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fbe:	2380      	movs	r3, #128	@ 0x80
 8002fc0:	055b      	lsls	r3, r3, #21
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d109      	bne.n	8002fda <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b8a      	ldr	r3, [pc, #552]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fca:	4b89      	ldr	r3, [pc, #548]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8002fcc:	2180      	movs	r1, #128	@ 0x80
 8002fce:	0549      	lsls	r1, r1, #21
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002fd4:	183b      	adds	r3, r7, r0
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b88      	ldr	r3, [pc, #544]	@ (80031fc <HAL_RCC_OscConfig+0x694>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b85      	ldr	r3, [pc, #532]	@ (80031fc <HAL_RCC_OscConfig+0x694>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b84      	ldr	r3, [pc, #528]	@ (80031fc <HAL_RCC_OscConfig+0x694>)
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	0049      	lsls	r1, r1, #1
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff4:	f7fd fce8 	bl	80009c8 <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fd fce3 	bl	80009c8 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	@ 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e174      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	4b7a      	ldr	r3, [pc, #488]	@ (80031fc <HAL_RCC_OscConfig+0x694>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4013      	ands	r3, r2
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x4d0>
 8003028:	4b71      	ldr	r3, [pc, #452]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 800302a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800302c:	4b70      	ldr	r3, [pc, #448]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 800302e:	2180      	movs	r1, #128	@ 0x80
 8003030:	0049      	lsls	r1, r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	651a      	str	r2, [r3, #80]	@ 0x50
 8003036:	e031      	b.n	800309c <HAL_RCC_OscConfig+0x534>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x4f2>
 8003040:	4b6b      	ldr	r3, [pc, #428]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003042:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003044:	4b6a      	ldr	r3, [pc, #424]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003046:	496c      	ldr	r1, [pc, #432]	@ (80031f8 <HAL_RCC_OscConfig+0x690>)
 8003048:	400a      	ands	r2, r1
 800304a:	651a      	str	r2, [r3, #80]	@ 0x50
 800304c:	4b68      	ldr	r3, [pc, #416]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 800304e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003050:	4b67      	ldr	r3, [pc, #412]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003052:	496b      	ldr	r1, [pc, #428]	@ (8003200 <HAL_RCC_OscConfig+0x698>)
 8003054:	400a      	ands	r2, r1
 8003056:	651a      	str	r2, [r3, #80]	@ 0x50
 8003058:	e020      	b.n	800309c <HAL_RCC_OscConfig+0x534>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	23a0      	movs	r3, #160	@ 0xa0
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	429a      	cmp	r2, r3
 8003064:	d10e      	bne.n	8003084 <HAL_RCC_OscConfig+0x51c>
 8003066:	4b62      	ldr	r3, [pc, #392]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800306a:	4b61      	ldr	r3, [pc, #388]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	00c9      	lsls	r1, r1, #3
 8003070:	430a      	orrs	r2, r1
 8003072:	651a      	str	r2, [r3, #80]	@ 0x50
 8003074:	4b5e      	ldr	r3, [pc, #376]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003078:	4b5d      	ldr	r3, [pc, #372]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 800307a:	2180      	movs	r1, #128	@ 0x80
 800307c:	0049      	lsls	r1, r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	651a      	str	r2, [r3, #80]	@ 0x50
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x534>
 8003084:	4b5a      	ldr	r3, [pc, #360]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003086:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003088:	4b59      	ldr	r3, [pc, #356]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 800308a:	495b      	ldr	r1, [pc, #364]	@ (80031f8 <HAL_RCC_OscConfig+0x690>)
 800308c:	400a      	ands	r2, r1
 800308e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003090:	4b57      	ldr	r3, [pc, #348]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003092:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003094:	4b56      	ldr	r3, [pc, #344]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003096:	495a      	ldr	r1, [pc, #360]	@ (8003200 <HAL_RCC_OscConfig+0x698>)
 8003098:	400a      	ands	r2, r1
 800309a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fd fc90 	bl	80009c8 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fd fc8b 	bl	80009c8 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_RCC_OscConfig+0x69c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e11b      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c2:	4b4b      	ldr	r3, [pc, #300]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 80030c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030c6:	2380      	movs	r3, #128	@ 0x80
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4013      	ands	r3, r2
 80030cc:	d0ef      	beq.n	80030ae <HAL_RCC_OscConfig+0x546>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fd fc7a 	bl	80009c8 <HAL_GetTick>
 80030d4:	0003      	movs	r3, r0
 80030d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030d8:	e009      	b.n	80030ee <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fd fc75 	bl	80009c8 <HAL_GetTick>
 80030de:	0002      	movs	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	4a47      	ldr	r2, [pc, #284]	@ (8003204 <HAL_RCC_OscConfig+0x69c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e105      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ee:	4b40      	ldr	r3, [pc, #256]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 80030f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4013      	ands	r3, r2
 80030f8:	d1ef      	bne.n	80030da <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030fa:	2323      	movs	r3, #35	@ 0x23
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4b3a      	ldr	r3, [pc, #232]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003108:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 800310a:	493f      	ldr	r1, [pc, #252]	@ (8003208 <HAL_RCC_OscConfig+0x6a0>)
 800310c:	400a      	ands	r2, r1
 800310e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2220      	movs	r2, #32
 8003116:	4013      	ands	r3, r2
 8003118:	d049      	beq.n	80031ae <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d026      	beq.n	8003170 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003122:	4b33      	ldr	r3, [pc, #204]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003128:	2101      	movs	r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	4b30      	ldr	r3, [pc, #192]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003132:	4b2f      	ldr	r3, [pc, #188]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003134:	2101      	movs	r1, #1
 8003136:	430a      	orrs	r2, r1
 8003138:	635a      	str	r2, [r3, #52]	@ 0x34
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x6a4>)
 800313c:	6a1a      	ldr	r2, [r3, #32]
 800313e:	4b33      	ldr	r3, [pc, #204]	@ (800320c <HAL_RCC_OscConfig+0x6a4>)
 8003140:	2180      	movs	r1, #128	@ 0x80
 8003142:	0189      	lsls	r1, r1, #6
 8003144:	430a      	orrs	r2, r1
 8003146:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fd fc3e 	bl	80009c8 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003152:	f7fd fc39 	bl	80009c8 <HAL_GetTick>
 8003156:	0002      	movs	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0ca      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003164:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2202      	movs	r2, #2
 800316a:	4013      	ands	r3, r2
 800316c:	d0f1      	beq.n	8003152 <HAL_RCC_OscConfig+0x5ea>
 800316e:	e01e      	b.n	80031ae <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003170:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4b1e      	ldr	r3, [pc, #120]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 8003176:	2101      	movs	r1, #1
 8003178:	438a      	bics	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_RCC_OscConfig+0x6a4>)
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	4b22      	ldr	r3, [pc, #136]	@ (800320c <HAL_RCC_OscConfig+0x6a4>)
 8003182:	4923      	ldr	r1, [pc, #140]	@ (8003210 <HAL_RCC_OscConfig+0x6a8>)
 8003184:	400a      	ands	r2, r1
 8003186:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd fc1e 	bl	80009c8 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003192:	f7fd fc19 	bl	80009c8 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0aa      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2202      	movs	r2, #2
 80031aa:	4013      	ands	r3, r2
 80031ac:	d1f1      	bne.n	8003192 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <HAL_RCC_OscConfig+0x650>
 80031b6:	e09f      	b.n	80032f8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d100      	bne.n	80031c0 <HAL_RCC_OscConfig+0x658>
 80031be:	e078      	b.n	80032b2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d159      	bne.n	800327c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c8:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <HAL_RCC_OscConfig+0x688>)
 80031ce:	4911      	ldr	r1, [pc, #68]	@ (8003214 <HAL_RCC_OscConfig+0x6ac>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fd fbf8 	bl	80009c8 <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031dc:	e01c      	b.n	8003218 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031de:	f7fd fbf3 	bl	80009c8 <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d915      	bls.n	8003218 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e084      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
 80031f0:	40021000 	.word	0x40021000
 80031f4:	ffff1fff 	.word	0xffff1fff
 80031f8:	fffffeff 	.word	0xfffffeff
 80031fc:	40007000 	.word	0x40007000
 8003200:	fffffbff 	.word	0xfffffbff
 8003204:	00001388 	.word	0x00001388
 8003208:	efffffff 	.word	0xefffffff
 800320c:	40010000 	.word	0x40010000
 8003210:	ffffdfff 	.word	0xffffdfff
 8003214:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003218:	4b3a      	ldr	r3, [pc, #232]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	049b      	lsls	r3, r3, #18
 8003220:	4013      	ands	r3, r2
 8003222:	d1dc      	bne.n	80031de <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003224:	4b37      	ldr	r3, [pc, #220]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a37      	ldr	r2, [pc, #220]	@ (8003308 <HAL_RCC_OscConfig+0x7a0>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323c:	431a      	orrs	r2, r3
 800323e:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b2f      	ldr	r3, [pc, #188]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b2e      	ldr	r3, [pc, #184]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 800324a:	2180      	movs	r1, #128	@ 0x80
 800324c:	0449      	lsls	r1, r1, #17
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fbb9 	bl	80009c8 <HAL_GetTick>
 8003256:	0003      	movs	r3, r0
 8003258:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325c:	f7fd fbb4 	bl	80009c8 <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e045      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800326e:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	049b      	lsls	r3, r3, #18
 8003276:	4013      	ands	r3, r2
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x6f4>
 800327a:	e03d      	b.n	80032f8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	4b21      	ldr	r3, [pc, #132]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 8003282:	4922      	ldr	r1, [pc, #136]	@ (800330c <HAL_RCC_OscConfig+0x7a4>)
 8003284:	400a      	ands	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fb9e 	bl	80009c8 <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fd fb99 	bl	80009c8 <HAL_GetTick>
 8003296:	0002      	movs	r2, r0
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e02a      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032a4:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	049b      	lsls	r3, r3, #18
 80032ac:	4013      	ands	r3, r2
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x72a>
 80032b0:	e022      	b.n	80032f8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01d      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032be:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <HAL_RCC_OscConfig+0x79c>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	025b      	lsls	r3, r3, #9
 80032ca:	401a      	ands	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d10f      	bne.n	80032f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	23f0      	movs	r3, #240	@ 0xf0
 80032d8:	039b      	lsls	r3, r3, #14
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	23c0      	movs	r3, #192	@ 0xc0
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b00a      	add	sp, #40	@ 0x28
 8003300:	bdb0      	pop	{r4, r5, r7, pc}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	40021000 	.word	0x40021000
 8003308:	ff02ffff 	.word	0xff02ffff
 800330c:	feffffff 	.word	0xfeffffff

08003310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b5b0      	push	{r4, r5, r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e128      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b96      	ldr	r3, [pc, #600]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	4013      	ands	r3, r2
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d91e      	bls.n	8003370 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b93      	ldr	r3, [pc, #588]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	4393      	bics	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	4b90      	ldr	r3, [pc, #576]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003344:	f7fd fb40 	bl	80009c8 <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334c:	e009      	b.n	8003362 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334e:	f7fd fb3b 	bl	80009c8 <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	4a8a      	ldr	r2, [pc, #552]	@ (8003584 <HAL_RCC_ClockConfig+0x274>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e109      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b87      	ldr	r3, [pc, #540]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	4013      	ands	r3, r2
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d1ee      	bne.n	800334e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337a:	4b83      	ldr	r3, [pc, #524]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	22f0      	movs	r2, #240	@ 0xf0
 8003380:	4393      	bics	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b7f      	ldr	r3, [pc, #508]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 800338a:	430a      	orrs	r2, r1
 800338c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2201      	movs	r2, #1
 8003394:	4013      	ands	r3, r2
 8003396:	d100      	bne.n	800339a <HAL_RCC_ClockConfig+0x8a>
 8003398:	e089      	b.n	80034ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033a2:	4b79      	ldr	r3, [pc, #484]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	029b      	lsls	r3, r3, #10
 80033aa:	4013      	ands	r3, r2
 80033ac:	d120      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0e1      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ba:	4b73      	ldr	r3, [pc, #460]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	049b      	lsls	r3, r3, #18
 80033c2:	4013      	ands	r3, r2
 80033c4:	d114      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0d5      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d106      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2204      	movs	r2, #4
 80033d8:	4013      	ands	r3, r2
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0ca      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033e0:	4b69      	ldr	r3, [pc, #420]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2380      	movs	r3, #128	@ 0x80
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0c2      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f0:	4b65      	ldr	r3, [pc, #404]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2203      	movs	r2, #3
 80033f6:	4393      	bics	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	4b62      	ldr	r3, [pc, #392]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003400:	430a      	orrs	r2, r1
 8003402:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fd fae0 	bl	80009c8 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d111      	bne.n	8003438 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003414:	e009      	b.n	800342a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003416:	f7fd fad7 	bl	80009c8 <HAL_GetTick>
 800341a:	0002      	movs	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	4a58      	ldr	r2, [pc, #352]	@ (8003584 <HAL_RCC_ClockConfig+0x274>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0a5      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800342a:	4b57      	ldr	r3, [pc, #348]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	220c      	movs	r2, #12
 8003430:	4013      	ands	r3, r2
 8003432:	2b08      	cmp	r3, #8
 8003434:	d1ef      	bne.n	8003416 <HAL_RCC_ClockConfig+0x106>
 8003436:	e03a      	b.n	80034ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d111      	bne.n	8003464 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	e009      	b.n	8003456 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003442:	f7fd fac1 	bl	80009c8 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	4a4d      	ldr	r2, [pc, #308]	@ (8003584 <HAL_RCC_ClockConfig+0x274>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e08f      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003456:	4b4c      	ldr	r3, [pc, #304]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	220c      	movs	r2, #12
 800345c:	4013      	ands	r3, r2
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_ClockConfig+0x132>
 8003462:	e024      	b.n	80034ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d11b      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800346c:	e009      	b.n	8003482 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346e:	f7fd faab 	bl	80009c8 <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	4a42      	ldr	r2, [pc, #264]	@ (8003584 <HAL_RCC_ClockConfig+0x274>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e079      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003482:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	220c      	movs	r2, #12
 8003488:	4013      	ands	r3, r2
 800348a:	2b04      	cmp	r3, #4
 800348c:	d1ef      	bne.n	800346e <HAL_RCC_ClockConfig+0x15e>
 800348e:	e00e      	b.n	80034ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fd fa9a 	bl	80009c8 <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	4a3a      	ldr	r2, [pc, #232]	@ (8003584 <HAL_RCC_ClockConfig+0x274>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e068      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034a4:	4b38      	ldr	r3, [pc, #224]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	220c      	movs	r2, #12
 80034aa:	4013      	ands	r3, r2
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ae:	4b34      	ldr	r3, [pc, #208]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2201      	movs	r2, #1
 80034b4:	4013      	ands	r3, r2
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d21e      	bcs.n	80034fa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034bc:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	4393      	bics	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034ce:	f7fd fa7b 	bl	80009c8 <HAL_GetTick>
 80034d2:	0003      	movs	r3, r0
 80034d4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	e009      	b.n	80034ec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d8:	f7fd fa76 	bl	80009c8 <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	4a28      	ldr	r2, [pc, #160]	@ (8003584 <HAL_RCC_ClockConfig+0x274>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e044      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ec:	4b24      	ldr	r3, [pc, #144]	@ (8003580 <HAL_RCC_ClockConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2204      	movs	r2, #4
 8003500:	4013      	ands	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b20      	ldr	r3, [pc, #128]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a20      	ldr	r2, [pc, #128]	@ (800358c <HAL_RCC_ClockConfig+0x27c>)
 800350a:	4013      	ands	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003514:	430a      	orrs	r2, r1
 8003516:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2208      	movs	r2, #8
 800351e:	4013      	ands	r3, r2
 8003520:	d00a      	beq.n	8003538 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003522:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4a1a      	ldr	r2, [pc, #104]	@ (8003590 <HAL_RCC_ClockConfig+0x280>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	00da      	lsls	r2, r3, #3
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003534:	430a      	orrs	r2, r1
 8003536:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003538:	f000 f832 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800353c:	0001      	movs	r1, r0
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <HAL_RCC_ClockConfig+0x278>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	220f      	movs	r2, #15
 8003546:	4013      	ands	r3, r2
 8003548:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <HAL_RCC_ClockConfig+0x284>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	000a      	movs	r2, r1
 800354e:	40da      	lsrs	r2, r3
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <HAL_RCC_ClockConfig+0x288>)
 8003552:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003554:	4b11      	ldr	r3, [pc, #68]	@ (800359c <HAL_RCC_ClockConfig+0x28c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	250b      	movs	r5, #11
 800355a:	197c      	adds	r4, r7, r5
 800355c:	0018      	movs	r0, r3
 800355e:	f7fd f9ed 	bl	800093c <HAL_InitTick>
 8003562:	0003      	movs	r3, r0
 8003564:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003566:	197b      	adds	r3, r7, r5
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800356e:	197b      	adds	r3, r7, r5
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	e000      	b.n	8003576 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bdb0      	pop	{r4, r5, r7, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	40022000 	.word	0x40022000
 8003584:	00001388 	.word	0x00001388
 8003588:	40021000 	.word	0x40021000
 800358c:	fffff8ff 	.word	0xfffff8ff
 8003590:	ffffc7ff 	.word	0xffffc7ff
 8003594:	08008e54 	.word	0x08008e54
 8003598:	20000000 	.word	0x20000000
 800359c:	20000004 	.word	0x20000004

080035a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80035a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	220c      	movs	r2, #12
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d013      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x3e>
 80035b6:	d85c      	bhi.n	8003672 <HAL_RCC_GetSysClockFreq+0xd2>
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d002      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x22>
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d00b      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x38>
 80035c0:	e057      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80035c2:	4b35      	ldr	r3, [pc, #212]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2210      	movs	r2, #16
 80035c8:	4013      	ands	r3, r2
 80035ca:	d002      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80035cc:	4b33      	ldr	r3, [pc, #204]	@ (800369c <HAL_RCC_GetSysClockFreq+0xfc>)
 80035ce:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80035d0:	e05d      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80035d2:	4b33      	ldr	r3, [pc, #204]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80035d4:	613b      	str	r3, [r7, #16]
      break;
 80035d6:	e05a      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d8:	4b31      	ldr	r3, [pc, #196]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80035da:	613b      	str	r3, [r7, #16]
      break;
 80035dc:	e057      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0c9b      	lsrs	r3, r3, #18
 80035e2:	220f      	movs	r2, #15
 80035e4:	4013      	ands	r3, r2
 80035e6:	4a2f      	ldr	r2, [pc, #188]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0d9b      	lsrs	r3, r3, #22
 80035f0:	2203      	movs	r2, #3
 80035f2:	4013      	ands	r3, r2
 80035f4:	3301      	adds	r3, #1
 80035f6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f8:	4b27      	ldr	r3, [pc, #156]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	4013      	ands	r3, r2
 8003602:	d00f      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	000a      	movs	r2, r1
 8003608:	0152      	lsls	r2, r2, #5
 800360a:	1a52      	subs	r2, r2, r1
 800360c:	0193      	lsls	r3, r2, #6
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	185b      	adds	r3, r3, r1
 8003614:	029b      	lsls	r3, r3, #10
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f7fc fd87 	bl	800012c <__udivsi3>
 800361e:	0003      	movs	r3, r0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e023      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003624:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2210      	movs	r2, #16
 800362a:	4013      	ands	r3, r2
 800362c:	d00f      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	000a      	movs	r2, r1
 8003632:	0152      	lsls	r2, r2, #5
 8003634:	1a52      	subs	r2, r2, r1
 8003636:	0193      	lsls	r3, r2, #6
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	185b      	adds	r3, r3, r1
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	0018      	movs	r0, r3
 8003644:	f7fc fd72 	bl	800012c <__udivsi3>
 8003648:	0003      	movs	r3, r0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e00e      	b.n	800366c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	000a      	movs	r2, r1
 8003652:	0152      	lsls	r2, r2, #5
 8003654:	1a52      	subs	r2, r2, r1
 8003656:	0193      	lsls	r3, r2, #6
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	185b      	adds	r3, r3, r1
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	0018      	movs	r0, r3
 8003664:	f7fc fd62 	bl	800012c <__udivsi3>
 8003668:	0003      	movs	r3, r0
 800366a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	613b      	str	r3, [r7, #16]
      break;
 8003670:	e00d      	b.n	800368e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003672:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	2207      	movs	r2, #7
 800367a:	4013      	ands	r3, r2
 800367c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	2280      	movs	r2, #128	@ 0x80
 8003684:	0212      	lsls	r2, r2, #8
 8003686:	409a      	lsls	r2, r3
 8003688:	0013      	movs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
      break;
 800368c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800368e:	693b      	ldr	r3, [r7, #16]
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b006      	add	sp, #24
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	003d0900 	.word	0x003d0900
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	08008e64 	.word	0x08008e64

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80036b0:	2017      	movs	r0, #23
 80036b2:	183b      	adds	r3, r7, r0
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2220      	movs	r2, #32
 80036be:	4013      	ands	r3, r2
 80036c0:	d100      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80036c2:	e0c7      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c4:	4b9b      	ldr	r3, [pc, #620]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	055b      	lsls	r3, r3, #21
 80036cc:	4013      	ands	r3, r2
 80036ce:	d109      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d0:	4b98      	ldr	r3, [pc, #608]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d4:	4b97      	ldr	r3, [pc, #604]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036d6:	2180      	movs	r1, #128	@ 0x80
 80036d8:	0549      	lsls	r1, r1, #21
 80036da:	430a      	orrs	r2, r1
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80036de:	183b      	adds	r3, r7, r0
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	4b94      	ldr	r3, [pc, #592]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	d11a      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f0:	4b91      	ldr	r3, [pc, #580]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b90      	ldr	r3, [pc, #576]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	0049      	lsls	r1, r1, #1
 80036fa:	430a      	orrs	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fd f963 	bl	80009c8 <HAL_GetTick>
 8003702:	0003      	movs	r3, r0
 8003704:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	e008      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003708:	f7fd f95e 	bl	80009c8 <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	@ 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e107      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	4b87      	ldr	r3, [pc, #540]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	2380      	movs	r3, #128	@ 0x80
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4013      	ands	r3, r2
 8003724:	d0f0      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003726:	4b83      	ldr	r3, [pc, #524]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	23c0      	movs	r3, #192	@ 0xc0
 800372c:	039b      	lsls	r3, r3, #14
 800372e:	4013      	ands	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	23c0      	movs	r3, #192	@ 0xc0
 8003738:	039b      	lsls	r3, r3, #14
 800373a:	4013      	ands	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	429a      	cmp	r2, r3
 8003740:	d013      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	23c0      	movs	r3, #192	@ 0xc0
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	401a      	ands	r2, r3
 800374c:	23c0      	movs	r3, #192	@ 0xc0
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	429a      	cmp	r2, r3
 8003752:	d10a      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003754:	4b77      	ldr	r3, [pc, #476]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2380      	movs	r3, #128	@ 0x80
 800375a:	029b      	lsls	r3, r3, #10
 800375c:	401a      	ands	r2, r3
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	029b      	lsls	r3, r3, #10
 8003762:	429a      	cmp	r2, r3
 8003764:	d101      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0df      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800376a:	4b72      	ldr	r3, [pc, #456]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800376c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800376e:	23c0      	movs	r3, #192	@ 0xc0
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	4013      	ands	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d03b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	23c0      	movs	r3, #192	@ 0xc0
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	4013      	ands	r3, r2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d033      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2220      	movs	r2, #32
 8003792:	4013      	ands	r3, r2
 8003794:	d02e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003796:	4b67      	ldr	r3, [pc, #412]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379a:	4a68      	ldr	r2, [pc, #416]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a0:	4b64      	ldr	r3, [pc, #400]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037a4:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037a6:	2180      	movs	r1, #128	@ 0x80
 80037a8:	0309      	lsls	r1, r1, #12
 80037aa:	430a      	orrs	r2, r1
 80037ac:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ae:	4b61      	ldr	r3, [pc, #388]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037b2:	4b60      	ldr	r3, [pc, #384]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037b4:	4962      	ldr	r1, [pc, #392]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80037ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	2380      	movs	r3, #128	@ 0x80
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d014      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fd f8fd 	bl	80009c8 <HAL_GetTick>
 80037ce:	0003      	movs	r3, r0
 80037d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037d2:	e009      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fd f8f8 	bl	80009c8 <HAL_GetTick>
 80037d8:	0002      	movs	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	4a59      	ldr	r2, [pc, #356]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0a0      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e8:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	d0ef      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2220      	movs	r2, #32
 80037fa:	4013      	ands	r3, r2
 80037fc:	d01f      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	23c0      	movs	r3, #192	@ 0xc0
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	401a      	ands	r2, r3
 8003808:	23c0      	movs	r3, #192	@ 0xc0
 800380a:	029b      	lsls	r3, r3, #10
 800380c:	429a      	cmp	r2, r3
 800380e:	d10c      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003810:	4b48      	ldr	r3, [pc, #288]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a4c      	ldr	r2, [pc, #304]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	23c0      	movs	r3, #192	@ 0xc0
 8003820:	039b      	lsls	r3, r3, #14
 8003822:	401a      	ands	r2, r3
 8003824:	4b43      	ldr	r3, [pc, #268]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	4b42      	ldr	r3, [pc, #264]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800382c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	23c0      	movs	r3, #192	@ 0xc0
 8003834:	029b      	lsls	r3, r3, #10
 8003836:	401a      	ands	r2, r3
 8003838:	4b3e      	ldr	r3, [pc, #248]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800383a:	430a      	orrs	r2, r1
 800383c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800383e:	2317      	movs	r3, #23
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b3a      	ldr	r3, [pc, #232]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800384a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800384c:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800384e:	493f      	ldr	r1, [pc, #252]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003850:	400a      	ands	r2, r1
 8003852:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800385e:	4b35      	ldr	r3, [pc, #212]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003862:	2203      	movs	r2, #3
 8003864:	4393      	bics	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b31      	ldr	r3, [pc, #196]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800386e:	430a      	orrs	r2, r1
 8003870:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800387c:	4b2d      	ldr	r3, [pc, #180]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800387e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003880:	220c      	movs	r2, #12
 8003882:	4393      	bics	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	4b2a      	ldr	r3, [pc, #168]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800388c:	430a      	orrs	r2, r1
 800388e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2204      	movs	r2, #4
 8003896:	4013      	ands	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800389a:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389e:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80038aa:	430a      	orrs	r2, r1
 80038ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2208      	movs	r2, #8
 80038b4:	4013      	ands	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80038ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038bc:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d8:	4b16      	ldr	r3, [pc, #88]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80038da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038dc:	4a17      	ldr	r2, [pc, #92]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2240      	movs	r2, #64	@ 0x40
 80038f2:	4013      	ands	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003906:	430a      	orrs	r2, r1
 8003908:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	4013      	ands	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003914:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003918:	4a10      	ldr	r2, [pc, #64]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800391a:	4013      	ands	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003924:	430a      	orrs	r2, r1
 8003926:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b006      	add	sp, #24
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	fffcffff 	.word	0xfffcffff
 8003940:	fff7ffff 	.word	0xfff7ffff
 8003944:	00001388 	.word	0x00001388
 8003948:	ffcfffff 	.word	0xffcfffff
 800394c:	efffffff 	.word	0xefffffff
 8003950:	fffff3ff 	.word	0xfffff3ff
 8003954:	ffffcfff 	.word	0xffffcfff
 8003958:	fbffffff 	.word	0xfbffffff
 800395c:	fff3ffff 	.word	0xfff3ffff

08003960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e083      	b.n	8003a7a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	2382      	movs	r3, #130	@ 0x82
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	429a      	cmp	r2, r3
 8003984:	d009      	beq.n	800399a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	61da      	str	r2, [r3, #28]
 800398c:	e005      	b.n	800399a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2251      	movs	r2, #81	@ 0x51
 80039a4:	5c9b      	ldrb	r3, [r3, r2]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2250      	movs	r2, #80	@ 0x50
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fc fed0 	bl	800075c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2251      	movs	r2, #81	@ 0x51
 80039c0:	2102      	movs	r1, #2
 80039c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2140      	movs	r1, #64	@ 0x40
 80039d0:	438a      	bics	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	2382      	movs	r3, #130	@ 0x82
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	401a      	ands	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	2384      	movs	r3, #132	@ 0x84
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	400b      	ands	r3, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68d9      	ldr	r1, [r3, #12]
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	400b      	ands	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2102      	movs	r1, #2
 80039fc:	400b      	ands	r3, r1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	2101      	movs	r1, #1
 8003a06:	400b      	ands	r3, r1
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6999      	ldr	r1, [r3, #24]
 8003a0e:	2380      	movs	r3, #128	@ 0x80
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	400b      	ands	r3, r1
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	2138      	movs	r1, #56	@ 0x38
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	2180      	movs	r1, #128	@ 0x80
 8003a26:	400b      	ands	r3, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	019b      	lsls	r3, r3, #6
 8003a34:	401a      	ands	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	2204      	movs	r2, #4
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	2210      	movs	r2, #16
 8003a50:	401a      	ands	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4907      	ldr	r1, [pc, #28]	@ (8003a84 <HAL_SPI_Init+0x124>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2251      	movs	r2, #81	@ 0x51
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	fffff7ff 	.word	0xfffff7ff

08003a88 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	1dbb      	adds	r3, r7, #6
 8003a96:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a98:	f7fc ff96 	bl	80009c8 <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003aa0:	231a      	movs	r3, #26
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	1dba      	adds	r2, r7, #6
 8003aa6:	8812      	ldrh	r2, [r2, #0]
 8003aa8:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2251      	movs	r2, #81	@ 0x51
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e132      	b.n	8003d20 <HAL_SPI_Transmit+0x298>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_SPI_Transmit+0x40>
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e129      	b.n	8003d20 <HAL_SPI_Transmit+0x298>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2250      	movs	r2, #80	@ 0x50
 8003ad0:	5c9b      	ldrb	r3, [r3, r2]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Transmit+0x52>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e122      	b.n	8003d20 <HAL_SPI_Transmit+0x298>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2250      	movs	r2, #80	@ 0x50
 8003ade:	2101      	movs	r1, #1
 8003ae0:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2251      	movs	r2, #81	@ 0x51
 8003ae6:	2103      	movs	r1, #3
 8003ae8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1dba      	adds	r2, r7, #6
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1dba      	adds	r2, r7, #6
 8003b02:	8812      	ldrh	r2, [r2, #0]
 8003b04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d110      	bne.n	8003b52 <HAL_SPI_Transmit+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2140      	movs	r1, #64	@ 0x40
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2180      	movs	r1, #128	@ 0x80
 8003b4c:	01c9      	lsls	r1, r1, #7
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2240      	movs	r2, #64	@ 0x40
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b40      	cmp	r3, #64	@ 0x40
 8003b5e:	d007      	beq.n	8003b70 <HAL_SPI_Transmit+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2140      	movs	r1, #64	@ 0x40
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	2380      	movs	r3, #128	@ 0x80
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d153      	bne.n	8003c24 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_SPI_Transmit+0x106>
 8003b84:	231a      	movs	r3, #26
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d144      	bne.n	8003c18 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bb2:	e031      	b.n	8003c18 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d112      	bne.n	8003be8 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	881a      	ldrh	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003be6:	e017      	b.n	8003c18 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be8:	f7fc feee 	bl	80009c8 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <HAL_SPI_Transmit+0x176>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_SPI_Transmit+0x17c>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_SPI_Transmit+0x190>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2251      	movs	r2, #81	@ 0x51
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2250      	movs	r2, #80	@ 0x50
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e083      	b.n	8003d20 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1c8      	bne.n	8003bb4 <HAL_SPI_Transmit+0x12c>
 8003c22:	e054      	b.n	8003cce <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_SPI_Transmit+0x1ae>
 8003c2c:	231a      	movs	r3, #26
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d146      	bne.n	8003cc4 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c5c:	e032      	b.n	8003cc4 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2202      	movs	r2, #2
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d113      	bne.n	8003c94 <HAL_SPI_Transmit+0x20c>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c92:	e017      	b.n	8003cc4 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c94:	f7fc fe98 	bl	80009c8 <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d802      	bhi.n	8003caa <HAL_SPI_Transmit+0x222>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_Transmit+0x228>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_SPI_Transmit+0x23c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2251      	movs	r2, #81	@ 0x51
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2250      	movs	r2, #80	@ 0x50
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e02d      	b.n	8003d20 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1c7      	bne.n	8003c5e <HAL_SPI_Transmit+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f000 fa75 	bl	80041c4 <SPI_EndRxTxTransaction>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2251      	movs	r2, #81	@ 0x51
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2250      	movs	r2, #80	@ 0x50
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_SPI_Transmit+0x296>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_SPI_Transmit+0x298>
  }
  else
  {
    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
  }
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b008      	add	sp, #32
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	@ 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	001a      	movs	r2, r3
 8003d36:	1cbb      	adds	r3, r7, #2
 8003d38:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d3e:	f7fc fe43 	bl	80009c8 <HAL_GetTick>
 8003d42:	0003      	movs	r3, r0
 8003d44:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d46:	201f      	movs	r0, #31
 8003d48:	183b      	adds	r3, r7, r0
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	2151      	movs	r1, #81	@ 0x51
 8003d4e:	5c52      	ldrb	r2, [r2, r1]
 8003d50:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d58:	2316      	movs	r3, #22
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	1cba      	adds	r2, r7, #2
 8003d5e:	8812      	ldrh	r2, [r2, #0]
 8003d60:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d62:	183b      	adds	r3, r7, r0
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d00e      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x60>
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	2382      	movs	r3, #130	@ 0x82
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d107      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d103      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x5c>
 8003d7c:	183b      	adds	r3, r7, r0
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d001      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
 8003d86:	e18a      	b.n	800409e <HAL_SPI_TransmitReceive+0x376>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x74>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x74>
 8003d94:	1cbb      	adds	r3, r7, #2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x78>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e17e      	b.n	800409e <HAL_SPI_TransmitReceive+0x376>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2250      	movs	r2, #80	@ 0x50
 8003da4:	5c9b      	ldrb	r3, [r3, r2]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x86>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e177      	b.n	800409e <HAL_SPI_TransmitReceive+0x376>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2250      	movs	r2, #80	@ 0x50
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2251      	movs	r2, #81	@ 0x51
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2251      	movs	r2, #81	@ 0x51
 8003dc6:	2105      	movs	r1, #5
 8003dc8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1cba      	adds	r2, r7, #2
 8003dda:	8812      	ldrh	r2, [r2, #0]
 8003ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1cba      	adds	r2, r7, #2
 8003de2:	8812      	ldrh	r2, [r2, #0]
 8003de4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1cba      	adds	r2, r7, #2
 8003df0:	8812      	ldrh	r2, [r2, #0]
 8003df2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1cba      	adds	r2, r7, #2
 8003df8:	8812      	ldrh	r2, [r2, #0]
 8003dfa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b40      	cmp	r3, #64	@ 0x40
 8003e14:	d007      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2140      	movs	r1, #64	@ 0x40
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d000      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x10c>
 8003e32:	e080      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x20e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_SPI_TransmitReceive+0x120>
 8003e3c:	2316      	movs	r3, #22
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d000      	beq.n	8003e48 <HAL_SPI_TransmitReceive+0x120>
 8003e46:	e06b      	b.n	8003f20 <HAL_SPI_TransmitReceive+0x1f8>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	881a      	ldrh	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	1c9a      	adds	r2, r3, #2
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6c:	e058      	b.n	8003f20 <HAL_SPI_TransmitReceive+0x1f8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2202      	movs	r2, #2
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x18c>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x18c>
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d113      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x18c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d119      	bne.n	8003ef6 <HAL_SPI_TransmitReceive+0x1ce>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d014      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x1ce>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	b292      	uxth	r2, r2
 8003ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ede:	1c9a      	adds	r2, r3, #2
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ef6:	f7fc fd67 	bl	80009c8 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d80c      	bhi.n	8003f20 <HAL_SPI_TransmitReceive+0x1f8>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	3301      	adds	r3, #1
 8003f0a:	d009      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x1f8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2251      	movs	r2, #81	@ 0x51
 8003f10:	2101      	movs	r1, #1
 8003f12:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2250      	movs	r2, #80	@ 0x50
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0be      	b.n	800409e <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1a1      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x146>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d19c      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x146>
 8003f34:	e084      	b.n	8004040 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x222>
 8003f3e:	2316      	movs	r3, #22
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d000      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x222>
 8003f48:	e070      	b.n	800402c <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f70:	e05c      	b.n	800402c <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d11c      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x292>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d017      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x292>
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d114      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x292>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d119      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x2d4>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d014      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x2d4>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ffc:	f7fc fce4 	bl	80009c8 <HAL_GetTick>
 8004000:	0002      	movs	r2, r0
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004008:	429a      	cmp	r2, r3
 800400a:	d802      	bhi.n	8004012 <HAL_SPI_TransmitReceive+0x2ea>
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	3301      	adds	r3, #1
 8004010:	d102      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x2f0>
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_SPI_TransmitReceive+0x304>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2251      	movs	r2, #81	@ 0x51
 800401c:	2101      	movs	r1, #1
 800401e:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2250      	movs	r2, #80	@ 0x50
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e038      	b.n	800409e <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d19d      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x24a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d198      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x24a>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0018      	movs	r0, r3
 8004048:	f000 f8bc 	bl	80041c4 <SPI_EndRxTxTransaction>
 800404c:	1e03      	subs	r3, r0, #0
 800404e:	d008      	beq.n	8004062 <HAL_SPI_TransmitReceive+0x33a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2250      	movs	r2, #80	@ 0x50
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e01d      	b.n	800409e <HAL_SPI_TransmitReceive+0x376>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2251      	movs	r2, #81	@ 0x51
 8004084:	2101      	movs	r1, #1
 8004086:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2250      	movs	r2, #80	@ 0x50
 800408c:	2100      	movs	r1, #0
 800408e:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_SPI_TransmitReceive+0x374>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_SPI_TransmitReceive+0x376>
  }
  else
  {
    return HAL_OK;
 800409c:	2300      	movs	r3, #0
  }
}
 800409e:	0018      	movs	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b00a      	add	sp, #40	@ 0x28
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	1dfb      	adds	r3, r7, #7
 80040b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040b8:	f7fc fc86 	bl	80009c8 <HAL_GetTick>
 80040bc:	0002      	movs	r2, r0
 80040be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040c8:	f7fc fc7e 	bl	80009c8 <HAL_GetTick>
 80040cc:	0003      	movs	r3, r0
 80040ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040d0:	4b3a      	ldr	r3, [pc, #232]	@ (80041bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	015b      	lsls	r3, r3, #5
 80040d6:	0d1b      	lsrs	r3, r3, #20
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	4353      	muls	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040de:	e059      	b.n	8004194 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	d056      	beq.n	8004194 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040e6:	f7fc fc6f 	bl	80009c8 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d902      	bls.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d142      	bne.n	8004182 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	21e0      	movs	r1, #224	@ 0xe0
 8004108:	438a      	bics	r2, r1
 800410a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	2382      	movs	r3, #130	@ 0x82
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	429a      	cmp	r2, r3
 8004116:	d113      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	429a      	cmp	r2, r3
 800412e:	d107      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2140      	movs	r1, #64	@ 0x40
 800413c:	438a      	bics	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004144:	2380      	movs	r3, #128	@ 0x80
 8004146:	019b      	lsls	r3, r3, #6
 8004148:	429a      	cmp	r2, r3
 800414a:	d110      	bne.n	800416e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	491a      	ldr	r1, [pc, #104]	@ (80041c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2180      	movs	r1, #128	@ 0x80
 8004168:	0189      	lsls	r1, r1, #6
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2251      	movs	r2, #81	@ 0x51
 8004172:	2101      	movs	r1, #1
 8004174:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2250      	movs	r2, #80	@ 0x50
 800417a:	2100      	movs	r1, #0
 800417c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e018      	b.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e002      	b.n	8004194 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3b01      	subs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	425a      	negs	r2, r3
 80041a4:	4153      	adcs	r3, r2
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	001a      	movs	r2, r3
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d196      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b008      	add	sp, #32
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000000 	.word	0x20000000
 80041c0:	ffffdfff 	.word	0xffffdfff

080041c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	0013      	movs	r3, r2
 80041da:	2201      	movs	r2, #1
 80041dc:	2102      	movs	r1, #2
 80041de:	f7ff ff63 	bl	80040a8 <SPI_WaitFlagStateUntilTimeout>
 80041e2:	1e03      	subs	r3, r0, #0
 80041e4:	d007      	beq.n	80041f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	2220      	movs	r2, #32
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e037      	b.n	8004266 <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <SPI_EndRxTxTransaction+0xac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	491e      	ldr	r1, [pc, #120]	@ (8004274 <SPI_EndRxTxTransaction+0xb0>)
 80041fc:	0018      	movs	r0, r3
 80041fe:	f7fb ff95 	bl	800012c <__udivsi3>
 8004202:	0003      	movs	r3, r0
 8004204:	001a      	movs	r2, r3
 8004206:	0013      	movs	r3, r2
 8004208:	015b      	lsls	r3, r3, #5
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	189b      	adds	r3, r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	2382      	movs	r3, #130	@ 0x82
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	429a      	cmp	r2, r3
 800421e:	d112      	bne.n	8004246 <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	0013      	movs	r3, r2
 800422a:	2200      	movs	r2, #0
 800422c:	2180      	movs	r1, #128	@ 0x80
 800422e:	f7ff ff3b 	bl	80040a8 <SPI_WaitFlagStateUntilTimeout>
 8004232:	1e03      	subs	r3, r0, #0
 8004234:	d016      	beq.n	8004264 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423a:	2220      	movs	r2, #32
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3b01      	subs	r3, #1
 8004250:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2280      	movs	r2, #128	@ 0x80
 800425a:	4013      	ands	r3, r2
 800425c:	2b80      	cmp	r3, #128	@ 0x80
 800425e:	d0f2      	beq.n	8004246 <SPI_EndRxTxTransaction+0x82>
 8004260:	e000      	b.n	8004264 <SPI_EndRxTxTransaction+0xa0>
        break;
 8004262:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b006      	add	sp, #24
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	20000000 	.word	0x20000000
 8004274:	016e3600 	.word	0x016e3600

08004278 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2244      	movs	r2, #68	@ 0x44
 8004284:	2100      	movs	r1, #0
 8004286:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <USB_EnableGlobalInt+0x28>)
 800428a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	b299      	uxth	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2240      	movs	r2, #64	@ 0x40
 8004294:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b004      	add	sp, #16
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	0000bf80 	.word	0x0000bf80

080042a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042ac:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <USB_DisableGlobalInt+0x30>)
 80042ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2240      	movs	r2, #64	@ 0x40
 80042b4:	5a9b      	ldrh	r3, [r3, r2]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	b292      	uxth	r2, r2
 80042bc:	43d2      	mvns	r2, r2
 80042be:	b292      	uxth	r2, r2
 80042c0:	4013      	ands	r3, r2
 80042c2:	b299      	uxth	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2240      	movs	r2, #64	@ 0x40
 80042c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	0000bf80 	.word	0x0000bf80

080042d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	1d3b      	adds	r3, r7, #4
 80042e2:	6019      	str	r1, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2240      	movs	r2, #64	@ 0x40
 80042ea:	2101      	movs	r1, #1
 80042ec:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2240      	movs	r2, #64	@ 0x40
 80042f2:	2100      	movs	r1, #0
 80042f4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2244      	movs	r2, #68	@ 0x44
 80042fa:	2100      	movs	r1, #0
 80042fc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2250      	movs	r2, #80	@ 0x50
 8004302:	2100      	movs	r1, #0
 8004304:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b004      	add	sp, #16
 800430e:	bd80      	pop	{r7, pc}

08004310 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b0a6      	sub	sp, #152	@ 0x98
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800431a:	2397      	movs	r3, #151	@ 0x97
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	18d3      	adds	r3, r2, r3
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29a      	uxth	r2, r3
 8004330:	2394      	movs	r3, #148	@ 0x94
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	49a5      	ldr	r1, [pc, #660]	@ (80045cc <USB_ActivateEndpoint+0x2bc>)
 8004336:	400a      	ands	r2, r1
 8004338:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d017      	beq.n	8004372 <USB_ActivateEndpoint+0x62>
 8004342:	dc28      	bgt.n	8004396 <USB_ActivateEndpoint+0x86>
 8004344:	2b02      	cmp	r3, #2
 8004346:	d00e      	beq.n	8004366 <USB_ActivateEndpoint+0x56>
 8004348:	dc25      	bgt.n	8004396 <USB_ActivateEndpoint+0x86>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <USB_ActivateEndpoint+0x44>
 800434e:	2b01      	cmp	r3, #1
 8004350:	d018      	beq.n	8004384 <USB_ActivateEndpoint+0x74>
 8004352:	e020      	b.n	8004396 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004354:	2294      	movs	r2, #148	@ 0x94
 8004356:	18bb      	adds	r3, r7, r2
 8004358:	18ba      	adds	r2, r7, r2
 800435a:	8812      	ldrh	r2, [r2, #0]
 800435c:	2180      	movs	r1, #128	@ 0x80
 800435e:	0089      	lsls	r1, r1, #2
 8004360:	430a      	orrs	r2, r1
 8004362:	801a      	strh	r2, [r3, #0]
      break;
 8004364:	e01c      	b.n	80043a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004366:	2294      	movs	r2, #148	@ 0x94
 8004368:	18bb      	adds	r3, r7, r2
 800436a:	18ba      	adds	r2, r7, r2
 800436c:	8812      	ldrh	r2, [r2, #0]
 800436e:	801a      	strh	r2, [r3, #0]
      break;
 8004370:	e016      	b.n	80043a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004372:	2294      	movs	r2, #148	@ 0x94
 8004374:	18bb      	adds	r3, r7, r2
 8004376:	18ba      	adds	r2, r7, r2
 8004378:	8812      	ldrh	r2, [r2, #0]
 800437a:	21c0      	movs	r1, #192	@ 0xc0
 800437c:	00c9      	lsls	r1, r1, #3
 800437e:	430a      	orrs	r2, r1
 8004380:	801a      	strh	r2, [r3, #0]
      break;
 8004382:	e00d      	b.n	80043a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004384:	2294      	movs	r2, #148	@ 0x94
 8004386:	18bb      	adds	r3, r7, r2
 8004388:	18ba      	adds	r2, r7, r2
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	2180      	movs	r1, #128	@ 0x80
 800438e:	00c9      	lsls	r1, r1, #3
 8004390:	430a      	orrs	r2, r1
 8004392:	801a      	strh	r2, [r3, #0]
      break;
 8004394:	e004      	b.n	80043a0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8004396:	2397      	movs	r3, #151	@ 0x97
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
      break;
 800439e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	18d3      	adds	r3, r2, r3
 80043aa:	2294      	movs	r2, #148	@ 0x94
 80043ac:	18ba      	adds	r2, r7, r2
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	4987      	ldr	r1, [pc, #540]	@ (80045d0 <USB_ActivateEndpoint+0x2c0>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	b292      	uxth	r2, r2
 80043b6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	18d3      	adds	r3, r2, r3
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	4a82      	ldr	r2, [pc, #520]	@ (80045d4 <USB_ActivateEndpoint+0x2c4>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	b21a      	sxth	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b21b      	sxth	r3, r3
 80043d4:	4313      	orrs	r3, r2
 80043d6:	b21a      	sxth	r2, r3
 80043d8:	2186      	movs	r1, #134	@ 0x86
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	18d3      	adds	r3, r2, r3
 80043e8:	187a      	adds	r2, r7, r1
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	4978      	ldr	r1, [pc, #480]	@ (80045d0 <USB_ActivateEndpoint+0x2c0>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	b292      	uxth	r2, r2
 80043f2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	7b1b      	ldrb	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d000      	beq.n	80043fe <USB_ActivateEndpoint+0xee>
 80043fc:	e185      	b.n	800470a <USB_ActivateEndpoint+0x3fa>
  {
    if (ep->is_in != 0U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d100      	bne.n	8004408 <USB_ActivateEndpoint+0xf8>
 8004406:	e07c      	b.n	8004502 <USB_ActivateEndpoint+0x1f2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2250      	movs	r2, #80	@ 0x50
 8004410:	5a9b      	ldrh	r3, [r3, r2]
 8004412:	b29b      	uxth	r3, r3
 8004414:	001a      	movs	r2, r3
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	189b      	adds	r3, r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	00da      	lsls	r2, r3, #3
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	2280      	movs	r2, #128	@ 0x80
 8004428:	00d2      	lsls	r2, r2, #3
 800442a:	4694      	mov	ip, r2
 800442c:	4463      	add	r3, ip
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	88db      	ldrh	r3, [r3, #6]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	18db      	adds	r3, r3, r3
 800443a:	b29a      	uxth	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	18d2      	adds	r2, r2, r3
 800444a:	2112      	movs	r1, #18
 800444c:	187b      	adds	r3, r7, r1
 800444e:	8812      	ldrh	r2, [r2, #0]
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	187b      	adds	r3, r7, r1
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	2240      	movs	r2, #64	@ 0x40
 8004458:	4013      	ands	r3, r2
 800445a:	d016      	beq.n	800448a <USB_ActivateEndpoint+0x17a>
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	18d3      	adds	r3, r2, r3
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29a      	uxth	r2, r3
 800446a:	2010      	movs	r0, #16
 800446c:	183b      	adds	r3, r7, r0
 800446e:	4959      	ldr	r1, [pc, #356]	@ (80045d4 <USB_ActivateEndpoint+0x2c4>)
 8004470:	400a      	ands	r2, r1
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	18d3      	adds	r3, r2, r3
 800447e:	183a      	adds	r2, r7, r0
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	4955      	ldr	r1, [pc, #340]	@ (80045d8 <USB_ActivateEndpoint+0x2c8>)
 8004484:	430a      	orrs	r2, r1
 8004486:	b292      	uxth	r2, r2
 8004488:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	78db      	ldrb	r3, [r3, #3]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d01e      	beq.n	80044d0 <USB_ActivateEndpoint+0x1c0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	18d3      	adds	r3, r2, r3
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	200c      	movs	r0, #12
 80044a2:	183b      	adds	r3, r7, r0
 80044a4:	494d      	ldr	r1, [pc, #308]	@ (80045dc <USB_ActivateEndpoint+0x2cc>)
 80044a6:	400a      	ands	r2, r1
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	183b      	adds	r3, r7, r0
 80044ac:	183a      	adds	r2, r7, r0
 80044ae:	8812      	ldrh	r2, [r2, #0]
 80044b0:	2120      	movs	r1, #32
 80044b2:	404a      	eors	r2, r1
 80044b4:	801a      	strh	r2, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	18d3      	adds	r3, r2, r3
 80044c0:	183a      	adds	r2, r7, r0
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	4942      	ldr	r1, [pc, #264]	@ (80045d0 <USB_ActivateEndpoint+0x2c0>)
 80044c6:	430a      	orrs	r2, r1
 80044c8:	b292      	uxth	r2, r2
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	f000 fbdb 	bl	8004c86 <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	18d3      	adds	r3, r2, r3
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29a      	uxth	r2, r3
 80044de:	200e      	movs	r0, #14
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	493e      	ldr	r1, [pc, #248]	@ (80045dc <USB_ActivateEndpoint+0x2cc>)
 80044e4:	400a      	ands	r2, r1
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	18d3      	adds	r3, r2, r3
 80044f2:	183a      	adds	r2, r7, r0
 80044f4:	8812      	ldrh	r2, [r2, #0]
 80044f6:	4936      	ldr	r1, [pc, #216]	@ (80045d0 <USB_ActivateEndpoint+0x2c0>)
 80044f8:	430a      	orrs	r2, r1
 80044fa:	b292      	uxth	r2, r2
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	f000 fbc2 	bl	8004c86 <USB_ActivateEndpoint+0x976>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	633b      	str	r3, [r7, #48]	@ 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2250      	movs	r2, #80	@ 0x50
 800450a:	5a9b      	ldrh	r3, [r3, r2]
 800450c:	b29b      	uxth	r3, r3
 800450e:	001a      	movs	r2, r3
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	189b      	adds	r3, r3, r2
 8004514:	633b      	str	r3, [r7, #48]	@ 0x30
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	00da      	lsls	r2, r3, #3
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	18d3      	adds	r3, r2, r3
 8004520:	4a2f      	ldr	r2, [pc, #188]	@ (80045e0 <USB_ActivateEndpoint+0x2d0>)
 8004522:	4694      	mov	ip, r2
 8004524:	4463      	add	r3, ip
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	88db      	ldrh	r3, [r3, #6]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	18db      	adds	r3, r3, r3
 8004532:	b29a      	uxth	r2, r3
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2250      	movs	r2, #80	@ 0x50
 8004540:	5a9b      	ldrh	r3, [r3, r2]
 8004542:	b29b      	uxth	r3, r3
 8004544:	001a      	movs	r2, r3
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	189b      	adds	r3, r3, r2
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00da      	lsls	r2, r3, #3
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	18d3      	adds	r3, r2, r3
 8004556:	4a23      	ldr	r2, [pc, #140]	@ (80045e4 <USB_ActivateEndpoint+0x2d4>)
 8004558:	4694      	mov	ip, r2
 800455a:	4463      	add	r3, ip
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	059b      	lsls	r3, r3, #22
 8004566:	0d9b      	lsrs	r3, r3, #22
 8004568:	b29a      	uxth	r2, r3
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	801a      	strh	r2, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <USB_ActivateEndpoint+0x278>
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	4a1a      	ldr	r2, [pc, #104]	@ (80045e8 <USB_ActivateEndpoint+0x2d8>)
 800457e:	4313      	orrs	r3, r2
 8004580:	b29a      	uxth	r2, r3
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e051      	b.n	800462c <USB_ActivateEndpoint+0x31c>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b3e      	cmp	r3, #62	@ 0x3e
 800458e:	d82d      	bhi.n	80045ec <USB_ActivateEndpoint+0x2dc>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	2190      	movs	r1, #144	@ 0x90
 8004598:	187a      	adds	r2, r7, r1
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2201      	movs	r2, #1
 80045a2:	4013      	ands	r3, r2
 80045a4:	d004      	beq.n	80045b0 <USB_ActivateEndpoint+0x2a0>
 80045a6:	187b      	adds	r3, r7, r1
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	187a      	adds	r2, r7, r1
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	2390      	movs	r3, #144	@ 0x90
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	029b      	lsls	r3, r3, #10
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	4313      	orrs	r3, r2
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e02f      	b.n	800462c <USB_ActivateEndpoint+0x31c>
 80045cc:	ffff898f 	.word	0xffff898f
 80045d0:	ffff8080 	.word	0xffff8080
 80045d4:	ffff8f8f 	.word	0xffff8f8f
 80045d8:	ffff80c0 	.word	0xffff80c0
 80045dc:	ffff8fbf 	.word	0xffff8fbf
 80045e0:	00000404 	.word	0x00000404
 80045e4:	00000406 	.word	0x00000406
 80045e8:	ffff8000 	.word	0xffff8000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	2190      	movs	r1, #144	@ 0x90
 80045f4:	187a      	adds	r2, r7, r1
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	221f      	movs	r2, #31
 80045fe:	4013      	ands	r3, r2
 8004600:	d104      	bne.n	800460c <USB_ActivateEndpoint+0x2fc>
 8004602:	187b      	adds	r3, r7, r1
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	187a      	adds	r2, r7, r1
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	2390      	movs	r3, #144	@ 0x90
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	b29b      	uxth	r3, r3
 800461e:	4313      	orrs	r3, r2
 8004620:	b29b      	uxth	r3, r3
 8004622:	4acf      	ldr	r2, [pc, #828]	@ (8004960 <USB_ActivateEndpoint+0x650>)
 8004624:	4313      	orrs	r3, r2
 8004626:	b29a      	uxth	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	18d2      	adds	r2, r2, r3
 8004636:	2122      	movs	r1, #34	@ 0x22
 8004638:	187b      	adds	r3, r7, r1
 800463a:	8812      	ldrh	r2, [r2, #0]
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	187b      	adds	r3, r7, r1
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	2380      	movs	r3, #128	@ 0x80
 8004644:	01db      	lsls	r3, r3, #7
 8004646:	4013      	ands	r3, r2
 8004648:	d016      	beq.n	8004678 <USB_ActivateEndpoint+0x368>
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	18d3      	adds	r3, r2, r3
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29a      	uxth	r2, r3
 8004658:	2020      	movs	r0, #32
 800465a:	183b      	adds	r3, r7, r0
 800465c:	49c1      	ldr	r1, [pc, #772]	@ (8004964 <USB_ActivateEndpoint+0x654>)
 800465e:	400a      	ands	r2, r1
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	18d3      	adds	r3, r2, r3
 800466c:	183a      	adds	r2, r7, r0
 800466e:	8812      	ldrh	r2, [r2, #0]
 8004670:	49bd      	ldr	r1, [pc, #756]	@ (8004968 <USB_ActivateEndpoint+0x658>)
 8004672:	430a      	orrs	r2, r1
 8004674:	b292      	uxth	r2, r2
 8004676:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d125      	bne.n	80046cc <USB_ActivateEndpoint+0x3bc>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29a      	uxth	r2, r3
 800468e:	201c      	movs	r0, #28
 8004690:	183b      	adds	r3, r7, r0
 8004692:	49b6      	ldr	r1, [pc, #728]	@ (800496c <USB_ActivateEndpoint+0x65c>)
 8004694:	400a      	ands	r2, r1
 8004696:	801a      	strh	r2, [r3, #0]
 8004698:	183b      	adds	r3, r7, r0
 800469a:	183a      	adds	r2, r7, r0
 800469c:	8812      	ldrh	r2, [r2, #0]
 800469e:	2180      	movs	r1, #128	@ 0x80
 80046a0:	0149      	lsls	r1, r1, #5
 80046a2:	404a      	eors	r2, r1
 80046a4:	801a      	strh	r2, [r3, #0]
 80046a6:	183b      	adds	r3, r7, r0
 80046a8:	183a      	adds	r2, r7, r0
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	2180      	movs	r1, #128	@ 0x80
 80046ae:	0189      	lsls	r1, r1, #6
 80046b0:	404a      	eors	r2, r1
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	18d3      	adds	r3, r2, r3
 80046be:	183a      	adds	r2, r7, r0
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	49ab      	ldr	r1, [pc, #684]	@ (8004970 <USB_ActivateEndpoint+0x660>)
 80046c4:	430a      	orrs	r2, r1
 80046c6:	b292      	uxth	r2, r2
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	e2dc      	b.n	8004c86 <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	18d3      	adds	r3, r2, r3
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	201e      	movs	r0, #30
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	49a3      	ldr	r1, [pc, #652]	@ (800496c <USB_ActivateEndpoint+0x65c>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	183a      	adds	r2, r7, r0
 80046e8:	8812      	ldrh	r2, [r2, #0]
 80046ea:	2180      	movs	r1, #128	@ 0x80
 80046ec:	0189      	lsls	r1, r1, #6
 80046ee:	404a      	eors	r2, r1
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	18d3      	adds	r3, r2, r3
 80046fc:	183a      	adds	r2, r7, r0
 80046fe:	8812      	ldrh	r2, [r2, #0]
 8004700:	499b      	ldr	r1, [pc, #620]	@ (8004970 <USB_ActivateEndpoint+0x660>)
 8004702:	430a      	orrs	r2, r1
 8004704:	b292      	uxth	r2, r2
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	e2bd      	b.n	8004c86 <USB_ActivateEndpoint+0x976>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	78db      	ldrb	r3, [r3, #3]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d117      	bne.n	8004742 <USB_ActivateEndpoint+0x432>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	18d3      	adds	r3, r2, r3
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29a      	uxth	r2, r3
 8004720:	2082      	movs	r0, #130	@ 0x82
 8004722:	183b      	adds	r3, r7, r0
 8004724:	498f      	ldr	r1, [pc, #572]	@ (8004964 <USB_ActivateEndpoint+0x654>)
 8004726:	400a      	ands	r2, r1
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	18d3      	adds	r3, r2, r3
 8004734:	183a      	adds	r2, r7, r0
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	498e      	ldr	r1, [pc, #568]	@ (8004974 <USB_ActivateEndpoint+0x664>)
 800473a:	430a      	orrs	r2, r1
 800473c:	b292      	uxth	r2, r2
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	e016      	b.n	8004770 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	18d3      	adds	r3, r2, r3
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29a      	uxth	r2, r3
 8004750:	2084      	movs	r0, #132	@ 0x84
 8004752:	183b      	adds	r3, r7, r0
 8004754:	4988      	ldr	r1, [pc, #544]	@ (8004978 <USB_ActivateEndpoint+0x668>)
 8004756:	400a      	ands	r2, r1
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	18d3      	adds	r3, r2, r3
 8004764:	183a      	adds	r2, r7, r0
 8004766:	8812      	ldrh	r2, [r2, #0]
 8004768:	4981      	ldr	r1, [pc, #516]	@ (8004970 <USB_ActivateEndpoint+0x660>)
 800476a:	430a      	orrs	r2, r1
 800476c:	b292      	uxth	r2, r2
 800476e:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2250      	movs	r2, #80	@ 0x50
 8004778:	5a9b      	ldrh	r3, [r3, r2]
 800477a:	b29b      	uxth	r3, r3
 800477c:	001a      	movs	r2, r3
 800477e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004780:	189b      	adds	r3, r3, r2
 8004782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	00da      	lsls	r2, r3, #3
 800478a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800478c:	18d3      	adds	r3, r2, r3
 800478e:	2280      	movs	r2, #128	@ 0x80
 8004790:	00d2      	lsls	r2, r2, #3
 8004792:	4694      	mov	ip, r2
 8004794:	4463      	add	r3, ip
 8004796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	891b      	ldrh	r3, [r3, #8]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	18db      	adds	r3, r3, r3
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2250      	movs	r2, #80	@ 0x50
 80047b0:	5a9b      	ldrh	r3, [r3, r2]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	001a      	movs	r2, r3
 80047b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	00da      	lsls	r2, r3, #3
 80047c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	4a6d      	ldr	r2, [pc, #436]	@ (800497c <USB_ActivateEndpoint+0x66c>)
 80047c8:	4694      	mov	ip, r2
 80047ca:	4463      	add	r3, ip
 80047cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	895b      	ldrh	r3, [r3, #10]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	18db      	adds	r3, r3, r3
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047dc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d000      	beq.n	80047e8 <USB_ActivateEndpoint+0x4d8>
 80047e6:	e1b3      	b.n	8004b50 <USB_ActivateEndpoint+0x840>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	18d2      	adds	r2, r2, r3
 80047f2:	2160      	movs	r1, #96	@ 0x60
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	187b      	adds	r3, r7, r1
 80047fc:	881a      	ldrh	r2, [r3, #0]
 80047fe:	2380      	movs	r3, #128	@ 0x80
 8004800:	01db      	lsls	r3, r3, #7
 8004802:	4013      	ands	r3, r2
 8004804:	d016      	beq.n	8004834 <USB_ActivateEndpoint+0x524>
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	18d3      	adds	r3, r2, r3
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29a      	uxth	r2, r3
 8004814:	205e      	movs	r0, #94	@ 0x5e
 8004816:	183b      	adds	r3, r7, r0
 8004818:	4952      	ldr	r1, [pc, #328]	@ (8004964 <USB_ActivateEndpoint+0x654>)
 800481a:	400a      	ands	r2, r1
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	18d3      	adds	r3, r2, r3
 8004828:	183a      	adds	r2, r7, r0
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	494e      	ldr	r1, [pc, #312]	@ (8004968 <USB_ActivateEndpoint+0x658>)
 800482e:	430a      	orrs	r2, r1
 8004830:	b292      	uxth	r2, r2
 8004832:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	18d2      	adds	r2, r2, r3
 800483e:	215c      	movs	r1, #92	@ 0x5c
 8004840:	187b      	adds	r3, r7, r1
 8004842:	8812      	ldrh	r2, [r2, #0]
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	187b      	adds	r3, r7, r1
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	4013      	ands	r3, r2
 800484e:	d016      	beq.n	800487e <USB_ActivateEndpoint+0x56e>
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	18d3      	adds	r3, r2, r3
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29a      	uxth	r2, r3
 800485e:	205a      	movs	r0, #90	@ 0x5a
 8004860:	183b      	adds	r3, r7, r0
 8004862:	4940      	ldr	r1, [pc, #256]	@ (8004964 <USB_ActivateEndpoint+0x654>)
 8004864:	400a      	ands	r2, r1
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	18d3      	adds	r3, r2, r3
 8004872:	183a      	adds	r2, r7, r0
 8004874:	8812      	ldrh	r2, [r2, #0]
 8004876:	4942      	ldr	r1, [pc, #264]	@ (8004980 <USB_ActivateEndpoint+0x670>)
 8004878:	430a      	orrs	r2, r1
 800487a:	b292      	uxth	r2, r2
 800487c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d000      	beq.n	8004888 <USB_ActivateEndpoint+0x578>
 8004886:	e07f      	b.n	8004988 <USB_ActivateEndpoint+0x678>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2250      	movs	r2, #80	@ 0x50
 8004890:	5a9b      	ldrh	r3, [r3, r2]
 8004892:	b29b      	uxth	r3, r3
 8004894:	001a      	movs	r2, r3
 8004896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004898:	189b      	adds	r3, r3, r2
 800489a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	00da      	lsls	r2, r3, #3
 80048a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a4:	18d3      	adds	r3, r2, r3
 80048a6:	4a37      	ldr	r2, [pc, #220]	@ (8004984 <USB_ActivateEndpoint+0x674>)
 80048a8:	4694      	mov	ip, r2
 80048aa:	4463      	add	r3, ip
 80048ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	059b      	lsls	r3, r3, #22
 80048b6:	0d9b      	lsrs	r3, r3, #22
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <USB_ActivateEndpoint+0x5c8>
 80048c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4a24      	ldr	r2, [pc, #144]	@ (8004960 <USB_ActivateEndpoint+0x650>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	e073      	b.n	80049c0 <USB_ActivateEndpoint+0x6b0>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80048de:	d81d      	bhi.n	800491c <USB_ActivateEndpoint+0x60c>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	218c      	movs	r1, #140	@ 0x8c
 80048e8:	187a      	adds	r2, r7, r1
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2201      	movs	r2, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	d004      	beq.n	8004900 <USB_ActivateEndpoint+0x5f0>
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3301      	adds	r3, #1
 80048fc:	187a      	adds	r2, r7, r1
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29a      	uxth	r2, r3
 8004906:	238c      	movs	r3, #140	@ 0x8c
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	029b      	lsls	r3, r3, #10
 8004910:	b29b      	uxth	r3, r3
 8004912:	4313      	orrs	r3, r2
 8004914:	b29a      	uxth	r2, r3
 8004916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	e051      	b.n	80049c0 <USB_ActivateEndpoint+0x6b0>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	218c      	movs	r1, #140	@ 0x8c
 8004924:	187a      	adds	r2, r7, r1
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	221f      	movs	r2, #31
 800492e:	4013      	ands	r3, r2
 8004930:	d104      	bne.n	800493c <USB_ActivateEndpoint+0x62c>
 8004932:	187b      	adds	r3, r7, r1
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	187a      	adds	r2, r7, r1
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29a      	uxth	r2, r3
 8004942:	238c      	movs	r3, #140	@ 0x8c
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	029b      	lsls	r3, r3, #10
 800494c:	b29b      	uxth	r3, r3
 800494e:	4313      	orrs	r3, r2
 8004950:	b29b      	uxth	r3, r3
 8004952:	4a03      	ldr	r2, [pc, #12]	@ (8004960 <USB_ActivateEndpoint+0x650>)
 8004954:	4313      	orrs	r3, r2
 8004956:	b29a      	uxth	r2, r3
 8004958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e030      	b.n	80049c0 <USB_ActivateEndpoint+0x6b0>
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	ffff8000 	.word	0xffff8000
 8004964:	ffff8f8f 	.word	0xffff8f8f
 8004968:	ffffc080 	.word	0xffffc080
 800496c:	ffffbf8f 	.word	0xffffbf8f
 8004970:	ffff8080 	.word	0xffff8080
 8004974:	ffff8180 	.word	0xffff8180
 8004978:	ffff8e8f 	.word	0xffff8e8f
 800497c:	00000404 	.word	0x00000404
 8004980:	ffff80c0 	.word	0xffff80c0
 8004984:	00000402 	.word	0x00000402
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	785b      	ldrb	r3, [r3, #1]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d117      	bne.n	80049c0 <USB_ActivateEndpoint+0x6b0>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	657b      	str	r3, [r7, #84]	@ 0x54
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2250      	movs	r2, #80	@ 0x50
 8004998:	5a9b      	ldrh	r3, [r3, r2]
 800499a:	b29b      	uxth	r3, r3
 800499c:	001a      	movs	r2, r3
 800499e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	00da      	lsls	r2, r3, #3
 80049aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	4ab9      	ldr	r2, [pc, #740]	@ (8004c94 <USB_ActivateEndpoint+0x984>)
 80049b0:	4694      	mov	ip, r2
 80049b2:	4463      	add	r3, ip
 80049b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049be:	801a      	strh	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d16a      	bne.n	8004aa2 <USB_ActivateEndpoint+0x792>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2250      	movs	r2, #80	@ 0x50
 80049d4:	5a9b      	ldrh	r3, [r3, r2]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	001a      	movs	r2, r3
 80049da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049dc:	189b      	adds	r3, r3, r2
 80049de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	00da      	lsls	r2, r3, #3
 80049e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e8:	18d3      	adds	r3, r2, r3
 80049ea:	4aab      	ldr	r2, [pc, #684]	@ (8004c98 <USB_ActivateEndpoint+0x988>)
 80049ec:	4694      	mov	ip, r2
 80049ee:	4463      	add	r3, ip
 80049f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	059b      	lsls	r3, r3, #22
 80049fa:	0d9b      	lsrs	r3, r3, #22
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d108      	bne.n	8004a1c <USB_ActivateEndpoint+0x70c>
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4aa2      	ldr	r2, [pc, #648]	@ (8004c9c <USB_ActivateEndpoint+0x98c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	e05c      	b.n	8004ad6 <USB_ActivateEndpoint+0x7c6>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a22:	d81d      	bhi.n	8004a60 <USB_ActivateEndpoint+0x750>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	2188      	movs	r1, #136	@ 0x88
 8004a2c:	187a      	adds	r2, r7, r1
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4013      	ands	r3, r2
 8004a38:	d004      	beq.n	8004a44 <USB_ActivateEndpoint+0x734>
 8004a3a:	187b      	adds	r3, r7, r1
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	187a      	adds	r2, r7, r1
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	2388      	movs	r3, #136	@ 0x88
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	e03a      	b.n	8004ad6 <USB_ActivateEndpoint+0x7c6>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2188      	movs	r1, #136	@ 0x88
 8004a68:	187a      	adds	r2, r7, r1
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	221f      	movs	r2, #31
 8004a72:	4013      	ands	r3, r2
 8004a74:	d104      	bne.n	8004a80 <USB_ActivateEndpoint+0x770>
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	187a      	adds	r2, r7, r1
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	2388      	movs	r3, #136	@ 0x88
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4a81      	ldr	r2, [pc, #516]	@ (8004c9c <USB_ActivateEndpoint+0x98c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	e019      	b.n	8004ad6 <USB_ActivateEndpoint+0x7c6>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d115      	bne.n	8004ad6 <USB_ActivateEndpoint+0x7c6>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2250      	movs	r2, #80	@ 0x50
 8004aae:	5a9b      	ldrh	r3, [r3, r2]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	001a      	movs	r2, r3
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	00da      	lsls	r2, r3, #3
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac2:	18d3      	adds	r3, r2, r3
 8004ac4:	4a74      	ldr	r2, [pc, #464]	@ (8004c98 <USB_ActivateEndpoint+0x988>)
 8004ac6:	4694      	mov	ip, r2
 8004ac8:	4463      	add	r3, ip
 8004aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	18d3      	adds	r3, r2, r3
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	2036      	movs	r0, #54	@ 0x36
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	496d      	ldr	r1, [pc, #436]	@ (8004ca0 <USB_ActivateEndpoint+0x990>)
 8004aea:	400a      	ands	r2, r1
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	183b      	adds	r3, r7, r0
 8004af0:	183a      	adds	r2, r7, r0
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	2180      	movs	r1, #128	@ 0x80
 8004af6:	0149      	lsls	r1, r1, #5
 8004af8:	404a      	eors	r2, r1
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	183b      	adds	r3, r7, r0
 8004afe:	183a      	adds	r2, r7, r0
 8004b00:	8812      	ldrh	r2, [r2, #0]
 8004b02:	2180      	movs	r1, #128	@ 0x80
 8004b04:	0189      	lsls	r1, r1, #6
 8004b06:	404a      	eors	r2, r1
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	18d3      	adds	r3, r2, r3
 8004b14:	183a      	adds	r2, r7, r0
 8004b16:	8812      	ldrh	r2, [r2, #0]
 8004b18:	4962      	ldr	r1, [pc, #392]	@ (8004ca4 <USB_ActivateEndpoint+0x994>)
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	18d3      	adds	r3, r2, r3
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	2034      	movs	r0, #52	@ 0x34
 8004b30:	183b      	adds	r3, r7, r0
 8004b32:	495d      	ldr	r1, [pc, #372]	@ (8004ca8 <USB_ActivateEndpoint+0x998>)
 8004b34:	400a      	ands	r2, r1
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	18d3      	adds	r3, r2, r3
 8004b42:	183a      	adds	r2, r7, r0
 8004b44:	8812      	ldrh	r2, [r2, #0]
 8004b46:	4957      	ldr	r1, [pc, #348]	@ (8004ca4 <USB_ActivateEndpoint+0x994>)
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	b292      	uxth	r2, r2
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	e09a      	b.n	8004c86 <USB_ActivateEndpoint+0x976>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	18d2      	adds	r2, r2, r3
 8004b5a:	216e      	movs	r1, #110	@ 0x6e
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	187b      	adds	r3, r7, r1
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	2380      	movs	r3, #128	@ 0x80
 8004b68:	01db      	lsls	r3, r3, #7
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d016      	beq.n	8004b9c <USB_ActivateEndpoint+0x88c>
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	18d3      	adds	r3, r2, r3
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	206c      	movs	r0, #108	@ 0x6c
 8004b7e:	183b      	adds	r3, r7, r0
 8004b80:	494a      	ldr	r1, [pc, #296]	@ (8004cac <USB_ActivateEndpoint+0x99c>)
 8004b82:	400a      	ands	r2, r1
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	18d3      	adds	r3, r2, r3
 8004b90:	183a      	adds	r2, r7, r0
 8004b92:	8812      	ldrh	r2, [r2, #0]
 8004b94:	4946      	ldr	r1, [pc, #280]	@ (8004cb0 <USB_ActivateEndpoint+0x9a0>)
 8004b96:	430a      	orrs	r2, r1
 8004b98:	b292      	uxth	r2, r2
 8004b9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	18d2      	adds	r2, r2, r3
 8004ba6:	216a      	movs	r1, #106	@ 0x6a
 8004ba8:	187b      	adds	r3, r7, r1
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	187b      	adds	r3, r7, r1
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	2240      	movs	r2, #64	@ 0x40
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d016      	beq.n	8004be6 <USB_ActivateEndpoint+0x8d6>
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	18d3      	adds	r3, r2, r3
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	2068      	movs	r0, #104	@ 0x68
 8004bc8:	183b      	adds	r3, r7, r0
 8004bca:	4938      	ldr	r1, [pc, #224]	@ (8004cac <USB_ActivateEndpoint+0x99c>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	18d3      	adds	r3, r2, r3
 8004bda:	183a      	adds	r2, r7, r0
 8004bdc:	8812      	ldrh	r2, [r2, #0]
 8004bde:	4935      	ldr	r1, [pc, #212]	@ (8004cb4 <USB_ActivateEndpoint+0x9a4>)
 8004be0:	430a      	orrs	r2, r1
 8004be2:	b292      	uxth	r2, r2
 8004be4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	78db      	ldrb	r3, [r3, #3]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d01d      	beq.n	8004c2a <USB_ActivateEndpoint+0x91a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	18d3      	adds	r3, r2, r3
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	2064      	movs	r0, #100	@ 0x64
 8004bfe:	183b      	adds	r3, r7, r0
 8004c00:	4929      	ldr	r1, [pc, #164]	@ (8004ca8 <USB_ActivateEndpoint+0x998>)
 8004c02:	400a      	ands	r2, r1
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	183b      	adds	r3, r7, r0
 8004c08:	183a      	adds	r2, r7, r0
 8004c0a:	8812      	ldrh	r2, [r2, #0]
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	404a      	eors	r2, r1
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	18d3      	adds	r3, r2, r3
 8004c1c:	183a      	adds	r2, r7, r0
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	4920      	ldr	r1, [pc, #128]	@ (8004ca4 <USB_ActivateEndpoint+0x994>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	b292      	uxth	r2, r2
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e016      	b.n	8004c58 <USB_ActivateEndpoint+0x948>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	18d3      	adds	r3, r2, r3
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	2066      	movs	r0, #102	@ 0x66
 8004c3a:	183b      	adds	r3, r7, r0
 8004c3c:	491a      	ldr	r1, [pc, #104]	@ (8004ca8 <USB_ActivateEndpoint+0x998>)
 8004c3e:	400a      	ands	r2, r1
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	18d3      	adds	r3, r2, r3
 8004c4c:	183a      	adds	r2, r7, r0
 8004c4e:	8812      	ldrh	r2, [r2, #0]
 8004c50:	4914      	ldr	r1, [pc, #80]	@ (8004ca4 <USB_ActivateEndpoint+0x994>)
 8004c52:	430a      	orrs	r2, r1
 8004c54:	b292      	uxth	r2, r2
 8004c56:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	18d3      	adds	r3, r2, r3
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	2062      	movs	r0, #98	@ 0x62
 8004c68:	183b      	adds	r3, r7, r0
 8004c6a:	490d      	ldr	r1, [pc, #52]	@ (8004ca0 <USB_ActivateEndpoint+0x990>)
 8004c6c:	400a      	ands	r2, r1
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	18d3      	adds	r3, r2, r3
 8004c7a:	183a      	adds	r2, r7, r0
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	4909      	ldr	r1, [pc, #36]	@ (8004ca4 <USB_ActivateEndpoint+0x994>)
 8004c80:	430a      	orrs	r2, r1
 8004c82:	b292      	uxth	r2, r2
 8004c84:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c86:	2397      	movs	r3, #151	@ 0x97
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b026      	add	sp, #152	@ 0x98
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	00000402 	.word	0x00000402
 8004c98:	00000406 	.word	0x00000406
 8004c9c:	ffff8000 	.word	0xffff8000
 8004ca0:	ffffbf8f 	.word	0xffffbf8f
 8004ca4:	ffff8080 	.word	0xffff8080
 8004ca8:	ffff8fbf 	.word	0xffff8fbf
 8004cac:	ffff8f8f 	.word	0xffff8f8f
 8004cb0:	ffffc080 	.word	0xffffc080
 8004cb4:	ffff80c0 	.word	0xffff80c0

08004cb8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	@ 0x30
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	7b1b      	ldrb	r3, [r3, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d000      	beq.n	8004ccc <USB_DeactivateEndpoint+0x14>
 8004cca:	e07e      	b.n	8004dca <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d03c      	beq.n	8004d4e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	18d2      	adds	r2, r2, r3
 8004cde:	210c      	movs	r1, #12
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	8812      	ldrh	r2, [r2, #0]
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	187b      	adds	r3, r7, r1
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	2240      	movs	r2, #64	@ 0x40
 8004cec:	4013      	ands	r3, r2
 8004cee:	d016      	beq.n	8004d1e <USB_DeactivateEndpoint+0x66>
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	18d3      	adds	r3, r2, r3
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	200a      	movs	r0, #10
 8004d00:	183b      	adds	r3, r7, r0
 8004d02:	49c7      	ldr	r1, [pc, #796]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	183a      	adds	r2, r7, r0
 8004d14:	8812      	ldrh	r2, [r2, #0]
 8004d16:	49c3      	ldr	r1, [pc, #780]	@ (8005024 <USB_DeactivateEndpoint+0x36c>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	b292      	uxth	r2, r2
 8004d1c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	18d3      	adds	r3, r2, r3
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	2008      	movs	r0, #8
 8004d2e:	183b      	adds	r3, r7, r0
 8004d30:	49bd      	ldr	r1, [pc, #756]	@ (8005028 <USB_DeactivateEndpoint+0x370>)
 8004d32:	400a      	ands	r2, r1
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	183a      	adds	r2, r7, r0
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	49b9      	ldr	r1, [pc, #740]	@ (800502c <USB_DeactivateEndpoint+0x374>)
 8004d46:	430a      	orrs	r2, r1
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	e163      	b.n	8005016 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	18d2      	adds	r2, r2, r3
 8004d58:	2112      	movs	r1, #18
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	01db      	lsls	r3, r3, #7
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d016      	beq.n	8004d9a <USB_DeactivateEndpoint+0xe2>
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	18d3      	adds	r3, r2, r3
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	2010      	movs	r0, #16
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	49a8      	ldr	r1, [pc, #672]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	18d3      	adds	r3, r2, r3
 8004d8e:	183a      	adds	r2, r7, r0
 8004d90:	8812      	ldrh	r2, [r2, #0]
 8004d92:	49a7      	ldr	r1, [pc, #668]	@ (8005030 <USB_DeactivateEndpoint+0x378>)
 8004d94:	430a      	orrs	r2, r1
 8004d96:	b292      	uxth	r2, r2
 8004d98:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	18d3      	adds	r3, r2, r3
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	200e      	movs	r0, #14
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	49a1      	ldr	r1, [pc, #644]	@ (8005034 <USB_DeactivateEndpoint+0x37c>)
 8004dae:	400a      	ands	r2, r1
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	18d3      	adds	r3, r2, r3
 8004dbc:	183a      	adds	r2, r7, r0
 8004dbe:	8812      	ldrh	r2, [r2, #0]
 8004dc0:	499a      	ldr	r1, [pc, #616]	@ (800502c <USB_DeactivateEndpoint+0x374>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	801a      	strh	r2, [r3, #0]
 8004dc8:	e125      	b.n	8005016 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d000      	beq.n	8004dd4 <USB_DeactivateEndpoint+0x11c>
 8004dd2:	e090      	b.n	8004ef6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	18d2      	adds	r2, r2, r3
 8004dde:	2120      	movs	r1, #32
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	8812      	ldrh	r2, [r2, #0]
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	187b      	adds	r3, r7, r1
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	01db      	lsls	r3, r3, #7
 8004dee:	4013      	ands	r3, r2
 8004df0:	d016      	beq.n	8004e20 <USB_DeactivateEndpoint+0x168>
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	18d3      	adds	r3, r2, r3
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	201e      	movs	r0, #30
 8004e02:	183b      	adds	r3, r7, r0
 8004e04:	4986      	ldr	r1, [pc, #536]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004e06:	400a      	ands	r2, r1
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	18d3      	adds	r3, r2, r3
 8004e14:	183a      	adds	r2, r7, r0
 8004e16:	8812      	ldrh	r2, [r2, #0]
 8004e18:	4985      	ldr	r1, [pc, #532]	@ (8005030 <USB_DeactivateEndpoint+0x378>)
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	18d2      	adds	r2, r2, r3
 8004e2a:	211c      	movs	r1, #28
 8004e2c:	187b      	adds	r3, r7, r1
 8004e2e:	8812      	ldrh	r2, [r2, #0]
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	2240      	movs	r2, #64	@ 0x40
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d016      	beq.n	8004e6a <USB_DeactivateEndpoint+0x1b2>
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	18d3      	adds	r3, r2, r3
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	201a      	movs	r0, #26
 8004e4c:	183b      	adds	r3, r7, r0
 8004e4e:	4974      	ldr	r1, [pc, #464]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	18d3      	adds	r3, r2, r3
 8004e5e:	183a      	adds	r2, r7, r0
 8004e60:	8812      	ldrh	r2, [r2, #0]
 8004e62:	4970      	ldr	r1, [pc, #448]	@ (8005024 <USB_DeactivateEndpoint+0x36c>)
 8004e64:	430a      	orrs	r2, r1
 8004e66:	b292      	uxth	r2, r2
 8004e68:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	18d3      	adds	r3, r2, r3
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	2018      	movs	r0, #24
 8004e7a:	183b      	adds	r3, r7, r0
 8004e7c:	4968      	ldr	r1, [pc, #416]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004e7e:	400a      	ands	r2, r1
 8004e80:	801a      	strh	r2, [r3, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	183a      	adds	r2, r7, r0
 8004e8e:	8812      	ldrh	r2, [r2, #0]
 8004e90:	4964      	ldr	r1, [pc, #400]	@ (8005024 <USB_DeactivateEndpoint+0x36c>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	b292      	uxth	r2, r2
 8004e96:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	18d3      	adds	r3, r2, r3
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	2016      	movs	r0, #22
 8004ea8:	183b      	adds	r3, r7, r0
 8004eaa:	4962      	ldr	r1, [pc, #392]	@ (8005034 <USB_DeactivateEndpoint+0x37c>)
 8004eac:	400a      	ands	r2, r1
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	183a      	adds	r2, r7, r0
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	495b      	ldr	r1, [pc, #364]	@ (800502c <USB_DeactivateEndpoint+0x374>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	18d3      	adds	r3, r2, r3
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	2014      	movs	r0, #20
 8004ed6:	183b      	adds	r3, r7, r0
 8004ed8:	4953      	ldr	r1, [pc, #332]	@ (8005028 <USB_DeactivateEndpoint+0x370>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	18d3      	adds	r3, r2, r3
 8004ee8:	183a      	adds	r2, r7, r0
 8004eea:	8812      	ldrh	r2, [r2, #0]
 8004eec:	494f      	ldr	r1, [pc, #316]	@ (800502c <USB_DeactivateEndpoint+0x374>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e08f      	b.n	8005016 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	18d2      	adds	r2, r2, r3
 8004f00:	212e      	movs	r1, #46	@ 0x2e
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	8812      	ldrh	r2, [r2, #0]
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	187b      	adds	r3, r7, r1
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	2380      	movs	r3, #128	@ 0x80
 8004f0e:	01db      	lsls	r3, r3, #7
 8004f10:	4013      	ands	r3, r2
 8004f12:	d016      	beq.n	8004f42 <USB_DeactivateEndpoint+0x28a>
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	18d3      	adds	r3, r2, r3
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	202c      	movs	r0, #44	@ 0x2c
 8004f24:	183b      	adds	r3, r7, r0
 8004f26:	493e      	ldr	r1, [pc, #248]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	18d3      	adds	r3, r2, r3
 8004f36:	183a      	adds	r2, r7, r0
 8004f38:	8812      	ldrh	r2, [r2, #0]
 8004f3a:	493d      	ldr	r1, [pc, #244]	@ (8005030 <USB_DeactivateEndpoint+0x378>)
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	18d2      	adds	r2, r2, r3
 8004f4c:	212a      	movs	r1, #42	@ 0x2a
 8004f4e:	187b      	adds	r3, r7, r1
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	187b      	adds	r3, r7, r1
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	2240      	movs	r2, #64	@ 0x40
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d016      	beq.n	8004f8c <USB_DeactivateEndpoint+0x2d4>
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	18d3      	adds	r3, r2, r3
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	2028      	movs	r0, #40	@ 0x28
 8004f6e:	183b      	adds	r3, r7, r0
 8004f70:	492b      	ldr	r1, [pc, #172]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004f72:	400a      	ands	r2, r1
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	18d3      	adds	r3, r2, r3
 8004f80:	183a      	adds	r2, r7, r0
 8004f82:	8812      	ldrh	r2, [r2, #0]
 8004f84:	4927      	ldr	r1, [pc, #156]	@ (8005024 <USB_DeactivateEndpoint+0x36c>)
 8004f86:	430a      	orrs	r2, r1
 8004f88:	b292      	uxth	r2, r2
 8004f8a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	18d3      	adds	r3, r2, r3
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	2026      	movs	r0, #38	@ 0x26
 8004f9c:	183b      	adds	r3, r7, r0
 8004f9e:	4920      	ldr	r1, [pc, #128]	@ (8005020 <USB_DeactivateEndpoint+0x368>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	18d3      	adds	r3, r2, r3
 8004fae:	183a      	adds	r2, r7, r0
 8004fb0:	8812      	ldrh	r2, [r2, #0]
 8004fb2:	491f      	ldr	r1, [pc, #124]	@ (8005030 <USB_DeactivateEndpoint+0x378>)
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	18d3      	adds	r3, r2, r3
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	2024      	movs	r0, #36	@ 0x24
 8004fca:	183b      	adds	r3, r7, r0
 8004fcc:	4916      	ldr	r1, [pc, #88]	@ (8005028 <USB_DeactivateEndpoint+0x370>)
 8004fce:	400a      	ands	r2, r1
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	18d3      	adds	r3, r2, r3
 8004fdc:	183a      	adds	r2, r7, r0
 8004fde:	8812      	ldrh	r2, [r2, #0]
 8004fe0:	4912      	ldr	r1, [pc, #72]	@ (800502c <USB_DeactivateEndpoint+0x374>)
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	b292      	uxth	r2, r2
 8004fe6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	18d3      	adds	r3, r2, r3
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	2022      	movs	r0, #34	@ 0x22
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	490e      	ldr	r1, [pc, #56]	@ (8005034 <USB_DeactivateEndpoint+0x37c>)
 8004ffc:	400a      	ands	r2, r1
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	18d3      	adds	r3, r2, r3
 800500a:	183a      	adds	r2, r7, r0
 800500c:	8812      	ldrh	r2, [r2, #0]
 800500e:	4907      	ldr	r1, [pc, #28]	@ (800502c <USB_DeactivateEndpoint+0x374>)
 8005010:	430a      	orrs	r2, r1
 8005012:	b292      	uxth	r2, r2
 8005014:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b00c      	add	sp, #48	@ 0x30
 800501e:	bd80      	pop	{r7, pc}
 8005020:	ffff8f8f 	.word	0xffff8f8f
 8005024:	ffff80c0 	.word	0xffff80c0
 8005028:	ffff8fbf 	.word	0xffff8fbf
 800502c:	ffff8080 	.word	0xffff8080
 8005030:	ffffc080 	.word	0xffffc080
 8005034:	ffffbf8f 	.word	0xffffbf8f

08005038 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005038:	b5b0      	push	{r4, r5, r7, lr}
 800503a:	b0ac      	sub	sp, #176	@ 0xb0
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d001      	beq.n	800504e <USB_EPStartXfer+0x16>
 800504a:	f000 fd07 	bl	8005a5c <USB_EPStartXfer+0xa24>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d905      	bls.n	8005066 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	22ac      	movs	r2, #172	@ 0xac
 8005060:	18ba      	adds	r2, r7, r2
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e004      	b.n	8005070 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	22ac      	movs	r2, #172	@ 0xac
 800506c:	18ba      	adds	r2, r7, r2
 800506e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	7b1b      	ldrb	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d124      	bne.n	80050c2 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6959      	ldr	r1, [r3, #20]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	88da      	ldrh	r2, [r3, #6]
 8005080:	24ac      	movs	r4, #172	@ 0xac
 8005082:	193b      	adds	r3, r7, r4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fef5 	bl	8005e78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2250      	movs	r2, #80	@ 0x50
 8005096:	5a9b      	ldrh	r3, [r3, r2]
 8005098:	b29b      	uxth	r3, r3
 800509a:	001a      	movs	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	00da      	lsls	r2, r3, #3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	18d3      	adds	r3, r2, r3
 80050ac:	4acf      	ldr	r2, [pc, #828]	@ (80053ec <USB_EPStartXfer+0x3b4>)
 80050ae:	4694      	mov	ip, r2
 80050b0:	4463      	add	r3, ip
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	193b      	adds	r3, r7, r4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	801a      	strh	r2, [r3, #0]
 80050be:	f000 fca9 	bl	8005a14 <USB_EPStartXfer+0x9dc>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d000      	beq.n	80050cc <USB_EPStartXfer+0x94>
 80050ca:	e347      	b.n	800575c <USB_EPStartXfer+0x724>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d800      	bhi.n	80050da <USB_EPStartXfer+0xa2>
 80050d8:	e2f0      	b.n	80056bc <USB_EPStartXfer+0x684>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	18d3      	adds	r3, r2, r3
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	2056      	movs	r0, #86	@ 0x56
 80050ea:	183b      	adds	r3, r7, r0
 80050ec:	49c0      	ldr	r1, [pc, #768]	@ (80053f0 <USB_EPStartXfer+0x3b8>)
 80050ee:	400a      	ands	r2, r1
 80050f0:	801a      	strh	r2, [r3, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	18d3      	adds	r3, r2, r3
 80050fc:	183a      	adds	r2, r7, r0
 80050fe:	8812      	ldrh	r2, [r2, #0]
 8005100:	49bc      	ldr	r1, [pc, #752]	@ (80053f4 <USB_EPStartXfer+0x3bc>)
 8005102:	430a      	orrs	r2, r1
 8005104:	b292      	uxth	r2, r2
 8005106:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	21ac      	movs	r1, #172	@ 0xac
 800510e:	187b      	adds	r3, r7, r1
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	18d3      	adds	r3, r2, r3
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	001a      	movs	r2, r3
 8005128:	2340      	movs	r3, #64	@ 0x40
 800512a:	4013      	ands	r3, r2
 800512c:	d100      	bne.n	8005130 <USB_EPStartXfer+0xf8>
 800512e:	e167      	b.n	8005400 <USB_EPStartXfer+0x3c8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	633b      	str	r3, [r7, #48]	@ 0x30
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d16c      	bne.n	8005216 <USB_EPStartXfer+0x1de>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2250      	movs	r2, #80	@ 0x50
 8005144:	5a9b      	ldrh	r3, [r3, r2]
 8005146:	b29b      	uxth	r3, r3
 8005148:	001a      	movs	r2, r3
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	189b      	adds	r3, r3, r2
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	00da      	lsls	r2, r3, #3
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	4aa7      	ldr	r2, [pc, #668]	@ (80053f8 <USB_EPStartXfer+0x3c0>)
 800515c:	4694      	mov	ip, r2
 800515e:	4463      	add	r3, ip
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	059b      	lsls	r3, r3, #22
 800516a:	0d9b      	lsrs	r3, r3, #22
 800516c:	b29a      	uxth	r2, r3
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	187b      	adds	r3, r7, r1
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <USB_EPStartXfer+0x154>
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	4a9e      	ldr	r2, [pc, #632]	@ (80053fc <USB_EPStartXfer+0x3c4>)
 8005182:	4313      	orrs	r3, r2
 8005184:	b29a      	uxth	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e05f      	b.n	800524c <USB_EPStartXfer+0x214>
 800518c:	22ac      	movs	r2, #172	@ 0xac
 800518e:	18bb      	adds	r3, r7, r2
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b3e      	cmp	r3, #62	@ 0x3e
 8005194:	d81d      	bhi.n	80051d2 <USB_EPStartXfer+0x19a>
 8005196:	18bb      	adds	r3, r7, r2
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	21a8      	movs	r1, #168	@ 0xa8
 800519e:	1878      	adds	r0, r7, r1
 80051a0:	6003      	str	r3, [r0, #0]
 80051a2:	18bb      	adds	r3, r7, r2
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2201      	movs	r2, #1
 80051a8:	4013      	ands	r3, r2
 80051aa:	d004      	beq.n	80051b6 <USB_EPStartXfer+0x17e>
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	187a      	adds	r2, r7, r1
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	23a8      	movs	r3, #168	@ 0xa8
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	029b      	lsls	r3, r3, #10
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4313      	orrs	r3, r2
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	e03c      	b.n	800524c <USB_EPStartXfer+0x214>
 80051d2:	22ac      	movs	r2, #172	@ 0xac
 80051d4:	18bb      	adds	r3, r7, r2
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	21a8      	movs	r1, #168	@ 0xa8
 80051dc:	1878      	adds	r0, r7, r1
 80051de:	6003      	str	r3, [r0, #0]
 80051e0:	18bb      	adds	r3, r7, r2
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	221f      	movs	r2, #31
 80051e6:	4013      	ands	r3, r2
 80051e8:	d104      	bne.n	80051f4 <USB_EPStartXfer+0x1bc>
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	187a      	adds	r2, r7, r1
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	23a8      	movs	r3, #168	@ 0xa8
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	b29b      	uxth	r3, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	4a7c      	ldr	r2, [pc, #496]	@ (80053fc <USB_EPStartXfer+0x3c4>)
 800520c:	4313      	orrs	r3, r2
 800520e:	b29a      	uxth	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e01a      	b.n	800524c <USB_EPStartXfer+0x214>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d116      	bne.n	800524c <USB_EPStartXfer+0x214>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2250      	movs	r2, #80	@ 0x50
 8005222:	5a9b      	ldrh	r3, [r3, r2]
 8005224:	b29b      	uxth	r3, r3
 8005226:	001a      	movs	r2, r3
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	189b      	adds	r3, r3, r2
 800522c:	633b      	str	r3, [r7, #48]	@ 0x30
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	00da      	lsls	r2, r3, #3
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	18d3      	adds	r3, r2, r3
 8005238:	4a6f      	ldr	r2, [pc, #444]	@ (80053f8 <USB_EPStartXfer+0x3c0>)
 800523a:	4694      	mov	ip, r2
 800523c:	4463      	add	r3, ip
 800523e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005240:	23ac      	movs	r3, #172	@ 0xac
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	b29a      	uxth	r2, r3
 8005248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800524c:	2076      	movs	r0, #118	@ 0x76
 800524e:	183b      	adds	r3, r7, r0
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	8952      	ldrh	r2, [r2, #10]
 8005254:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6959      	ldr	r1, [r3, #20]
 800525a:	25ac      	movs	r5, #172	@ 0xac
 800525c:	197b      	adds	r3, r7, r5
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b29c      	uxth	r4, r3
 8005262:	183b      	adds	r3, r7, r0
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	0023      	movs	r3, r4
 800526a:	f000 fe05 	bl	8005e78 <USB_WritePMA>
            ep->xfer_buff += len;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	197b      	adds	r3, r7, r5
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	18d2      	adds	r2, r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6a1a      	ldr	r2, [r3, #32]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	429a      	cmp	r2, r3
 8005286:	d907      	bls.n	8005298 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	197b      	adds	r3, r7, r5
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	1ad2      	subs	r2, r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	621a      	str	r2, [r3, #32]
 8005296:	e007      	b.n	80052a8 <USB_EPStartXfer+0x270>
            }
            else
            {
              len = ep->xfer_len_db;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	22ac      	movs	r2, #172	@ 0xac
 800529e:	18ba      	adds	r2, r7, r2
 80052a0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d16d      	bne.n	800538c <USB_EPStartXfer+0x354>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2250      	movs	r2, #80	@ 0x50
 80052b8:	5a9b      	ldrh	r3, [r3, r2]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	001a      	movs	r2, r3
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	00da      	lsls	r2, r3, #3
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	4a47      	ldr	r2, [pc, #284]	@ (80053ec <USB_EPStartXfer+0x3b4>)
 80052d0:	4694      	mov	ip, r2
 80052d2:	4463      	add	r3, ip
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	059b      	lsls	r3, r3, #22
 80052de:	0d9b      	lsrs	r3, r3, #22
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	23ac      	movs	r3, #172	@ 0xac
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <USB_EPStartXfer+0x2ca>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4a41      	ldr	r2, [pc, #260]	@ (80053fc <USB_EPStartXfer+0x3c4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e061      	b.n	80053c6 <USB_EPStartXfer+0x38e>
 8005302:	22ac      	movs	r2, #172	@ 0xac
 8005304:	18bb      	adds	r3, r7, r2
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b3e      	cmp	r3, #62	@ 0x3e
 800530a:	d81d      	bhi.n	8005348 <USB_EPStartXfer+0x310>
 800530c:	18bb      	adds	r3, r7, r2
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	21a4      	movs	r1, #164	@ 0xa4
 8005314:	1878      	adds	r0, r7, r1
 8005316:	6003      	str	r3, [r0, #0]
 8005318:	18bb      	adds	r3, r7, r2
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2201      	movs	r2, #1
 800531e:	4013      	ands	r3, r2
 8005320:	d004      	beq.n	800532c <USB_EPStartXfer+0x2f4>
 8005322:	187b      	adds	r3, r7, r1
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	187a      	adds	r2, r7, r1
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29a      	uxth	r2, r3
 8005332:	23a4      	movs	r3, #164	@ 0xa4
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	029b      	lsls	r3, r3, #10
 800533c:	b29b      	uxth	r3, r3
 800533e:	4313      	orrs	r3, r2
 8005340:	b29a      	uxth	r2, r3
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e03e      	b.n	80053c6 <USB_EPStartXfer+0x38e>
 8005348:	22ac      	movs	r2, #172	@ 0xac
 800534a:	18bb      	adds	r3, r7, r2
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	21a4      	movs	r1, #164	@ 0xa4
 8005352:	1878      	adds	r0, r7, r1
 8005354:	6003      	str	r3, [r0, #0]
 8005356:	18bb      	adds	r3, r7, r2
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	221f      	movs	r2, #31
 800535c:	4013      	ands	r3, r2
 800535e:	d104      	bne.n	800536a <USB_EPStartXfer+0x332>
 8005360:	187b      	adds	r3, r7, r1
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3b01      	subs	r3, #1
 8005366:	187a      	adds	r2, r7, r1
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29a      	uxth	r2, r3
 8005370:	23a4      	movs	r3, #164	@ 0xa4
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	029b      	lsls	r3, r3, #10
 800537a:	b29b      	uxth	r3, r3
 800537c:	4313      	orrs	r3, r2
 800537e:	b29b      	uxth	r3, r3
 8005380:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <USB_EPStartXfer+0x3c4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e01c      	b.n	80053c6 <USB_EPStartXfer+0x38e>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d118      	bne.n	80053c6 <USB_EPStartXfer+0x38e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2250      	movs	r2, #80	@ 0x50
 800539c:	5a9b      	ldrh	r3, [r3, r2]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	001a      	movs	r2, r3
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	189b      	adds	r3, r3, r2
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	00da      	lsls	r2, r3, #3
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	18d3      	adds	r3, r2, r3
 80053b2:	4a0e      	ldr	r2, [pc, #56]	@ (80053ec <USB_EPStartXfer+0x3b4>)
 80053b4:	4694      	mov	ip, r2
 80053b6:	4463      	add	r3, ip
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	23ac      	movs	r3, #172	@ 0xac
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053c6:	2076      	movs	r0, #118	@ 0x76
 80053c8:	183b      	adds	r3, r7, r0
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	8912      	ldrh	r2, [r2, #8]
 80053ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	6959      	ldr	r1, [r3, #20]
 80053d4:	23ac      	movs	r3, #172	@ 0xac
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	b29c      	uxth	r4, r3
 80053dc:	183b      	adds	r3, r7, r0
 80053de:	881a      	ldrh	r2, [r3, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	0023      	movs	r3, r4
 80053e4:	f000 fd48 	bl	8005e78 <USB_WritePMA>
 80053e8:	e314      	b.n	8005a14 <USB_EPStartXfer+0x9dc>
 80053ea:	46c0      	nop			@ (mov r8, r8)
 80053ec:	00000402 	.word	0x00000402
 80053f0:	ffff8f8f 	.word	0xffff8f8f
 80053f4:	ffff8180 	.word	0xffff8180
 80053f8:	00000406 	.word	0x00000406
 80053fc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d16d      	bne.n	80054e4 <USB_EPStartXfer+0x4ac>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2250      	movs	r2, #80	@ 0x50
 8005410:	5a9b      	ldrh	r3, [r3, r2]
 8005412:	b29b      	uxth	r3, r3
 8005414:	001a      	movs	r2, r3
 8005416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005418:	189b      	adds	r3, r3, r2
 800541a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	00da      	lsls	r2, r3, #3
 8005422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	4ac8      	ldr	r2, [pc, #800]	@ (8005748 <USB_EPStartXfer+0x710>)
 8005428:	4694      	mov	ip, r2
 800542a:	4463      	add	r3, ip
 800542c:	647b      	str	r3, [r7, #68]	@ 0x44
 800542e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	059b      	lsls	r3, r3, #22
 8005436:	0d9b      	lsrs	r3, r3, #22
 8005438:	b29a      	uxth	r2, r3
 800543a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	23ac      	movs	r3, #172	@ 0xac
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d108      	bne.n	800545a <USB_EPStartXfer+0x422>
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	4abf      	ldr	r2, [pc, #764]	@ (800574c <USB_EPStartXfer+0x714>)
 8005450:	4313      	orrs	r3, r2
 8005452:	b29a      	uxth	r2, r3
 8005454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e061      	b.n	800551e <USB_EPStartXfer+0x4e6>
 800545a:	22ac      	movs	r2, #172	@ 0xac
 800545c:	18bb      	adds	r3, r7, r2
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b3e      	cmp	r3, #62	@ 0x3e
 8005462:	d81d      	bhi.n	80054a0 <USB_EPStartXfer+0x468>
 8005464:	18bb      	adds	r3, r7, r2
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	21a0      	movs	r1, #160	@ 0xa0
 800546c:	1878      	adds	r0, r7, r1
 800546e:	6003      	str	r3, [r0, #0]
 8005470:	18bb      	adds	r3, r7, r2
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2201      	movs	r2, #1
 8005476:	4013      	ands	r3, r2
 8005478:	d004      	beq.n	8005484 <USB_EPStartXfer+0x44c>
 800547a:	187b      	adds	r3, r7, r1
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	187a      	adds	r2, r7, r1
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	23a0      	movs	r3, #160	@ 0xa0
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	029b      	lsls	r3, r3, #10
 8005494:	b29b      	uxth	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b29a      	uxth	r2, r3
 800549a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e03e      	b.n	800551e <USB_EPStartXfer+0x4e6>
 80054a0:	22ac      	movs	r2, #172	@ 0xac
 80054a2:	18bb      	adds	r3, r7, r2
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	21a0      	movs	r1, #160	@ 0xa0
 80054aa:	1878      	adds	r0, r7, r1
 80054ac:	6003      	str	r3, [r0, #0]
 80054ae:	18bb      	adds	r3, r7, r2
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	221f      	movs	r2, #31
 80054b4:	4013      	ands	r3, r2
 80054b6:	d104      	bne.n	80054c2 <USB_EPStartXfer+0x48a>
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	187a      	adds	r2, r7, r1
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	23a0      	movs	r3, #160	@ 0xa0
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4a9c      	ldr	r2, [pc, #624]	@ (800574c <USB_EPStartXfer+0x714>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e01c      	b.n	800551e <USB_EPStartXfer+0x4e6>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d118      	bne.n	800551e <USB_EPStartXfer+0x4e6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2250      	movs	r2, #80	@ 0x50
 80054f4:	5a9b      	ldrh	r3, [r3, r2]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	001a      	movs	r2, r3
 80054fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054fc:	189b      	adds	r3, r3, r2
 80054fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	00da      	lsls	r2, r3, #3
 8005506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005508:	18d3      	adds	r3, r2, r3
 800550a:	4a8f      	ldr	r2, [pc, #572]	@ (8005748 <USB_EPStartXfer+0x710>)
 800550c:	4694      	mov	ip, r2
 800550e:	4463      	add	r3, ip
 8005510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005512:	23ac      	movs	r3, #172	@ 0xac
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	b29a      	uxth	r2, r3
 800551a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800551c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800551e:	2076      	movs	r0, #118	@ 0x76
 8005520:	183b      	adds	r3, r7, r0
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	8912      	ldrh	r2, [r2, #8]
 8005526:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6959      	ldr	r1, [r3, #20]
 800552c:	25ac      	movs	r5, #172	@ 0xac
 800552e:	197b      	adds	r3, r7, r5
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29c      	uxth	r4, r3
 8005534:	183b      	adds	r3, r7, r0
 8005536:	881a      	ldrh	r2, [r3, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	0023      	movs	r3, r4
 800553c:	f000 fc9c 	bl	8005e78 <USB_WritePMA>
            ep->xfer_buff += len;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	197b      	adds	r3, r7, r5
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	18d2      	adds	r2, r2, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	429a      	cmp	r2, r3
 8005558:	d907      	bls.n	800556a <USB_EPStartXfer+0x532>
            {
              ep->xfer_len_db -= len;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6a1a      	ldr	r2, [r3, #32]
 800555e:	197b      	adds	r3, r7, r5
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	621a      	str	r2, [r3, #32]
 8005568:	e007      	b.n	800557a <USB_EPStartXfer+0x542>
            }
            else
            {
              len = ep->xfer_len_db;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	22ac      	movs	r2, #172	@ 0xac
 8005570:	18ba      	adds	r2, r7, r2
 8005572:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	643b      	str	r3, [r7, #64]	@ 0x40
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d16d      	bne.n	8005662 <USB_EPStartXfer+0x62a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2250      	movs	r2, #80	@ 0x50
 800558e:	5a9b      	ldrh	r3, [r3, r2]
 8005590:	b29b      	uxth	r3, r3
 8005592:	001a      	movs	r2, r3
 8005594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005596:	189b      	adds	r3, r3, r2
 8005598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	00da      	lsls	r2, r3, #3
 80055a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a2:	18d3      	adds	r3, r2, r3
 80055a4:	4a6a      	ldr	r2, [pc, #424]	@ (8005750 <USB_EPStartXfer+0x718>)
 80055a6:	4694      	mov	ip, r2
 80055a8:	4463      	add	r3, ip
 80055aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	059b      	lsls	r3, r3, #22
 80055b4:	0d9b      	lsrs	r3, r3, #22
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	23ac      	movs	r3, #172	@ 0xac
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <USB_EPStartXfer+0x5a0>
 80055c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4a5f      	ldr	r2, [pc, #380]	@ (800574c <USB_EPStartXfer+0x714>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e05f      	b.n	8005698 <USB_EPStartXfer+0x660>
 80055d8:	22ac      	movs	r2, #172	@ 0xac
 80055da:	18bb      	adds	r3, r7, r2
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b3e      	cmp	r3, #62	@ 0x3e
 80055e0:	d81d      	bhi.n	800561e <USB_EPStartXfer+0x5e6>
 80055e2:	18bb      	adds	r3, r7, r2
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	219c      	movs	r1, #156	@ 0x9c
 80055ea:	1878      	adds	r0, r7, r1
 80055ec:	6003      	str	r3, [r0, #0]
 80055ee:	18bb      	adds	r3, r7, r2
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2201      	movs	r2, #1
 80055f4:	4013      	ands	r3, r2
 80055f6:	d004      	beq.n	8005602 <USB_EPStartXfer+0x5ca>
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	187a      	adds	r2, r7, r1
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29a      	uxth	r2, r3
 8005608:	239c      	movs	r3, #156	@ 0x9c
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	029b      	lsls	r3, r3, #10
 8005612:	b29b      	uxth	r3, r3
 8005614:	4313      	orrs	r3, r2
 8005616:	b29a      	uxth	r2, r3
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e03c      	b.n	8005698 <USB_EPStartXfer+0x660>
 800561e:	22ac      	movs	r2, #172	@ 0xac
 8005620:	18bb      	adds	r3, r7, r2
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	219c      	movs	r1, #156	@ 0x9c
 8005628:	1878      	adds	r0, r7, r1
 800562a:	6003      	str	r3, [r0, #0]
 800562c:	18bb      	adds	r3, r7, r2
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	221f      	movs	r2, #31
 8005632:	4013      	ands	r3, r2
 8005634:	d104      	bne.n	8005640 <USB_EPStartXfer+0x608>
 8005636:	187b      	adds	r3, r7, r1
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3b01      	subs	r3, #1
 800563c:	187a      	adds	r2, r7, r1
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29a      	uxth	r2, r3
 8005646:	239c      	movs	r3, #156	@ 0x9c
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	029b      	lsls	r3, r3, #10
 8005650:	b29b      	uxth	r3, r3
 8005652:	4313      	orrs	r3, r2
 8005654:	b29b      	uxth	r3, r3
 8005656:	4a3d      	ldr	r2, [pc, #244]	@ (800574c <USB_EPStartXfer+0x714>)
 8005658:	4313      	orrs	r3, r2
 800565a:	b29a      	uxth	r2, r3
 800565c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e01a      	b.n	8005698 <USB_EPStartXfer+0x660>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d116      	bne.n	8005698 <USB_EPStartXfer+0x660>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2250      	movs	r2, #80	@ 0x50
 800566e:	5a9b      	ldrh	r3, [r3, r2]
 8005670:	b29b      	uxth	r3, r3
 8005672:	001a      	movs	r2, r3
 8005674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005676:	189b      	adds	r3, r3, r2
 8005678:	643b      	str	r3, [r7, #64]	@ 0x40
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	00da      	lsls	r2, r3, #3
 8005680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005682:	18d3      	adds	r3, r2, r3
 8005684:	4a32      	ldr	r2, [pc, #200]	@ (8005750 <USB_EPStartXfer+0x718>)
 8005686:	4694      	mov	ip, r2
 8005688:	4463      	add	r3, ip
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568c:	23ac      	movs	r3, #172	@ 0xac
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	b29a      	uxth	r2, r3
 8005694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005696:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005698:	2076      	movs	r0, #118	@ 0x76
 800569a:	183b      	adds	r3, r7, r0
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	8952      	ldrh	r2, [r2, #10]
 80056a0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	23ac      	movs	r3, #172	@ 0xac
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	b29c      	uxth	r4, r3
 80056ae:	183b      	adds	r3, r7, r0
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	0023      	movs	r3, r4
 80056b6:	f000 fbdf 	bl	8005e78 <USB_WritePMA>
 80056ba:	e1ab      	b.n	8005a14 <USB_EPStartXfer+0x9dc>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	20ac      	movs	r0, #172	@ 0xac
 80056c2:	183a      	adds	r2, r7, r0
 80056c4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	18d3      	adds	r3, r2, r3
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	2462      	movs	r4, #98	@ 0x62
 80056d6:	193b      	adds	r3, r7, r4
 80056d8:	491e      	ldr	r1, [pc, #120]	@ (8005754 <USB_EPStartXfer+0x71c>)
 80056da:	400a      	ands	r2, r1
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	18d3      	adds	r3, r2, r3
 80056e8:	193a      	adds	r2, r7, r4
 80056ea:	8812      	ldrh	r2, [r2, #0]
 80056ec:	491a      	ldr	r1, [pc, #104]	@ (8005758 <USB_EPStartXfer+0x720>)
 80056ee:	430a      	orrs	r2, r1
 80056f0:	b292      	uxth	r2, r2
 80056f2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2250      	movs	r2, #80	@ 0x50
 80056fc:	5a9b      	ldrh	r3, [r3, r2]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	001a      	movs	r2, r3
 8005702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005704:	189b      	adds	r3, r3, r2
 8005706:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	00da      	lsls	r2, r3, #3
 800570e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005710:	18d3      	adds	r3, r2, r3
 8005712:	4a0d      	ldr	r2, [pc, #52]	@ (8005748 <USB_EPStartXfer+0x710>)
 8005714:	4694      	mov	ip, r2
 8005716:	4463      	add	r3, ip
 8005718:	65bb      	str	r3, [r7, #88]	@ 0x58
 800571a:	183b      	adds	r3, r7, r0
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	b29a      	uxth	r2, r3
 8005720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005722:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005724:	2576      	movs	r5, #118	@ 0x76
 8005726:	197b      	adds	r3, r7, r5
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	8912      	ldrh	r2, [r2, #8]
 800572c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6959      	ldr	r1, [r3, #20]
 8005732:	183b      	adds	r3, r7, r0
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b29c      	uxth	r4, r3
 8005738:	197b      	adds	r3, r7, r5
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	0023      	movs	r3, r4
 8005740:	f000 fb9a 	bl	8005e78 <USB_WritePMA>
 8005744:	e166      	b.n	8005a14 <USB_EPStartXfer+0x9dc>
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	00000402 	.word	0x00000402
 800574c:	ffff8000 	.word	0xffff8000
 8005750:	00000406 	.word	0x00000406
 8005754:	ffff8e8f 	.word	0xffff8e8f
 8005758:	ffff8080 	.word	0xffff8080
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	6a1a      	ldr	r2, [r3, #32]
 8005760:	21ac      	movs	r1, #172	@ 0xac
 8005762:	187b      	adds	r3, r7, r1
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	001a      	movs	r2, r3
 800577c:	2340      	movs	r3, #64	@ 0x40
 800577e:	4013      	ands	r3, r2
 8005780:	d100      	bne.n	8005784 <USB_EPStartXfer+0x74c>
 8005782:	e09f      	b.n	80058c4 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	673b      	str	r3, [r7, #112]	@ 0x70
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d16c      	bne.n	800586a <USB_EPStartXfer+0x832>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2250      	movs	r2, #80	@ 0x50
 8005798:	5a9b      	ldrh	r3, [r3, r2]
 800579a:	b29b      	uxth	r3, r3
 800579c:	001a      	movs	r2, r3
 800579e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057a0:	189b      	adds	r3, r3, r2
 80057a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	00da      	lsls	r2, r3, #3
 80057aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ac:	18d3      	adds	r3, r2, r3
 80057ae:	4ad2      	ldr	r2, [pc, #840]	@ (8005af8 <USB_EPStartXfer+0xac0>)
 80057b0:	4694      	mov	ip, r2
 80057b2:	4463      	add	r3, ip
 80057b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80057b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	059b      	lsls	r3, r3, #22
 80057be:	0d9b      	lsrs	r3, r3, #22
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d108      	bne.n	80057e0 <USB_EPStartXfer+0x7a8>
 80057ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4ac9      	ldr	r2, [pc, #804]	@ (8005afc <USB_EPStartXfer+0xac4>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e05f      	b.n	80058a0 <USB_EPStartXfer+0x868>
 80057e0:	22ac      	movs	r2, #172	@ 0xac
 80057e2:	18bb      	adds	r3, r7, r2
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80057e8:	d81d      	bhi.n	8005826 <USB_EPStartXfer+0x7ee>
 80057ea:	18bb      	adds	r3, r7, r2
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	085b      	lsrs	r3, r3, #1
 80057f0:	2198      	movs	r1, #152	@ 0x98
 80057f2:	1878      	adds	r0, r7, r1
 80057f4:	6003      	str	r3, [r0, #0]
 80057f6:	18bb      	adds	r3, r7, r2
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	4013      	ands	r3, r2
 80057fe:	d004      	beq.n	800580a <USB_EPStartXfer+0x7d2>
 8005800:	187b      	adds	r3, r7, r1
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	187a      	adds	r2, r7, r1
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29a      	uxth	r2, r3
 8005810:	2398      	movs	r3, #152	@ 0x98
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	029b      	lsls	r3, r3, #10
 800581a:	b29b      	uxth	r3, r3
 800581c:	4313      	orrs	r3, r2
 800581e:	b29a      	uxth	r2, r3
 8005820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	e03c      	b.n	80058a0 <USB_EPStartXfer+0x868>
 8005826:	22ac      	movs	r2, #172	@ 0xac
 8005828:	18bb      	adds	r3, r7, r2
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2198      	movs	r1, #152	@ 0x98
 8005830:	1878      	adds	r0, r7, r1
 8005832:	6003      	str	r3, [r0, #0]
 8005834:	18bb      	adds	r3, r7, r2
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	221f      	movs	r2, #31
 800583a:	4013      	ands	r3, r2
 800583c:	d104      	bne.n	8005848 <USB_EPStartXfer+0x810>
 800583e:	187b      	adds	r3, r7, r1
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3b01      	subs	r3, #1
 8005844:	187a      	adds	r2, r7, r1
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29a      	uxth	r2, r3
 800584e:	2398      	movs	r3, #152	@ 0x98
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	4313      	orrs	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	4aa7      	ldr	r2, [pc, #668]	@ (8005afc <USB_EPStartXfer+0xac4>)
 8005860:	4313      	orrs	r3, r2
 8005862:	b29a      	uxth	r2, r3
 8005864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e01a      	b.n	80058a0 <USB_EPStartXfer+0x868>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d116      	bne.n	80058a0 <USB_EPStartXfer+0x868>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2250      	movs	r2, #80	@ 0x50
 8005876:	5a9b      	ldrh	r3, [r3, r2]
 8005878:	b29b      	uxth	r3, r3
 800587a:	001a      	movs	r2, r3
 800587c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800587e:	189b      	adds	r3, r3, r2
 8005880:	673b      	str	r3, [r7, #112]	@ 0x70
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	00da      	lsls	r2, r3, #3
 8005888:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	4a9a      	ldr	r2, [pc, #616]	@ (8005af8 <USB_EPStartXfer+0xac0>)
 800588e:	4694      	mov	ip, r2
 8005890:	4463      	add	r3, ip
 8005892:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005894:	23ac      	movs	r3, #172	@ 0xac
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	b29a      	uxth	r2, r3
 800589c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800589e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058a0:	2076      	movs	r0, #118	@ 0x76
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	8952      	ldrh	r2, [r2, #10]
 80058a8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6959      	ldr	r1, [r3, #20]
 80058ae:	23ac      	movs	r3, #172	@ 0xac
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	b29c      	uxth	r4, r3
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	881a      	ldrh	r2, [r3, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	0023      	movs	r3, r4
 80058be:	f000 fadb 	bl	8005e78 <USB_WritePMA>
 80058c2:	e0a7      	b.n	8005a14 <USB_EPStartXfer+0x9dc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d16d      	bne.n	80059a8 <USB_EPStartXfer+0x970>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2250      	movs	r2, #80	@ 0x50
 80058d4:	5a9b      	ldrh	r3, [r3, r2]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	001a      	movs	r2, r3
 80058da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058dc:	189b      	adds	r3, r3, r2
 80058de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	00da      	lsls	r2, r3, #3
 80058e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058e8:	18d3      	adds	r3, r2, r3
 80058ea:	4a85      	ldr	r2, [pc, #532]	@ (8005b00 <USB_EPStartXfer+0xac8>)
 80058ec:	4694      	mov	ip, r2
 80058ee:	4463      	add	r3, ip
 80058f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	059b      	lsls	r3, r3, #22
 80058fa:	0d9b      	lsrs	r3, r3, #22
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	23ac      	movs	r3, #172	@ 0xac
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d108      	bne.n	800591e <USB_EPStartXfer+0x8e6>
 800590c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	4a7a      	ldr	r2, [pc, #488]	@ (8005afc <USB_EPStartXfer+0xac4>)
 8005914:	4313      	orrs	r3, r2
 8005916:	b29a      	uxth	r2, r3
 8005918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800591a:	801a      	strh	r2, [r3, #0]
 800591c:	e069      	b.n	80059f2 <USB_EPStartXfer+0x9ba>
 800591e:	22ac      	movs	r2, #172	@ 0xac
 8005920:	18bb      	adds	r3, r7, r2
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b3e      	cmp	r3, #62	@ 0x3e
 8005926:	d81d      	bhi.n	8005964 <USB_EPStartXfer+0x92c>
 8005928:	18bb      	adds	r3, r7, r2
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	2194      	movs	r1, #148	@ 0x94
 8005930:	1878      	adds	r0, r7, r1
 8005932:	6003      	str	r3, [r0, #0]
 8005934:	18bb      	adds	r3, r7, r2
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2201      	movs	r2, #1
 800593a:	4013      	ands	r3, r2
 800593c:	d004      	beq.n	8005948 <USB_EPStartXfer+0x910>
 800593e:	187b      	adds	r3, r7, r1
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	187a      	adds	r2, r7, r1
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29a      	uxth	r2, r3
 800594e:	2394      	movs	r3, #148	@ 0x94
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	029b      	lsls	r3, r3, #10
 8005958:	b29b      	uxth	r3, r3
 800595a:	4313      	orrs	r3, r2
 800595c:	b29a      	uxth	r2, r3
 800595e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e046      	b.n	80059f2 <USB_EPStartXfer+0x9ba>
 8005964:	22ac      	movs	r2, #172	@ 0xac
 8005966:	18bb      	adds	r3, r7, r2
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2194      	movs	r1, #148	@ 0x94
 800596e:	1878      	adds	r0, r7, r1
 8005970:	6003      	str	r3, [r0, #0]
 8005972:	18bb      	adds	r3, r7, r2
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	221f      	movs	r2, #31
 8005978:	4013      	ands	r3, r2
 800597a:	d104      	bne.n	8005986 <USB_EPStartXfer+0x94e>
 800597c:	187b      	adds	r3, r7, r1
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3b01      	subs	r3, #1
 8005982:	187a      	adds	r2, r7, r1
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29a      	uxth	r2, r3
 800598c:	2394      	movs	r3, #148	@ 0x94
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	029b      	lsls	r3, r3, #10
 8005996:	b29b      	uxth	r3, r3
 8005998:	4313      	orrs	r3, r2
 800599a:	b29b      	uxth	r3, r3
 800599c:	4a57      	ldr	r2, [pc, #348]	@ (8005afc <USB_EPStartXfer+0xac4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	e024      	b.n	80059f2 <USB_EPStartXfer+0x9ba>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d120      	bne.n	80059f2 <USB_EPStartXfer+0x9ba>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2184      	movs	r1, #132	@ 0x84
 80059b4:	187a      	adds	r2, r7, r1
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2250      	movs	r2, #80	@ 0x50
 80059bc:	5a9b      	ldrh	r3, [r3, r2]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	001a      	movs	r2, r3
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	189b      	adds	r3, r3, r2
 80059c8:	187a      	adds	r2, r7, r1
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	00da      	lsls	r2, r3, #3
 80059d2:	187b      	adds	r3, r7, r1
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	18d3      	adds	r3, r2, r3
 80059d8:	4a49      	ldr	r2, [pc, #292]	@ (8005b00 <USB_EPStartXfer+0xac8>)
 80059da:	4694      	mov	ip, r2
 80059dc:	4463      	add	r3, ip
 80059de:	2180      	movs	r1, #128	@ 0x80
 80059e0:	187a      	adds	r2, r7, r1
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	23ac      	movs	r3, #172	@ 0xac
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	187b      	adds	r3, r7, r1
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059f2:	2076      	movs	r0, #118	@ 0x76
 80059f4:	183b      	adds	r3, r7, r0
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	8912      	ldrh	r2, [r2, #8]
 80059fa:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6959      	ldr	r1, [r3, #20]
 8005a00:	23ac      	movs	r3, #172	@ 0xac
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	b29c      	uxth	r4, r3
 8005a08:	183b      	adds	r3, r7, r0
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	0023      	movs	r3, r4
 8005a10:	f000 fa32 	bl	8005e78 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	18d3      	adds	r3, r2, r3
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	200a      	movs	r0, #10
 8005a24:	183b      	adds	r3, r7, r0
 8005a26:	4937      	ldr	r1, [pc, #220]	@ (8005b04 <USB_EPStartXfer+0xacc>)
 8005a28:	400a      	ands	r2, r1
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	183b      	adds	r3, r7, r0
 8005a2e:	183a      	adds	r2, r7, r0
 8005a30:	8812      	ldrh	r2, [r2, #0]
 8005a32:	2110      	movs	r1, #16
 8005a34:	404a      	eors	r2, r1
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	183b      	adds	r3, r7, r0
 8005a3a:	183a      	adds	r2, r7, r0
 8005a3c:	8812      	ldrh	r2, [r2, #0]
 8005a3e:	2120      	movs	r1, #32
 8005a40:	404a      	eors	r2, r1
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	18d3      	adds	r3, r2, r3
 8005a4e:	183a      	adds	r2, r7, r0
 8005a50:	8812      	ldrh	r2, [r2, #0]
 8005a52:	492d      	ldr	r1, [pc, #180]	@ (8005b08 <USB_EPStartXfer+0xad0>)
 8005a54:	430a      	orrs	r2, r1
 8005a56:	b292      	uxth	r2, r2
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	e0cc      	b.n	8005bf6 <USB_EPStartXfer+0xbbe>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	7b1b      	ldrb	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d159      	bne.n	8005b18 <USB_EPStartXfer+0xae0>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11b      	bne.n	8005aa4 <USB_EPStartXfer+0xa6c>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	78db      	ldrb	r3, [r3, #3]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d117      	bne.n	8005aa4 <USB_EPStartXfer+0xa6c>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	18d3      	adds	r3, r2, r3
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	208e      	movs	r0, #142	@ 0x8e
 8005a84:	183b      	adds	r3, r7, r0
 8005a86:	4921      	ldr	r1, [pc, #132]	@ (8005b0c <USB_EPStartXfer+0xad4>)
 8005a88:	400a      	ands	r2, r1
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	18d3      	adds	r3, r2, r3
 8005a96:	183a      	adds	r2, r7, r0
 8005a98:	8812      	ldrh	r2, [r2, #0]
 8005a9a:	491d      	ldr	r1, [pc, #116]	@ (8005b10 <USB_EPStartXfer+0xad8>)
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	b292      	uxth	r2, r2
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e016      	b.n	8005ad2 <USB_EPStartXfer+0xa9a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	18d3      	adds	r3, r2, r3
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	208c      	movs	r0, #140	@ 0x8c
 8005ab4:	183b      	adds	r3, r7, r0
 8005ab6:	4917      	ldr	r1, [pc, #92]	@ (8005b14 <USB_EPStartXfer+0xadc>)
 8005ab8:	400a      	ands	r2, r1
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	18d3      	adds	r3, r2, r3
 8005ac6:	183a      	adds	r2, r7, r0
 8005ac8:	8812      	ldrh	r2, [r2, #0]
 8005aca:	490f      	ldr	r1, [pc, #60]	@ (8005b08 <USB_EPStartXfer+0xad0>)
 8005acc:	430a      	orrs	r2, r1
 8005ace:	b292      	uxth	r2, r2
 8005ad0:	801a      	strh	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d907      	bls.n	8005aee <USB_EPStartXfer+0xab6>
      {
        ep->xfer_len -= ep->maxpacket;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	619a      	str	r2, [r3, #24]
 8005aec:	e05e      	b.n	8005bac <USB_EPStartXfer+0xb74>
      }
      else
      {
        ep->xfer_len = 0U;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2200      	movs	r2, #0
 8005af2:	619a      	str	r2, [r3, #24]
 8005af4:	e05a      	b.n	8005bac <USB_EPStartXfer+0xb74>
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	00000406 	.word	0x00000406
 8005afc:	ffff8000 	.word	0xffff8000
 8005b00:	00000402 	.word	0x00000402
 8005b04:	ffff8fbf 	.word	0xffff8fbf
 8005b08:	ffff8080 	.word	0xffff8080
 8005b0c:	ffff8f8f 	.word	0xffff8f8f
 8005b10:	ffff8180 	.word	0xffff8180
 8005b14:	ffff8e8f 	.word	0xffff8e8f
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	78db      	ldrb	r3, [r3, #3]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d13b      	bne.n	8005b98 <USB_EPStartXfer+0xb60>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d041      	beq.n	8005bac <USB_EPStartXfer+0xb74>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	2192      	movs	r1, #146	@ 0x92
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	2380      	movs	r3, #128	@ 0x80
 8005b40:	01db      	lsls	r3, r3, #7
 8005b42:	4013      	ands	r3, r2
 8005b44:	d004      	beq.n	8005b50 <USB_EPStartXfer+0xb18>
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	2240      	movs	r2, #64	@ 0x40
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d10b      	bne.n	8005b68 <USB_EPStartXfer+0xb30>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b50:	2192      	movs	r1, #146	@ 0x92
 8005b52:	187b      	adds	r3, r7, r1
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	2380      	movs	r3, #128	@ 0x80
 8005b58:	01db      	lsls	r3, r3, #7
 8005b5a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b5c:	d126      	bne.n	8005bac <USB_EPStartXfer+0xb74>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b5e:	187b      	adds	r3, r7, r1
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	2240      	movs	r2, #64	@ 0x40
 8005b64:	4013      	ands	r3, r2
 8005b66:	d121      	bne.n	8005bac <USB_EPStartXfer+0xb74>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	18d3      	adds	r3, r2, r3
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	2090      	movs	r0, #144	@ 0x90
 8005b78:	183b      	adds	r3, r7, r0
 8005b7a:	4921      	ldr	r1, [pc, #132]	@ (8005c00 <USB_EPStartXfer+0xbc8>)
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	18d3      	adds	r3, r2, r3
 8005b8a:	183a      	adds	r2, r7, r0
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	491d      	ldr	r1, [pc, #116]	@ (8005c04 <USB_EPStartXfer+0xbcc>)
 8005b90:	430a      	orrs	r2, r1
 8005b92:	b292      	uxth	r2, r2
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e009      	b.n	8005bac <USB_EPStartXfer+0xb74>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	78db      	ldrb	r3, [r3, #3]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d103      	bne.n	8005ba8 <USB_EPStartXfer+0xb70>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	619a      	str	r2, [r3, #24]
 8005ba6:	e001      	b.n	8005bac <USB_EPStartXfer+0xb74>
      }
      else
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e025      	b.n	8005bf8 <USB_EPStartXfer+0xbc0>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	208a      	movs	r0, #138	@ 0x8a
 8005bbc:	183b      	adds	r3, r7, r0
 8005bbe:	4912      	ldr	r1, [pc, #72]	@ (8005c08 <USB_EPStartXfer+0xbd0>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	183b      	adds	r3, r7, r0
 8005bc6:	183a      	adds	r2, r7, r0
 8005bc8:	8812      	ldrh	r2, [r2, #0]
 8005bca:	2180      	movs	r1, #128	@ 0x80
 8005bcc:	0149      	lsls	r1, r1, #5
 8005bce:	404a      	eors	r2, r1
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	183b      	adds	r3, r7, r0
 8005bd4:	183a      	adds	r2, r7, r0
 8005bd6:	8812      	ldrh	r2, [r2, #0]
 8005bd8:	2180      	movs	r1, #128	@ 0x80
 8005bda:	0189      	lsls	r1, r1, #6
 8005bdc:	404a      	eors	r2, r1
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	18d3      	adds	r3, r2, r3
 8005bea:	183a      	adds	r2, r7, r0
 8005bec:	8812      	ldrh	r2, [r2, #0]
 8005bee:	4907      	ldr	r1, [pc, #28]	@ (8005c0c <USB_EPStartXfer+0xbd4>)
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	b292      	uxth	r2, r2
 8005bf4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b02c      	add	sp, #176	@ 0xb0
 8005bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8005c00:	ffff8f8f 	.word	0xffff8f8f
 8005c04:	ffff80c0 	.word	0xffff80c0
 8005c08:	ffffbf8f 	.word	0xffffbf8f
 8005c0c:	ffff8080 	.word	0xffff8080

08005c10 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01d      	beq.n	8005c5e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	200c      	movs	r0, #12
 8005c32:	183b      	adds	r3, r7, r0
 8005c34:	491b      	ldr	r1, [pc, #108]	@ (8005ca4 <USB_EPSetStall+0x94>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	183b      	adds	r3, r7, r0
 8005c3c:	183a      	adds	r2, r7, r0
 8005c3e:	8812      	ldrh	r2, [r2, #0]
 8005c40:	2110      	movs	r1, #16
 8005c42:	404a      	eors	r2, r1
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	18d3      	adds	r3, r2, r3
 8005c50:	183a      	adds	r2, r7, r0
 8005c52:	8812      	ldrh	r2, [r2, #0]
 8005c54:	4914      	ldr	r1, [pc, #80]	@ (8005ca8 <USB_EPSetStall+0x98>)
 8005c56:	430a      	orrs	r2, r1
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e01d      	b.n	8005c9a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	18d3      	adds	r3, r2, r3
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	200e      	movs	r0, #14
 8005c6e:	183b      	adds	r3, r7, r0
 8005c70:	490e      	ldr	r1, [pc, #56]	@ (8005cac <USB_EPSetStall+0x9c>)
 8005c72:	400a      	ands	r2, r1
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	183b      	adds	r3, r7, r0
 8005c78:	183a      	adds	r2, r7, r0
 8005c7a:	8812      	ldrh	r2, [r2, #0]
 8005c7c:	2180      	movs	r1, #128	@ 0x80
 8005c7e:	0149      	lsls	r1, r1, #5
 8005c80:	404a      	eors	r2, r1
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	18d3      	adds	r3, r2, r3
 8005c8e:	183a      	adds	r2, r7, r0
 8005c90:	8812      	ldrh	r2, [r2, #0]
 8005c92:	4905      	ldr	r1, [pc, #20]	@ (8005ca8 <USB_EPSetStall+0x98>)
 8005c94:	430a      	orrs	r2, r1
 8005c96:	b292      	uxth	r2, r2
 8005c98:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b004      	add	sp, #16
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	ffff8fbf 	.word	0xffff8fbf
 8005ca8:	ffff8080 	.word	0xffff8080
 8005cac:	ffffbf8f 	.word	0xffffbf8f

08005cb0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d046      	beq.n	8005d50 <USB_EPClearStall+0xa0>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	18d2      	adds	r2, r2, r3
 8005ccc:	2110      	movs	r1, #16
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	8812      	ldrh	r2, [r2, #0]
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	187b      	adds	r3, r7, r1
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	2240      	movs	r2, #64	@ 0x40
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d016      	beq.n	8005d0c <USB_EPClearStall+0x5c>
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	18d3      	adds	r3, r2, r3
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	200e      	movs	r0, #14
 8005cee:	183b      	adds	r3, r7, r0
 8005cf0:	493f      	ldr	r1, [pc, #252]	@ (8005df0 <USB_EPClearStall+0x140>)
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	18d3      	adds	r3, r2, r3
 8005d00:	183a      	adds	r2, r7, r0
 8005d02:	8812      	ldrh	r2, [r2, #0]
 8005d04:	493b      	ldr	r1, [pc, #236]	@ (8005df4 <USB_EPClearStall+0x144>)
 8005d06:	430a      	orrs	r2, r1
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	801a      	strh	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	78db      	ldrb	r3, [r3, #3]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d068      	beq.n	8005de6 <USB_EPClearStall+0x136>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	18d3      	adds	r3, r2, r3
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	200c      	movs	r0, #12
 8005d24:	183b      	adds	r3, r7, r0
 8005d26:	4934      	ldr	r1, [pc, #208]	@ (8005df8 <USB_EPClearStall+0x148>)
 8005d28:	400a      	ands	r2, r1
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	183b      	adds	r3, r7, r0
 8005d2e:	183a      	adds	r2, r7, r0
 8005d30:	8812      	ldrh	r2, [r2, #0]
 8005d32:	2120      	movs	r1, #32
 8005d34:	404a      	eors	r2, r1
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	18d3      	adds	r3, r2, r3
 8005d42:	183a      	adds	r2, r7, r0
 8005d44:	8812      	ldrh	r2, [r2, #0]
 8005d46:	492d      	ldr	r1, [pc, #180]	@ (8005dfc <USB_EPClearStall+0x14c>)
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	e04a      	b.n	8005de6 <USB_EPClearStall+0x136>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	18d2      	adds	r2, r2, r3
 8005d5a:	2116      	movs	r1, #22
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	8812      	ldrh	r2, [r2, #0]
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	187b      	adds	r3, r7, r1
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	2380      	movs	r3, #128	@ 0x80
 8005d68:	01db      	lsls	r3, r3, #7
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d016      	beq.n	8005d9c <USB_EPClearStall+0xec>
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	18d3      	adds	r3, r2, r3
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	2014      	movs	r0, #20
 8005d7e:	183b      	adds	r3, r7, r0
 8005d80:	491b      	ldr	r1, [pc, #108]	@ (8005df0 <USB_EPClearStall+0x140>)
 8005d82:	400a      	ands	r2, r1
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	18d3      	adds	r3, r2, r3
 8005d90:	183a      	adds	r2, r7, r0
 8005d92:	8812      	ldrh	r2, [r2, #0]
 8005d94:	491a      	ldr	r1, [pc, #104]	@ (8005e00 <USB_EPClearStall+0x150>)
 8005d96:	430a      	orrs	r2, r1
 8005d98:	b292      	uxth	r2, r2
 8005d9a:	801a      	strh	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	2012      	movs	r0, #18
 8005dac:	183b      	adds	r3, r7, r0
 8005dae:	4915      	ldr	r1, [pc, #84]	@ (8005e04 <USB_EPClearStall+0x154>)
 8005db0:	400a      	ands	r2, r1
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	183b      	adds	r3, r7, r0
 8005db6:	183a      	adds	r2, r7, r0
 8005db8:	8812      	ldrh	r2, [r2, #0]
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	0149      	lsls	r1, r1, #5
 8005dbe:	404a      	eors	r2, r1
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	183b      	adds	r3, r7, r0
 8005dc4:	183a      	adds	r2, r7, r0
 8005dc6:	8812      	ldrh	r2, [r2, #0]
 8005dc8:	2180      	movs	r1, #128	@ 0x80
 8005dca:	0189      	lsls	r1, r1, #6
 8005dcc:	404a      	eors	r2, r1
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	18d3      	adds	r3, r2, r3
 8005dda:	183a      	adds	r2, r7, r0
 8005ddc:	8812      	ldrh	r2, [r2, #0]
 8005dde:	4907      	ldr	r1, [pc, #28]	@ (8005dfc <USB_EPClearStall+0x14c>)
 8005de0:	430a      	orrs	r2, r1
 8005de2:	b292      	uxth	r2, r2
 8005de4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	0018      	movs	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b006      	add	sp, #24
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	ffff8f8f 	.word	0xffff8f8f
 8005df4:	ffff80c0 	.word	0xffff80c0
 8005df8:	ffff8fbf 	.word	0xffff8fbf
 8005dfc:	ffff8080 	.word	0xffff8080
 8005e00:	ffffc080 	.word	0xffffc080
 8005e04:	ffffbf8f 	.word	0xffffbf8f

08005e08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	000a      	movs	r2, r1
 8005e12:	1cfb      	adds	r3, r7, #3
 8005e14:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005e16:	1cfb      	adds	r3, r7, #3
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	224c      	movs	r2, #76	@ 0x4c
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2258      	movs	r2, #88	@ 0x58
 8005e3c:	5a9b      	ldrh	r3, [r3, r2]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	4a05      	ldr	r2, [pc, #20]	@ (8005e58 <USB_DevConnect+0x28>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	b299      	uxth	r1, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2258      	movs	r2, #88	@ 0x58
 8005e4a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	0018      	movs	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b002      	add	sp, #8
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	ffff8000 	.word	0xffff8000

08005e5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2244      	movs	r2, #68	@ 0x44
 8005e68:	5a9b      	ldrh	r3, [r3, r2]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b004      	add	sp, #16
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	0019      	movs	r1, r3
 8005e84:	1dbb      	adds	r3, r7, #6
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	1c0a      	adds	r2, r1, #0
 8005e8c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	3301      	adds	r3, #1
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ea0:	1dbb      	adds	r3, r7, #6
 8005ea2:	881a      	ldrh	r2, [r3, #0]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	18d3      	adds	r3, r2, r3
 8005ea8:	2280      	movs	r2, #128	@ 0x80
 8005eaa:	00d2      	lsls	r2, r2, #3
 8005eac:	4694      	mov	ip, r2
 8005eae:	4463      	add	r3, ip
 8005eb0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb6:	e021      	b.n	8005efc <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	2112      	movs	r1, #18
 8005ebe:	187b      	adds	r3, r7, r1
 8005ec0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	b21a      	sxth	r2, r3
 8005ece:	187b      	adds	r3, r7, r1
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	5e1b      	ldrsh	r3, [r3, r0]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	b21a      	sxth	r2, r3
 8005ed8:	187b      	adds	r3, r7, r1
 8005eda:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	187a      	adds	r2, r7, r1
 8005ee0:	8812      	ldrh	r2, [r2, #0]
 8005ee2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1da      	bne.n	8005eb8 <USB_WritePMA+0x40>
  }
}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	46c0      	nop			@ (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b00a      	add	sp, #40	@ 0x28
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	@ 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	0019      	movs	r1, r3
 8005f18:	1dbb      	adds	r3, r7, #6
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	1d3b      	adds	r3, r7, #4
 8005f1e:	1c0a      	adds	r2, r1, #0
 8005f20:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f22:	1d3b      	adds	r3, r7, #4
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f34:	1dbb      	adds	r3, r7, #6
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	18d3      	adds	r3, r2, r3
 8005f3c:	2280      	movs	r2, #128	@ 0x80
 8005f3e:	00d2      	lsls	r2, r2, #3
 8005f40:	4694      	mov	ip, r2
 8005f42:	4463      	add	r3, ip
 8005f44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4a:	e018      	b.n	8005f7e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	3302      	adds	r3, #2
 8005f58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3301      	adds	r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	0a1b      	lsrs	r3, r3, #8
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	3301      	adds	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e3      	bne.n	8005f4c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	701a      	strb	r2, [r3, #0]
  }
}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b00a      	add	sp, #40	@ 0x28
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	000a      	movs	r2, r1
 8005fb4:	1cfb      	adds	r3, r7, #3
 8005fb6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005fb8:	230f      	movs	r3, #15
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7c1b      	ldrb	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d116      	bne.n	8005ff6 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	2181      	movs	r1, #129	@ 0x81
 8005fd2:	f002 f884 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fdc:	2380      	movs	r3, #128	@ 0x80
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	f002 f87a 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	23b6      	movs	r3, #182	@ 0xb6
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	50d1      	str	r1, [r2, r3]
 8005ff4:	e013      	b.n	800601e <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	2340      	movs	r3, #64	@ 0x40
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	2181      	movs	r1, #129	@ 0x81
 8005ffe:	f002 f86e 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	2340      	movs	r3, #64	@ 0x40
 800600c:	2202      	movs	r2, #2
 800600e:	2101      	movs	r1, #1
 8006010:	f002 f865 	bl	80080de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	23b6      	movs	r3, #182	@ 0xb6
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	2101      	movs	r1, #1
 800601c:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	2308      	movs	r3, #8
 8006022:	2203      	movs	r2, #3
 8006024:	2182      	movs	r1, #130	@ 0x82
 8006026:	f002 f85a 	bl	80080de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006030:	2387      	movs	r3, #135	@ 0x87
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	0018      	movs	r0, r3
 8006036:	f002 f9e9 	bl	800840c <USBD_static_malloc>
 800603a:	0001      	movs	r1, r0
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	23ae      	movs	r3, #174	@ 0xae
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	23ae      	movs	r3, #174	@ 0xae
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	58d3      	ldr	r3, [r2, r3]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8006050:	230f      	movs	r3, #15
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e02c      	b.n	80060b4 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	23ae      	movs	r3, #174	@ 0xae
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	58d3      	ldr	r3, [r2, r3]
 8006062:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	23af      	movs	r3, #175	@ 0xaf
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	58d3      	ldr	r3, [r2, r3]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	2385      	movs	r3, #133	@ 0x85
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	2100      	movs	r1, #0
 8006078:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	2386      	movs	r3, #134	@ 0x86
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	2100      	movs	r1, #0
 8006082:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7c1b      	ldrb	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	2381      	movs	r3, #129	@ 0x81
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	58d2      	ldr	r2, [r2, r3]
 8006094:	2380      	movs	r3, #128	@ 0x80
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	2101      	movs	r1, #1
 800609c:	f002 f969 	bl	8008372 <USBD_LL_PrepareReceive>
 80060a0:	e008      	b.n	80060b4 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	2381      	movs	r3, #129	@ 0x81
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	58d2      	ldr	r2, [r2, r3]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	2340      	movs	r3, #64	@ 0x40
 80060ae:	2101      	movs	r1, #1
 80060b0:	f002 f95f 	bl	8008372 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80060b4:	230f      	movs	r3, #15
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	000a      	movs	r2, r1
 80060cc:	1cfb      	adds	r3, r7, #3
 80060ce:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80060d0:	230f      	movs	r3, #15
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2181      	movs	r1, #129	@ 0x81
 80060dc:	0018      	movs	r0, r3
 80060de:	f002 f835 	bl	800814c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2101      	movs	r1, #1
 80060ec:	0018      	movs	r0, r3
 80060ee:	f002 f82d 	bl	800814c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	23b6      	movs	r3, #182	@ 0xb6
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	2100      	movs	r1, #0
 80060fa:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2182      	movs	r1, #130	@ 0x82
 8006100:	0018      	movs	r0, r3
 8006102:	f002 f823 	bl	800814c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	23ae      	movs	r3, #174	@ 0xae
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	58d3      	ldr	r3, [r2, r3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d011      	beq.n	800613c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	23af      	movs	r3, #175	@ 0xaf
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	58d3      	ldr	r3, [r2, r3]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	23ae      	movs	r3, #174	@ 0xae
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	58d3      	ldr	r3, [r2, r3]
 800612c:	0018      	movs	r0, r3
 800612e:	f002 f979 	bl	8008424 <USBD_static_free>
    pdev->pClassData = NULL;
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	23ae      	movs	r3, #174	@ 0xae
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	2100      	movs	r1, #0
 800613a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800613c:	230f      	movs	r3, #15
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	781b      	ldrb	r3, [r3, #0]
}
 8006142:	0018      	movs	r0, r3
 8006144:	46bd      	mov	sp, r7
 8006146:	b004      	add	sp, #16
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	23ae      	movs	r3, #174	@ 0xae
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	58d3      	ldr	r3, [r2, r3]
 800615e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006160:	230f      	movs	r3, #15
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8006168:	230c      	movs	r3, #12
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	2200      	movs	r2, #0
 800616e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8006170:	2317      	movs	r3, #23
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	001a      	movs	r2, r3
 800617e:	2360      	movs	r3, #96	@ 0x60
 8006180:	4013      	ands	r3, r2
 8006182:	d03d      	beq.n	8006200 <USBD_CDC_Setup+0xb4>
 8006184:	2b20      	cmp	r3, #32
 8006186:	d000      	beq.n	800618a <USBD_CDC_Setup+0x3e>
 8006188:	e094      	b.n	80062b4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	88db      	ldrh	r3, [r3, #6]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d02b      	beq.n	80061ea <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b25b      	sxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	da12      	bge.n	80061c2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	23af      	movs	r3, #175	@ 0xaf
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	58d3      	ldr	r3, [r2, r3]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80061aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	88d2      	ldrh	r2, [r2, #6]
 80061b0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061b2:	6939      	ldr	r1, [r7, #16]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	88da      	ldrh	r2, [r3, #6]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	0018      	movs	r0, r3
 80061bc:	f001 fbaf 	bl	800791e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80061c0:	e083      	b.n	80062ca <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	7859      	ldrb	r1, [r3, #1]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	2380      	movs	r3, #128	@ 0x80
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	88db      	ldrh	r3, [r3, #6]
 80061d2:	b2d9      	uxtb	r1, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4a40      	ldr	r2, [pc, #256]	@ (80062d8 <USBD_CDC_Setup+0x18c>)
 80061d8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061da:	6939      	ldr	r1, [r7, #16]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	88da      	ldrh	r2, [r3, #6]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f001 fbce 	bl	8007984 <USBD_CtlPrepareRx>
      break;
 80061e8:	e06f      	b.n	80062ca <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	23af      	movs	r3, #175	@ 0xaf
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	58d3      	ldr	r3, [r2, r3]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	7850      	ldrb	r0, [r2, #1]
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	4798      	blx	r3
      break;
 80061fe:	e064      	b.n	80062ca <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b0b      	cmp	r3, #11
 8006206:	d037      	beq.n	8006278 <USBD_CDC_Setup+0x12c>
 8006208:	dc47      	bgt.n	800629a <USBD_CDC_Setup+0x14e>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <USBD_CDC_Setup+0xc8>
 800620e:	2b0a      	cmp	r3, #10
 8006210:	d019      	beq.n	8006246 <USBD_CDC_Setup+0xfa>
 8006212:	e042      	b.n	800629a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	23a7      	movs	r3, #167	@ 0xa7
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	5cd3      	ldrb	r3, [r2, r3]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d107      	bne.n	8006230 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006220:	230c      	movs	r3, #12
 8006222:	18f9      	adds	r1, r7, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	0018      	movs	r0, r3
 800622a:	f001 fb78 	bl	800791e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800622e:	e040      	b.n	80062b2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	0011      	movs	r1, r2
 8006236:	0018      	movs	r0, r3
 8006238:	f001 faf3 	bl	8007822 <USBD_CtlError>
            ret = USBD_FAIL;
 800623c:	2317      	movs	r3, #23
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	2202      	movs	r2, #2
 8006242:	701a      	strb	r2, [r3, #0]
          break;
 8006244:	e035      	b.n	80062b2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	23a7      	movs	r3, #167	@ 0xa7
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	5cd3      	ldrb	r3, [r2, r3]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d107      	bne.n	8006262 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006252:	230f      	movs	r3, #15
 8006254:	18f9      	adds	r1, r7, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	0018      	movs	r0, r3
 800625c:	f001 fb5f 	bl	800791e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006260:	e027      	b.n	80062b2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	0011      	movs	r1, r2
 8006268:	0018      	movs	r0, r3
 800626a:	f001 fada 	bl	8007822 <USBD_CtlError>
            ret = USBD_FAIL;
 800626e:	2317      	movs	r3, #23
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	2202      	movs	r2, #2
 8006274:	701a      	strb	r2, [r3, #0]
          break;
 8006276:	e01c      	b.n	80062b2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	23a7      	movs	r3, #167	@ 0xa7
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	5cd3      	ldrb	r3, [r2, r3]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d015      	beq.n	80062b0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0011      	movs	r1, r2
 800628a:	0018      	movs	r0, r3
 800628c:	f001 fac9 	bl	8007822 <USBD_CtlError>
            ret = USBD_FAIL;
 8006290:	2317      	movs	r3, #23
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	2202      	movs	r2, #2
 8006296:	701a      	strb	r2, [r3, #0]
          }
          break;
 8006298:	e00a      	b.n	80062b0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	0011      	movs	r1, r2
 80062a0:	0018      	movs	r0, r3
 80062a2:	f001 fabe 	bl	8007822 <USBD_CtlError>
          ret = USBD_FAIL;
 80062a6:	2317      	movs	r3, #23
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
          break;
 80062ae:	e000      	b.n	80062b2 <USBD_CDC_Setup+0x166>
          break;
 80062b0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80062b2:	e00a      	b.n	80062ca <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0011      	movs	r1, r2
 80062ba:	0018      	movs	r0, r3
 80062bc:	f001 fab1 	bl	8007822 <USBD_CtlError>
      ret = USBD_FAIL;
 80062c0:	2317      	movs	r3, #23
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	2202      	movs	r2, #2
 80062c6:	701a      	strb	r2, [r3, #0]
      break;
 80062c8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80062ca:	2317      	movs	r3, #23
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	781b      	ldrb	r3, [r3, #0]
}
 80062d0:	0018      	movs	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b006      	add	sp, #24
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	00000201 	.word	0x00000201

080062dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	000a      	movs	r2, r1
 80062e6:	1cfb      	adds	r3, r7, #3
 80062e8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	23ae      	movs	r3, #174	@ 0xae
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	58d3      	ldr	r3, [r2, r3]
 80062f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	23b0      	movs	r3, #176	@ 0xb0
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	58d3      	ldr	r3, [r2, r3]
 80062fc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	23ae      	movs	r3, #174	@ 0xae
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	58d3      	ldr	r3, [r2, r3]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03e      	beq.n	8006388 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800630a:	1cfb      	adds	r3, r7, #3
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	0013      	movs	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	189b      	adds	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	18cb      	adds	r3, r1, r3
 800631a:	331c      	adds	r3, #28
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02b      	beq.n	800637a <USBD_CDC_DataIn+0x9e>
 8006322:	1cfb      	adds	r3, r7, #3
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	0013      	movs	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	189b      	adds	r3, r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	18cb      	adds	r3, r1, r3
 8006332:	331c      	adds	r3, #28
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	1cfb      	adds	r3, r7, #3
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	0013      	movs	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	189b      	adds	r3, r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	18cb      	adds	r3, r1, r3
 8006346:	3320      	adds	r3, #32
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	0019      	movs	r1, r3
 800634c:	f7f9 ff74 	bl	8000238 <__aeabi_uidivmod>
 8006350:	1e0b      	subs	r3, r1, #0
 8006352:	d112      	bne.n	800637a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006354:	1cfb      	adds	r3, r7, #3
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	0013      	movs	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	189b      	adds	r3, r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	18cb      	adds	r3, r1, r3
 8006364:	331c      	adds	r3, #28
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800636a:	1cfb      	adds	r3, r7, #3
 800636c:	7819      	ldrb	r1, [r3, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	2300      	movs	r3, #0
 8006372:	2200      	movs	r2, #0
 8006374:	f001 ffc6 	bl	8008304 <USBD_LL_Transmit>
 8006378:	e004      	b.n	8006384 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	2385      	movs	r3, #133	@ 0x85
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	2100      	movs	r1, #0
 8006382:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	0018      	movs	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	b004      	add	sp, #16
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	000a      	movs	r2, r1
 800639c:	1cfb      	adds	r3, r7, #3
 800639e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	23ae      	movs	r3, #174	@ 0xae
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	58d3      	ldr	r3, [r2, r3]
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063aa:	1cfb      	adds	r3, r7, #3
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	0011      	movs	r1, r2
 80063b2:	0018      	movs	r0, r3
 80063b4:	f002 f814 	bl	80083e0 <USBD_LL_GetRxDataSize>
 80063b8:	0001      	movs	r1, r0
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	2383      	movs	r3, #131	@ 0x83
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	23ae      	movs	r3, #174	@ 0xae
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	58d3      	ldr	r3, [r2, r3]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d011      	beq.n	80063f2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	23af      	movs	r3, #175	@ 0xaf
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	58d3      	ldr	r3, [r2, r3]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	68f9      	ldr	r1, [r7, #12]
 80063da:	2381      	movs	r3, #129	@ 0x81
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	58c8      	ldr	r0, [r1, r3]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2183      	movs	r1, #131	@ 0x83
 80063e4:	0089      	lsls	r1, r1, #2
 80063e6:	468c      	mov	ip, r1
 80063e8:	4463      	add	r3, ip
 80063ea:	0019      	movs	r1, r3
 80063ec:	4790      	blx	r2

    return USBD_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e000      	b.n	80063f4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80063f2:	2302      	movs	r3, #2
  }
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b004      	add	sp, #16
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	23ae      	movs	r3, #174	@ 0xae
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	58d3      	ldr	r3, [r2, r3]
 800640c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	23af      	movs	r3, #175	@ 0xaf
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	58d3      	ldr	r3, [r2, r3]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d018      	beq.n	800644c <USBD_CDC_EP0_RxReady+0x50>
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	2380      	movs	r3, #128	@ 0x80
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	5cd3      	ldrb	r3, [r2, r3]
 8006422:	2bff      	cmp	r3, #255	@ 0xff
 8006424:	d012      	beq.n	800644c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	23af      	movs	r3, #175	@ 0xaf
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	58d3      	ldr	r3, [r2, r3]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	68f9      	ldr	r1, [r7, #12]
 8006432:	2280      	movs	r2, #128	@ 0x80
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8006438:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4c06      	ldr	r4, [pc, #24]	@ (8006458 <USBD_CDC_EP0_RxReady+0x5c>)
 800643e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006440:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	2380      	movs	r3, #128	@ 0x80
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	21ff      	movs	r1, #255	@ 0xff
 800644a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	0018      	movs	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	b005      	add	sp, #20
 8006454:	bd90      	pop	{r4, r7, pc}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	00000201 	.word	0x00000201

0800645c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2243      	movs	r2, #67	@ 0x43
 8006468:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800646a:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000094 	.word	0x20000094

08006478 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2243      	movs	r2, #67	@ 0x43
 8006484:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006486:	4b02      	ldr	r3, [pc, #8]	@ (8006490 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8006488:	0018      	movs	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	b002      	add	sp, #8
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20000050 	.word	0x20000050

08006494 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2243      	movs	r2, #67	@ 0x43
 80064a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80064a2:	4b02      	ldr	r3, [pc, #8]	@ (80064ac <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80064a4:	0018      	movs	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	200000d8 	.word	0x200000d8

080064b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	220a      	movs	r2, #10
 80064bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80064be:	4b02      	ldr	r3, [pc, #8]	@ (80064c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	2000000c 	.word	0x2000000c

080064cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80064d6:	200f      	movs	r0, #15
 80064d8:	183b      	adds	r3, r7, r0
 80064da:	2202      	movs	r2, #2
 80064dc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	23af      	movs	r3, #175	@ 0xaf
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80064ee:	183b      	adds	r3, r7, r0
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80064f4:	230f      	movs	r3, #15
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	781b      	ldrb	r3, [r3, #0]
}
 80064fa:	0018      	movs	r0, r3
 80064fc:	46bd      	mov	sp, r7
 80064fe:	b004      	add	sp, #16
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b086      	sub	sp, #24
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	1dbb      	adds	r3, r7, #6
 800650e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	23ae      	movs	r3, #174	@ 0xae
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	58d3      	ldr	r3, [r2, r3]
 8006518:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	2382      	movs	r3, #130	@ 0x82
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8006524:	1dbb      	adds	r3, r7, #6
 8006526:	8819      	ldrh	r1, [r3, #0]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	2384      	movs	r3, #132	@ 0x84
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	0018      	movs	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	b006      	add	sp, #24
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	23ae      	movs	r3, #174	@ 0xae
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	58d3      	ldr	r3, [r2, r3]
 800654c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	2381      	movs	r3, #129	@ 0x81
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	0018      	movs	r0, r3
 800655c:	46bd      	mov	sp, r7
 800655e:	b004      	add	sp, #16
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	23ae      	movs	r3, #174	@ 0xae
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	58d3      	ldr	r3, [r2, r3]
 8006572:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	23ae      	movs	r3, #174	@ 0xae
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	58d3      	ldr	r3, [r2, r3]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d022      	beq.n	80065c6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	2385      	movs	r3, #133	@ 0x85
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	58d3      	ldr	r3, [r2, r3]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11a      	bne.n	80065c2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	2385      	movs	r3, #133	@ 0x85
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	2101      	movs	r1, #1
 8006594:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	2384      	movs	r3, #132	@ 0x84
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	58d2      	ldr	r2, [r2, r3]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	2382      	movs	r3, #130	@ 0x82
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	2384      	movs	r3, #132	@ 0x84
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	000a      	movs	r2, r1
 80065b8:	2181      	movs	r1, #129	@ 0x81
 80065ba:	f001 fea3 	bl	8008304 <USBD_LL_Transmit>

      return USBD_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	e002      	b.n	80065c8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	0018      	movs	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	b004      	add	sp, #16
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	23ae      	movs	r3, #174	@ 0xae
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	58d3      	ldr	r3, [r2, r3]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	23ae      	movs	r3, #174	@ 0xae
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	58d3      	ldr	r3, [r2, r3]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d019      	beq.n	8006622 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7c1b      	ldrb	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	2381      	movs	r3, #129	@ 0x81
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	58d2      	ldr	r2, [r2, r3]
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	2101      	movs	r1, #1
 8006606:	f001 feb4 	bl	8008372 <USBD_LL_PrepareReceive>
 800660a:	e008      	b.n	800661e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	2381      	movs	r3, #129	@ 0x81
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	58d2      	ldr	r2, [r2, r3]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	2340      	movs	r3, #64	@ 0x40
 8006618:	2101      	movs	r1, #1
 800661a:	f001 feaa 	bl	8008372 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	e000      	b.n	8006624 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8006622:	2302      	movs	r3, #2
  }
}
 8006624:	0018      	movs	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	b004      	add	sp, #16
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	1dfb      	adds	r3, r7, #7
 8006638:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006640:	2302      	movs	r3, #2
 8006642:	e020      	b.n	8006686 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	23ad      	movs	r3, #173	@ 0xad
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	58d3      	ldr	r3, [r2, r3]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	23ad      	movs	r3, #173	@ 0xad
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	2100      	movs	r1, #0
 8006658:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	23ac      	movs	r3, #172	@ 0xac
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	23a7      	movs	r3, #167	@ 0xa7
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	2101      	movs	r1, #1
 8006672:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	1dfa      	adds	r2, r7, #7
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	0018      	movs	r0, r3
 8006680:	f001 fca4 	bl	8007fcc <USBD_LL_Init>

  return USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	0018      	movs	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	b004      	add	sp, #16
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006698:	200f      	movs	r0, #15
 800669a:	183b      	adds	r3, r7, r0
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	23ad      	movs	r3, #173	@ 0xad
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80066b0:	183b      	adds	r3, r7, r0
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e003      	b.n	80066c0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066b8:	230f      	movs	r3, #15
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	2202      	movs	r2, #2
 80066be:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80066c0:	230f      	movs	r3, #15
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	781b      	ldrb	r3, [r3, #0]
}
 80066c6:	0018      	movs	r0, r3
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b004      	add	sp, #16
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0018      	movs	r0, r3
 80066da:	f001 fcdb 	bl	8008094 <USBD_LL_Start>

  return USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	0018      	movs	r0, r3
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b002      	add	sp, #8
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066fa:	b590      	push	{r4, r7, lr}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	000a      	movs	r2, r1
 8006704:	1cfb      	adds	r3, r7, #3
 8006706:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006708:	240f      	movs	r4, #15
 800670a:	193b      	adds	r3, r7, r4
 800670c:	2202      	movs	r2, #2
 800670e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	23ad      	movs	r3, #173	@ 0xad
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	58d3      	ldr	r3, [r2, r3]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	23ad      	movs	r3, #173	@ 0xad
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	58d3      	ldr	r3, [r2, r3]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	1cfa      	adds	r2, r7, #3
 8006728:	7811      	ldrb	r1, [r2, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	0010      	movs	r0, r2
 800672e:	4798      	blx	r3
 8006730:	1e03      	subs	r3, r0, #0
 8006732:	d102      	bne.n	800673a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006734:	193b      	adds	r3, r7, r4
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800673a:	230f      	movs	r3, #15
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	781b      	ldrb	r3, [r3, #0]
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b005      	add	sp, #20
 8006746:	bd90      	pop	{r4, r7, pc}

08006748 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	000a      	movs	r2, r1
 8006752:	1cfb      	adds	r3, r7, #3
 8006754:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	23ad      	movs	r3, #173	@ 0xad
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	58d3      	ldr	r3, [r2, r3]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	1cfa      	adds	r2, r7, #3
 8006762:	7811      	ldrb	r1, [r2, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	0010      	movs	r0, r2
 8006768:	4798      	blx	r3

  return USBD_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	0018      	movs	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	b002      	add	sp, #8
 8006772:	bd80      	pop	{r7, pc}

08006774 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	22aa      	movs	r2, #170	@ 0xaa
 8006782:	0092      	lsls	r2, r2, #2
 8006784:	4694      	mov	ip, r2
 8006786:	4463      	add	r3, ip
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	0011      	movs	r1, r2
 800678c:	0018      	movs	r0, r3
 800678e:	f001 f810 	bl	80077b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	23a5      	movs	r3, #165	@ 0xa5
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	2101      	movs	r1, #1
 800679a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a23      	ldr	r2, [pc, #140]	@ (800682c <USBD_LL_SetupStage+0xb8>)
 80067a0:	5a9b      	ldrh	r3, [r3, r2]
 80067a2:	0019      	movs	r1, r3
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	23a6      	movs	r3, #166	@ 0xa6
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	23aa      	movs	r3, #170	@ 0xaa
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	5cd3      	ldrb	r3, [r2, r3]
 80067b4:	001a      	movs	r2, r3
 80067b6:	231f      	movs	r3, #31
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d019      	beq.n	80067f2 <USBD_LL_SetupStage+0x7e>
 80067be:	d822      	bhi.n	8006806 <USBD_LL_SetupStage+0x92>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <USBD_LL_SetupStage+0x56>
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d00a      	beq.n	80067de <USBD_LL_SetupStage+0x6a>
 80067c8:	e01d      	b.n	8006806 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	22aa      	movs	r2, #170	@ 0xaa
 80067ce:	0092      	lsls	r2, r2, #2
 80067d0:	189a      	adds	r2, r3, r2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	0011      	movs	r1, r2
 80067d6:	0018      	movs	r0, r3
 80067d8:	f000 fa10 	bl	8006bfc <USBD_StdDevReq>
      break;
 80067dc:	e020      	b.n	8006820 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	22aa      	movs	r2, #170	@ 0xaa
 80067e2:	0092      	lsls	r2, r2, #2
 80067e4:	189a      	adds	r2, r3, r2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0011      	movs	r1, r2
 80067ea:	0018      	movs	r0, r3
 80067ec:	f000 fa78 	bl	8006ce0 <USBD_StdItfReq>
      break;
 80067f0:	e016      	b.n	8006820 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	22aa      	movs	r2, #170	@ 0xaa
 80067f6:	0092      	lsls	r2, r2, #2
 80067f8:	189a      	adds	r2, r3, r2
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0011      	movs	r1, r2
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 fac5 	bl	8006d8e <USBD_StdEPReq>
      break;
 8006804:	e00c      	b.n	8006820 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	23aa      	movs	r3, #170	@ 0xaa
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	5cd3      	ldrb	r3, [r2, r3]
 800680e:	227f      	movs	r2, #127	@ 0x7f
 8006810:	4393      	bics	r3, r2
 8006812:	b2da      	uxtb	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	0011      	movs	r1, r2
 8006818:	0018      	movs	r0, r3
 800681a:	f001 fcc2 	bl	80081a2 <USBD_LL_StallEP>
      break;
 800681e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b002      	add	sp, #8
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	000002ae 	.word	0x000002ae

08006830 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	607a      	str	r2, [r7, #4]
 800683a:	200b      	movs	r0, #11
 800683c:	183b      	adds	r3, r7, r0
 800683e:	1c0a      	adds	r2, r1, #0
 8006840:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006842:	183b      	adds	r3, r7, r0
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d154      	bne.n	80068f4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3355      	adds	r3, #85	@ 0x55
 800684e:	33ff      	adds	r3, #255	@ 0xff
 8006850:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	23a5      	movs	r3, #165	@ 0xa5
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	58d3      	ldr	r3, [r2, r3]
 800685a:	2b03      	cmp	r3, #3
 800685c:	d139      	bne.n	80068d2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d919      	bls.n	800689e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	1ad2      	subs	r2, r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006880:	429a      	cmp	r2, r3
 8006882:	d203      	bcs.n	800688c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006888:	b29b      	uxth	r3, r3
 800688a:	e002      	b.n	8006892 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006890:	b29b      	uxth	r3, r3
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	001a      	movs	r2, r3
 8006898:	f001 f898 	bl	80079cc <USBD_CtlContinueRx>
 800689c:	e045      	b.n	800692a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	23ad      	movs	r3, #173	@ 0xad
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	58d3      	ldr	r3, [r2, r3]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00d      	beq.n	80068c8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	23a7      	movs	r3, #167	@ 0xa7
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d107      	bne.n	80068c8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	23ad      	movs	r3, #173	@ 0xad
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	58d3      	ldr	r3, [r2, r3]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	0010      	movs	r0, r2
 80068c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f001 f891 	bl	80079f2 <USBD_CtlSendStatus>
 80068d0:	e02b      	b.n	800692a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	23a5      	movs	r3, #165	@ 0xa5
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	58d3      	ldr	r3, [r2, r3]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d125      	bne.n	800692a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	23a5      	movs	r3, #165	@ 0xa5
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	2100      	movs	r1, #0
 80068e6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2100      	movs	r1, #0
 80068ec:	0018      	movs	r0, r3
 80068ee:	f001 fc58 	bl	80081a2 <USBD_LL_StallEP>
 80068f2:	e01a      	b.n	800692a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	23ad      	movs	r3, #173	@ 0xad
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	58d3      	ldr	r3, [r2, r3]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	23a7      	movs	r3, #167	@ 0xa7
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800690a:	2b03      	cmp	r3, #3
 800690c:	d10b      	bne.n	8006926 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	23ad      	movs	r3, #173	@ 0xad
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	58d3      	ldr	r3, [r2, r3]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	220b      	movs	r2, #11
 800691a:	18ba      	adds	r2, r7, r2
 800691c:	7811      	ldrb	r1, [r2, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	0010      	movs	r0, r2
 8006922:	4798      	blx	r3
 8006924:	e001      	b.n	800692a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006926:	2302      	movs	r3, #2
 8006928:	e000      	b.n	800692c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b006      	add	sp, #24
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	200b      	movs	r0, #11
 8006940:	183b      	adds	r3, r7, r0
 8006942:	1c0a      	adds	r2, r1, #0
 8006944:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006946:	183b      	adds	r3, r7, r0
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d000      	beq.n	8006950 <USBD_LL_DataInStage+0x1c>
 800694e:	e08e      	b.n	8006a6e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3314      	adds	r3, #20
 8006954:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	23a5      	movs	r3, #165	@ 0xa5
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	58d3      	ldr	r3, [r2, r3]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d164      	bne.n	8006a2c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	429a      	cmp	r2, r3
 800696c:	d915      	bls.n	800699a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	1ad2      	subs	r2, r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	b29a      	uxth	r2, r3
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	0018      	movs	r0, r3
 8006988:	f000 ffe9 	bl	800795e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	2300      	movs	r3, #0
 8006990:	2200      	movs	r2, #0
 8006992:	2100      	movs	r1, #0
 8006994:	f001 fced 	bl	8008372 <USBD_LL_PrepareReceive>
 8006998:	e059      	b.n	8006a4e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	0019      	movs	r1, r3
 80069a4:	0010      	movs	r0, r2
 80069a6:	f7f9 fc47 	bl	8000238 <__aeabi_uidivmod>
 80069aa:	1e0b      	subs	r3, r1, #0
 80069ac:	d11f      	bne.n	80069ee <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d319      	bcc.n	80069ee <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	23a6      	movs	r3, #166	@ 0xa6
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d211      	bcs.n	80069ee <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2100      	movs	r1, #0
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 ffc4 	bl	800795e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	23a6      	movs	r3, #166	@ 0xa6
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	2100      	movs	r1, #0
 80069de:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	2300      	movs	r3, #0
 80069e4:	2200      	movs	r2, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	f001 fcc3 	bl	8008372 <USBD_LL_PrepareReceive>
 80069ec:	e02f      	b.n	8006a4e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	23ad      	movs	r3, #173	@ 0xad
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	58d3      	ldr	r3, [r2, r3]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00d      	beq.n	8006a18 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	23a7      	movs	r3, #167	@ 0xa7
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d107      	bne.n	8006a18 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	23ad      	movs	r3, #173	@ 0xad
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	58d3      	ldr	r3, [r2, r3]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	0010      	movs	r0, r2
 8006a16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2180      	movs	r1, #128	@ 0x80
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f001 fbc0 	bl	80081a2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 fff8 	bl	8007a1a <USBD_CtlReceiveStatus>
 8006a2a:	e010      	b.n	8006a4e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	23a5      	movs	r3, #165	@ 0xa5
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	58d3      	ldr	r3, [r2, r3]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d005      	beq.n	8006a44 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	23a5      	movs	r3, #165	@ 0xa5
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2180      	movs	r1, #128	@ 0x80
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f001 fbaa 	bl	80081a2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	23a8      	movs	r3, #168	@ 0xa8
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	5cd3      	ldrb	r3, [r2, r3]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d124      	bne.n	8006aa4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f7ff fe43 	bl	80066e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	23a8      	movs	r3, #168	@ 0xa8
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	2100      	movs	r1, #0
 8006a6a:	54d1      	strb	r1, [r2, r3]
 8006a6c:	e01a      	b.n	8006aa4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	23ad      	movs	r3, #173	@ 0xad
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	58d3      	ldr	r3, [r2, r3]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d011      	beq.n	8006aa0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	23a7      	movs	r3, #167	@ 0xa7
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d10b      	bne.n	8006aa0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	23ad      	movs	r3, #173	@ 0xad
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	58d3      	ldr	r3, [r2, r3]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	220b      	movs	r2, #11
 8006a94:	18ba      	adds	r2, r7, r2
 8006a96:	7811      	ldrb	r1, [r2, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	0010      	movs	r0, r2
 8006a9c:	4798      	blx	r3
 8006a9e:	e001      	b.n	8006aa4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e000      	b.n	8006aa6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	b006      	add	sp, #24
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	2340      	movs	r3, #64	@ 0x40
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	f001 fb0e 	bl	80080de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	23ac      	movs	r3, #172	@ 0xac
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	2101      	movs	r1, #1
 8006aca:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	23b2      	movs	r3, #178	@ 0xb2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	2140      	movs	r1, #64	@ 0x40
 8006ad4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	2340      	movs	r3, #64	@ 0x40
 8006ada:	2200      	movs	r2, #0
 8006adc:	2180      	movs	r1, #128	@ 0x80
 8006ade:	f001 fafe 	bl	80080de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2240      	movs	r2, #64	@ 0x40
 8006aec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	23a7      	movs	r3, #167	@ 0xa7
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	2101      	movs	r1, #1
 8006af6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	23a5      	movs	r3, #165	@ 0xa5
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	2100      	movs	r1, #0
 8006b00:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	23a9      	movs	r3, #169	@ 0xa9
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	2100      	movs	r1, #0
 8006b10:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	23ae      	movs	r3, #174	@ 0xae
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	58d3      	ldr	r3, [r2, r3]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	23ad      	movs	r3, #173	@ 0xad
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	58d3      	ldr	r3, [r2, r3]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	b2d9      	uxtb	r1, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	4790      	blx	r2
  }

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b002      	add	sp, #8
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	000a      	movs	r2, r1
 8006b48:	1cfb      	adds	r3, r7, #3
 8006b4a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1cfa      	adds	r2, r7, #3
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	0018      	movs	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	23a7      	movs	r3, #167	@ 0xa7
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	5cd1      	ldrb	r1, [r2, r3]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a06      	ldr	r2, [pc, #24]	@ (8006b8c <USBD_LL_Suspend+0x2c>)
 8006b74:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	23a7      	movs	r3, #167	@ 0xa7
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	2104      	movs	r1, #4
 8006b7e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	0018      	movs	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b002      	add	sp, #8
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	46c0      	nop			@ (mov r8, r8)
 8006b8c:	0000029d 	.word	0x0000029d

08006b90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	23a7      	movs	r3, #167	@ 0xa7
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d106      	bne.n	8006bb2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a05      	ldr	r2, [pc, #20]	@ (8006bbc <USBD_LL_Resume+0x2c>)
 8006ba8:	5c99      	ldrb	r1, [r3, r2]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	23a7      	movs	r3, #167	@ 0xa7
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b002      	add	sp, #8
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	0000029d 	.word	0x0000029d

08006bc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	23a7      	movs	r3, #167	@ 0xa7
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	5cd3      	ldrb	r3, [r2, r3]
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d10e      	bne.n	8006bf2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	23ad      	movs	r3, #173	@ 0xad
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	58d3      	ldr	r3, [r2, r3]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	23ad      	movs	r3, #173	@ 0xad
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	58d3      	ldr	r3, [r2, r3]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	0010      	movs	r0, r2
 8006bf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	b002      	add	sp, #8
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c06:	230f      	movs	r3, #15
 8006c08:	18fb      	adds	r3, r7, r3
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	001a      	movs	r2, r3
 8006c14:	2360      	movs	r3, #96	@ 0x60
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	d004      	beq.n	8006c26 <USBD_StdDevReq+0x2a>
 8006c1c:	d84f      	bhi.n	8006cbe <USBD_StdDevReq+0xc2>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <USBD_StdDevReq+0x3e>
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d14b      	bne.n	8006cbe <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	23ad      	movs	r3, #173	@ 0xad
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	58d3      	ldr	r3, [r2, r3]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	0010      	movs	r0, r2
 8006c36:	4798      	blx	r3
      break;
 8006c38:	e048      	b.n	8006ccc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	2b09      	cmp	r3, #9
 8006c40:	d835      	bhi.n	8006cae <USBD_StdDevReq+0xb2>
 8006c42:	009a      	lsls	r2, r3, #2
 8006c44:	4b25      	ldr	r3, [pc, #148]	@ (8006cdc <USBD_StdDevReq+0xe0>)
 8006c46:	18d3      	adds	r3, r2, r3
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	0011      	movs	r1, r2
 8006c52:	0018      	movs	r0, r3
 8006c54:	f000 fa52 	bl	80070fc <USBD_GetDescriptor>
          break;
 8006c58:	e030      	b.n	8006cbc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	0011      	movs	r1, r2
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 fbfd 	bl	8007460 <USBD_SetAddress>
          break;
 8006c66:	e029      	b.n	8006cbc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	0011      	movs	r1, r2
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f000 fc4a 	bl	8007508 <USBD_SetConfig>
          break;
 8006c74:	e022      	b.n	8006cbc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f000 fce7 	bl	8007650 <USBD_GetConfig>
          break;
 8006c82:	e01b      	b.n	8006cbc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f000 fd1b 	bl	80076c6 <USBD_GetStatus>
          break;
 8006c90:	e014      	b.n	8006cbc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0011      	movs	r1, r2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f000 fd4e 	bl	800773a <USBD_SetFeature>
          break;
 8006c9e:	e00d      	b.n	8006cbc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	0011      	movs	r1, r2
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 fd5d 	bl	8007766 <USBD_ClrFeature>
          break;
 8006cac:	e006      	b.n	8006cbc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	0011      	movs	r1, r2
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f000 fdb4 	bl	8007822 <USBD_CtlError>
          break;
 8006cba:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006cbc:	e006      	b.n	8006ccc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	0011      	movs	r1, r2
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 fdac 	bl	8007822 <USBD_CtlError>
      break;
 8006cca:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006ccc:	230f      	movs	r3, #15
 8006cce:	18fb      	adds	r3, r7, r3
 8006cd0:	781b      	ldrb	r3, [r3, #0]
}
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b004      	add	sp, #16
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	46c0      	nop			@ (mov r8, r8)
 8006cdc:	08008e70 	.word	0x08008e70

08006ce0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ce0:	b5b0      	push	{r4, r5, r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cea:	230f      	movs	r3, #15
 8006cec:	18fb      	adds	r3, r7, r3
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	2360      	movs	r3, #96	@ 0x60
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b40      	cmp	r3, #64	@ 0x40
 8006cfe:	d004      	beq.n	8006d0a <USBD_StdItfReq+0x2a>
 8006d00:	d839      	bhi.n	8006d76 <USBD_StdItfReq+0x96>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <USBD_StdItfReq+0x2a>
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d135      	bne.n	8006d76 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	23a7      	movs	r3, #167	@ 0xa7
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	5cd3      	ldrb	r3, [r2, r3]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d825      	bhi.n	8006d64 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	889b      	ldrh	r3, [r3, #4]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d819      	bhi.n	8006d56 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	23ad      	movs	r3, #173	@ 0xad
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	58d3      	ldr	r3, [r2, r3]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	250f      	movs	r5, #15
 8006d2e:	197c      	adds	r4, r7, r5
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	0010      	movs	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	0003      	movs	r3, r0
 8006d3a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	88db      	ldrh	r3, [r3, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d116      	bne.n	8006d72 <USBD_StdItfReq+0x92>
 8006d44:	197b      	adds	r3, r7, r5
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d112      	bne.n	8006d72 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f000 fe4f 	bl	80079f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d54:	e00d      	b.n	8006d72 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	0011      	movs	r1, r2
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f000 fd60 	bl	8007822 <USBD_CtlError>
          break;
 8006d62:	e006      	b.n	8006d72 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	0011      	movs	r1, r2
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f000 fd59 	bl	8007822 <USBD_CtlError>
          break;
 8006d70:	e000      	b.n	8006d74 <USBD_StdItfReq+0x94>
          break;
 8006d72:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006d74:	e006      	b.n	8006d84 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	0011      	movs	r1, r2
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f000 fd50 	bl	8007822 <USBD_CtlError>
      break;
 8006d82:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	0018      	movs	r0, r3
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	b004      	add	sp, #16
 8006d8c:	bdb0      	pop	{r4, r5, r7, pc}

08006d8e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006d8e:	b5b0      	push	{r4, r5, r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d98:	230f      	movs	r3, #15
 8006d9a:	18fb      	adds	r3, r7, r3
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	889a      	ldrh	r2, [r3, #4]
 8006da4:	230e      	movs	r3, #14
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	001a      	movs	r2, r3
 8006db0:	2360      	movs	r3, #96	@ 0x60
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b40      	cmp	r3, #64	@ 0x40
 8006db6:	d006      	beq.n	8006dc6 <USBD_StdEPReq+0x38>
 8006db8:	d900      	bls.n	8006dbc <USBD_StdEPReq+0x2e>
 8006dba:	e190      	b.n	80070de <USBD_StdEPReq+0x350>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00c      	beq.n	8006dda <USBD_StdEPReq+0x4c>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d000      	beq.n	8006dc6 <USBD_StdEPReq+0x38>
 8006dc4:	e18b      	b.n	80070de <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	23ad      	movs	r3, #173	@ 0xad
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	58d3      	ldr	r3, [r2, r3]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	0010      	movs	r0, r2
 8006dd6:	4798      	blx	r3
      break;
 8006dd8:	e188      	b.n	80070ec <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	001a      	movs	r2, r3
 8006de0:	2360      	movs	r3, #96	@ 0x60
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d10f      	bne.n	8006e08 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	23ad      	movs	r3, #173	@ 0xad
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	58d3      	ldr	r3, [r2, r3]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	250f      	movs	r5, #15
 8006df4:	197c      	adds	r4, r7, r5
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	0010      	movs	r0, r2
 8006dfc:	4798      	blx	r3
 8006dfe:	0003      	movs	r3, r0
 8006e00:	7023      	strb	r3, [r4, #0]

        return ret;
 8006e02:	197b      	adds	r3, r7, r5
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	e174      	b.n	80070f2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d007      	beq.n	8006e20 <USBD_StdEPReq+0x92>
 8006e10:	dd00      	ble.n	8006e14 <USBD_StdEPReq+0x86>
 8006e12:	e15c      	b.n	80070ce <USBD_StdEPReq+0x340>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d100      	bne.n	8006e1a <USBD_StdEPReq+0x8c>
 8006e18:	e092      	b.n	8006f40 <USBD_StdEPReq+0x1b2>
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d04b      	beq.n	8006eb6 <USBD_StdEPReq+0x128>
 8006e1e:	e156      	b.n	80070ce <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	23a7      	movs	r3, #167	@ 0xa7
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	5cd3      	ldrb	r3, [r2, r3]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d002      	beq.n	8006e32 <USBD_StdEPReq+0xa4>
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d01d      	beq.n	8006e6c <USBD_StdEPReq+0xde>
 8006e30:	e039      	b.n	8006ea6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e32:	220e      	movs	r2, #14
 8006e34:	18bb      	adds	r3, r7, r2
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <USBD_StdEPReq+0xd0>
 8006e3c:	18bb      	adds	r3, r7, r2
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b80      	cmp	r3, #128	@ 0x80
 8006e42:	d00c      	beq.n	8006e5e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e44:	18bb      	adds	r3, r7, r2
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	0011      	movs	r1, r2
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f001 f9a8 	bl	80081a2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	0018      	movs	r0, r3
 8006e58:	f001 f9a3 	bl	80081a2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e5c:	e02a      	b.n	8006eb4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	0011      	movs	r1, r2
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 fcdc 	bl	8007822 <USBD_CtlError>
              break;
 8006e6a:	e023      	b.n	8006eb4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	885b      	ldrh	r3, [r3, #2]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d113      	bne.n	8006e9c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006e74:	220e      	movs	r2, #14
 8006e76:	18bb      	adds	r3, r7, r2
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00e      	beq.n	8006e9c <USBD_StdEPReq+0x10e>
 8006e7e:	18bb      	adds	r3, r7, r2
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b80      	cmp	r3, #128	@ 0x80
 8006e84:	d00a      	beq.n	8006e9c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88db      	ldrh	r3, [r3, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e8e:	18bb      	adds	r3, r7, r2
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	0011      	movs	r1, r2
 8006e96:	0018      	movs	r0, r3
 8006e98:	f001 f983 	bl	80081a2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f000 fda7 	bl	80079f2 <USBD_CtlSendStatus>

              break;
 8006ea4:	e006      	b.n	8006eb4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	0011      	movs	r1, r2
 8006eac:	0018      	movs	r0, r3
 8006eae:	f000 fcb8 	bl	8007822 <USBD_CtlError>
              break;
 8006eb2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006eb4:	e112      	b.n	80070dc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	23a7      	movs	r3, #167	@ 0xa7
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	5cd3      	ldrb	r3, [r2, r3]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d002      	beq.n	8006ec8 <USBD_StdEPReq+0x13a>
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d01d      	beq.n	8006f02 <USBD_StdEPReq+0x174>
 8006ec6:	e032      	b.n	8006f2e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ec8:	220e      	movs	r2, #14
 8006eca:	18bb      	adds	r3, r7, r2
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <USBD_StdEPReq+0x166>
 8006ed2:	18bb      	adds	r3, r7, r2
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b80      	cmp	r3, #128	@ 0x80
 8006ed8:	d00c      	beq.n	8006ef4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006eda:	18bb      	adds	r3, r7, r2
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	0011      	movs	r1, r2
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f001 f95d 	bl	80081a2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2180      	movs	r1, #128	@ 0x80
 8006eec:	0018      	movs	r0, r3
 8006eee:	f001 f958 	bl	80081a2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef2:	e024      	b.n	8006f3e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0011      	movs	r1, r2
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 fc91 	bl	8007822 <USBD_CtlError>
              break;
 8006f00:	e01d      	b.n	8006f3e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d118      	bne.n	8006f3c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f0a:	210e      	movs	r1, #14
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	227f      	movs	r2, #127	@ 0x7f
 8006f12:	4013      	ands	r3, r2
 8006f14:	d006      	beq.n	8006f24 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f16:	187b      	adds	r3, r7, r1
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	0011      	movs	r1, r2
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f001 f96a 	bl	80081f8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 fd63 	bl	80079f2 <USBD_CtlSendStatus>
              }
              break;
 8006f2c:	e006      	b.n	8006f3c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	0011      	movs	r1, r2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f000 fc74 	bl	8007822 <USBD_CtlError>
              break;
 8006f3a:	e000      	b.n	8006f3e <USBD_StdEPReq+0x1b0>
              break;
 8006f3c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006f3e:	e0cd      	b.n	80070dc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	23a7      	movs	r3, #167	@ 0xa7
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	5cd3      	ldrb	r3, [r2, r3]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d002      	beq.n	8006f52 <USBD_StdEPReq+0x1c4>
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d03c      	beq.n	8006fca <USBD_StdEPReq+0x23c>
 8006f50:	e0b5      	b.n	80070be <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f52:	220e      	movs	r2, #14
 8006f54:	18bb      	adds	r3, r7, r2
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <USBD_StdEPReq+0x1e4>
 8006f5c:	18bb      	adds	r3, r7, r2
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b80      	cmp	r3, #128	@ 0x80
 8006f62:	d006      	beq.n	8006f72 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	0011      	movs	r1, r2
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f000 fc59 	bl	8007822 <USBD_CtlError>
                break;
 8006f70:	e0ac      	b.n	80070cc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f72:	220e      	movs	r2, #14
 8006f74:	18bb      	adds	r3, r7, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da0c      	bge.n	8006f98 <USBD_StdEPReq+0x20a>
 8006f7e:	18bb      	adds	r3, r7, r2
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	227f      	movs	r2, #127	@ 0x7f
 8006f84:	401a      	ands	r2, r3
 8006f86:	0013      	movs	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	189b      	adds	r3, r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	3310      	adds	r3, #16
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	18d3      	adds	r3, r2, r3
 8006f94:	3304      	adds	r3, #4
 8006f96:	e00d      	b.n	8006fb4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f98:	230e      	movs	r3, #14
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	227f      	movs	r2, #127	@ 0x7f
 8006fa0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fa2:	0013      	movs	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	3351      	adds	r3, #81	@ 0x51
 8006fac:	33ff      	adds	r3, #255	@ 0xff
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	18d3      	adds	r3, r2, r3
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 fcab 	bl	800791e <USBD_CtlSendData>
              break;
 8006fc8:	e080      	b.n	80070cc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fca:	220e      	movs	r2, #14
 8006fcc:	18bb      	adds	r3, r7, r2
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b25b      	sxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da14      	bge.n	8007000 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fd6:	18bb      	adds	r3, r7, r2
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	220f      	movs	r2, #15
 8006fdc:	401a      	ands	r2, r3
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	0013      	movs	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	189b      	adds	r3, r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	18cb      	adds	r3, r1, r3
 8006fea:	3318      	adds	r3, #24
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d11e      	bne.n	8007030 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	0011      	movs	r1, r2
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f000 fc12 	bl	8007822 <USBD_CtlError>
                  break;
 8006ffe:	e065      	b.n	80070cc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007000:	230e      	movs	r3, #14
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	220f      	movs	r2, #15
 8007008:	401a      	ands	r2, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	23ac      	movs	r3, #172	@ 0xac
 800700e:	0059      	lsls	r1, r3, #1
 8007010:	0013      	movs	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	189b      	adds	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	18c3      	adds	r3, r0, r3
 800701a:	185b      	adds	r3, r3, r1
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	0011      	movs	r1, r2
 8007028:	0018      	movs	r0, r3
 800702a:	f000 fbfa 	bl	8007822 <USBD_CtlError>
                  break;
 800702e:	e04d      	b.n	80070cc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007030:	220e      	movs	r2, #14
 8007032:	18bb      	adds	r3, r7, r2
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b25b      	sxtb	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	da0c      	bge.n	8007056 <USBD_StdEPReq+0x2c8>
 800703c:	18bb      	adds	r3, r7, r2
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	227f      	movs	r2, #127	@ 0x7f
 8007042:	401a      	ands	r2, r3
 8007044:	0013      	movs	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	189b      	adds	r3, r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	3310      	adds	r3, #16
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	18d3      	adds	r3, r2, r3
 8007052:	3304      	adds	r3, #4
 8007054:	e00d      	b.n	8007072 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007056:	230e      	movs	r3, #14
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	227f      	movs	r2, #127	@ 0x7f
 800705e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007060:	0013      	movs	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	189b      	adds	r3, r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	3351      	adds	r3, #81	@ 0x51
 800706a:	33ff      	adds	r3, #255	@ 0xff
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	18d3      	adds	r3, r2, r3
 8007070:	3304      	adds	r3, #4
 8007072:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007074:	220e      	movs	r2, #14
 8007076:	18bb      	adds	r3, r7, r2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <USBD_StdEPReq+0x2f8>
 800707e:	18bb      	adds	r3, r7, r2
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b80      	cmp	r3, #128	@ 0x80
 8007084:	d103      	bne.n	800708e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e010      	b.n	80070b0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800708e:	230e      	movs	r3, #14
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	0011      	movs	r1, r2
 8007098:	0018      	movs	r0, r3
 800709a:	f001 f8d8 	bl	800824e <USBD_LL_IsStallEP>
 800709e:	1e03      	subs	r3, r0, #0
 80070a0:	d003      	beq.n	80070aa <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2201      	movs	r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e002      	b.n	80070b0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2202      	movs	r2, #2
 80070b6:	0018      	movs	r0, r3
 80070b8:	f000 fc31 	bl	800791e <USBD_CtlSendData>
              break;
 80070bc:	e006      	b.n	80070cc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	0011      	movs	r1, r2
 80070c4:	0018      	movs	r0, r3
 80070c6:	f000 fbac 	bl	8007822 <USBD_CtlError>
              break;
 80070ca:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80070cc:	e006      	b.n	80070dc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	0011      	movs	r1, r2
 80070d4:	0018      	movs	r0, r3
 80070d6:	f000 fba4 	bl	8007822 <USBD_CtlError>
          break;
 80070da:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80070dc:	e006      	b.n	80070ec <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	0011      	movs	r1, r2
 80070e4:	0018      	movs	r0, r3
 80070e6:	f000 fb9c 	bl	8007822 <USBD_CtlError>
      break;
 80070ea:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80070ec:	230f      	movs	r3, #15
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	781b      	ldrb	r3, [r3, #0]
}
 80070f2:	0018      	movs	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	b004      	add	sp, #16
 80070f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080070fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007106:	2308      	movs	r3, #8
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	2200      	movs	r2, #0
 800710c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007112:	230b      	movs	r3, #11
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b07      	cmp	r3, #7
 8007124:	d900      	bls.n	8007128 <USBD_GetDescriptor+0x2c>
 8007126:	e159      	b.n	80073dc <USBD_GetDescriptor+0x2e0>
 8007128:	009a      	lsls	r2, r3, #2
 800712a:	4bcb      	ldr	r3, [pc, #812]	@ (8007458 <USBD_GetDescriptor+0x35c>)
 800712c:	18d3      	adds	r3, r2, r3
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	23ac      	movs	r3, #172	@ 0xac
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	58d3      	ldr	r3, [r2, r3]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	7c12      	ldrb	r2, [r2, #16]
 8007140:	2108      	movs	r1, #8
 8007142:	1879      	adds	r1, r7, r1
 8007144:	0010      	movs	r0, r2
 8007146:	4798      	blx	r3
 8007148:	0003      	movs	r3, r0
 800714a:	60fb      	str	r3, [r7, #12]
      break;
 800714c:	e153      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7c1b      	ldrb	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10f      	bne.n	8007176 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	23ad      	movs	r3, #173	@ 0xad
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	58d3      	ldr	r3, [r2, r3]
 800715e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007160:	2208      	movs	r2, #8
 8007162:	18ba      	adds	r2, r7, r2
 8007164:	0010      	movs	r0, r2
 8007166:	4798      	blx	r3
 8007168:	0003      	movs	r3, r0
 800716a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	2202      	movs	r2, #2
 8007172:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007174:	e13f      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	23ad      	movs	r3, #173	@ 0xad
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	58d3      	ldr	r3, [r2, r3]
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	2208      	movs	r2, #8
 8007182:	18ba      	adds	r2, r7, r2
 8007184:	0010      	movs	r0, r2
 8007186:	4798      	blx	r3
 8007188:	0003      	movs	r3, r0
 800718a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	2202      	movs	r2, #2
 8007192:	701a      	strb	r2, [r3, #0]
      break;
 8007194:	e12f      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	885b      	ldrh	r3, [r3, #2]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b05      	cmp	r3, #5
 800719e:	d900      	bls.n	80071a2 <USBD_GetDescriptor+0xa6>
 80071a0:	e0d0      	b.n	8007344 <USBD_GetDescriptor+0x248>
 80071a2:	009a      	lsls	r2, r3, #2
 80071a4:	4bad      	ldr	r3, [pc, #692]	@ (800745c <USBD_GetDescriptor+0x360>)
 80071a6:	18d3      	adds	r3, r2, r3
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	23ac      	movs	r3, #172	@ 0xac
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	58d3      	ldr	r3, [r2, r3]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	23ac      	movs	r3, #172	@ 0xac
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	58d3      	ldr	r3, [r2, r3]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7c12      	ldrb	r2, [r2, #16]
 80071c8:	2108      	movs	r1, #8
 80071ca:	1879      	adds	r1, r7, r1
 80071cc:	0010      	movs	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	0003      	movs	r3, r0
 80071d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d4:	e0c3      	b.n	800735e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	0011      	movs	r1, r2
 80071dc:	0018      	movs	r0, r3
 80071de:	f000 fb20 	bl	8007822 <USBD_CtlError>
            err++;
 80071e2:	210b      	movs	r1, #11
 80071e4:	187b      	adds	r3, r7, r1
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	187b      	adds	r3, r7, r1
 80071ea:	3201      	adds	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
          break;
 80071ee:	e0b6      	b.n	800735e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	23ac      	movs	r3, #172	@ 0xac
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	58d3      	ldr	r3, [r2, r3]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	23ac      	movs	r3, #172	@ 0xac
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	58d3      	ldr	r3, [r2, r3]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c12      	ldrb	r2, [r2, #16]
 800720c:	2108      	movs	r1, #8
 800720e:	1879      	adds	r1, r7, r1
 8007210:	0010      	movs	r0, r2
 8007212:	4798      	blx	r3
 8007214:	0003      	movs	r3, r0
 8007216:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007218:	e0a1      	b.n	800735e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	0011      	movs	r1, r2
 8007220:	0018      	movs	r0, r3
 8007222:	f000 fafe 	bl	8007822 <USBD_CtlError>
            err++;
 8007226:	210b      	movs	r1, #11
 8007228:	187b      	adds	r3, r7, r1
 800722a:	781a      	ldrb	r2, [r3, #0]
 800722c:	187b      	adds	r3, r7, r1
 800722e:	3201      	adds	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
          break;
 8007232:	e094      	b.n	800735e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	23ac      	movs	r3, #172	@ 0xac
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	58d3      	ldr	r3, [r2, r3]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00d      	beq.n	800725e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	23ac      	movs	r3, #172	@ 0xac
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	58d3      	ldr	r3, [r2, r3]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	7c12      	ldrb	r2, [r2, #16]
 8007250:	2108      	movs	r1, #8
 8007252:	1879      	adds	r1, r7, r1
 8007254:	0010      	movs	r0, r2
 8007256:	4798      	blx	r3
 8007258:	0003      	movs	r3, r0
 800725a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800725c:	e07f      	b.n	800735e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	0011      	movs	r1, r2
 8007264:	0018      	movs	r0, r3
 8007266:	f000 fadc 	bl	8007822 <USBD_CtlError>
            err++;
 800726a:	210b      	movs	r1, #11
 800726c:	187b      	adds	r3, r7, r1
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	187b      	adds	r3, r7, r1
 8007272:	3201      	adds	r2, #1
 8007274:	701a      	strb	r2, [r3, #0]
          break;
 8007276:	e072      	b.n	800735e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	23ac      	movs	r3, #172	@ 0xac
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	58d3      	ldr	r3, [r2, r3]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00d      	beq.n	80072a2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	23ac      	movs	r3, #172	@ 0xac
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	58d3      	ldr	r3, [r2, r3]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	7c12      	ldrb	r2, [r2, #16]
 8007294:	2108      	movs	r1, #8
 8007296:	1879      	adds	r1, r7, r1
 8007298:	0010      	movs	r0, r2
 800729a:	4798      	blx	r3
 800729c:	0003      	movs	r3, r0
 800729e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a0:	e05d      	b.n	800735e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0011      	movs	r1, r2
 80072a8:	0018      	movs	r0, r3
 80072aa:	f000 faba 	bl	8007822 <USBD_CtlError>
            err++;
 80072ae:	210b      	movs	r1, #11
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	187b      	adds	r3, r7, r1
 80072b6:	3201      	adds	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
          break;
 80072ba:	e050      	b.n	800735e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	23ac      	movs	r3, #172	@ 0xac
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	58d3      	ldr	r3, [r2, r3]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	23ac      	movs	r3, #172	@ 0xac
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	58d3      	ldr	r3, [r2, r3]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7c12      	ldrb	r2, [r2, #16]
 80072d8:	2108      	movs	r1, #8
 80072da:	1879      	adds	r1, r7, r1
 80072dc:	0010      	movs	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	0003      	movs	r3, r0
 80072e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072e4:	e03b      	b.n	800735e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0011      	movs	r1, r2
 80072ec:	0018      	movs	r0, r3
 80072ee:	f000 fa98 	bl	8007822 <USBD_CtlError>
            err++;
 80072f2:	210b      	movs	r1, #11
 80072f4:	187b      	adds	r3, r7, r1
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	3201      	adds	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]
          break;
 80072fe:	e02e      	b.n	800735e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	23ac      	movs	r3, #172	@ 0xac
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	58d3      	ldr	r3, [r2, r3]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00d      	beq.n	800732a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	23ac      	movs	r3, #172	@ 0xac
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	58d3      	ldr	r3, [r2, r3]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7c12      	ldrb	r2, [r2, #16]
 800731c:	2108      	movs	r1, #8
 800731e:	1879      	adds	r1, r7, r1
 8007320:	0010      	movs	r0, r2
 8007322:	4798      	blx	r3
 8007324:	0003      	movs	r3, r0
 8007326:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007328:	e019      	b.n	800735e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0011      	movs	r1, r2
 8007330:	0018      	movs	r0, r3
 8007332:	f000 fa76 	bl	8007822 <USBD_CtlError>
            err++;
 8007336:	210b      	movs	r1, #11
 8007338:	187b      	adds	r3, r7, r1
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	187b      	adds	r3, r7, r1
 800733e:	3201      	adds	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
          break;
 8007342:	e00c      	b.n	800735e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	0011      	movs	r1, r2
 800734a:	0018      	movs	r0, r3
 800734c:	f000 fa69 	bl	8007822 <USBD_CtlError>
          err++;
 8007350:	210b      	movs	r1, #11
 8007352:	187b      	adds	r3, r7, r1
 8007354:	781a      	ldrb	r2, [r3, #0]
 8007356:	187b      	adds	r3, r7, r1
 8007358:	3201      	adds	r2, #1
 800735a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800735c:	e04b      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>
 800735e:	e04a      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7c1b      	ldrb	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10b      	bne.n	8007380 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	23ad      	movs	r3, #173	@ 0xad
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	58d3      	ldr	r3, [r2, r3]
 8007370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007372:	2208      	movs	r2, #8
 8007374:	18ba      	adds	r2, r7, r2
 8007376:	0010      	movs	r0, r2
 8007378:	4798      	blx	r3
 800737a:	0003      	movs	r3, r0
 800737c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800737e:	e03a      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	0011      	movs	r1, r2
 8007386:	0018      	movs	r0, r3
 8007388:	f000 fa4b 	bl	8007822 <USBD_CtlError>
        err++;
 800738c:	210b      	movs	r1, #11
 800738e:	187b      	adds	r3, r7, r1
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	187b      	adds	r3, r7, r1
 8007394:	3201      	adds	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
      break;
 8007398:	e02d      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7c1b      	ldrb	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10f      	bne.n	80073c2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	23ad      	movs	r3, #173	@ 0xad
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	58d3      	ldr	r3, [r2, r3]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ac:	2208      	movs	r2, #8
 80073ae:	18ba      	adds	r2, r7, r2
 80073b0:	0010      	movs	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	0003      	movs	r3, r0
 80073b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	2207      	movs	r2, #7
 80073be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073c0:	e019      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	0011      	movs	r1, r2
 80073c8:	0018      	movs	r0, r3
 80073ca:	f000 fa2a 	bl	8007822 <USBD_CtlError>
        err++;
 80073ce:	210b      	movs	r1, #11
 80073d0:	187b      	adds	r3, r7, r1
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	3201      	adds	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
      break;
 80073da:	e00c      	b.n	80073f6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	0011      	movs	r1, r2
 80073e2:	0018      	movs	r0, r3
 80073e4:	f000 fa1d 	bl	8007822 <USBD_CtlError>
      err++;
 80073e8:	210b      	movs	r1, #11
 80073ea:	187b      	adds	r3, r7, r1
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	187b      	adds	r3, r7, r1
 80073f0:	3201      	adds	r2, #1
 80073f2:	701a      	strb	r2, [r3, #0]
      break;
 80073f4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80073f6:	230b      	movs	r3, #11
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d127      	bne.n	8007450 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007400:	2108      	movs	r1, #8
 8007402:	187b      	adds	r3, r7, r1
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d019      	beq.n	800743e <USBD_GetDescriptor+0x342>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	88db      	ldrh	r3, [r3, #6]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d015      	beq.n	800743e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	88da      	ldrh	r2, [r3, #6]
 8007416:	187b      	adds	r3, r7, r1
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	1c18      	adds	r0, r3, #0
 800741c:	1c11      	adds	r1, r2, #0
 800741e:	b28a      	uxth	r2, r1
 8007420:	b283      	uxth	r3, r0
 8007422:	429a      	cmp	r2, r3
 8007424:	d900      	bls.n	8007428 <USBD_GetDescriptor+0x32c>
 8007426:	1c01      	adds	r1, r0, #0
 8007428:	b28a      	uxth	r2, r1
 800742a:	2108      	movs	r1, #8
 800742c:	187b      	adds	r3, r7, r1
 800742e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007430:	187b      	adds	r3, r7, r1
 8007432:	881a      	ldrh	r2, [r3, #0]
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	0018      	movs	r0, r3
 800743a:	f000 fa70 	bl	800791e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	88db      	ldrh	r3, [r3, #6]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d105      	bne.n	8007452 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	0018      	movs	r0, r3
 800744a:	f000 fad2 	bl	80079f2 <USBD_CtlSendStatus>
 800744e:	e000      	b.n	8007452 <USBD_GetDescriptor+0x356>
    return;
 8007450:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8007452:	46bd      	mov	sp, r7
 8007454:	b004      	add	sp, #16
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08008e98 	.word	0x08008e98
 800745c:	08008eb8 	.word	0x08008eb8

08007460 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007460:	b590      	push	{r4, r7, lr}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	889b      	ldrh	r3, [r3, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d13d      	bne.n	80074ee <USBD_SetAddress+0x8e>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	88db      	ldrh	r3, [r3, #6]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d139      	bne.n	80074ee <USBD_SetAddress+0x8e>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	885b      	ldrh	r3, [r3, #2]
 800747e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007480:	d835      	bhi.n	80074ee <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	885b      	ldrh	r3, [r3, #2]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	230f      	movs	r3, #15
 800748a:	18fb      	adds	r3, r7, r3
 800748c:	217f      	movs	r1, #127	@ 0x7f
 800748e:	400a      	ands	r2, r1
 8007490:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	23a7      	movs	r3, #167	@ 0xa7
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	5cd3      	ldrb	r3, [r2, r3]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d106      	bne.n	80074ac <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	0011      	movs	r1, r2
 80074a4:	0018      	movs	r0, r3
 80074a6:	f000 f9bc 	bl	8007822 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074aa:	e027      	b.n	80074fc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	240f      	movs	r4, #15
 80074b0:	193a      	adds	r2, r7, r4
 80074b2:	4914      	ldr	r1, [pc, #80]	@ (8007504 <USBD_SetAddress+0xa4>)
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074b8:	193b      	adds	r3, r7, r4
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0011      	movs	r1, r2
 80074c0:	0018      	movs	r0, r3
 80074c2:	f000 fef4 	bl	80082ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	0018      	movs	r0, r3
 80074ca:	f000 fa92 	bl	80079f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ce:	193b      	adds	r3, r7, r4
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	23a7      	movs	r3, #167	@ 0xa7
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	2102      	movs	r1, #2
 80074de:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e0:	e00c      	b.n	80074fc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	23a7      	movs	r3, #167	@ 0xa7
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	2101      	movs	r1, #1
 80074ea:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	e006      	b.n	80074fc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	0011      	movs	r1, r2
 80074f4:	0018      	movs	r0, r3
 80074f6:	f000 f994 	bl	8007822 <USBD_CtlError>
  }
}
 80074fa:	46c0      	nop			@ (mov r8, r8)
 80074fc:	46c0      	nop			@ (mov r8, r8)
 80074fe:	46bd      	mov	sp, r7
 8007500:	b005      	add	sp, #20
 8007502:	bd90      	pop	{r4, r7, pc}
 8007504:	0000029e 	.word	0x0000029e

08007508 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	885b      	ldrh	r3, [r3, #2]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	4b4c      	ldr	r3, [pc, #304]	@ (800764c <USBD_SetConfig+0x144>)
 800751a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800751c:	4b4b      	ldr	r3, [pc, #300]	@ (800764c <USBD_SetConfig+0x144>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d906      	bls.n	8007532 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	0011      	movs	r1, r2
 800752a:	0018      	movs	r0, r3
 800752c:	f000 f979 	bl	8007822 <USBD_CtlError>
 8007530:	e088      	b.n	8007644 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	23a7      	movs	r3, #167	@ 0xa7
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	5cd3      	ldrb	r3, [r2, r3]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d002      	beq.n	8007544 <USBD_SetConfig+0x3c>
 800753e:	2b03      	cmp	r3, #3
 8007540:	d029      	beq.n	8007596 <USBD_SetConfig+0x8e>
 8007542:	e071      	b.n	8007628 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007544:	4b41      	ldr	r3, [pc, #260]	@ (800764c <USBD_SetConfig+0x144>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01f      	beq.n	800758c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800754c:	4b3f      	ldr	r3, [pc, #252]	@ (800764c <USBD_SetConfig+0x144>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	001a      	movs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	23a7      	movs	r3, #167	@ 0xa7
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	2103      	movs	r1, #3
 800755e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007560:	4b3a      	ldr	r3, [pc, #232]	@ (800764c <USBD_SetConfig+0x144>)
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	0011      	movs	r1, r2
 8007568:	0018      	movs	r0, r3
 800756a:	f7ff f8c6 	bl	80066fa <USBD_SetClassConfig>
 800756e:	0003      	movs	r3, r0
 8007570:	2b02      	cmp	r3, #2
 8007572:	d106      	bne.n	8007582 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	0011      	movs	r1, r2
 800757a:	0018      	movs	r0, r3
 800757c:	f000 f951 	bl	8007822 <USBD_CtlError>
            return;
 8007580:	e060      	b.n	8007644 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	0018      	movs	r0, r3
 8007586:	f000 fa34 	bl	80079f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800758a:	e05b      	b.n	8007644 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	0018      	movs	r0, r3
 8007590:	f000 fa2f 	bl	80079f2 <USBD_CtlSendStatus>
        break;
 8007594:	e056      	b.n	8007644 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007596:	4b2d      	ldr	r3, [pc, #180]	@ (800764c <USBD_SetConfig+0x144>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d115      	bne.n	80075ca <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	23a7      	movs	r3, #167	@ 0xa7
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	2102      	movs	r1, #2
 80075a6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80075a8:	4b28      	ldr	r3, [pc, #160]	@ (800764c <USBD_SetConfig+0x144>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	001a      	movs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075b2:	4b26      	ldr	r3, [pc, #152]	@ (800764c <USBD_SetConfig+0x144>)
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	0011      	movs	r1, r2
 80075ba:	0018      	movs	r0, r3
 80075bc:	f7ff f8c4 	bl	8006748 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	0018      	movs	r0, r3
 80075c4:	f000 fa15 	bl	80079f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075c8:	e03c      	b.n	8007644 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80075ca:	4b20      	ldr	r3, [pc, #128]	@ (800764c <USBD_SetConfig+0x144>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	001a      	movs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d022      	beq.n	800761e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0011      	movs	r1, r2
 80075e2:	0018      	movs	r0, r3
 80075e4:	f7ff f8b0 	bl	8006748 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075e8:	4b18      	ldr	r3, [pc, #96]	@ (800764c <USBD_SetConfig+0x144>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	001a      	movs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f2:	4b16      	ldr	r3, [pc, #88]	@ (800764c <USBD_SetConfig+0x144>)
 80075f4:	781a      	ldrb	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0011      	movs	r1, r2
 80075fa:	0018      	movs	r0, r3
 80075fc:	f7ff f87d 	bl	80066fa <USBD_SetClassConfig>
 8007600:	0003      	movs	r3, r0
 8007602:	2b02      	cmp	r3, #2
 8007604:	d106      	bne.n	8007614 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	0011      	movs	r1, r2
 800760c:	0018      	movs	r0, r3
 800760e:	f000 f908 	bl	8007822 <USBD_CtlError>
            return;
 8007612:	e017      	b.n	8007644 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	0018      	movs	r0, r3
 8007618:	f000 f9eb 	bl	80079f2 <USBD_CtlSendStatus>
        break;
 800761c:	e012      	b.n	8007644 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	0018      	movs	r0, r3
 8007622:	f000 f9e6 	bl	80079f2 <USBD_CtlSendStatus>
        break;
 8007626:	e00d      	b.n	8007644 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0011      	movs	r1, r2
 800762e:	0018      	movs	r0, r3
 8007630:	f000 f8f7 	bl	8007822 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <USBD_SetConfig+0x144>)
 8007636:	781a      	ldrb	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	0011      	movs	r1, r2
 800763c:	0018      	movs	r0, r3
 800763e:	f7ff f883 	bl	8006748 <USBD_ClrClassConfig>
        break;
 8007642:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8007644:	46bd      	mov	sp, r7
 8007646:	b002      	add	sp, #8
 8007648:	bd80      	pop	{r7, pc}
 800764a:	46c0      	nop			@ (mov r8, r8)
 800764c:	2000024c 	.word	0x2000024c

08007650 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	88db      	ldrh	r3, [r3, #6]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d006      	beq.n	8007670 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	0011      	movs	r1, r2
 8007668:	0018      	movs	r0, r3
 800766a:	f000 f8da 	bl	8007822 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800766e:	e026      	b.n	80076be <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	23a7      	movs	r3, #167	@ 0xa7
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	5cd3      	ldrb	r3, [r2, r3]
 8007678:	2b02      	cmp	r3, #2
 800767a:	dc02      	bgt.n	8007682 <USBD_GetConfig+0x32>
 800767c:	2b00      	cmp	r3, #0
 800767e:	dc03      	bgt.n	8007688 <USBD_GetConfig+0x38>
 8007680:	e016      	b.n	80076b0 <USBD_GetConfig+0x60>
 8007682:	2b03      	cmp	r3, #3
 8007684:	d00c      	beq.n	80076a0 <USBD_GetConfig+0x50>
 8007686:	e013      	b.n	80076b0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3308      	adds	r3, #8
 8007692:	0019      	movs	r1, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	0018      	movs	r0, r3
 800769a:	f000 f940 	bl	800791e <USBD_CtlSendData>
        break;
 800769e:	e00e      	b.n	80076be <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	1d19      	adds	r1, r3, #4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	0018      	movs	r0, r3
 80076aa:	f000 f938 	bl	800791e <USBD_CtlSendData>
        break;
 80076ae:	e006      	b.n	80076be <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	0011      	movs	r1, r2
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 f8b3 	bl	8007822 <USBD_CtlError>
        break;
 80076bc:	46c0      	nop			@ (mov r8, r8)
}
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b002      	add	sp, #8
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	23a7      	movs	r3, #167	@ 0xa7
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	5cd3      	ldrb	r3, [r2, r3]
 80076d8:	3b01      	subs	r3, #1
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d822      	bhi.n	8007724 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	88db      	ldrh	r3, [r3, #6]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d006      	beq.n	80076f4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	0011      	movs	r1, r2
 80076ec:	0018      	movs	r0, r3
 80076ee:	f000 f898 	bl	8007822 <USBD_CtlError>
        break;
 80076f2:	e01e      	b.n	8007732 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	23a9      	movs	r3, #169	@ 0xa9
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	58d3      	ldr	r3, [r2, r3]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2202      	movs	r2, #2
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	330c      	adds	r3, #12
 8007716:	0019      	movs	r1, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	0018      	movs	r0, r3
 800771e:	f000 f8fe 	bl	800791e <USBD_CtlSendData>
      break;
 8007722:	e006      	b.n	8007732 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0011      	movs	r1, r2
 800772a:	0018      	movs	r0, r3
 800772c:	f000 f879 	bl	8007822 <USBD_CtlError>
      break;
 8007730:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007732:	46c0      	nop			@ (mov r8, r8)
 8007734:	46bd      	mov	sp, r7
 8007736:	b002      	add	sp, #8
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	885b      	ldrh	r3, [r3, #2]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d108      	bne.n	800775e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	23a9      	movs	r3, #169	@ 0xa9
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	2101      	movs	r1, #1
 8007754:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	0018      	movs	r0, r3
 800775a:	f000 f94a 	bl	80079f2 <USBD_CtlSendStatus>
  }
}
 800775e:	46c0      	nop			@ (mov r8, r8)
 8007760:	46bd      	mov	sp, r7
 8007762:	b002      	add	sp, #8
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	23a7      	movs	r3, #167	@ 0xa7
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	5cd3      	ldrb	r3, [r2, r3]
 8007778:	3b01      	subs	r3, #1
 800777a:	2b02      	cmp	r3, #2
 800777c:	d80d      	bhi.n	800779a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d110      	bne.n	80077a8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	23a9      	movs	r3, #169	@ 0xa9
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	2100      	movs	r1, #0
 800778e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	0018      	movs	r0, r3
 8007794:	f000 f92d 	bl	80079f2 <USBD_CtlSendStatus>
      }
      break;
 8007798:	e006      	b.n	80077a8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	0011      	movs	r1, r2
 80077a0:	0018      	movs	r0, r3
 80077a2:	f000 f83e 	bl	8007822 <USBD_CtlError>
      break;
 80077a6:	e000      	b.n	80077aa <USBD_ClrFeature+0x44>
      break;
 80077a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80077aa:	46c0      	nop			@ (mov r8, r8)
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b002      	add	sp, #8
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781a      	ldrb	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	785a      	ldrb	r2, [r3, #1]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	3302      	adds	r3, #2
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	001a      	movs	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	3303      	adds	r3, #3
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	b29b      	uxth	r3, r3
 80077de:	18d3      	adds	r3, r2, r3
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	3304      	adds	r3, #4
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	001a      	movs	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	3305      	adds	r3, #5
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	18d3      	adds	r3, r2, r3
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	3306      	adds	r3, #6
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	001a      	movs	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	3307      	adds	r3, #7
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	18d3      	adds	r3, r2, r3
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	80da      	strh	r2, [r3, #6]

}
 800781a:	46c0      	nop			@ (mov r8, r8)
 800781c:	46bd      	mov	sp, r7
 800781e:	b002      	add	sp, #8
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2180      	movs	r1, #128	@ 0x80
 8007830:	0018      	movs	r0, r3
 8007832:	f000 fcb6 	bl	80081a2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2100      	movs	r1, #0
 800783a:	0018      	movs	r0, r3
 800783c:	f000 fcb1 	bl	80081a2 <USBD_LL_StallEP>
}
 8007840:	46c0      	nop			@ (mov r8, r8)
 8007842:	46bd      	mov	sp, r7
 8007844:	b002      	add	sp, #8
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007848:	b590      	push	{r4, r7, lr}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007854:	2417      	movs	r4, #23
 8007856:	193b      	adds	r3, r7, r4
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d03c      	beq.n	80078dc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	0018      	movs	r0, r3
 8007866:	f000 f83d 	bl	80078e4 <USBD_GetLen>
 800786a:	0003      	movs	r3, r0
 800786c:	3301      	adds	r3, #1
 800786e:	b29b      	uxth	r3, r3
 8007870:	18db      	adds	r3, r3, r3
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007878:	193b      	adds	r3, r7, r4
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	193a      	adds	r2, r7, r4
 800787e:	1c59      	adds	r1, r3, #1
 8007880:	7011      	strb	r1, [r2, #0]
 8007882:	001a      	movs	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	189b      	adds	r3, r3, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800788e:	193b      	adds	r3, r7, r4
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	193a      	adds	r2, r7, r4
 8007894:	1c59      	adds	r1, r3, #1
 8007896:	7011      	strb	r1, [r2, #0]
 8007898:	001a      	movs	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	189b      	adds	r3, r3, r2
 800789e:	2203      	movs	r2, #3
 80078a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80078a2:	e017      	b.n	80078d4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	60fa      	str	r2, [r7, #12]
 80078aa:	2417      	movs	r4, #23
 80078ac:	193a      	adds	r2, r7, r4
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	1939      	adds	r1, r7, r4
 80078b2:	1c50      	adds	r0, r2, #1
 80078b4:	7008      	strb	r0, [r1, #0]
 80078b6:	0011      	movs	r1, r2
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	1852      	adds	r2, r2, r1
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80078c0:	193b      	adds	r3, r7, r4
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	193a      	adds	r2, r7, r4
 80078c6:	1c59      	adds	r1, r3, #1
 80078c8:	7011      	strb	r1, [r2, #0]
 80078ca:	001a      	movs	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e3      	bne.n	80078a4 <USBD_GetString+0x5c>
    }
  }
}
 80078dc:	46c0      	nop			@ (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b007      	add	sp, #28
 80078e2:	bd90      	pop	{r4, r7, pc}

080078e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078ec:	230f      	movs	r3, #15
 80078ee:	18fb      	adds	r3, r7, r3
 80078f0:	2200      	movs	r2, #0
 80078f2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80078f4:	e008      	b.n	8007908 <USBD_GetLen+0x24>
  {
    len++;
 80078f6:	210f      	movs	r1, #15
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	187b      	adds	r3, r7, r1
 80078fe:	3201      	adds	r2, #1
 8007900:	701a      	strb	r2, [r3, #0]
    buf++;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3301      	adds	r3, #1
 8007906:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f2      	bne.n	80078f6 <USBD_GetLen+0x12>
  }

  return len;
 8007910:	230f      	movs	r3, #15
 8007912:	18fb      	adds	r3, r7, r3
 8007914:	781b      	ldrb	r3, [r3, #0]
}
 8007916:	0018      	movs	r0, r3
 8007918:	46bd      	mov	sp, r7
 800791a:	b004      	add	sp, #16
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	1dbb      	adds	r3, r7, #6
 800792a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	23a5      	movs	r3, #165	@ 0xa5
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	2102      	movs	r1, #2
 8007934:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007936:	1dbb      	adds	r3, r7, #6
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800793e:	1dbb      	adds	r3, r7, #6
 8007940:	881a      	ldrh	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007946:	1dbb      	adds	r3, r7, #6
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	2100      	movs	r1, #0
 8007950:	f000 fcd8 	bl	8008304 <USBD_LL_Transmit>

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	0018      	movs	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	b004      	add	sp, #16
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	1dbb      	adds	r3, r7, #6
 800796a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800796c:	1dbb      	adds	r3, r7, #6
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	2100      	movs	r1, #0
 8007976:	f000 fcc5 	bl	8008304 <USBD_LL_Transmit>

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	0018      	movs	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	b004      	add	sp, #16
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	1dbb      	adds	r3, r7, #6
 8007990:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	23a5      	movs	r3, #165	@ 0xa5
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	2103      	movs	r1, #3
 800799a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800799c:	1dbb      	adds	r3, r7, #6
 800799e:	8819      	ldrh	r1, [r3, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	23ae      	movs	r3, #174	@ 0xae
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80079a8:	1dbb      	adds	r3, r7, #6
 80079aa:	8819      	ldrh	r1, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	23b0      	movs	r3, #176	@ 0xb0
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079b4:	1dbb      	adds	r3, r7, #6
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	2100      	movs	r1, #0
 80079be:	f000 fcd8 	bl	8008372 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	0018      	movs	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b004      	add	sp, #16
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	1dbb      	adds	r3, r7, #6
 80079d8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079da:	1dbb      	adds	r3, r7, #6
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	2100      	movs	r1, #0
 80079e4:	f000 fcc5 	bl	8008372 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	0018      	movs	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b004      	add	sp, #16
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	23a5      	movs	r3, #165	@ 0xa5
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	2104      	movs	r1, #4
 8007a02:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	2300      	movs	r3, #0
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	f000 fc7a 	bl	8008304 <USBD_LL_Transmit>

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b002      	add	sp, #8
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	23a5      	movs	r3, #165	@ 0xa5
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	2105      	movs	r1, #5
 8007a2a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	f000 fc9d 	bl	8008372 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b002      	add	sp, #8
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a48:	4914      	ldr	r1, [pc, #80]	@ (8007a9c <MX_USB_DEVICE_Init+0x58>)
 8007a4a:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <MX_USB_DEVICE_Init+0x5c>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f7fe fdec 	bl	800662c <USBD_Init>
 8007a54:	1e03      	subs	r3, r0, #0
 8007a56:	d001      	beq.n	8007a5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a58:	f7f8 fe66 	bl	8000728 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a5c:	4a11      	ldr	r2, [pc, #68]	@ (8007aa4 <MX_USB_DEVICE_Init+0x60>)
 8007a5e:	4b10      	ldr	r3, [pc, #64]	@ (8007aa0 <MX_USB_DEVICE_Init+0x5c>)
 8007a60:	0011      	movs	r1, r2
 8007a62:	0018      	movs	r0, r3
 8007a64:	f7fe fe13 	bl	800668e <USBD_RegisterClass>
 8007a68:	1e03      	subs	r3, r0, #0
 8007a6a:	d001      	beq.n	8007a70 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007a6c:	f7f8 fe5c 	bl	8000728 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a70:	4a0d      	ldr	r2, [pc, #52]	@ (8007aa8 <MX_USB_DEVICE_Init+0x64>)
 8007a72:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa0 <MX_USB_DEVICE_Init+0x5c>)
 8007a74:	0011      	movs	r1, r2
 8007a76:	0018      	movs	r0, r3
 8007a78:	f7fe fd28 	bl	80064cc <USBD_CDC_RegisterInterface>
 8007a7c:	1e03      	subs	r3, r0, #0
 8007a7e:	d001      	beq.n	8007a84 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007a80:	f7f8 fe52 	bl	8000728 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a84:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <MX_USB_DEVICE_Init+0x5c>)
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7fe fe21 	bl	80066ce <USBD_Start>
 8007a8c:	1e03      	subs	r3, r0, #0
 8007a8e:	d001      	beq.n	8007a94 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007a90:	f7f8 fe4a 	bl	8000728 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a94:	46c0      	nop			@ (mov r8, r8)
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	2000012c 	.word	0x2000012c
 8007aa0:	20000250 	.word	0x20000250
 8007aa4:	20000018 	.word	0x20000018
 8007aa8:	2000011c 	.word	0x2000011c

08007aac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ab0:	4907      	ldr	r1, [pc, #28]	@ (8007ad0 <CDC_Init_FS+0x24>)
 8007ab2:	4b08      	ldr	r3, [pc, #32]	@ (8007ad4 <CDC_Init_FS+0x28>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f7fe fd23 	bl	8006502 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007abc:	4a06      	ldr	r2, [pc, #24]	@ (8007ad8 <CDC_Init_FS+0x2c>)
 8007abe:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <CDC_Init_FS+0x28>)
 8007ac0:	0011      	movs	r1, r2
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f7fe fd39 	bl	800653a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ac8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007aca:	0018      	movs	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000914 	.word	0x20000914
 8007ad4:	20000250 	.word	0x20000250
 8007ad8:	20000514 	.word	0x20000514

08007adc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ae0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6039      	str	r1, [r7, #0]
 8007af0:	0011      	movs	r1, r2
 8007af2:	1dfb      	adds	r3, r7, #7
 8007af4:	1c02      	adds	r2, r0, #0
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	1c0a      	adds	r2, r1, #0
 8007afc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007afe:	1dfb      	adds	r3, r7, #7
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b23      	cmp	r3, #35	@ 0x23
 8007b04:	d804      	bhi.n	8007b10 <CDC_Control_FS+0x28>
 8007b06:	009a      	lsls	r2, r3, #2
 8007b08:	4b04      	ldr	r3, [pc, #16]	@ (8007b1c <CDC_Control_FS+0x34>)
 8007b0a:	18d3      	adds	r3, r2, r3
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b10:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8007b12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	08008ed0 	.word	0x08008ed0

08007b20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <CDC_Receive_FS+0x28>)
 8007b2e:	0011      	movs	r1, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f7fe fd02 	bl	800653a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b36:	4b04      	ldr	r3, [pc, #16]	@ (8007b48 <CDC_Receive_FS+0x28>)
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f7fe fd49 	bl	80065d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b3e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b40:	0018      	movs	r0, r3
 8007b42:	46bd      	mov	sp, r7
 8007b44:	b002      	add	sp, #8
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000250 	.word	0x20000250

08007b4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b4c:	b5b0      	push	{r4, r5, r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	000a      	movs	r2, r1
 8007b56:	1cbb      	adds	r3, r7, #2
 8007b58:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8007b5a:	230f      	movs	r3, #15
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	2200      	movs	r2, #0
 8007b60:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b62:	4a11      	ldr	r2, [pc, #68]	@ (8007ba8 <CDC_Transmit_FS+0x5c>)
 8007b64:	23ae      	movs	r3, #174	@ 0xae
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	58d3      	ldr	r3, [r2, r3]
 8007b6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	2385      	movs	r3, #133	@ 0x85
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	58d3      	ldr	r3, [r2, r3]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e010      	b.n	8007b9e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b7c:	1cbb      	adds	r3, r7, #2
 8007b7e:	881a      	ldrh	r2, [r3, #0]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <CDC_Transmit_FS+0x5c>)
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7fe fcbc 	bl	8006502 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b8a:	250f      	movs	r5, #15
 8007b8c:	197c      	adds	r4, r7, r5
 8007b8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <CDC_Transmit_FS+0x5c>)
 8007b90:	0018      	movs	r0, r3
 8007b92:	f7fe fce6 	bl	8006562 <USBD_CDC_TransmitPacket>
 8007b96:	0003      	movs	r3, r0
 8007b98:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8007b9a:	197b      	adds	r3, r7, r5
 8007b9c:	781b      	ldrb	r3, [r3, #0]
}
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	b004      	add	sp, #16
 8007ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ba6:	46c0      	nop			@ (mov r8, r8)
 8007ba8:	20000250 	.word	0x20000250

08007bac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	0002      	movs	r2, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	1dfb      	adds	r3, r7, #7
 8007bb8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2212      	movs	r2, #18
 8007bbe:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bc0:	4b02      	ldr	r3, [pc, #8]	@ (8007bcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b002      	add	sp, #8
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	46c0      	nop			@ (mov r8, r8)
 8007bcc:	20000148 	.word	0x20000148

08007bd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	0002      	movs	r2, r0
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	1dfb      	adds	r3, r7, #7
 8007bdc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2204      	movs	r2, #4
 8007be2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007be4:	4b02      	ldr	r3, [pc, #8]	@ (8007bf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b002      	add	sp, #8
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	2000015c 	.word	0x2000015c

08007bf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	0002      	movs	r2, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	1dfb      	adds	r3, r7, #7
 8007c00:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007c02:	1dfb      	adds	r3, r7, #7
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4908      	ldr	r1, [pc, #32]	@ (8007c30 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007c0e:	4b09      	ldr	r3, [pc, #36]	@ (8007c34 <USBD_FS_ProductStrDescriptor+0x40>)
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7ff fe19 	bl	8007848 <USBD_GetString>
 8007c16:	e005      	b.n	8007c24 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	4905      	ldr	r1, [pc, #20]	@ (8007c30 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007c1c:	4b05      	ldr	r3, [pc, #20]	@ (8007c34 <USBD_FS_ProductStrDescriptor+0x40>)
 8007c1e:	0018      	movs	r0, r3
 8007c20:	f7ff fe12 	bl	8007848 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c24:	4b02      	ldr	r3, [pc, #8]	@ (8007c30 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007c26:	0018      	movs	r0, r3
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b002      	add	sp, #8
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	46c0      	nop			@ (mov r8, r8)
 8007c30:	20000d14 	.word	0x20000d14
 8007c34:	08008e0c 	.word	0x08008e0c

08007c38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	0002      	movs	r2, r0
 8007c40:	6039      	str	r1, [r7, #0]
 8007c42:	1dfb      	adds	r3, r7, #7
 8007c44:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4904      	ldr	r1, [pc, #16]	@ (8007c5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c4a:	4b05      	ldr	r3, [pc, #20]	@ (8007c60 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	f7ff fdfb 	bl	8007848 <USBD_GetString>
  return USBD_StrDesc;
 8007c52:	4b02      	ldr	r3, [pc, #8]	@ (8007c5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007c54:	0018      	movs	r0, r3
 8007c56:	46bd      	mov	sp, r7
 8007c58:	b002      	add	sp, #8
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20000d14 	.word	0x20000d14
 8007c60:	08008e24 	.word	0x08008e24

08007c64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	0002      	movs	r2, r0
 8007c6c:	6039      	str	r1, [r7, #0]
 8007c6e:	1dfb      	adds	r3, r7, #7
 8007c70:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	221a      	movs	r2, #26
 8007c76:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c78:	f000 f84c 	bl	8007d14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c7c:	4b02      	ldr	r3, [pc, #8]	@ (8007c88 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007c7e:	0018      	movs	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	b002      	add	sp, #8
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	46c0      	nop			@ (mov r8, r8)
 8007c88:	20000160 	.word	0x20000160

08007c8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	0002      	movs	r2, r0
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	1dfb      	adds	r3, r7, #7
 8007c98:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007c9a:	1dfb      	adds	r3, r7, #7
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	4908      	ldr	r1, [pc, #32]	@ (8007cc8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007ca6:	4b09      	ldr	r3, [pc, #36]	@ (8007ccc <USBD_FS_ConfigStrDescriptor+0x40>)
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7ff fdcd 	bl	8007848 <USBD_GetString>
 8007cae:	e005      	b.n	8007cbc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	4905      	ldr	r1, [pc, #20]	@ (8007cc8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007cb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ccc <USBD_FS_ConfigStrDescriptor+0x40>)
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f7ff fdc6 	bl	8007848 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cbc:	4b02      	ldr	r3, [pc, #8]	@ (8007cc8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b002      	add	sp, #8
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	20000d14 	.word	0x20000d14
 8007ccc:	08008e38 	.word	0x08008e38

08007cd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	0002      	movs	r2, r0
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	1dfb      	adds	r3, r7, #7
 8007cdc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007cde:	1dfb      	adds	r3, r7, #7
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	4908      	ldr	r1, [pc, #32]	@ (8007d0c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007cea:	4b09      	ldr	r3, [pc, #36]	@ (8007d10 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007cec:	0018      	movs	r0, r3
 8007cee:	f7ff fdab 	bl	8007848 <USBD_GetString>
 8007cf2:	e005      	b.n	8007d00 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	4905      	ldr	r1, [pc, #20]	@ (8007d0c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007cf8:	4b05      	ldr	r3, [pc, #20]	@ (8007d10 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f7ff fda4 	bl	8007848 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d00:	4b02      	ldr	r3, [pc, #8]	@ (8007d0c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007d02:	0018      	movs	r0, r3
 8007d04:	46bd      	mov	sp, r7
 8007d06:	b002      	add	sp, #8
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	46c0      	nop			@ (mov r8, r8)
 8007d0c:	20000d14 	.word	0x20000d14
 8007d10:	08008e44 	.word	0x08008e44

08007d14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d1a:	4b10      	ldr	r3, [pc, #64]	@ (8007d5c <Get_SerialNum+0x48>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d20:	4b0f      	ldr	r3, [pc, #60]	@ (8007d60 <Get_SerialNum+0x4c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d26:	4b0f      	ldr	r3, [pc, #60]	@ (8007d64 <Get_SerialNum+0x50>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	18d3      	adds	r3, r2, r3
 8007d32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d3a:	490b      	ldr	r1, [pc, #44]	@ (8007d68 <Get_SerialNum+0x54>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2208      	movs	r2, #8
 8007d40:	0018      	movs	r0, r3
 8007d42:	f000 f815 	bl	8007d70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d46:	4909      	ldr	r1, [pc, #36]	@ (8007d6c <Get_SerialNum+0x58>)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f000 f80f 	bl	8007d70 <IntToUnicode>
  }
}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b004      	add	sp, #16
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	46c0      	nop			@ (mov r8, r8)
 8007d5c:	1ff80050 	.word	0x1ff80050
 8007d60:	1ff80054 	.word	0x1ff80054
 8007d64:	1ff80058 	.word	0x1ff80058
 8007d68:	20000162 	.word	0x20000162
 8007d6c:	20000172 	.word	0x20000172

08007d70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	1dfb      	adds	r3, r7, #7
 8007d7c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007d7e:	2117      	movs	r1, #23
 8007d80:	187b      	adds	r3, r7, r1
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007d86:	187b      	adds	r3, r7, r1
 8007d88:	2200      	movs	r2, #0
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	e02f      	b.n	8007dee <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	0f1b      	lsrs	r3, r3, #28
 8007d92:	2b09      	cmp	r3, #9
 8007d94:	d80d      	bhi.n	8007db2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	0f1b      	lsrs	r3, r3, #28
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	2317      	movs	r3, #23
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	0019      	movs	r1, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	185b      	adds	r3, r3, r1
 8007daa:	3230      	adds	r2, #48	@ 0x30
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	e00c      	b.n	8007dcc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	0f1b      	lsrs	r3, r3, #28
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	2317      	movs	r3, #23
 8007dba:	18fb      	adds	r3, r7, r3
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	0019      	movs	r1, r3
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	185b      	adds	r3, r3, r1
 8007dc6:	3237      	adds	r2, #55	@ 0x37
 8007dc8:	b2d2      	uxtb	r2, r2
 8007dca:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007dd2:	2117      	movs	r1, #23
 8007dd4:	187b      	adds	r3, r7, r1
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	3301      	adds	r3, #1
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	18d3      	adds	r3, r2, r3
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	187b      	adds	r3, r7, r1
 8007dea:	3201      	adds	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	2317      	movs	r3, #23
 8007df0:	18fa      	adds	r2, r7, r3
 8007df2:	1dfb      	adds	r3, r7, #7
 8007df4:	7812      	ldrb	r2, [r2, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3c8      	bcc.n	8007d8e <IntToUnicode+0x1e>
  }
}
 8007dfc:	46c0      	nop			@ (mov r8, r8)
 8007dfe:	46c0      	nop			@ (mov r8, r8)
 8007e00:	46bd      	mov	sp, r7
 8007e02:	b006      	add	sp, #24
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0a      	ldr	r2, [pc, #40]	@ (8007e40 <HAL_PCD_MspInit+0x38>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d10e      	bne.n	8007e38 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <HAL_PCD_MspInit+0x3c>)
 8007e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e1e:	4b09      	ldr	r3, [pc, #36]	@ (8007e44 <HAL_PCD_MspInit+0x3c>)
 8007e20:	2180      	movs	r1, #128	@ 0x80
 8007e22:	0409      	lsls	r1, r1, #16
 8007e24:	430a      	orrs	r2, r1
 8007e26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	201f      	movs	r0, #31
 8007e2e:	f7f8 fe81 	bl	8000b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007e32:	201f      	movs	r0, #31
 8007e34:	f7f8 fe93 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e38:	46c0      	nop			@ (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b002      	add	sp, #8
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40005c00 	.word	0x40005c00
 8007e44:	40021000 	.word	0x40021000

08007e48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	23b6      	movs	r3, #182	@ 0xb6
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	58d2      	ldr	r2, [r2, r3]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	21a6      	movs	r1, #166	@ 0xa6
 8007e5c:	0089      	lsls	r1, r1, #2
 8007e5e:	468c      	mov	ip, r1
 8007e60:	4463      	add	r3, ip
 8007e62:	0019      	movs	r1, r3
 8007e64:	0010      	movs	r0, r2
 8007e66:	f7fe fc85 	bl	8006774 <USBD_LL_SetupStage>
}
 8007e6a:	46c0      	nop			@ (mov r8, r8)
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	b002      	add	sp, #8
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e72:	b590      	push	{r4, r7, lr}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	000a      	movs	r2, r1
 8007e7c:	1cfb      	adds	r3, r7, #3
 8007e7e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	23b6      	movs	r3, #182	@ 0xb6
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	58d4      	ldr	r4, [r2, r3]
 8007e88:	1cfb      	adds	r3, r7, #3
 8007e8a:	781a      	ldrb	r2, [r3, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	23b2      	movs	r3, #178	@ 0xb2
 8007e90:	0059      	lsls	r1, r3, #1
 8007e92:	0013      	movs	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	189b      	adds	r3, r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	18c3      	adds	r3, r0, r3
 8007e9c:	185b      	adds	r3, r3, r1
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	1cfb      	adds	r3, r7, #3
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	0019      	movs	r1, r3
 8007ea6:	0020      	movs	r0, r4
 8007ea8:	f7fe fcc2 	bl	8006830 <USBD_LL_DataOutStage>
}
 8007eac:	46c0      	nop			@ (mov r8, r8)
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	b003      	add	sp, #12
 8007eb2:	bd90      	pop	{r4, r7, pc}

08007eb4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	000a      	movs	r2, r1
 8007ebe:	1cfb      	adds	r3, r7, #3
 8007ec0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	23b6      	movs	r3, #182	@ 0xb6
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	58d0      	ldr	r0, [r2, r3]
 8007eca:	1cfb      	adds	r3, r7, #3
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	0013      	movs	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	18cb      	adds	r3, r1, r3
 8007eda:	3324      	adds	r3, #36	@ 0x24
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	1cfb      	adds	r3, r7, #3
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	0019      	movs	r1, r3
 8007ee4:	f7fe fd26 	bl	8006934 <USBD_LL_DataInStage>
}
 8007ee8:	46c0      	nop			@ (mov r8, r8)
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b002      	add	sp, #8
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	23b6      	movs	r3, #182	@ 0xb6
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	58d3      	ldr	r3, [r2, r3]
 8007f00:	0018      	movs	r0, r3
 8007f02:	f7fe fe5d 	bl	8006bc0 <USBD_LL_SOF>
}
 8007f06:	46c0      	nop			@ (mov r8, r8)
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b002      	add	sp, #8
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f16:	230f      	movs	r3, #15
 8007f18:	18fb      	adds	r3, r7, r3
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	795b      	ldrb	r3, [r3, #5]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d001      	beq.n	8007f2a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007f26:	f7f8 fbff 	bl	8000728 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	23b6      	movs	r3, #182	@ 0xb6
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	58d2      	ldr	r2, [r2, r3]
 8007f32:	230f      	movs	r3, #15
 8007f34:	18fb      	adds	r3, r7, r3
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	0019      	movs	r1, r3
 8007f3a:	0010      	movs	r0, r2
 8007f3c:	f7fe fdff 	bl	8006b3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	23b6      	movs	r3, #182	@ 0xb6
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	58d3      	ldr	r3, [r2, r3]
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f7fe fdb0 	bl	8006aae <USBD_LL_Reset>
}
 8007f4e:	46c0      	nop			@ (mov r8, r8)
 8007f50:	46bd      	mov	sp, r7
 8007f52:	b004      	add	sp, #16
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	23b6      	movs	r3, #182	@ 0xb6
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	58d3      	ldr	r3, [r2, r3]
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f7fe fdf9 	bl	8006b60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7a5b      	ldrb	r3, [r3, #9]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f76:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <HAL_PCD_SuspendCallback+0x34>)
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	4b04      	ldr	r3, [pc, #16]	@ (8007f8c <HAL_PCD_SuspendCallback+0x34>)
 8007f7c:	2106      	movs	r1, #6
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b002      	add	sp, #8
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	e000ed00 	.word	0xe000ed00

08007f90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	7a5b      	ldrb	r3, [r3, #9]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d007      	beq.n	8007fb0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fa0:	4b09      	ldr	r3, [pc, #36]	@ (8007fc8 <HAL_PCD_ResumeCallback+0x38>)
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	4b08      	ldr	r3, [pc, #32]	@ (8007fc8 <HAL_PCD_ResumeCallback+0x38>)
 8007fa6:	2106      	movs	r1, #6
 8007fa8:	438a      	bics	r2, r1
 8007faa:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007fac:	f000 fa42 	bl	8008434 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	23b6      	movs	r3, #182	@ 0xb6
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	58d3      	ldr	r3, [r2, r3]
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f7fe fde9 	bl	8006b90 <USBD_LL_Resume>
}
 8007fbe:	46c0      	nop			@ (mov r8, r8)
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b002      	add	sp, #8
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	46c0      	nop			@ (mov r8, r8)
 8007fc8:	e000ed00 	.word	0xe000ed00

08007fcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800808c <USBD_LL_Init+0xc0>)
 8007fd6:	23b6      	movs	r3, #182	@ 0xb6
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	23b0      	movs	r3, #176	@ 0xb0
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4929      	ldr	r1, [pc, #164]	@ (800808c <USBD_LL_Init+0xc0>)
 8007fe6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007fe8:	4b28      	ldr	r3, [pc, #160]	@ (800808c <USBD_LL_Init+0xc0>)
 8007fea:	4a29      	ldr	r2, [pc, #164]	@ (8008090 <USBD_LL_Init+0xc4>)
 8007fec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fee:	4b27      	ldr	r3, [pc, #156]	@ (800808c <USBD_LL_Init+0xc0>)
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ff4:	4b25      	ldr	r3, [pc, #148]	@ (800808c <USBD_LL_Init+0xc0>)
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ffa:	4b24      	ldr	r3, [pc, #144]	@ (800808c <USBD_LL_Init+0xc0>)
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008000:	4b22      	ldr	r3, [pc, #136]	@ (800808c <USBD_LL_Init+0xc0>)
 8008002:	2200      	movs	r2, #0
 8008004:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008006:	4b21      	ldr	r3, [pc, #132]	@ (800808c <USBD_LL_Init+0xc0>)
 8008008:	2200      	movs	r2, #0
 800800a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800800c:	4b1f      	ldr	r3, [pc, #124]	@ (800808c <USBD_LL_Init+0xc0>)
 800800e:	2200      	movs	r2, #0
 8008010:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008012:	4b1e      	ldr	r3, [pc, #120]	@ (800808c <USBD_LL_Init+0xc0>)
 8008014:	0018      	movs	r0, r3
 8008016:	f7f8 ff5b 	bl	8000ed0 <HAL_PCD_Init>
 800801a:	1e03      	subs	r3, r0, #0
 800801c:	d001      	beq.n	8008022 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800801e:	f7f8 fb83 	bl	8000728 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	23b0      	movs	r3, #176	@ 0xb0
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	58d0      	ldr	r0, [r2, r3]
 800802a:	2318      	movs	r3, #24
 800802c:	2200      	movs	r2, #0
 800802e:	2100      	movs	r1, #0
 8008030:	f7fa fd16 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	23b0      	movs	r3, #176	@ 0xb0
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	58d0      	ldr	r0, [r2, r3]
 800803c:	2358      	movs	r3, #88	@ 0x58
 800803e:	2200      	movs	r2, #0
 8008040:	2180      	movs	r1, #128	@ 0x80
 8008042:	f7fa fd0d 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	23b0      	movs	r3, #176	@ 0xb0
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	58d0      	ldr	r0, [r2, r3]
 800804e:	23c0      	movs	r3, #192	@ 0xc0
 8008050:	2200      	movs	r2, #0
 8008052:	2181      	movs	r1, #129	@ 0x81
 8008054:	f7fa fd04 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	23b0      	movs	r3, #176	@ 0xb0
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	58d0      	ldr	r0, [r2, r3]
 8008060:	2388      	movs	r3, #136	@ 0x88
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	2200      	movs	r2, #0
 8008066:	2101      	movs	r1, #1
 8008068:	f7fa fcfa 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	23b0      	movs	r3, #176	@ 0xb0
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	58d0      	ldr	r0, [r2, r3]
 8008074:	2380      	movs	r3, #128	@ 0x80
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	2200      	movs	r2, #0
 800807a:	2182      	movs	r1, #130	@ 0x82
 800807c:	f7fa fcf0 	bl	8002a60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	0018      	movs	r0, r3
 8008084:	46bd      	mov	sp, r7
 8008086:	b002      	add	sp, #8
 8008088:	bd80      	pop	{r7, pc}
 800808a:	46c0      	nop			@ (mov r8, r8)
 800808c:	20000f14 	.word	0x20000f14
 8008090:	40005c00 	.word	0x40005c00

08008094 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809c:	210f      	movs	r1, #15
 800809e:	187b      	adds	r3, r7, r1
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a4:	260e      	movs	r6, #14
 80080a6:	19bb      	adds	r3, r7, r6
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	23b0      	movs	r3, #176	@ 0xb0
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	58d3      	ldr	r3, [r2, r3]
 80080b4:	000d      	movs	r5, r1
 80080b6:	187c      	adds	r4, r7, r1
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7f8 fffd 	bl	80010b8 <HAL_PCD_Start>
 80080be:	0003      	movs	r3, r0
 80080c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c2:	19bc      	adds	r4, r7, r6
 80080c4:	197b      	adds	r3, r7, r5
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	0018      	movs	r0, r3
 80080ca:	f000 f9ba 	bl	8008442 <USBD_Get_USB_Status>
 80080ce:	0003      	movs	r3, r0
 80080d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80080d2:	19bb      	adds	r3, r7, r6
 80080d4:	781b      	ldrb	r3, [r3, #0]
}
 80080d6:	0018      	movs	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	b005      	add	sp, #20
 80080dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	000c      	movs	r4, r1
 80080e8:	0010      	movs	r0, r2
 80080ea:	0019      	movs	r1, r3
 80080ec:	1cfb      	adds	r3, r7, #3
 80080ee:	1c22      	adds	r2, r4, #0
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	1cbb      	adds	r3, r7, #2
 80080f4:	1c02      	adds	r2, r0, #0
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	003b      	movs	r3, r7
 80080fa:	1c0a      	adds	r2, r1, #0
 80080fc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fe:	260f      	movs	r6, #15
 8008100:	19bb      	adds	r3, r7, r6
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008106:	250e      	movs	r5, #14
 8008108:	197b      	adds	r3, r7, r5
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	23b0      	movs	r3, #176	@ 0xb0
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58d0      	ldr	r0, [r2, r3]
 8008116:	19bc      	adds	r4, r7, r6
 8008118:	1cbb      	adds	r3, r7, #2
 800811a:	781d      	ldrb	r5, [r3, #0]
 800811c:	003b      	movs	r3, r7
 800811e:	881a      	ldrh	r2, [r3, #0]
 8008120:	1cfb      	adds	r3, r7, #3
 8008122:	7819      	ldrb	r1, [r3, #0]
 8008124:	002b      	movs	r3, r5
 8008126:	f7f9 f95b 	bl	80013e0 <HAL_PCD_EP_Open>
 800812a:	0003      	movs	r3, r0
 800812c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812e:	250e      	movs	r5, #14
 8008130:	197c      	adds	r4, r7, r5
 8008132:	19bb      	adds	r3, r7, r6
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	0018      	movs	r0, r3
 8008138:	f000 f983 	bl	8008442 <USBD_Get_USB_Status>
 800813c:	0003      	movs	r3, r0
 800813e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008140:	197b      	adds	r3, r7, r5
 8008142:	781b      	ldrb	r3, [r3, #0]
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b005      	add	sp, #20
 800814a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800814c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	000a      	movs	r2, r1
 8008156:	1cfb      	adds	r3, r7, #3
 8008158:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815a:	210f      	movs	r1, #15
 800815c:	187b      	adds	r3, r7, r1
 800815e:	2200      	movs	r2, #0
 8008160:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008162:	260e      	movs	r6, #14
 8008164:	19bb      	adds	r3, r7, r6
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	23b0      	movs	r3, #176	@ 0xb0
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	58d2      	ldr	r2, [r2, r3]
 8008172:	000d      	movs	r5, r1
 8008174:	187c      	adds	r4, r7, r1
 8008176:	1cfb      	adds	r3, r7, #3
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	0019      	movs	r1, r3
 800817c:	0010      	movs	r0, r2
 800817e:	f7f9 f9a0 	bl	80014c2 <HAL_PCD_EP_Close>
 8008182:	0003      	movs	r3, r0
 8008184:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008186:	19bc      	adds	r4, r7, r6
 8008188:	197b      	adds	r3, r7, r5
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	0018      	movs	r0, r3
 800818e:	f000 f958 	bl	8008442 <USBD_Get_USB_Status>
 8008192:	0003      	movs	r3, r0
 8008194:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008196:	19bb      	adds	r3, r7, r6
 8008198:	781b      	ldrb	r3, [r3, #0]
}
 800819a:	0018      	movs	r0, r3
 800819c:	46bd      	mov	sp, r7
 800819e:	b005      	add	sp, #20
 80081a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081a2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081a4:	b085      	sub	sp, #20
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	000a      	movs	r2, r1
 80081ac:	1cfb      	adds	r3, r7, #3
 80081ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	210f      	movs	r1, #15
 80081b2:	187b      	adds	r3, r7, r1
 80081b4:	2200      	movs	r2, #0
 80081b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b8:	260e      	movs	r6, #14
 80081ba:	19bb      	adds	r3, r7, r6
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	23b0      	movs	r3, #176	@ 0xb0
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	58d2      	ldr	r2, [r2, r3]
 80081c8:	000d      	movs	r5, r1
 80081ca:	187c      	adds	r4, r7, r1
 80081cc:	1cfb      	adds	r3, r7, #3
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	0019      	movs	r1, r3
 80081d2:	0010      	movs	r0, r2
 80081d4:	f7f9 fa52 	bl	800167c <HAL_PCD_EP_SetStall>
 80081d8:	0003      	movs	r3, r0
 80081da:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081dc:	19bc      	adds	r4, r7, r6
 80081de:	197b      	adds	r3, r7, r5
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 f92d 	bl	8008442 <USBD_Get_USB_Status>
 80081e8:	0003      	movs	r3, r0
 80081ea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80081ec:	19bb      	adds	r3, r7, r6
 80081ee:	781b      	ldrb	r3, [r3, #0]
}
 80081f0:	0018      	movs	r0, r3
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b005      	add	sp, #20
 80081f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	000a      	movs	r2, r1
 8008202:	1cfb      	adds	r3, r7, #3
 8008204:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008206:	210f      	movs	r1, #15
 8008208:	187b      	adds	r3, r7, r1
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820e:	260e      	movs	r6, #14
 8008210:	19bb      	adds	r3, r7, r6
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	23b0      	movs	r3, #176	@ 0xb0
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	58d2      	ldr	r2, [r2, r3]
 800821e:	000d      	movs	r5, r1
 8008220:	187c      	adds	r4, r7, r1
 8008222:	1cfb      	adds	r3, r7, #3
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	0019      	movs	r1, r3
 8008228:	0010      	movs	r0, r2
 800822a:	f7f9 fa83 	bl	8001734 <HAL_PCD_EP_ClrStall>
 800822e:	0003      	movs	r3, r0
 8008230:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008232:	19bc      	adds	r4, r7, r6
 8008234:	197b      	adds	r3, r7, r5
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	0018      	movs	r0, r3
 800823a:	f000 f902 	bl	8008442 <USBD_Get_USB_Status>
 800823e:	0003      	movs	r3, r0
 8008240:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008242:	19bb      	adds	r3, r7, r6
 8008244:	781b      	ldrb	r3, [r3, #0]
}
 8008246:	0018      	movs	r0, r3
 8008248:	46bd      	mov	sp, r7
 800824a:	b005      	add	sp, #20
 800824c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800824e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	000a      	movs	r2, r1
 8008258:	1cfb      	adds	r3, r7, #3
 800825a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	23b0      	movs	r3, #176	@ 0xb0
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	58d3      	ldr	r3, [r2, r3]
 8008264:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008266:	1cfb      	adds	r3, r7, #3
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	b25b      	sxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	da0c      	bge.n	800828a <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008270:	1cfb      	adds	r3, r7, #3
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	227f      	movs	r2, #127	@ 0x7f
 8008276:	401a      	ands	r2, r3
 8008278:	68f9      	ldr	r1, [r7, #12]
 800827a:	0013      	movs	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	189b      	adds	r3, r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	18cb      	adds	r3, r1, r3
 8008284:	3312      	adds	r3, #18
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	e00d      	b.n	80082a6 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800828a:	1cfb      	adds	r3, r7, #3
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	227f      	movs	r2, #127	@ 0x7f
 8008290:	401a      	ands	r2, r3
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	23a9      	movs	r3, #169	@ 0xa9
 8008296:	0059      	lsls	r1, r3, #1
 8008298:	0013      	movs	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	189b      	adds	r3, r3, r2
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	18c3      	adds	r3, r0, r3
 80082a2:	185b      	adds	r3, r3, r1
 80082a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	000a      	movs	r2, r1
 80082b8:	1cfb      	adds	r3, r7, #3
 80082ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082bc:	210f      	movs	r1, #15
 80082be:	187b      	adds	r3, r7, r1
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c4:	260e      	movs	r6, #14
 80082c6:	19bb      	adds	r3, r7, r6
 80082c8:	2200      	movs	r2, #0
 80082ca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	23b0      	movs	r3, #176	@ 0xb0
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	58d2      	ldr	r2, [r2, r3]
 80082d4:	000d      	movs	r5, r1
 80082d6:	187c      	adds	r4, r7, r1
 80082d8:	1cfb      	adds	r3, r7, #3
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	0019      	movs	r1, r3
 80082de:	0010      	movs	r0, r2
 80082e0:	f7f9 f854 	bl	800138c <HAL_PCD_SetAddress>
 80082e4:	0003      	movs	r3, r0
 80082e6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e8:	19bc      	adds	r4, r7, r6
 80082ea:	197b      	adds	r3, r7, r5
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	0018      	movs	r0, r3
 80082f0:	f000 f8a7 	bl	8008442 <USBD_Get_USB_Status>
 80082f4:	0003      	movs	r3, r0
 80082f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80082f8:	19bb      	adds	r3, r7, r6
 80082fa:	781b      	ldrb	r3, [r3, #0]
}
 80082fc:	0018      	movs	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	b005      	add	sp, #20
 8008302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008304 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	0008      	movs	r0, r1
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	0019      	movs	r1, r3
 8008312:	230b      	movs	r3, #11
 8008314:	18fb      	adds	r3, r7, r3
 8008316:	1c02      	adds	r2, r0, #0
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	2408      	movs	r4, #8
 800831c:	193b      	adds	r3, r7, r4
 800831e:	1c0a      	adds	r2, r1, #0
 8008320:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008322:	2117      	movs	r1, #23
 8008324:	187b      	adds	r3, r7, r1
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832a:	2516      	movs	r5, #22
 800832c:	197b      	adds	r3, r7, r5
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	23b0      	movs	r3, #176	@ 0xb0
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	58d0      	ldr	r0, [r2, r3]
 800833a:	193b      	adds	r3, r7, r4
 800833c:	881d      	ldrh	r5, [r3, #0]
 800833e:	000e      	movs	r6, r1
 8008340:	187c      	adds	r4, r7, r1
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	230b      	movs	r3, #11
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	7819      	ldrb	r1, [r3, #0]
 800834a:	002b      	movs	r3, r5
 800834c:	f7f9 f95a 	bl	8001604 <HAL_PCD_EP_Transmit>
 8008350:	0003      	movs	r3, r0
 8008352:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008354:	2516      	movs	r5, #22
 8008356:	197c      	adds	r4, r7, r5
 8008358:	19bb      	adds	r3, r7, r6
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	0018      	movs	r0, r3
 800835e:	f000 f870 	bl	8008442 <USBD_Get_USB_Status>
 8008362:	0003      	movs	r3, r0
 8008364:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008366:	197b      	adds	r3, r7, r5
 8008368:	781b      	ldrb	r3, [r3, #0]
}
 800836a:	0018      	movs	r0, r3
 800836c:	46bd      	mov	sp, r7
 800836e:	b007      	add	sp, #28
 8008370:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008372 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008374:	b087      	sub	sp, #28
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	0008      	movs	r0, r1
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	0019      	movs	r1, r3
 8008380:	230b      	movs	r3, #11
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	1c02      	adds	r2, r0, #0
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	2408      	movs	r4, #8
 800838a:	193b      	adds	r3, r7, r4
 800838c:	1c0a      	adds	r2, r1, #0
 800838e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008390:	2117      	movs	r1, #23
 8008392:	187b      	adds	r3, r7, r1
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008398:	2516      	movs	r5, #22
 800839a:	197b      	adds	r3, r7, r5
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	23b0      	movs	r3, #176	@ 0xb0
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	58d0      	ldr	r0, [r2, r3]
 80083a8:	193b      	adds	r3, r7, r4
 80083aa:	881d      	ldrh	r5, [r3, #0]
 80083ac:	000e      	movs	r6, r1
 80083ae:	187c      	adds	r4, r7, r1
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	230b      	movs	r3, #11
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	7819      	ldrb	r1, [r3, #0]
 80083b8:	002b      	movs	r3, r5
 80083ba:	f7f9 f8d3 	bl	8001564 <HAL_PCD_EP_Receive>
 80083be:	0003      	movs	r3, r0
 80083c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c2:	2516      	movs	r5, #22
 80083c4:	197c      	adds	r4, r7, r5
 80083c6:	19bb      	adds	r3, r7, r6
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	0018      	movs	r0, r3
 80083cc:	f000 f839 	bl	8008442 <USBD_Get_USB_Status>
 80083d0:	0003      	movs	r3, r0
 80083d2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80083d4:	197b      	adds	r3, r7, r5
 80083d6:	781b      	ldrb	r3, [r3, #0]
}
 80083d8:	0018      	movs	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	b007      	add	sp, #28
 80083de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	000a      	movs	r2, r1
 80083ea:	1cfb      	adds	r3, r7, #3
 80083ec:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	23b0      	movs	r3, #176	@ 0xb0
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	58d2      	ldr	r2, [r2, r3]
 80083f6:	1cfb      	adds	r3, r7, #3
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	0019      	movs	r1, r3
 80083fc:	0010      	movs	r0, r2
 80083fe:	f7f9 f8e8 	bl	80015d2 <HAL_PCD_EP_GetRxCount>
 8008402:	0003      	movs	r3, r0
}
 8008404:	0018      	movs	r0, r3
 8008406:	46bd      	mov	sp, r7
 8008408:	b002      	add	sp, #8
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008414:	4b02      	ldr	r3, [pc, #8]	@ (8008420 <USBD_static_malloc+0x14>)
}
 8008416:	0018      	movs	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	b002      	add	sp, #8
 800841c:	bd80      	pop	{r7, pc}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	200011f0 	.word	0x200011f0

08008424 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]

}
 800842c:	46c0      	nop			@ (mov r8, r8)
 800842e:	46bd      	mov	sp, r7
 8008430:	b002      	add	sp, #8
 8008432:	bd80      	pop	{r7, pc}

08008434 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008438:	f7f8 f846 	bl	80004c8 <SystemClock_Config>
}
 800843c:	46c0      	nop			@ (mov r8, r8)
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	0002      	movs	r2, r0
 800844a:	1dfb      	adds	r3, r7, #7
 800844c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844e:	230f      	movs	r3, #15
 8008450:	18fb      	adds	r3, r7, r3
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008456:	1dfb      	adds	r3, r7, #7
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b03      	cmp	r3, #3
 800845c:	d017      	beq.n	800848e <USBD_Get_USB_Status+0x4c>
 800845e:	dc1b      	bgt.n	8008498 <USBD_Get_USB_Status+0x56>
 8008460:	2b02      	cmp	r3, #2
 8008462:	d00f      	beq.n	8008484 <USBD_Get_USB_Status+0x42>
 8008464:	dc18      	bgt.n	8008498 <USBD_Get_USB_Status+0x56>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <USBD_Get_USB_Status+0x2e>
 800846a:	2b01      	cmp	r3, #1
 800846c:	d005      	beq.n	800847a <USBD_Get_USB_Status+0x38>
 800846e:	e013      	b.n	8008498 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008470:	230f      	movs	r3, #15
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	2200      	movs	r2, #0
 8008476:	701a      	strb	r2, [r3, #0]
    break;
 8008478:	e013      	b.n	80084a2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800847a:	230f      	movs	r3, #15
 800847c:	18fb      	adds	r3, r7, r3
 800847e:	2202      	movs	r2, #2
 8008480:	701a      	strb	r2, [r3, #0]
    break;
 8008482:	e00e      	b.n	80084a2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008484:	230f      	movs	r3, #15
 8008486:	18fb      	adds	r3, r7, r3
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
    break;
 800848c:	e009      	b.n	80084a2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800848e:	230f      	movs	r3, #15
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	2202      	movs	r2, #2
 8008494:	701a      	strb	r2, [r3, #0]
    break;
 8008496:	e004      	b.n	80084a2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8008498:	230f      	movs	r3, #15
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	2202      	movs	r2, #2
 800849e:	701a      	strb	r2, [r3, #0]
    break;
 80084a0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80084a2:	230f      	movs	r3, #15
 80084a4:	18fb      	adds	r3, r7, r3
 80084a6:	781b      	ldrb	r3, [r3, #0]
}
 80084a8:	0018      	movs	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	b004      	add	sp, #16
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <siprintf>:
 80084b0:	b40e      	push	{r1, r2, r3}
 80084b2:	b510      	push	{r4, lr}
 80084b4:	2400      	movs	r4, #0
 80084b6:	490c      	ldr	r1, [pc, #48]	@ (80084e8 <siprintf+0x38>)
 80084b8:	b09d      	sub	sp, #116	@ 0x74
 80084ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80084bc:	9002      	str	r0, [sp, #8]
 80084be:	9006      	str	r0, [sp, #24]
 80084c0:	9107      	str	r1, [sp, #28]
 80084c2:	9104      	str	r1, [sp, #16]
 80084c4:	4809      	ldr	r0, [pc, #36]	@ (80084ec <siprintf+0x3c>)
 80084c6:	490a      	ldr	r1, [pc, #40]	@ (80084f0 <siprintf+0x40>)
 80084c8:	cb04      	ldmia	r3!, {r2}
 80084ca:	9105      	str	r1, [sp, #20]
 80084cc:	6800      	ldr	r0, [r0, #0]
 80084ce:	a902      	add	r1, sp, #8
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80084d4:	f000 f99e 	bl	8008814 <_svfiprintf_r>
 80084d8:	9b02      	ldr	r3, [sp, #8]
 80084da:	701c      	strb	r4, [r3, #0]
 80084dc:	b01d      	add	sp, #116	@ 0x74
 80084de:	bc10      	pop	{r4}
 80084e0:	bc08      	pop	{r3}
 80084e2:	b003      	add	sp, #12
 80084e4:	4718      	bx	r3
 80084e6:	46c0      	nop			@ (mov r8, r8)
 80084e8:	7fffffff 	.word	0x7fffffff
 80084ec:	2000017c 	.word	0x2000017c
 80084f0:	ffff0208 	.word	0xffff0208

080084f4 <memset>:
 80084f4:	0003      	movs	r3, r0
 80084f6:	1882      	adds	r2, r0, r2
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d100      	bne.n	80084fe <memset+0xa>
 80084fc:	4770      	bx	lr
 80084fe:	7019      	strb	r1, [r3, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	e7f9      	b.n	80084f8 <memset+0x4>

08008504 <__errno>:
 8008504:	4b01      	ldr	r3, [pc, #4]	@ (800850c <__errno+0x8>)
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	4770      	bx	lr
 800850a:	46c0      	nop			@ (mov r8, r8)
 800850c:	2000017c 	.word	0x2000017c

08008510 <__libc_init_array>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	2600      	movs	r6, #0
 8008514:	4c0c      	ldr	r4, [pc, #48]	@ (8008548 <__libc_init_array+0x38>)
 8008516:	4d0d      	ldr	r5, [pc, #52]	@ (800854c <__libc_init_array+0x3c>)
 8008518:	1b64      	subs	r4, r4, r5
 800851a:	10a4      	asrs	r4, r4, #2
 800851c:	42a6      	cmp	r6, r4
 800851e:	d109      	bne.n	8008534 <__libc_init_array+0x24>
 8008520:	2600      	movs	r6, #0
 8008522:	f000 fc61 	bl	8008de8 <_init>
 8008526:	4c0a      	ldr	r4, [pc, #40]	@ (8008550 <__libc_init_array+0x40>)
 8008528:	4d0a      	ldr	r5, [pc, #40]	@ (8008554 <__libc_init_array+0x44>)
 800852a:	1b64      	subs	r4, r4, r5
 800852c:	10a4      	asrs	r4, r4, #2
 800852e:	42a6      	cmp	r6, r4
 8008530:	d105      	bne.n	800853e <__libc_init_array+0x2e>
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	00b3      	lsls	r3, r6, #2
 8008536:	58eb      	ldr	r3, [r5, r3]
 8008538:	4798      	blx	r3
 800853a:	3601      	adds	r6, #1
 800853c:	e7ee      	b.n	800851c <__libc_init_array+0xc>
 800853e:	00b3      	lsls	r3, r6, #2
 8008540:	58eb      	ldr	r3, [r5, r3]
 8008542:	4798      	blx	r3
 8008544:	3601      	adds	r6, #1
 8008546:	e7f2      	b.n	800852e <__libc_init_array+0x1e>
 8008548:	08008f94 	.word	0x08008f94
 800854c:	08008f94 	.word	0x08008f94
 8008550:	08008f98 	.word	0x08008f98
 8008554:	08008f94 	.word	0x08008f94

08008558 <__retarget_lock_acquire_recursive>:
 8008558:	4770      	bx	lr

0800855a <__retarget_lock_release_recursive>:
 800855a:	4770      	bx	lr

0800855c <_free_r>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	0005      	movs	r5, r0
 8008560:	1e0c      	subs	r4, r1, #0
 8008562:	d010      	beq.n	8008586 <_free_r+0x2a>
 8008564:	3c04      	subs	r4, #4
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	da00      	bge.n	800856e <_free_r+0x12>
 800856c:	18e4      	adds	r4, r4, r3
 800856e:	0028      	movs	r0, r5
 8008570:	f000 f8e0 	bl	8008734 <__malloc_lock>
 8008574:	4a1d      	ldr	r2, [pc, #116]	@ (80085ec <_free_r+0x90>)
 8008576:	6813      	ldr	r3, [r2, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <_free_r+0x2c>
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	6014      	str	r4, [r2, #0]
 8008580:	0028      	movs	r0, r5
 8008582:	f000 f8df 	bl	8008744 <__malloc_unlock>
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	42a3      	cmp	r3, r4
 800858a:	d908      	bls.n	800859e <_free_r+0x42>
 800858c:	6820      	ldr	r0, [r4, #0]
 800858e:	1821      	adds	r1, r4, r0
 8008590:	428b      	cmp	r3, r1
 8008592:	d1f3      	bne.n	800857c <_free_r+0x20>
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	1809      	adds	r1, r1, r0
 800859a:	6021      	str	r1, [r4, #0]
 800859c:	e7ee      	b.n	800857c <_free_r+0x20>
 800859e:	001a      	movs	r2, r3
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <_free_r+0x4e>
 80085a6:	42a3      	cmp	r3, r4
 80085a8:	d9f9      	bls.n	800859e <_free_r+0x42>
 80085aa:	6811      	ldr	r1, [r2, #0]
 80085ac:	1850      	adds	r0, r2, r1
 80085ae:	42a0      	cmp	r0, r4
 80085b0:	d10b      	bne.n	80085ca <_free_r+0x6e>
 80085b2:	6820      	ldr	r0, [r4, #0]
 80085b4:	1809      	adds	r1, r1, r0
 80085b6:	1850      	adds	r0, r2, r1
 80085b8:	6011      	str	r1, [r2, #0]
 80085ba:	4283      	cmp	r3, r0
 80085bc:	d1e0      	bne.n	8008580 <_free_r+0x24>
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	1841      	adds	r1, r0, r1
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	6053      	str	r3, [r2, #4]
 80085c8:	e7da      	b.n	8008580 <_free_r+0x24>
 80085ca:	42a0      	cmp	r0, r4
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x78>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d5      	b.n	8008580 <_free_r+0x24>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	d103      	bne.n	80085e4 <_free_r+0x88>
 80085dc:	6819      	ldr	r1, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	1809      	adds	r1, r1, r0
 80085e2:	6021      	str	r1, [r4, #0]
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	6054      	str	r4, [r2, #4]
 80085e8:	e7ca      	b.n	8008580 <_free_r+0x24>
 80085ea:	46c0      	nop			@ (mov r8, r8)
 80085ec:	20001554 	.word	0x20001554

080085f0 <sbrk_aligned>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4e0f      	ldr	r6, [pc, #60]	@ (8008630 <sbrk_aligned+0x40>)
 80085f4:	000d      	movs	r5, r1
 80085f6:	6831      	ldr	r1, [r6, #0]
 80085f8:	0004      	movs	r4, r0
 80085fa:	2900      	cmp	r1, #0
 80085fc:	d102      	bne.n	8008604 <sbrk_aligned+0x14>
 80085fe:	f000 fb95 	bl	8008d2c <_sbrk_r>
 8008602:	6030      	str	r0, [r6, #0]
 8008604:	0029      	movs	r1, r5
 8008606:	0020      	movs	r0, r4
 8008608:	f000 fb90 	bl	8008d2c <_sbrk_r>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d103      	bne.n	8008618 <sbrk_aligned+0x28>
 8008610:	2501      	movs	r5, #1
 8008612:	426d      	negs	r5, r5
 8008614:	0028      	movs	r0, r5
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	2303      	movs	r3, #3
 800861a:	1cc5      	adds	r5, r0, #3
 800861c:	439d      	bics	r5, r3
 800861e:	42a8      	cmp	r0, r5
 8008620:	d0f8      	beq.n	8008614 <sbrk_aligned+0x24>
 8008622:	1a29      	subs	r1, r5, r0
 8008624:	0020      	movs	r0, r4
 8008626:	f000 fb81 	bl	8008d2c <_sbrk_r>
 800862a:	3001      	adds	r0, #1
 800862c:	d1f2      	bne.n	8008614 <sbrk_aligned+0x24>
 800862e:	e7ef      	b.n	8008610 <sbrk_aligned+0x20>
 8008630:	20001550 	.word	0x20001550

08008634 <_malloc_r>:
 8008634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008636:	2203      	movs	r2, #3
 8008638:	1ccb      	adds	r3, r1, #3
 800863a:	4393      	bics	r3, r2
 800863c:	3308      	adds	r3, #8
 800863e:	0005      	movs	r5, r0
 8008640:	001f      	movs	r7, r3
 8008642:	2b0c      	cmp	r3, #12
 8008644:	d234      	bcs.n	80086b0 <_malloc_r+0x7c>
 8008646:	270c      	movs	r7, #12
 8008648:	42b9      	cmp	r1, r7
 800864a:	d833      	bhi.n	80086b4 <_malloc_r+0x80>
 800864c:	0028      	movs	r0, r5
 800864e:	f000 f871 	bl	8008734 <__malloc_lock>
 8008652:	4e37      	ldr	r6, [pc, #220]	@ (8008730 <_malloc_r+0xfc>)
 8008654:	6833      	ldr	r3, [r6, #0]
 8008656:	001c      	movs	r4, r3
 8008658:	2c00      	cmp	r4, #0
 800865a:	d12f      	bne.n	80086bc <_malloc_r+0x88>
 800865c:	0039      	movs	r1, r7
 800865e:	0028      	movs	r0, r5
 8008660:	f7ff ffc6 	bl	80085f0 <sbrk_aligned>
 8008664:	0004      	movs	r4, r0
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	d15f      	bne.n	800872a <_malloc_r+0xf6>
 800866a:	6834      	ldr	r4, [r6, #0]
 800866c:	9400      	str	r4, [sp, #0]
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d14a      	bne.n	800870a <_malloc_r+0xd6>
 8008674:	2c00      	cmp	r4, #0
 8008676:	d052      	beq.n	800871e <_malloc_r+0xea>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	0028      	movs	r0, r5
 800867c:	18e3      	adds	r3, r4, r3
 800867e:	9900      	ldr	r1, [sp, #0]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	f000 fb53 	bl	8008d2c <_sbrk_r>
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	4283      	cmp	r3, r0
 800868a:	d148      	bne.n	800871e <_malloc_r+0xea>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	0028      	movs	r0, r5
 8008690:	1aff      	subs	r7, r7, r3
 8008692:	0039      	movs	r1, r7
 8008694:	f7ff ffac 	bl	80085f0 <sbrk_aligned>
 8008698:	3001      	adds	r0, #1
 800869a:	d040      	beq.n	800871e <_malloc_r+0xea>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	19db      	adds	r3, r3, r7
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	6833      	ldr	r3, [r6, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	d133      	bne.n	8008712 <_malloc_r+0xde>
 80086aa:	9b00      	ldr	r3, [sp, #0]
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	e019      	b.n	80086e4 <_malloc_r+0xb0>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dac9      	bge.n	8008648 <_malloc_r+0x14>
 80086b4:	230c      	movs	r3, #12
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	2000      	movs	r0, #0
 80086ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086bc:	6821      	ldr	r1, [r4, #0]
 80086be:	1bc9      	subs	r1, r1, r7
 80086c0:	d420      	bmi.n	8008704 <_malloc_r+0xd0>
 80086c2:	290b      	cmp	r1, #11
 80086c4:	d90a      	bls.n	80086dc <_malloc_r+0xa8>
 80086c6:	19e2      	adds	r2, r4, r7
 80086c8:	6027      	str	r7, [r4, #0]
 80086ca:	42a3      	cmp	r3, r4
 80086cc:	d104      	bne.n	80086d8 <_malloc_r+0xa4>
 80086ce:	6032      	str	r2, [r6, #0]
 80086d0:	6863      	ldr	r3, [r4, #4]
 80086d2:	6011      	str	r1, [r2, #0]
 80086d4:	6053      	str	r3, [r2, #4]
 80086d6:	e005      	b.n	80086e4 <_malloc_r+0xb0>
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	e7f9      	b.n	80086d0 <_malloc_r+0x9c>
 80086dc:	6862      	ldr	r2, [r4, #4]
 80086de:	42a3      	cmp	r3, r4
 80086e0:	d10e      	bne.n	8008700 <_malloc_r+0xcc>
 80086e2:	6032      	str	r2, [r6, #0]
 80086e4:	0028      	movs	r0, r5
 80086e6:	f000 f82d 	bl	8008744 <__malloc_unlock>
 80086ea:	0020      	movs	r0, r4
 80086ec:	2207      	movs	r2, #7
 80086ee:	300b      	adds	r0, #11
 80086f0:	1d23      	adds	r3, r4, #4
 80086f2:	4390      	bics	r0, r2
 80086f4:	1ac2      	subs	r2, r0, r3
 80086f6:	4298      	cmp	r0, r3
 80086f8:	d0df      	beq.n	80086ba <_malloc_r+0x86>
 80086fa:	1a1b      	subs	r3, r3, r0
 80086fc:	50a3      	str	r3, [r4, r2]
 80086fe:	e7dc      	b.n	80086ba <_malloc_r+0x86>
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	e7ef      	b.n	80086e4 <_malloc_r+0xb0>
 8008704:	0023      	movs	r3, r4
 8008706:	6864      	ldr	r4, [r4, #4]
 8008708:	e7a6      	b.n	8008658 <_malloc_r+0x24>
 800870a:	9c00      	ldr	r4, [sp, #0]
 800870c:	6863      	ldr	r3, [r4, #4]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	e7ad      	b.n	800866e <_malloc_r+0x3a>
 8008712:	001a      	movs	r2, r3
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	42a3      	cmp	r3, r4
 8008718:	d1fb      	bne.n	8008712 <_malloc_r+0xde>
 800871a:	2300      	movs	r3, #0
 800871c:	e7da      	b.n	80086d4 <_malloc_r+0xa0>
 800871e:	230c      	movs	r3, #12
 8008720:	0028      	movs	r0, r5
 8008722:	602b      	str	r3, [r5, #0]
 8008724:	f000 f80e 	bl	8008744 <__malloc_unlock>
 8008728:	e7c6      	b.n	80086b8 <_malloc_r+0x84>
 800872a:	6007      	str	r7, [r0, #0]
 800872c:	e7da      	b.n	80086e4 <_malloc_r+0xb0>
 800872e:	46c0      	nop			@ (mov r8, r8)
 8008730:	20001554 	.word	0x20001554

08008734 <__malloc_lock>:
 8008734:	b510      	push	{r4, lr}
 8008736:	4802      	ldr	r0, [pc, #8]	@ (8008740 <__malloc_lock+0xc>)
 8008738:	f7ff ff0e 	bl	8008558 <__retarget_lock_acquire_recursive>
 800873c:	bd10      	pop	{r4, pc}
 800873e:	46c0      	nop			@ (mov r8, r8)
 8008740:	2000154c 	.word	0x2000154c

08008744 <__malloc_unlock>:
 8008744:	b510      	push	{r4, lr}
 8008746:	4802      	ldr	r0, [pc, #8]	@ (8008750 <__malloc_unlock+0xc>)
 8008748:	f7ff ff07 	bl	800855a <__retarget_lock_release_recursive>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	46c0      	nop			@ (mov r8, r8)
 8008750:	2000154c 	.word	0x2000154c

08008754 <__ssputs_r>:
 8008754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008756:	688e      	ldr	r6, [r1, #8]
 8008758:	b085      	sub	sp, #20
 800875a:	001f      	movs	r7, r3
 800875c:	000c      	movs	r4, r1
 800875e:	680b      	ldr	r3, [r1, #0]
 8008760:	9002      	str	r0, [sp, #8]
 8008762:	9203      	str	r2, [sp, #12]
 8008764:	42be      	cmp	r6, r7
 8008766:	d830      	bhi.n	80087ca <__ssputs_r+0x76>
 8008768:	210c      	movs	r1, #12
 800876a:	5e62      	ldrsh	r2, [r4, r1]
 800876c:	2190      	movs	r1, #144	@ 0x90
 800876e:	00c9      	lsls	r1, r1, #3
 8008770:	420a      	tst	r2, r1
 8008772:	d028      	beq.n	80087c6 <__ssputs_r+0x72>
 8008774:	2003      	movs	r0, #3
 8008776:	6921      	ldr	r1, [r4, #16]
 8008778:	1a5b      	subs	r3, r3, r1
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	6963      	ldr	r3, [r4, #20]
 800877e:	4343      	muls	r3, r0
 8008780:	9801      	ldr	r0, [sp, #4]
 8008782:	0fdd      	lsrs	r5, r3, #31
 8008784:	18ed      	adds	r5, r5, r3
 8008786:	1c7b      	adds	r3, r7, #1
 8008788:	181b      	adds	r3, r3, r0
 800878a:	106d      	asrs	r5, r5, #1
 800878c:	42ab      	cmp	r3, r5
 800878e:	d900      	bls.n	8008792 <__ssputs_r+0x3e>
 8008790:	001d      	movs	r5, r3
 8008792:	0552      	lsls	r2, r2, #21
 8008794:	d528      	bpl.n	80087e8 <__ssputs_r+0x94>
 8008796:	0029      	movs	r1, r5
 8008798:	9802      	ldr	r0, [sp, #8]
 800879a:	f7ff ff4b 	bl	8008634 <_malloc_r>
 800879e:	1e06      	subs	r6, r0, #0
 80087a0:	d02c      	beq.n	80087fc <__ssputs_r+0xa8>
 80087a2:	9a01      	ldr	r2, [sp, #4]
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	f000 fade 	bl	8008d66 <memcpy>
 80087aa:	89a2      	ldrh	r2, [r4, #12]
 80087ac:	4b18      	ldr	r3, [pc, #96]	@ (8008810 <__ssputs_r+0xbc>)
 80087ae:	401a      	ands	r2, r3
 80087b0:	2380      	movs	r3, #128	@ 0x80
 80087b2:	4313      	orrs	r3, r2
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	9b01      	ldr	r3, [sp, #4]
 80087b8:	6126      	str	r6, [r4, #16]
 80087ba:	18f6      	adds	r6, r6, r3
 80087bc:	6026      	str	r6, [r4, #0]
 80087be:	003e      	movs	r6, r7
 80087c0:	6165      	str	r5, [r4, #20]
 80087c2:	1aed      	subs	r5, r5, r3
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	42be      	cmp	r6, r7
 80087c8:	d900      	bls.n	80087cc <__ssputs_r+0x78>
 80087ca:	003e      	movs	r6, r7
 80087cc:	0032      	movs	r2, r6
 80087ce:	9903      	ldr	r1, [sp, #12]
 80087d0:	6820      	ldr	r0, [r4, #0]
 80087d2:	f000 fa99 	bl	8008d08 <memmove>
 80087d6:	2000      	movs	r0, #0
 80087d8:	68a3      	ldr	r3, [r4, #8]
 80087da:	1b9b      	subs	r3, r3, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	199b      	adds	r3, r3, r6
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	b005      	add	sp, #20
 80087e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e8:	002a      	movs	r2, r5
 80087ea:	9802      	ldr	r0, [sp, #8]
 80087ec:	f000 fac4 	bl	8008d78 <_realloc_r>
 80087f0:	1e06      	subs	r6, r0, #0
 80087f2:	d1e0      	bne.n	80087b6 <__ssputs_r+0x62>
 80087f4:	6921      	ldr	r1, [r4, #16]
 80087f6:	9802      	ldr	r0, [sp, #8]
 80087f8:	f7ff feb0 	bl	800855c <_free_r>
 80087fc:	230c      	movs	r3, #12
 80087fe:	2001      	movs	r0, #1
 8008800:	9a02      	ldr	r2, [sp, #8]
 8008802:	4240      	negs	r0, r0
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	89a2      	ldrh	r2, [r4, #12]
 8008808:	3334      	adds	r3, #52	@ 0x34
 800880a:	4313      	orrs	r3, r2
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	e7e9      	b.n	80087e4 <__ssputs_r+0x90>
 8008810:	fffffb7f 	.word	0xfffffb7f

08008814 <_svfiprintf_r>:
 8008814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008816:	b0a1      	sub	sp, #132	@ 0x84
 8008818:	9003      	str	r0, [sp, #12]
 800881a:	001d      	movs	r5, r3
 800881c:	898b      	ldrh	r3, [r1, #12]
 800881e:	000f      	movs	r7, r1
 8008820:	0016      	movs	r6, r2
 8008822:	061b      	lsls	r3, r3, #24
 8008824:	d511      	bpl.n	800884a <_svfiprintf_r+0x36>
 8008826:	690b      	ldr	r3, [r1, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10e      	bne.n	800884a <_svfiprintf_r+0x36>
 800882c:	2140      	movs	r1, #64	@ 0x40
 800882e:	f7ff ff01 	bl	8008634 <_malloc_r>
 8008832:	6038      	str	r0, [r7, #0]
 8008834:	6138      	str	r0, [r7, #16]
 8008836:	2800      	cmp	r0, #0
 8008838:	d105      	bne.n	8008846 <_svfiprintf_r+0x32>
 800883a:	230c      	movs	r3, #12
 800883c:	9a03      	ldr	r2, [sp, #12]
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	2001      	movs	r0, #1
 8008842:	4240      	negs	r0, r0
 8008844:	e0cf      	b.n	80089e6 <_svfiprintf_r+0x1d2>
 8008846:	2340      	movs	r3, #64	@ 0x40
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	2300      	movs	r3, #0
 800884c:	ac08      	add	r4, sp, #32
 800884e:	6163      	str	r3, [r4, #20]
 8008850:	3320      	adds	r3, #32
 8008852:	7663      	strb	r3, [r4, #25]
 8008854:	3310      	adds	r3, #16
 8008856:	76a3      	strb	r3, [r4, #26]
 8008858:	9507      	str	r5, [sp, #28]
 800885a:	0035      	movs	r5, r6
 800885c:	782b      	ldrb	r3, [r5, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <_svfiprintf_r+0x52>
 8008862:	2b25      	cmp	r3, #37	@ 0x25
 8008864:	d148      	bne.n	80088f8 <_svfiprintf_r+0xe4>
 8008866:	1bab      	subs	r3, r5, r6
 8008868:	9305      	str	r3, [sp, #20]
 800886a:	42b5      	cmp	r5, r6
 800886c:	d00b      	beq.n	8008886 <_svfiprintf_r+0x72>
 800886e:	0032      	movs	r2, r6
 8008870:	0039      	movs	r1, r7
 8008872:	9803      	ldr	r0, [sp, #12]
 8008874:	f7ff ff6e 	bl	8008754 <__ssputs_r>
 8008878:	3001      	adds	r0, #1
 800887a:	d100      	bne.n	800887e <_svfiprintf_r+0x6a>
 800887c:	e0ae      	b.n	80089dc <_svfiprintf_r+0x1c8>
 800887e:	6963      	ldr	r3, [r4, #20]
 8008880:	9a05      	ldr	r2, [sp, #20]
 8008882:	189b      	adds	r3, r3, r2
 8008884:	6163      	str	r3, [r4, #20]
 8008886:	782b      	ldrb	r3, [r5, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d100      	bne.n	800888e <_svfiprintf_r+0x7a>
 800888c:	e0a6      	b.n	80089dc <_svfiprintf_r+0x1c8>
 800888e:	2201      	movs	r2, #1
 8008890:	2300      	movs	r3, #0
 8008892:	4252      	negs	r2, r2
 8008894:	6062      	str	r2, [r4, #4]
 8008896:	a904      	add	r1, sp, #16
 8008898:	3254      	adds	r2, #84	@ 0x54
 800889a:	1852      	adds	r2, r2, r1
 800889c:	1c6e      	adds	r6, r5, #1
 800889e:	6023      	str	r3, [r4, #0]
 80088a0:	60e3      	str	r3, [r4, #12]
 80088a2:	60a3      	str	r3, [r4, #8]
 80088a4:	7013      	strb	r3, [r2, #0]
 80088a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80088a8:	4b54      	ldr	r3, [pc, #336]	@ (80089fc <_svfiprintf_r+0x1e8>)
 80088aa:	2205      	movs	r2, #5
 80088ac:	0018      	movs	r0, r3
 80088ae:	7831      	ldrb	r1, [r6, #0]
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	f000 fa4d 	bl	8008d50 <memchr>
 80088b6:	1c75      	adds	r5, r6, #1
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d11f      	bne.n	80088fc <_svfiprintf_r+0xe8>
 80088bc:	6822      	ldr	r2, [r4, #0]
 80088be:	06d3      	lsls	r3, r2, #27
 80088c0:	d504      	bpl.n	80088cc <_svfiprintf_r+0xb8>
 80088c2:	2353      	movs	r3, #83	@ 0x53
 80088c4:	a904      	add	r1, sp, #16
 80088c6:	185b      	adds	r3, r3, r1
 80088c8:	2120      	movs	r1, #32
 80088ca:	7019      	strb	r1, [r3, #0]
 80088cc:	0713      	lsls	r3, r2, #28
 80088ce:	d504      	bpl.n	80088da <_svfiprintf_r+0xc6>
 80088d0:	2353      	movs	r3, #83	@ 0x53
 80088d2:	a904      	add	r1, sp, #16
 80088d4:	185b      	adds	r3, r3, r1
 80088d6:	212b      	movs	r1, #43	@ 0x2b
 80088d8:	7019      	strb	r1, [r3, #0]
 80088da:	7833      	ldrb	r3, [r6, #0]
 80088dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80088de:	d016      	beq.n	800890e <_svfiprintf_r+0xfa>
 80088e0:	0035      	movs	r5, r6
 80088e2:	2100      	movs	r1, #0
 80088e4:	200a      	movs	r0, #10
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	782a      	ldrb	r2, [r5, #0]
 80088ea:	1c6e      	adds	r6, r5, #1
 80088ec:	3a30      	subs	r2, #48	@ 0x30
 80088ee:	2a09      	cmp	r2, #9
 80088f0:	d950      	bls.n	8008994 <_svfiprintf_r+0x180>
 80088f2:	2900      	cmp	r1, #0
 80088f4:	d111      	bne.n	800891a <_svfiprintf_r+0x106>
 80088f6:	e017      	b.n	8008928 <_svfiprintf_r+0x114>
 80088f8:	3501      	adds	r5, #1
 80088fa:	e7af      	b.n	800885c <_svfiprintf_r+0x48>
 80088fc:	9b05      	ldr	r3, [sp, #20]
 80088fe:	6822      	ldr	r2, [r4, #0]
 8008900:	1ac0      	subs	r0, r0, r3
 8008902:	2301      	movs	r3, #1
 8008904:	4083      	lsls	r3, r0
 8008906:	4313      	orrs	r3, r2
 8008908:	002e      	movs	r6, r5
 800890a:	6023      	str	r3, [r4, #0]
 800890c:	e7cc      	b.n	80088a8 <_svfiprintf_r+0x94>
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	1d19      	adds	r1, r3, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	9107      	str	r1, [sp, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	db01      	blt.n	800891e <_svfiprintf_r+0x10a>
 800891a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800891c:	e004      	b.n	8008928 <_svfiprintf_r+0x114>
 800891e:	425b      	negs	r3, r3
 8008920:	60e3      	str	r3, [r4, #12]
 8008922:	2302      	movs	r3, #2
 8008924:	4313      	orrs	r3, r2
 8008926:	6023      	str	r3, [r4, #0]
 8008928:	782b      	ldrb	r3, [r5, #0]
 800892a:	2b2e      	cmp	r3, #46	@ 0x2e
 800892c:	d10c      	bne.n	8008948 <_svfiprintf_r+0x134>
 800892e:	786b      	ldrb	r3, [r5, #1]
 8008930:	2b2a      	cmp	r3, #42	@ 0x2a
 8008932:	d134      	bne.n	800899e <_svfiprintf_r+0x18a>
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	3502      	adds	r5, #2
 8008938:	1d1a      	adds	r2, r3, #4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	9207      	str	r2, [sp, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	da01      	bge.n	8008946 <_svfiprintf_r+0x132>
 8008942:	2301      	movs	r3, #1
 8008944:	425b      	negs	r3, r3
 8008946:	9309      	str	r3, [sp, #36]	@ 0x24
 8008948:	4e2d      	ldr	r6, [pc, #180]	@ (8008a00 <_svfiprintf_r+0x1ec>)
 800894a:	2203      	movs	r2, #3
 800894c:	0030      	movs	r0, r6
 800894e:	7829      	ldrb	r1, [r5, #0]
 8008950:	f000 f9fe 	bl	8008d50 <memchr>
 8008954:	2800      	cmp	r0, #0
 8008956:	d006      	beq.n	8008966 <_svfiprintf_r+0x152>
 8008958:	2340      	movs	r3, #64	@ 0x40
 800895a:	1b80      	subs	r0, r0, r6
 800895c:	4083      	lsls	r3, r0
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	3501      	adds	r5, #1
 8008962:	4313      	orrs	r3, r2
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	7829      	ldrb	r1, [r5, #0]
 8008968:	2206      	movs	r2, #6
 800896a:	4826      	ldr	r0, [pc, #152]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 800896c:	1c6e      	adds	r6, r5, #1
 800896e:	7621      	strb	r1, [r4, #24]
 8008970:	f000 f9ee 	bl	8008d50 <memchr>
 8008974:	2800      	cmp	r0, #0
 8008976:	d038      	beq.n	80089ea <_svfiprintf_r+0x1d6>
 8008978:	4b23      	ldr	r3, [pc, #140]	@ (8008a08 <_svfiprintf_r+0x1f4>)
 800897a:	2b00      	cmp	r3, #0
 800897c:	d122      	bne.n	80089c4 <_svfiprintf_r+0x1b0>
 800897e:	2207      	movs	r2, #7
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	3307      	adds	r3, #7
 8008984:	4393      	bics	r3, r2
 8008986:	3308      	adds	r3, #8
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	6963      	ldr	r3, [r4, #20]
 800898c:	9a04      	ldr	r2, [sp, #16]
 800898e:	189b      	adds	r3, r3, r2
 8008990:	6163      	str	r3, [r4, #20]
 8008992:	e762      	b.n	800885a <_svfiprintf_r+0x46>
 8008994:	4343      	muls	r3, r0
 8008996:	0035      	movs	r5, r6
 8008998:	2101      	movs	r1, #1
 800899a:	189b      	adds	r3, r3, r2
 800899c:	e7a4      	b.n	80088e8 <_svfiprintf_r+0xd4>
 800899e:	2300      	movs	r3, #0
 80089a0:	200a      	movs	r0, #10
 80089a2:	0019      	movs	r1, r3
 80089a4:	3501      	adds	r5, #1
 80089a6:	6063      	str	r3, [r4, #4]
 80089a8:	782a      	ldrb	r2, [r5, #0]
 80089aa:	1c6e      	adds	r6, r5, #1
 80089ac:	3a30      	subs	r2, #48	@ 0x30
 80089ae:	2a09      	cmp	r2, #9
 80089b0:	d903      	bls.n	80089ba <_svfiprintf_r+0x1a6>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c8      	beq.n	8008948 <_svfiprintf_r+0x134>
 80089b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80089b8:	e7c6      	b.n	8008948 <_svfiprintf_r+0x134>
 80089ba:	4341      	muls	r1, r0
 80089bc:	0035      	movs	r5, r6
 80089be:	2301      	movs	r3, #1
 80089c0:	1889      	adds	r1, r1, r2
 80089c2:	e7f1      	b.n	80089a8 <_svfiprintf_r+0x194>
 80089c4:	aa07      	add	r2, sp, #28
 80089c6:	9200      	str	r2, [sp, #0]
 80089c8:	0021      	movs	r1, r4
 80089ca:	003a      	movs	r2, r7
 80089cc:	4b0f      	ldr	r3, [pc, #60]	@ (8008a0c <_svfiprintf_r+0x1f8>)
 80089ce:	9803      	ldr	r0, [sp, #12]
 80089d0:	e000      	b.n	80089d4 <_svfiprintf_r+0x1c0>
 80089d2:	bf00      	nop
 80089d4:	9004      	str	r0, [sp, #16]
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	d1d6      	bne.n	800898a <_svfiprintf_r+0x176>
 80089dc:	89bb      	ldrh	r3, [r7, #12]
 80089de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80089e0:	065b      	lsls	r3, r3, #25
 80089e2:	d500      	bpl.n	80089e6 <_svfiprintf_r+0x1d2>
 80089e4:	e72c      	b.n	8008840 <_svfiprintf_r+0x2c>
 80089e6:	b021      	add	sp, #132	@ 0x84
 80089e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ea:	aa07      	add	r2, sp, #28
 80089ec:	9200      	str	r2, [sp, #0]
 80089ee:	0021      	movs	r1, r4
 80089f0:	003a      	movs	r2, r7
 80089f2:	4b06      	ldr	r3, [pc, #24]	@ (8008a0c <_svfiprintf_r+0x1f8>)
 80089f4:	9803      	ldr	r0, [sp, #12]
 80089f6:	f000 f87b 	bl	8008af0 <_printf_i>
 80089fa:	e7eb      	b.n	80089d4 <_svfiprintf_r+0x1c0>
 80089fc:	08008f60 	.word	0x08008f60
 8008a00:	08008f66 	.word	0x08008f66
 8008a04:	08008f6a 	.word	0x08008f6a
 8008a08:	00000000 	.word	0x00000000
 8008a0c:	08008755 	.word	0x08008755

08008a10 <_printf_common>:
 8008a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a12:	0016      	movs	r6, r2
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	688a      	ldr	r2, [r1, #8]
 8008a18:	690b      	ldr	r3, [r1, #16]
 8008a1a:	000c      	movs	r4, r1
 8008a1c:	9000      	str	r0, [sp, #0]
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	da00      	bge.n	8008a24 <_printf_common+0x14>
 8008a22:	0013      	movs	r3, r2
 8008a24:	0022      	movs	r2, r4
 8008a26:	6033      	str	r3, [r6, #0]
 8008a28:	3243      	adds	r2, #67	@ 0x43
 8008a2a:	7812      	ldrb	r2, [r2, #0]
 8008a2c:	2a00      	cmp	r2, #0
 8008a2e:	d001      	beq.n	8008a34 <_printf_common+0x24>
 8008a30:	3301      	adds	r3, #1
 8008a32:	6033      	str	r3, [r6, #0]
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	069b      	lsls	r3, r3, #26
 8008a38:	d502      	bpl.n	8008a40 <_printf_common+0x30>
 8008a3a:	6833      	ldr	r3, [r6, #0]
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	6033      	str	r3, [r6, #0]
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	2306      	movs	r3, #6
 8008a44:	0015      	movs	r5, r2
 8008a46:	401d      	ands	r5, r3
 8008a48:	421a      	tst	r2, r3
 8008a4a:	d027      	beq.n	8008a9c <_printf_common+0x8c>
 8008a4c:	0023      	movs	r3, r4
 8008a4e:	3343      	adds	r3, #67	@ 0x43
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	1e5a      	subs	r2, r3, #1
 8008a54:	4193      	sbcs	r3, r2
 8008a56:	6822      	ldr	r2, [r4, #0]
 8008a58:	0692      	lsls	r2, r2, #26
 8008a5a:	d430      	bmi.n	8008abe <_printf_common+0xae>
 8008a5c:	0022      	movs	r2, r4
 8008a5e:	9901      	ldr	r1, [sp, #4]
 8008a60:	9800      	ldr	r0, [sp, #0]
 8008a62:	9d08      	ldr	r5, [sp, #32]
 8008a64:	3243      	adds	r2, #67	@ 0x43
 8008a66:	47a8      	blx	r5
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d025      	beq.n	8008ab8 <_printf_common+0xa8>
 8008a6c:	2206      	movs	r2, #6
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	2500      	movs	r5, #0
 8008a72:	4013      	ands	r3, r2
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d105      	bne.n	8008a84 <_printf_common+0x74>
 8008a78:	6833      	ldr	r3, [r6, #0]
 8008a7a:	68e5      	ldr	r5, [r4, #12]
 8008a7c:	1aed      	subs	r5, r5, r3
 8008a7e:	43eb      	mvns	r3, r5
 8008a80:	17db      	asrs	r3, r3, #31
 8008a82:	401d      	ands	r5, r3
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	6922      	ldr	r2, [r4, #16]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	dd01      	ble.n	8008a90 <_printf_common+0x80>
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	18ed      	adds	r5, r5, r3
 8008a90:	2600      	movs	r6, #0
 8008a92:	42b5      	cmp	r5, r6
 8008a94:	d120      	bne.n	8008ad8 <_printf_common+0xc8>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e010      	b.n	8008abc <_printf_common+0xac>
 8008a9a:	3501      	adds	r5, #1
 8008a9c:	68e3      	ldr	r3, [r4, #12]
 8008a9e:	6832      	ldr	r2, [r6, #0]
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	42ab      	cmp	r3, r5
 8008aa4:	ddd2      	ble.n	8008a4c <_printf_common+0x3c>
 8008aa6:	0022      	movs	r2, r4
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	9901      	ldr	r1, [sp, #4]
 8008aac:	9800      	ldr	r0, [sp, #0]
 8008aae:	9f08      	ldr	r7, [sp, #32]
 8008ab0:	3219      	adds	r2, #25
 8008ab2:	47b8      	blx	r7
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d1f0      	bne.n	8008a9a <_printf_common+0x8a>
 8008ab8:	2001      	movs	r0, #1
 8008aba:	4240      	negs	r0, r0
 8008abc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008abe:	2030      	movs	r0, #48	@ 0x30
 8008ac0:	18e1      	adds	r1, r4, r3
 8008ac2:	3143      	adds	r1, #67	@ 0x43
 8008ac4:	7008      	strb	r0, [r1, #0]
 8008ac6:	0021      	movs	r1, r4
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	3145      	adds	r1, #69	@ 0x45
 8008acc:	7809      	ldrb	r1, [r1, #0]
 8008ace:	18a2      	adds	r2, r4, r2
 8008ad0:	3243      	adds	r2, #67	@ 0x43
 8008ad2:	3302      	adds	r3, #2
 8008ad4:	7011      	strb	r1, [r2, #0]
 8008ad6:	e7c1      	b.n	8008a5c <_printf_common+0x4c>
 8008ad8:	0022      	movs	r2, r4
 8008ada:	2301      	movs	r3, #1
 8008adc:	9901      	ldr	r1, [sp, #4]
 8008ade:	9800      	ldr	r0, [sp, #0]
 8008ae0:	9f08      	ldr	r7, [sp, #32]
 8008ae2:	321a      	adds	r2, #26
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d0e6      	beq.n	8008ab8 <_printf_common+0xa8>
 8008aea:	3601      	adds	r6, #1
 8008aec:	e7d1      	b.n	8008a92 <_printf_common+0x82>
	...

08008af0 <_printf_i>:
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	b08b      	sub	sp, #44	@ 0x2c
 8008af4:	9206      	str	r2, [sp, #24]
 8008af6:	000a      	movs	r2, r1
 8008af8:	3243      	adds	r2, #67	@ 0x43
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	9005      	str	r0, [sp, #20]
 8008afe:	9203      	str	r2, [sp, #12]
 8008b00:	7e0a      	ldrb	r2, [r1, #24]
 8008b02:	000c      	movs	r4, r1
 8008b04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b06:	2a78      	cmp	r2, #120	@ 0x78
 8008b08:	d809      	bhi.n	8008b1e <_printf_i+0x2e>
 8008b0a:	2a62      	cmp	r2, #98	@ 0x62
 8008b0c:	d80b      	bhi.n	8008b26 <_printf_i+0x36>
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d100      	bne.n	8008b14 <_printf_i+0x24>
 8008b12:	e0ba      	b.n	8008c8a <_printf_i+0x19a>
 8008b14:	497a      	ldr	r1, [pc, #488]	@ (8008d00 <_printf_i+0x210>)
 8008b16:	9104      	str	r1, [sp, #16]
 8008b18:	2a58      	cmp	r2, #88	@ 0x58
 8008b1a:	d100      	bne.n	8008b1e <_printf_i+0x2e>
 8008b1c:	e08e      	b.n	8008c3c <_printf_i+0x14c>
 8008b1e:	0025      	movs	r5, r4
 8008b20:	3542      	adds	r5, #66	@ 0x42
 8008b22:	702a      	strb	r2, [r5, #0]
 8008b24:	e022      	b.n	8008b6c <_printf_i+0x7c>
 8008b26:	0010      	movs	r0, r2
 8008b28:	3863      	subs	r0, #99	@ 0x63
 8008b2a:	2815      	cmp	r0, #21
 8008b2c:	d8f7      	bhi.n	8008b1e <_printf_i+0x2e>
 8008b2e:	f7f7 faf3 	bl	8000118 <__gnu_thumb1_case_shi>
 8008b32:	0016      	.short	0x0016
 8008b34:	fff6001f 	.word	0xfff6001f
 8008b38:	fff6fff6 	.word	0xfff6fff6
 8008b3c:	001ffff6 	.word	0x001ffff6
 8008b40:	fff6fff6 	.word	0xfff6fff6
 8008b44:	fff6fff6 	.word	0xfff6fff6
 8008b48:	0036009f 	.word	0x0036009f
 8008b4c:	fff6007e 	.word	0xfff6007e
 8008b50:	00b0fff6 	.word	0x00b0fff6
 8008b54:	0036fff6 	.word	0x0036fff6
 8008b58:	fff6fff6 	.word	0xfff6fff6
 8008b5c:	0082      	.short	0x0082
 8008b5e:	0025      	movs	r5, r4
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	3542      	adds	r5, #66	@ 0x42
 8008b64:	1d11      	adds	r1, r2, #4
 8008b66:	6019      	str	r1, [r3, #0]
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	702b      	strb	r3, [r5, #0]
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e09e      	b.n	8008cae <_printf_i+0x1be>
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	6809      	ldr	r1, [r1, #0]
 8008b74:	1d02      	adds	r2, r0, #4
 8008b76:	060d      	lsls	r5, r1, #24
 8008b78:	d50b      	bpl.n	8008b92 <_printf_i+0xa2>
 8008b7a:	6806      	ldr	r6, [r0, #0]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	da03      	bge.n	8008b8a <_printf_i+0x9a>
 8008b82:	232d      	movs	r3, #45	@ 0x2d
 8008b84:	9a03      	ldr	r2, [sp, #12]
 8008b86:	4276      	negs	r6, r6
 8008b88:	7013      	strb	r3, [r2, #0]
 8008b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8008d00 <_printf_i+0x210>)
 8008b8c:	270a      	movs	r7, #10
 8008b8e:	9304      	str	r3, [sp, #16]
 8008b90:	e018      	b.n	8008bc4 <_printf_i+0xd4>
 8008b92:	6806      	ldr	r6, [r0, #0]
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	0649      	lsls	r1, r1, #25
 8008b98:	d5f1      	bpl.n	8008b7e <_printf_i+0x8e>
 8008b9a:	b236      	sxth	r6, r6
 8008b9c:	e7ef      	b.n	8008b7e <_printf_i+0x8e>
 8008b9e:	6808      	ldr	r0, [r1, #0]
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	c940      	ldmia	r1!, {r6}
 8008ba4:	0605      	lsls	r5, r0, #24
 8008ba6:	d402      	bmi.n	8008bae <_printf_i+0xbe>
 8008ba8:	0640      	lsls	r0, r0, #25
 8008baa:	d500      	bpl.n	8008bae <_printf_i+0xbe>
 8008bac:	b2b6      	uxth	r6, r6
 8008bae:	6019      	str	r1, [r3, #0]
 8008bb0:	4b53      	ldr	r3, [pc, #332]	@ (8008d00 <_printf_i+0x210>)
 8008bb2:	270a      	movs	r7, #10
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	2a6f      	cmp	r2, #111	@ 0x6f
 8008bb8:	d100      	bne.n	8008bbc <_printf_i+0xcc>
 8008bba:	3f02      	subs	r7, #2
 8008bbc:	0023      	movs	r3, r4
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	3343      	adds	r3, #67	@ 0x43
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	60a3      	str	r3, [r4, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	db06      	blt.n	8008bda <_printf_i+0xea>
 8008bcc:	2104      	movs	r1, #4
 8008bce:	6822      	ldr	r2, [r4, #0]
 8008bd0:	9d03      	ldr	r5, [sp, #12]
 8008bd2:	438a      	bics	r2, r1
 8008bd4:	6022      	str	r2, [r4, #0]
 8008bd6:	4333      	orrs	r3, r6
 8008bd8:	d00c      	beq.n	8008bf4 <_printf_i+0x104>
 8008bda:	9d03      	ldr	r5, [sp, #12]
 8008bdc:	0030      	movs	r0, r6
 8008bde:	0039      	movs	r1, r7
 8008be0:	f7f7 fb2a 	bl	8000238 <__aeabi_uidivmod>
 8008be4:	9b04      	ldr	r3, [sp, #16]
 8008be6:	3d01      	subs	r5, #1
 8008be8:	5c5b      	ldrb	r3, [r3, r1]
 8008bea:	702b      	strb	r3, [r5, #0]
 8008bec:	0033      	movs	r3, r6
 8008bee:	0006      	movs	r6, r0
 8008bf0:	429f      	cmp	r7, r3
 8008bf2:	d9f3      	bls.n	8008bdc <_printf_i+0xec>
 8008bf4:	2f08      	cmp	r7, #8
 8008bf6:	d109      	bne.n	8008c0c <_printf_i+0x11c>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	07db      	lsls	r3, r3, #31
 8008bfc:	d506      	bpl.n	8008c0c <_printf_i+0x11c>
 8008bfe:	6862      	ldr	r2, [r4, #4]
 8008c00:	6923      	ldr	r3, [r4, #16]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	dc02      	bgt.n	8008c0c <_printf_i+0x11c>
 8008c06:	2330      	movs	r3, #48	@ 0x30
 8008c08:	3d01      	subs	r5, #1
 8008c0a:	702b      	strb	r3, [r5, #0]
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	1b5b      	subs	r3, r3, r5
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	9b07      	ldr	r3, [sp, #28]
 8008c14:	0021      	movs	r1, r4
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	9805      	ldr	r0, [sp, #20]
 8008c1a:	9b06      	ldr	r3, [sp, #24]
 8008c1c:	aa09      	add	r2, sp, #36	@ 0x24
 8008c1e:	f7ff fef7 	bl	8008a10 <_printf_common>
 8008c22:	3001      	adds	r0, #1
 8008c24:	d148      	bne.n	8008cb8 <_printf_i+0x1c8>
 8008c26:	2001      	movs	r0, #1
 8008c28:	4240      	negs	r0, r0
 8008c2a:	b00b      	add	sp, #44	@ 0x2c
 8008c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c2e:	2220      	movs	r2, #32
 8008c30:	6809      	ldr	r1, [r1, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	2278      	movs	r2, #120	@ 0x78
 8008c38:	4932      	ldr	r1, [pc, #200]	@ (8008d04 <_printf_i+0x214>)
 8008c3a:	9104      	str	r1, [sp, #16]
 8008c3c:	0021      	movs	r1, r4
 8008c3e:	3145      	adds	r1, #69	@ 0x45
 8008c40:	700a      	strb	r2, [r1, #0]
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	6822      	ldr	r2, [r4, #0]
 8008c46:	c940      	ldmia	r1!, {r6}
 8008c48:	0610      	lsls	r0, r2, #24
 8008c4a:	d402      	bmi.n	8008c52 <_printf_i+0x162>
 8008c4c:	0650      	lsls	r0, r2, #25
 8008c4e:	d500      	bpl.n	8008c52 <_printf_i+0x162>
 8008c50:	b2b6      	uxth	r6, r6
 8008c52:	6019      	str	r1, [r3, #0]
 8008c54:	07d3      	lsls	r3, r2, #31
 8008c56:	d502      	bpl.n	8008c5e <_printf_i+0x16e>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	2e00      	cmp	r6, #0
 8008c60:	d001      	beq.n	8008c66 <_printf_i+0x176>
 8008c62:	2710      	movs	r7, #16
 8008c64:	e7aa      	b.n	8008bbc <_printf_i+0xcc>
 8008c66:	2220      	movs	r2, #32
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	4393      	bics	r3, r2
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	e7f8      	b.n	8008c62 <_printf_i+0x172>
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	680d      	ldr	r5, [r1, #0]
 8008c74:	1d10      	adds	r0, r2, #4
 8008c76:	6949      	ldr	r1, [r1, #20]
 8008c78:	6018      	str	r0, [r3, #0]
 8008c7a:	6813      	ldr	r3, [r2, #0]
 8008c7c:	062e      	lsls	r6, r5, #24
 8008c7e:	d501      	bpl.n	8008c84 <_printf_i+0x194>
 8008c80:	6019      	str	r1, [r3, #0]
 8008c82:	e002      	b.n	8008c8a <_printf_i+0x19a>
 8008c84:	066d      	lsls	r5, r5, #25
 8008c86:	d5fb      	bpl.n	8008c80 <_printf_i+0x190>
 8008c88:	8019      	strh	r1, [r3, #0]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9d03      	ldr	r5, [sp, #12]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	e7bf      	b.n	8008c12 <_printf_i+0x122>
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	1d11      	adds	r1, r2, #4
 8008c96:	6019      	str	r1, [r3, #0]
 8008c98:	6815      	ldr	r5, [r2, #0]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	0028      	movs	r0, r5
 8008c9e:	6862      	ldr	r2, [r4, #4]
 8008ca0:	f000 f856 	bl	8008d50 <memchr>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d001      	beq.n	8008cac <_printf_i+0x1bc>
 8008ca8:	1b40      	subs	r0, r0, r5
 8008caa:	6060      	str	r0, [r4, #4]
 8008cac:	6863      	ldr	r3, [r4, #4]
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9a03      	ldr	r2, [sp, #12]
 8008cb4:	7013      	strb	r3, [r2, #0]
 8008cb6:	e7ac      	b.n	8008c12 <_printf_i+0x122>
 8008cb8:	002a      	movs	r2, r5
 8008cba:	6923      	ldr	r3, [r4, #16]
 8008cbc:	9906      	ldr	r1, [sp, #24]
 8008cbe:	9805      	ldr	r0, [sp, #20]
 8008cc0:	9d07      	ldr	r5, [sp, #28]
 8008cc2:	47a8      	blx	r5
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	d0ae      	beq.n	8008c26 <_printf_i+0x136>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	079b      	lsls	r3, r3, #30
 8008ccc:	d415      	bmi.n	8008cfa <_printf_i+0x20a>
 8008cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd0:	68e0      	ldr	r0, [r4, #12]
 8008cd2:	4298      	cmp	r0, r3
 8008cd4:	daa9      	bge.n	8008c2a <_printf_i+0x13a>
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	e7a7      	b.n	8008c2a <_printf_i+0x13a>
 8008cda:	0022      	movs	r2, r4
 8008cdc:	2301      	movs	r3, #1
 8008cde:	9906      	ldr	r1, [sp, #24]
 8008ce0:	9805      	ldr	r0, [sp, #20]
 8008ce2:	9e07      	ldr	r6, [sp, #28]
 8008ce4:	3219      	adds	r2, #25
 8008ce6:	47b0      	blx	r6
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d09c      	beq.n	8008c26 <_printf_i+0x136>
 8008cec:	3501      	adds	r5, #1
 8008cee:	68e3      	ldr	r3, [r4, #12]
 8008cf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	42ab      	cmp	r3, r5
 8008cf6:	dcf0      	bgt.n	8008cda <_printf_i+0x1ea>
 8008cf8:	e7e9      	b.n	8008cce <_printf_i+0x1de>
 8008cfa:	2500      	movs	r5, #0
 8008cfc:	e7f7      	b.n	8008cee <_printf_i+0x1fe>
 8008cfe:	46c0      	nop			@ (mov r8, r8)
 8008d00:	08008f71 	.word	0x08008f71
 8008d04:	08008f82 	.word	0x08008f82

08008d08 <memmove>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	4288      	cmp	r0, r1
 8008d0c:	d902      	bls.n	8008d14 <memmove+0xc>
 8008d0e:	188b      	adds	r3, r1, r2
 8008d10:	4298      	cmp	r0, r3
 8008d12:	d308      	bcc.n	8008d26 <memmove+0x1e>
 8008d14:	2300      	movs	r3, #0
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d007      	beq.n	8008d2a <memmove+0x22>
 8008d1a:	5ccc      	ldrb	r4, [r1, r3]
 8008d1c:	54c4      	strb	r4, [r0, r3]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	e7f9      	b.n	8008d16 <memmove+0xe>
 8008d22:	5c8b      	ldrb	r3, [r1, r2]
 8008d24:	5483      	strb	r3, [r0, r2]
 8008d26:	3a01      	subs	r2, #1
 8008d28:	d2fb      	bcs.n	8008d22 <memmove+0x1a>
 8008d2a:	bd10      	pop	{r4, pc}

08008d2c <_sbrk_r>:
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	b570      	push	{r4, r5, r6, lr}
 8008d30:	4d06      	ldr	r5, [pc, #24]	@ (8008d4c <_sbrk_r+0x20>)
 8008d32:	0004      	movs	r4, r0
 8008d34:	0008      	movs	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7f7 fd7a 	bl	8000830 <_sbrk>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d103      	bne.n	8008d48 <_sbrk_r+0x1c>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d000      	beq.n	8008d48 <_sbrk_r+0x1c>
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	bd70      	pop	{r4, r5, r6, pc}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	20001548 	.word	0x20001548

08008d50 <memchr>:
 8008d50:	b2c9      	uxtb	r1, r1
 8008d52:	1882      	adds	r2, r0, r2
 8008d54:	4290      	cmp	r0, r2
 8008d56:	d101      	bne.n	8008d5c <memchr+0xc>
 8008d58:	2000      	movs	r0, #0
 8008d5a:	4770      	bx	lr
 8008d5c:	7803      	ldrb	r3, [r0, #0]
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d0fb      	beq.n	8008d5a <memchr+0xa>
 8008d62:	3001      	adds	r0, #1
 8008d64:	e7f6      	b.n	8008d54 <memchr+0x4>

08008d66 <memcpy>:
 8008d66:	2300      	movs	r3, #0
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d100      	bne.n	8008d70 <memcpy+0xa>
 8008d6e:	bd10      	pop	{r4, pc}
 8008d70:	5ccc      	ldrb	r4, [r1, r3]
 8008d72:	54c4      	strb	r4, [r0, r3]
 8008d74:	3301      	adds	r3, #1
 8008d76:	e7f8      	b.n	8008d6a <memcpy+0x4>

08008d78 <_realloc_r>:
 8008d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d7a:	0006      	movs	r6, r0
 8008d7c:	000c      	movs	r4, r1
 8008d7e:	0015      	movs	r5, r2
 8008d80:	2900      	cmp	r1, #0
 8008d82:	d105      	bne.n	8008d90 <_realloc_r+0x18>
 8008d84:	0011      	movs	r1, r2
 8008d86:	f7ff fc55 	bl	8008634 <_malloc_r>
 8008d8a:	0004      	movs	r4, r0
 8008d8c:	0020      	movs	r0, r4
 8008d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	d103      	bne.n	8008d9c <_realloc_r+0x24>
 8008d94:	f7ff fbe2 	bl	800855c <_free_r>
 8008d98:	002c      	movs	r4, r5
 8008d9a:	e7f7      	b.n	8008d8c <_realloc_r+0x14>
 8008d9c:	f000 f81c 	bl	8008dd8 <_malloc_usable_size_r>
 8008da0:	0007      	movs	r7, r0
 8008da2:	4285      	cmp	r5, r0
 8008da4:	d802      	bhi.n	8008dac <_realloc_r+0x34>
 8008da6:	0843      	lsrs	r3, r0, #1
 8008da8:	42ab      	cmp	r3, r5
 8008daa:	d3ef      	bcc.n	8008d8c <_realloc_r+0x14>
 8008dac:	0029      	movs	r1, r5
 8008dae:	0030      	movs	r0, r6
 8008db0:	f7ff fc40 	bl	8008634 <_malloc_r>
 8008db4:	9001      	str	r0, [sp, #4]
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d101      	bne.n	8008dbe <_realloc_r+0x46>
 8008dba:	9c01      	ldr	r4, [sp, #4]
 8008dbc:	e7e6      	b.n	8008d8c <_realloc_r+0x14>
 8008dbe:	002a      	movs	r2, r5
 8008dc0:	42bd      	cmp	r5, r7
 8008dc2:	d900      	bls.n	8008dc6 <_realloc_r+0x4e>
 8008dc4:	003a      	movs	r2, r7
 8008dc6:	0021      	movs	r1, r4
 8008dc8:	9801      	ldr	r0, [sp, #4]
 8008dca:	f7ff ffcc 	bl	8008d66 <memcpy>
 8008dce:	0021      	movs	r1, r4
 8008dd0:	0030      	movs	r0, r6
 8008dd2:	f7ff fbc3 	bl	800855c <_free_r>
 8008dd6:	e7f0      	b.n	8008dba <_realloc_r+0x42>

08008dd8 <_malloc_usable_size_r>:
 8008dd8:	1f0b      	subs	r3, r1, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	1f18      	subs	r0, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	da01      	bge.n	8008de6 <_malloc_usable_size_r+0xe>
 8008de2:	580b      	ldr	r3, [r1, r0]
 8008de4:	18c0      	adds	r0, r0, r3
 8008de6:	4770      	bx	lr

08008de8 <_init>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	46c0      	nop			@ (mov r8, r8)
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr

08008df4 <_fini>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	46c0      	nop			@ (mov r8, r8)
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr
