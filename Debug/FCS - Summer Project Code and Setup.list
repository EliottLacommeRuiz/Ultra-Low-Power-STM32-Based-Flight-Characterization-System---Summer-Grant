
FCS - Summer Project Code and Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800846c  0800846c  0000946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085fc  080085fc  0000a1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080085fc  080085fc  0000a1cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080085fc  080085fc  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085fc  080085fc  000095fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08008604  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  200001cc  080087d0  0000a1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  080087d0  0000a554  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e667  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f29  00000000  00000000  0001885b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0001b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000975  00000000  00000000  0001c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016697  00000000  00000000  0001cdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001136c  00000000  00000000  0003345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cbf9  00000000  00000000  000447c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c13c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003068  00000000  00000000  000c1404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c446c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001cc 	.word	0x200001cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008454 	.word	0x08008454

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d0 	.word	0x200001d0
 8000104:	08008454 	.word	0x08008454

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fa47 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f83b 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f8e3 	bl	800041c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000256:	f000 f8a9 	bl	80003ac <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800025a:	f006 ff29 	bl	80070b0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char txBuf[8];
  uint8_t count = 1;
 800025e:	230f      	movs	r3, #15
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000266:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <main+0x7c>)
 8000268:	2140      	movs	r1, #64	@ 0x40
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fd43 	bl	8000cf6 <HAL_GPIO_TogglePin>
	  sprintf(txBuf, "%u\r\n", count);
 8000270:	240f      	movs	r4, #15
 8000272:	193b      	adds	r3, r7, r4
 8000274:	781a      	ldrb	r2, [r3, #0]
 8000276:	4913      	ldr	r1, [pc, #76]	@ (80002c4 <main+0x80>)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	0018      	movs	r0, r3
 800027c:	f007 fc4e 	bl	8007b1c <siprintf>

	  if (count >= 100)
 8000280:	0022      	movs	r2, r4
 8000282:	18bb      	adds	r3, r7, r2
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b63      	cmp	r3, #99	@ 0x63
 8000288:	d902      	bls.n	8000290 <main+0x4c>
	  {
		  count = 1;
 800028a:	18bb      	adds	r3, r7, r2
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
	  }
	  count++;
 8000290:	210f      	movs	r1, #15
 8000292:	187b      	adds	r3, r7, r1
 8000294:	781a      	ldrb	r2, [r3, #0]
 8000296:	187b      	adds	r3, r7, r1
 8000298:	3201      	adds	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]

	  CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	0018      	movs	r0, r3
 80002a0:	f7ff ff32 	bl	8000108 <strlen>
 80002a4:	0003      	movs	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	0011      	movs	r1, r2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f006 ff83 	bl	80071b8 <CDC_Transmit_FS>

	  HAL_Delay(500);
 80002b2:	23fa      	movs	r3, #250	@ 0xfa
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fa80 	bl	80007bc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80002bc:	e7d3      	b.n	8000266 <main+0x22>
 80002be:	46c0      	nop			@ (mov r8, r8)
 80002c0:	50000400 	.word	0x50000400
 80002c4:	0800846c 	.word	0x0800846c

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b09d      	sub	sp, #116	@ 0x74
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2438      	movs	r4, #56	@ 0x38
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2338      	movs	r3, #56	@ 0x38
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f007 fc41 	bl	8007b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	2324      	movs	r3, #36	@ 0x24
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	0018      	movs	r0, r3
 80002e4:	2314      	movs	r3, #20
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f007 fc39 	bl	8007b60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	2324      	movs	r3, #36	@ 0x24
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f007 fc32 	bl	8007b60 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002fc:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <SystemClock_Config+0xdc>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a29      	ldr	r2, [pc, #164]	@ (80003a8 <SystemClock_Config+0xe0>)
 8000302:	401a      	ands	r2, r3
 8000304:	4b27      	ldr	r3, [pc, #156]	@ (80003a4 <SystemClock_Config+0xdc>)
 8000306:	2180      	movs	r1, #128	@ 0x80
 8000308:	0109      	lsls	r1, r1, #4
 800030a:	430a      	orrs	r2, r1
 800030c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	0021      	movs	r1, r4
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2280      	movs	r2, #128	@ 0x80
 800031a:	0252      	lsls	r2, r2, #9
 800031c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2202      	movs	r2, #2
 8000322:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2280      	movs	r2, #128	@ 0x80
 8000328:	0252      	lsls	r2, r2, #9
 800032a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2280      	movs	r2, #128	@ 0x80
 8000330:	0312      	lsls	r2, r2, #12
 8000332:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2280      	movs	r2, #128	@ 0x80
 8000338:	0412      	lsls	r2, r2, #16
 800033a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	187b      	adds	r3, r7, r1
 800033e:	0018      	movs	r0, r3
 8000340:	f002 fb40 	bl	80029c4 <HAL_RCC_OscConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000348:	f000 f8de 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	2124      	movs	r1, #36	@ 0x24
 800034e:	187b      	adds	r3, r7, r1
 8000350:	220f      	movs	r2, #15
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2100      	movs	r1, #0
 8000370:	0018      	movs	r0, r3
 8000372:	f002 fefb 	bl	800316c <HAL_RCC_ClockConfig>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800037a:	f000 f8c5 	bl	8000508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800037e:	003b      	movs	r3, r7
 8000380:	2240      	movs	r2, #64	@ 0x40
 8000382:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000384:	003b      	movs	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	003b      	movs	r3, r7
 800038c:	0018      	movs	r0, r3
 800038e:	f003 f8b9 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000396:	f000 f8b7 	bl	8000508 <Error_Handler>
  }
}
 800039a:	46c0      	nop			@ (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b01d      	add	sp, #116	@ 0x74
 80003a0:	bd90      	pop	{r4, r7, pc}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	40007000 	.word	0x40007000
 80003a8:	ffffe7ff 	.word	0xffffe7ff

080003ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b0:	4b18      	ldr	r3, [pc, #96]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003b2:	4a19      	ldr	r2, [pc, #100]	@ (8000418 <MX_SPI1_Init+0x6c>)
 80003b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b6:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003b8:	2282      	movs	r2, #130	@ 0x82
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d0:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	0092      	lsls	r2, r2, #2
 80003dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003de:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003e0:	2208      	movs	r2, #8
 80003e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f0:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f6:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003f8:	2207      	movs	r2, #7
 80003fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <MX_SPI1_Init+0x68>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f003 f9dc 	bl	80037bc <HAL_SPI_Init>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000408:	f000 f87e 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	200001e8 	.word	0x200001e8
 8000418:	40013000 	.word	0x40013000

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b08b      	sub	sp, #44	@ 0x2c
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	2414      	movs	r4, #20
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2314      	movs	r3, #20
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f007 fb97 	bl	8007b60 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000432:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000436:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000438:	2104      	movs	r1, #4
 800043a:	430a      	orrs	r2, r1
 800043c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800043e:	4b30      	ldr	r3, [pc, #192]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000442:	2204      	movs	r2, #4
 8000444:	4013      	ands	r3, r2
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800044a:	4b2d      	ldr	r3, [pc, #180]	@ (8000500 <MX_GPIO_Init+0xe4>)
 800044c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800044e:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000450:	2180      	movs	r1, #128	@ 0x80
 8000452:	430a      	orrs	r2, r1
 8000454:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000456:	4b2a      	ldr	r3, [pc, #168]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	4013      	ands	r3, r2
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b27      	ldr	r3, [pc, #156]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000466:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b21      	ldr	r3, [pc, #132]	@ (8000500 <MX_GPIO_Init+0xe4>)
 800047c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800047e:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000480:	2102      	movs	r1, #2
 8000482:	430a      	orrs	r2, r1
 8000484:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000486:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <MX_GPIO_Init+0xe4>)
 8000488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800048a:	2202      	movs	r2, #2
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin|FLASH_HOLD_RST_Pin|FLASH_WP_Pin, GPIO_PIN_RESET);
 8000492:	23a0      	movs	r3, #160	@ 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	2200      	movs	r2, #0
 8000498:	2107      	movs	r1, #7
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fc0e 	bl	8000cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80004a0:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <MX_GPIO_Init+0xe8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	2160      	movs	r1, #96	@ 0x60
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fc08 	bl	8000cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_CS_Pin FLASH_HOLD_RST_Pin FLASH_WP_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|FLASH_HOLD_RST_Pin|FLASH_WP_Pin;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2207      	movs	r2, #7
 80004b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2201      	movs	r2, #1
 80004b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	193a      	adds	r2, r7, r4
 80004c6:	23a0      	movs	r3, #160	@ 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fa77 	bl	80009c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin|LED_GREEN_Pin;
 80004d2:	0021      	movs	r1, r4
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2260      	movs	r2, #96	@ 0x60
 80004d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <MX_GPIO_Init+0xe8>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f000 fa64 	bl	80009c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f8:	46c0      	nop			@ (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b00b      	add	sp, #44	@ 0x2c
 80004fe:	bd90      	pop	{r4, r7, pc}
 8000500:	40021000 	.word	0x40021000
 8000504:	50000400 	.word	0x50000400

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	e7fd      	b.n	8000510 <Error_Handler+0x8>

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000518:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <HAL_MspInit+0x24>)
 800051a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_MspInit+0x24>)
 800051e:	2101      	movs	r1, #1
 8000520:	430a      	orrs	r2, r1
 8000522:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <HAL_MspInit+0x24>)
 8000526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <HAL_MspInit+0x24>)
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	0549      	lsls	r1, r1, #21
 800052e:	430a      	orrs	r2, r1
 8000530:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b089      	sub	sp, #36	@ 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	240c      	movs	r4, #12
 8000546:	193b      	adds	r3, r7, r4
 8000548:	0018      	movs	r0, r3
 800054a:	2314      	movs	r3, #20
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f007 fb06 	bl	8007b60 <memset>
  if(hspi->Instance==SPI1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a18      	ldr	r2, [pc, #96]	@ (80005bc <HAL_SPI_MspInit+0x80>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d129      	bne.n	80005b2 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <HAL_SPI_MspInit+0x84>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <HAL_SPI_MspInit+0x84>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	0149      	lsls	r1, r1, #5
 8000568:	430a      	orrs	r2, r1
 800056a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <HAL_SPI_MspInit+0x84>)
 800056e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000570:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <HAL_SPI_MspInit+0x84>)
 8000572:	2101      	movs	r1, #1
 8000574:	430a      	orrs	r2, r1
 8000576:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <HAL_SPI_MspInit+0x84>)
 800057a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000584:	0021      	movs	r1, r4
 8000586:	187b      	adds	r3, r7, r1
 8000588:	22e0      	movs	r2, #224	@ 0xe0
 800058a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2203      	movs	r2, #3
 800059c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	187a      	adds	r2, r7, r1
 80005a6:	23a0      	movs	r3, #160	@ 0xa0
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fa07 	bl	80009c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b009      	add	sp, #36	@ 0x24
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	40013000 	.word	0x40013000
 80005c0:	40021000 	.word	0x40021000

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	e7fd      	b.n	80005c8 <NMI_Handler+0x4>

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	e7fd      	b.n	80005d0 <HardFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d8:	46c0      	nop			@ (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f8ca 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <USB_IRQHandler+0x14>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fcae 	bl	8000f60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	20000f10 	.word	0x20000f10

08000610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000618:	4a14      	ldr	r2, [pc, #80]	@ (800066c <_sbrk+0x5c>)
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <_sbrk+0x60>)
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <_sbrk+0x64>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <_sbrk+0x64>)
 800062e:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <_sbrk+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <_sbrk+0x64>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	18d3      	adds	r3, r2, r3
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	429a      	cmp	r2, r3
 800063e:	d207      	bcs.n	8000650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000640:	f007 fa96 	bl	8007b70 <__errno>
 8000644:	0003      	movs	r3, r0
 8000646:	220c      	movs	r2, #12
 8000648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064a:	2301      	movs	r3, #1
 800064c:	425b      	negs	r3, r3
 800064e:	e009      	b.n	8000664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	18d2      	adds	r2, r2, r3
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <_sbrk+0x64>)
 8000660:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	b006      	add	sp, #24
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20005000 	.word	0x20005000
 8000670:	00000400 	.word	0x00000400
 8000674:	20000240 	.word	0x20000240
 8000678:	20001558 	.word	0x20001558

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800068c:	f7ff fff6 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	@ (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f007 fa61 	bl	8007b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ba:	f7ff fdc3 	bl	8000244 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
   ldr   r0, =_estack
 80006c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80006cc:	08008604 	.word	0x08008604
  ldr r2, =_sbss
 80006d0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80006d4:	20001554 	.word	0x20001554

080006d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_COMP_IRQHandler>
	...

080006dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <HAL_Init+0x3c>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <HAL_Init+0x3c>)
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	430a      	orrs	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f811 	bl	800071c <HAL_InitTick>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d003      	beq.n	8000706 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e001      	b.n	800070a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000706:	f7ff ff05 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
}
 800070e:	0018      	movs	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <HAL_InitTick+0x5c>)
 8000726:	681c      	ldr	r4, [r3, #0]
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <HAL_InitTick+0x60>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	0019      	movs	r1, r3
 800072e:	23fa      	movs	r3, #250	@ 0xfa
 8000730:	0098      	lsls	r0, r3, #2
 8000732:	f7ff fcfb 	bl	800012c <__udivsi3>
 8000736:	0003      	movs	r3, r0
 8000738:	0019      	movs	r1, r3
 800073a:	0020      	movs	r0, r4
 800073c:	f7ff fcf6 	bl	800012c <__udivsi3>
 8000740:	0003      	movs	r3, r0
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f92f 	bl	80009a6 <HAL_SYSTICK_Config>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800074c:	2301      	movs	r3, #1
 800074e:	e00f      	b.n	8000770 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d80b      	bhi.n	800076e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	2301      	movs	r3, #1
 800075a:	425b      	negs	r3, r3
 800075c:	2200      	movs	r2, #0
 800075e:	0018      	movs	r0, r3
 8000760:	f000 f8fc 	bl	800095c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_InitTick+0x64>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b003      	add	sp, #12
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	001a      	movs	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	18d2      	adds	r2, r2, r3
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <HAL_IncTick+0x20>)
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000244 	.word	0x20000244

080007a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	@ (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	20000244 	.word	0x20000244

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff0 	bl	80007a8 <HAL_GetTick>
 80007c8:	0003      	movs	r3, r0
 80007ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <HAL_Delay+0x44>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	001a      	movs	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	189b      	adds	r3, r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	f7ff ffe0 	bl	80007a8 <HAL_GetTick>
 80007e8:	0002      	movs	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b004      	add	sp, #16
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	20000008 	.word	0x20000008

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	0002      	movs	r2, r0
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b7f      	cmp	r3, #127	@ 0x7f
 8000816:	d809      	bhi.n	800082c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	001a      	movs	r2, r3
 800081e:	231f      	movs	r3, #31
 8000820:	401a      	ands	r2, r3
 8000822:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <__NVIC_EnableIRQ+0x30>)
 8000824:	2101      	movs	r1, #1
 8000826:	4091      	lsls	r1, r2
 8000828:	000a      	movs	r2, r1
 800082a:	601a      	str	r2, [r3, #0]
  }
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b7f      	cmp	r3, #127	@ 0x7f
 800084c:	d828      	bhi.n	80008a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084e:	4a2f      	ldr	r2, [pc, #188]	@ (800090c <__NVIC_SetPriority+0xd4>)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25b      	sxtb	r3, r3
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	33c0      	adds	r3, #192	@ 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	589b      	ldr	r3, [r3, r2]
 800085e:	1dfa      	adds	r2, r7, #7
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	0011      	movs	r1, r2
 8000864:	2203      	movs	r2, #3
 8000866:	400a      	ands	r2, r1
 8000868:	00d2      	lsls	r2, r2, #3
 800086a:	21ff      	movs	r1, #255	@ 0xff
 800086c:	4091      	lsls	r1, r2
 800086e:	000a      	movs	r2, r1
 8000870:	43d2      	mvns	r2, r2
 8000872:	401a      	ands	r2, r3
 8000874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	22ff      	movs	r2, #255	@ 0xff
 800087c:	401a      	ands	r2, r3
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	0018      	movs	r0, r3
 8000884:	2303      	movs	r3, #3
 8000886:	4003      	ands	r3, r0
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	481f      	ldr	r0, [pc, #124]	@ (800090c <__NVIC_SetPriority+0xd4>)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b25b      	sxtb	r3, r3
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	430a      	orrs	r2, r1
 8000898:	33c0      	adds	r3, #192	@ 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800089e:	e031      	b.n	8000904 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000910 <__NVIC_SetPriority+0xd8>)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0019      	movs	r1, r3
 80008a8:	230f      	movs	r3, #15
 80008aa:	400b      	ands	r3, r1
 80008ac:	3b08      	subs	r3, #8
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	3306      	adds	r3, #6
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	3304      	adds	r3, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	2203      	movs	r2, #3
 80008c2:	400a      	ands	r2, r1
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	21ff      	movs	r1, #255	@ 0xff
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	22ff      	movs	r2, #255	@ 0xff
 80008d8:	401a      	ands	r2, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	2303      	movs	r3, #3
 80008e2:	4003      	ands	r3, r0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <__NVIC_SetPriority+0xd8>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001c      	movs	r4, r3
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	3b08      	subs	r3, #8
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	430a      	orrs	r2, r1
 80008fa:	3306      	adds	r3, #6
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	18c3      	adds	r3, r0, r3
 8000900:	3304      	adds	r3, #4
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b003      	add	sp, #12
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	045b      	lsls	r3, r3, #17
 8000924:	429a      	cmp	r2, r3
 8000926:	d301      	bcc.n	800092c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000928:	2301      	movs	r3, #1
 800092a:	e010      	b.n	800094e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <SysTick_Config+0x44>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	3a01      	subs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	2103      	movs	r1, #3
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff ff7c 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <SysTick_Config+0x44>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <SysTick_Config+0x44>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	210f      	movs	r1, #15
 8000968:	187b      	adds	r3, r7, r1
 800096a:	1c02      	adds	r2, r0, #0
 800096c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	187b      	adds	r3, r7, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	0002      	movs	r2, r0
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ff33 	bl	8000804 <__NVIC_EnableIRQ>
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ffaf 	bl	8000914 <SysTick_Config>
 80009b6:	0003      	movs	r3, r0
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80009d6:	e155      	b.n	8000c84 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d100      	bne.n	80009f0 <HAL_GPIO_Init+0x30>
 80009ee:	e146      	b.n	8000c7e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d005      	beq.n	8000a08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d130      	bne.n	8000a6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	43da      	mvns	r2, r3
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	43da      	mvns	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	2201      	movs	r2, #1
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2203      	movs	r2, #3
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d017      	beq.n	8000aa6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	2203      	movs	r2, #3
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	43da      	mvns	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2203      	movs	r2, #3
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d123      	bne.n	8000afa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	08da      	lsrs	r2, r3, #3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3208      	adds	r2, #8
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	58d3      	ldr	r3, [r2, r3]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	691a      	ldr	r2, [r3, #16]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2107      	movs	r1, #7
 8000ade:	400b      	ands	r3, r1
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	6939      	ldr	r1, [r7, #16]
 8000af8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2203      	movs	r2, #3
 8000b18:	401a      	ands	r2, r3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	23c0      	movs	r3, #192	@ 0xc0
 8000b34:	029b      	lsls	r3, r3, #10
 8000b36:	4013      	ands	r3, r2
 8000b38:	d100      	bne.n	8000b3c <HAL_GPIO_Init+0x17c>
 8000b3a:	e0a0      	b.n	8000c7e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3c:	4b57      	ldr	r3, [pc, #348]	@ (8000c9c <HAL_GPIO_Init+0x2dc>)
 8000b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b40:	4b56      	ldr	r3, [pc, #344]	@ (8000c9c <HAL_GPIO_Init+0x2dc>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	430a      	orrs	r2, r1
 8000b46:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b48:	4a55      	ldr	r2, [pc, #340]	@ (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3302      	adds	r3, #2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	589b      	ldr	r3, [r3, r2]
 8000b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2203      	movs	r2, #3
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	220f      	movs	r2, #15
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	43da      	mvns	r2, r3
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	23a0      	movs	r3, #160	@ 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d01f      	beq.n	8000bb6 <HAL_GPIO_Init+0x1f6>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca4 <HAL_GPIO_Init+0x2e4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d019      	beq.n	8000bb2 <HAL_GPIO_Init+0x1f2>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a49      	ldr	r2, [pc, #292]	@ (8000ca8 <HAL_GPIO_Init+0x2e8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0x1ee>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a48      	ldr	r2, [pc, #288]	@ (8000cac <HAL_GPIO_Init+0x2ec>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d00d      	beq.n	8000baa <HAL_GPIO_Init+0x1ea>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a47      	ldr	r2, [pc, #284]	@ (8000cb0 <HAL_GPIO_Init+0x2f0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d007      	beq.n	8000ba6 <HAL_GPIO_Init+0x1e6>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a46      	ldr	r2, [pc, #280]	@ (8000cb4 <HAL_GPIO_Init+0x2f4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	e00a      	b.n	8000bb8 <HAL_GPIO_Init+0x1f8>
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	e008      	b.n	8000bb8 <HAL_GPIO_Init+0x1f8>
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x1f8>
 8000baa:	2303      	movs	r3, #3
 8000bac:	e004      	b.n	8000bb8 <HAL_GPIO_Init+0x1f8>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_Init+0x1f8>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x1f8>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	2103      	movs	r1, #3
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bc8:	4935      	ldr	r1, [pc, #212]	@ (8000ca0 <HAL_GPIO_Init+0x2e0>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd6:	4b38      	ldr	r3, [pc, #224]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	2380      	movs	r3, #128	@ 0x80
 8000bec:	035b      	lsls	r3, r3, #13
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c00:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	039b      	lsls	r3, r3, #14
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c24:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	029b      	lsls	r3, r3, #10
 8000c42:	4013      	ands	r3, r2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	2380      	movs	r3, #128	@ 0x80
 8000c6a:	025b      	lsls	r3, r3, #9
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_GPIO_Init+0x2f8>)
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	1e13      	subs	r3, r2, #0
 8000c8e:	d000      	beq.n	8000c92 <HAL_GPIO_Init+0x2d2>
 8000c90:	e6a2      	b.n	80009d8 <HAL_GPIO_Init+0x18>
  }
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b006      	add	sp, #24
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	50000400 	.word	0x50000400
 8000ca8:	50000800 	.word	0x50000800
 8000cac:	50000c00 	.word	0x50000c00
 8000cb0:	50001000 	.word	0x50001000
 8000cb4:	50001c00 	.word	0x50001c00
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	1cbb      	adds	r3, r7, #2
 8000cca:	1c02      	adds	r2, r0, #0
 8000ccc:	801a      	strh	r2, [r3, #0]
 8000cce:	1c7b      	adds	r3, r7, #1
 8000cd0:	1c0a      	adds	r2, r1, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd4:	1c7b      	adds	r3, r7, #1
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d004      	beq.n	8000ce6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cdc:	1cbb      	adds	r3, r7, #2
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ce4:	e003      	b.n	8000cee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ce6:	1cbb      	adds	r3, r7, #2
 8000ce8:	881a      	ldrh	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	000a      	movs	r2, r1
 8000d00:	1cbb      	adds	r3, r7, #2
 8000d02:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0a:	1cbb      	adds	r3, r7, #2
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	4013      	ands	r3, r2
 8000d12:	041a      	lsls	r2, r3, #16
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	1cb9      	adds	r1, r7, #2
 8000d1a:	8809      	ldrh	r1, [r1, #0]
 8000d1c:	400b      	ands	r3, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b004      	add	sp, #16
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0e4      	b.n	8000f08 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a73      	ldr	r2, [pc, #460]	@ (8000f10 <HAL_PCD_Init+0x1e4>)
 8000d42:	5c9b      	ldrb	r3, [r3, r2]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d108      	bne.n	8000d5c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	23a4      	movs	r3, #164	@ 0xa4
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	2100      	movs	r1, #0
 8000d52:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	0018      	movs	r0, r3
 8000d58:	f006 fb8c 	bl	8007474 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a6c      	ldr	r2, [pc, #432]	@ (8000f10 <HAL_PCD_Init+0x1e4>)
 8000d60:	2103      	movs	r1, #3
 8000d62:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f002 fdd1 	bl	8003910 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d6e:	230f      	movs	r3, #15
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e047      	b.n	8000e08 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d78:	200f      	movs	r0, #15
 8000d7a:	183b      	adds	r3, r7, r0
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	0013      	movs	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	189b      	adds	r3, r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	18cb      	adds	r3, r1, r3
 8000d8a:	3311      	adds	r3, #17
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	0013      	movs	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	189b      	adds	r3, r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	18cb      	adds	r3, r1, r3
 8000da0:	3310      	adds	r3, #16
 8000da2:	183a      	adds	r2, r7, r0
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000da8:	183b      	adds	r3, r7, r0
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	0013      	movs	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	189b      	adds	r3, r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	18cb      	adds	r3, r1, r3
 8000db8:	3313      	adds	r3, #19
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	189b      	adds	r3, r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	18cb      	adds	r3, r1, r3
 8000dce:	3320      	adds	r3, #32
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dd4:	183b      	adds	r3, r7, r0
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	0013      	movs	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	189b      	adds	r3, r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	18cb      	adds	r3, r1, r3
 8000de4:	3324      	adds	r3, #36	@ 0x24
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dea:	183b      	adds	r3, r7, r0
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	0013      	movs	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	189b      	adds	r3, r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dfe:	183b      	adds	r3, r7, r0
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	183b      	adds	r3, r7, r0
 8000e04:	3201      	adds	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	187a      	adds	r2, r7, r1
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3b0      	bcc.n	8000d78 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e056      	b.n	8000ecc <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e1e:	240f      	movs	r4, #15
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	2352      	movs	r3, #82	@ 0x52
 8000e28:	33ff      	adds	r3, #255	@ 0xff
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	189b      	adds	r3, r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	18c3      	adds	r3, r0, r3
 8000e36:	185b      	adds	r3, r3, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	23a8      	movs	r3, #168	@ 0xa8
 8000e44:	0059      	lsls	r1, r3, #1
 8000e46:	0013      	movs	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	189b      	adds	r3, r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	18c3      	adds	r3, r0, r3
 8000e50:	185b      	adds	r3, r3, r1
 8000e52:	193a      	adds	r2, r7, r4
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	2354      	movs	r3, #84	@ 0x54
 8000e60:	33ff      	adds	r3, #255	@ 0xff
 8000e62:	0019      	movs	r1, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	189b      	adds	r3, r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	18c3      	adds	r3, r0, r3
 8000e6e:	185b      	adds	r3, r3, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	23b0      	movs	r3, #176	@ 0xb0
 8000e7c:	0059      	lsls	r1, r3, #1
 8000e7e:	0013      	movs	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	189b      	adds	r3, r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	18c3      	adds	r3, r0, r3
 8000e88:	185b      	adds	r3, r3, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	23b2      	movs	r3, #178	@ 0xb2
 8000e96:	0059      	lsls	r1, r3, #1
 8000e98:	0013      	movs	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	189b      	adds	r3, r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	18c3      	adds	r3, r0, r3
 8000ea2:	185b      	adds	r3, r3, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	23b4      	movs	r3, #180	@ 0xb4
 8000eb0:	0059      	lsls	r1, r3, #1
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	189b      	adds	r3, r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	18c3      	adds	r3, r0, r3
 8000ebc:	185b      	adds	r3, r3, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	3201      	adds	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	18ba      	adds	r2, r7, r2
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d3a1      	bcc.n	8000e1e <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6859      	ldr	r1, [r3, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	f002 fd2e 	bl	8003944 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_PCD_Init+0x1e4>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7a9b      	ldrb	r3, [r3, #10]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d103      	bne.n	8000f06 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fd29 	bl	8002958 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b005      	add	sp, #20
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	00000291 	.word	0x00000291

08000f14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	23a4      	movs	r3, #164	@ 0xa4
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_PCD_Start+0x18>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e014      	b.n	8000f56 <HAL_PCD_Start+0x42>
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	23a4      	movs	r3, #164	@ 0xa4
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	2101      	movs	r1, #1
 8000f34:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f002 fcd2 	bl	80038e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f004 faa9 	bl	800549c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	23a4      	movs	r3, #164	@ 0xa4
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	2100      	movs	r1, #0
 8000f52:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f004 faab 	bl	80054c8 <USB_ReadInterrupts>
 8000f72:	0003      	movs	r3, r0
 8000f74:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d004      	beq.n	8000f8a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 fb62 	bl	800164c <PCD_EP_ISR_Handler>

    return;
 8000f88:	e11d      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4013      	ands	r3, r2
 8000f92:	d015      	beq.n	8000fc0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2244      	movs	r2, #68	@ 0x44
 8000f9a:	5a9b      	ldrh	r3, [r3, r2]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	498a      	ldr	r1, [pc, #552]	@ (80011cc <HAL_PCD_IRQHandler+0x26c>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	b291      	uxth	r1, r2
 8000fa8:	2244      	movs	r2, #68	@ 0x44
 8000faa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f006 fae3 	bl	800757a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 f915 	bl	80011e8 <HAL_PCD_SetAddress>

    return;
 8000fbe:	e102      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	01db      	lsls	r3, r3, #7
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d00c      	beq.n	8000fe4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2244      	movs	r2, #68	@ 0x44
 8000fd0:	5a9b      	ldrh	r3, [r3, r2]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	497d      	ldr	r1, [pc, #500]	@ (80011d0 <HAL_PCD_IRQHandler+0x270>)
 8000fda:	400a      	ands	r2, r1
 8000fdc:	b291      	uxth	r1, r2
 8000fde:	2244      	movs	r2, #68	@ 0x44
 8000fe0:	5299      	strh	r1, [r3, r2]

    return;
 8000fe2:	e0f0      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	4013      	ands	r3, r2
 8000fec:	d00c      	beq.n	8001008 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2244      	movs	r2, #68	@ 0x44
 8000ff4:	5a9b      	ldrh	r3, [r3, r2]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4975      	ldr	r1, [pc, #468]	@ (80011d4 <HAL_PCD_IRQHandler+0x274>)
 8000ffe:	400a      	ands	r2, r1
 8001000:	b291      	uxth	r1, r2
 8001002:	2244      	movs	r2, #68	@ 0x44
 8001004:	5299      	strh	r1, [r3, r2]

    return;
 8001006:	e0de      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	2380      	movs	r3, #128	@ 0x80
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	4013      	ands	r3, r2
 8001010:	d038      	beq.n	8001084 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2240      	movs	r2, #64	@ 0x40
 8001018:	5a9b      	ldrh	r3, [r3, r2]
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2104      	movs	r1, #4
 8001022:	438a      	bics	r2, r1
 8001024:	b291      	uxth	r1, r2
 8001026:	2240      	movs	r2, #64	@ 0x40
 8001028:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2240      	movs	r2, #64	@ 0x40
 8001030:	5a9b      	ldrh	r3, [r3, r2]
 8001032:	b29a      	uxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2108      	movs	r1, #8
 800103a:	438a      	bics	r2, r1
 800103c:	b291      	uxth	r1, r2
 800103e:	2240      	movs	r2, #64	@ 0x40
 8001040:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	23b2      	movs	r3, #178	@ 0xb2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	5cd3      	ldrb	r3, [r2, r3]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d109      	bne.n	8001062 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	23b2      	movs	r3, #178	@ 0xb2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	2100      	movs	r1, #0
 8001056:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2100      	movs	r1, #0
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fca5 	bl	80029ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0018      	movs	r0, r3
 8001066:	f006 fac9 	bl	80075fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2244      	movs	r2, #68	@ 0x44
 8001070:	5a9b      	ldrh	r3, [r3, r2]
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4957      	ldr	r1, [pc, #348]	@ (80011d8 <HAL_PCD_IRQHandler+0x278>)
 800107a:	400a      	ands	r2, r1
 800107c:	b291      	uxth	r1, r2
 800107e:	2244      	movs	r2, #68	@ 0x44
 8001080:	5299      	strh	r1, [r3, r2]

    return;
 8001082:	e0a0      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4013      	ands	r3, r2
 800108c:	d028      	beq.n	80010e0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2240      	movs	r2, #64	@ 0x40
 8001094:	5a9b      	ldrh	r3, [r3, r2]
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2108      	movs	r1, #8
 800109e:	430a      	orrs	r2, r1
 80010a0:	b291      	uxth	r1, r2
 80010a2:	2240      	movs	r2, #64	@ 0x40
 80010a4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2244      	movs	r2, #68	@ 0x44
 80010ac:	5a9b      	ldrh	r3, [r3, r2]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4949      	ldr	r1, [pc, #292]	@ (80011dc <HAL_PCD_IRQHandler+0x27c>)
 80010b6:	400a      	ands	r2, r1
 80010b8:	b291      	uxth	r1, r2
 80010ba:	2244      	movs	r2, #68	@ 0x44
 80010bc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2240      	movs	r2, #64	@ 0x40
 80010c4:	5a9b      	ldrh	r3, [r3, r2]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2104      	movs	r1, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b291      	uxth	r1, r2
 80010d2:	2240      	movs	r2, #64	@ 0x40
 80010d4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f006 fa73 	bl	80075c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010de:	e072      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	4013      	ands	r3, r2
 80010e6:	d046      	beq.n	8001176 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2244      	movs	r2, #68	@ 0x44
 80010ee:	5a9b      	ldrh	r3, [r3, r2]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2180      	movs	r1, #128	@ 0x80
 80010f8:	438a      	bics	r2, r1
 80010fa:	b291      	uxth	r1, r2
 80010fc:	2244      	movs	r2, #68	@ 0x44
 80010fe:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	23b2      	movs	r3, #178	@ 0xb2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d12f      	bne.n	800116c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2240      	movs	r2, #64	@ 0x40
 8001112:	5a9b      	ldrh	r3, [r3, r2]
 8001114:	b29a      	uxth	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2104      	movs	r1, #4
 800111c:	430a      	orrs	r2, r1
 800111e:	b291      	uxth	r1, r2
 8001120:	2240      	movs	r2, #64	@ 0x40
 8001122:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2240      	movs	r2, #64	@ 0x40
 800112a:	5a9b      	ldrh	r3, [r3, r2]
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2108      	movs	r1, #8
 8001134:	430a      	orrs	r2, r1
 8001136:	b291      	uxth	r1, r2
 8001138:	2240      	movs	r2, #64	@ 0x40
 800113a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	23b2      	movs	r3, #178	@ 0xb2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	2101      	movs	r1, #1
 8001144:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2254      	movs	r2, #84	@ 0x54
 800114c:	5a9b      	ldrh	r3, [r3, r2]
 800114e:	b29b      	uxth	r3, r3
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	223c      	movs	r2, #60	@ 0x3c
 8001154:	4013      	ands	r3, r2
 8001156:	0019      	movs	r1, r3
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	23b3      	movs	r3, #179	@ 0xb3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2101      	movs	r1, #1
 8001164:	0018      	movs	r0, r3
 8001166:	f001 fc21 	bl	80029ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800116a:	e02c      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0018      	movs	r0, r3
 8001170:	f006 fa28 	bl	80075c4 <HAL_PCD_SuspendCallback>
    return;
 8001174:	e027      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d010      	beq.n	80011a2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2244      	movs	r2, #68	@ 0x44
 8001186:	5a9b      	ldrh	r3, [r3, r2]
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4914      	ldr	r1, [pc, #80]	@ (80011e0 <HAL_PCD_IRQHandler+0x280>)
 8001190:	400a      	ands	r2, r1
 8001192:	b291      	uxth	r1, r2
 8001194:	2244      	movs	r2, #68	@ 0x44
 8001196:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	0018      	movs	r0, r3
 800119c:	f006 f9de 	bl	800755c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011a0:	e011      	b.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	d00c      	beq.n	80011c6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2244      	movs	r2, #68	@ 0x44
 80011b2:	5a9b      	ldrh	r3, [r3, r2]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	490a      	ldr	r1, [pc, #40]	@ (80011e4 <HAL_PCD_IRQHandler+0x284>)
 80011bc:	400a      	ands	r2, r1
 80011be:	b291      	uxth	r1, r2
 80011c0:	2244      	movs	r2, #68	@ 0x44
 80011c2:	5299      	strh	r1, [r3, r2]

    return;
 80011c4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b004      	add	sp, #16
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	fffffbff 	.word	0xfffffbff
 80011d0:	ffffbfff 	.word	0xffffbfff
 80011d4:	ffffdfff 	.word	0xffffdfff
 80011d8:	ffffefff 	.word	0xffffefff
 80011dc:	fffff7ff 	.word	0xfffff7ff
 80011e0:	fffffdff 	.word	0xfffffdff
 80011e4:	fffffeff 	.word	0xfffffeff

080011e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	000a      	movs	r2, r1
 80011f2:	1cfb      	adds	r3, r7, #3
 80011f4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	23a4      	movs	r3, #164	@ 0xa4
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	5cd3      	ldrb	r3, [r2, r3]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_PCD_SetAddress+0x1e>
 8001202:	2302      	movs	r3, #2
 8001204:	e016      	b.n	8001234 <HAL_PCD_SetAddress+0x4c>
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	23a4      	movs	r3, #164	@ 0xa4
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	2101      	movs	r1, #1
 800120e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1cfa      	adds	r2, r7, #3
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	1cfb      	adds	r3, r7, #3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	0019      	movs	r1, r3
 8001222:	0010      	movs	r0, r2
 8001224:	f004 f926 	bl	8005474 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	23a4      	movs	r3, #164	@ 0xa4
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	2100      	movs	r1, #0
 8001230:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	000c      	movs	r4, r1
 8001246:	0010      	movs	r0, r2
 8001248:	0019      	movs	r1, r3
 800124a:	1cfb      	adds	r3, r7, #3
 800124c:	1c22      	adds	r2, r4, #0
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	003b      	movs	r3, r7
 8001252:	1c02      	adds	r2, r0, #0
 8001254:	801a      	strh	r2, [r3, #0]
 8001256:	1cbb      	adds	r3, r7, #2
 8001258:	1c0a      	adds	r2, r1, #0
 800125a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800125c:	230b      	movs	r3, #11
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001264:	1cfb      	adds	r3, r7, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	da0f      	bge.n	800128e <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2207      	movs	r2, #7
 8001274:	401a      	ands	r2, r3
 8001276:	0013      	movs	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	189b      	adds	r3, r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	3310      	adds	r3, #16
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	18d3      	adds	r3, r2, r3
 8001284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2201      	movs	r2, #1
 800128a:	705a      	strb	r2, [r3, #1]
 800128c:	e00f      	b.n	80012ae <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800128e:	1cfb      	adds	r3, r7, #3
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2207      	movs	r2, #7
 8001294:	401a      	ands	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	189b      	adds	r3, r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	3351      	adds	r3, #81	@ 0x51
 80012a0:	33ff      	adds	r3, #255	@ 0xff
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012ae:	1cfb      	adds	r3, r7, #3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2207      	movs	r2, #7
 80012b4:	4013      	ands	r3, r2
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80012bc:	003b      	movs	r3, r7
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	055b      	lsls	r3, r3, #21
 80012c2:	0d5a      	lsrs	r2, r3, #21
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1cba      	adds	r2, r7, #2
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012d0:	1cbb      	adds	r3, r7, #2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d102      	bne.n	80012de <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	23a4      	movs	r3, #164	@ 0xa4
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_PCD_EP_Open+0xb2>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e013      	b.n	8001316 <HAL_PCD_EP_Open+0xda>
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	23a4      	movs	r3, #164	@ 0xa4
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	2101      	movs	r1, #1
 80012f6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f002 fb3b 	bl	800397c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	23a4      	movs	r3, #164	@ 0xa4
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	2100      	movs	r1, #0
 800130e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001310:	230b      	movs	r3, #11
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	781b      	ldrb	r3, [r3, #0]
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b005      	add	sp, #20
 800131c:	bd90      	pop	{r4, r7, pc}

0800131e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	000a      	movs	r2, r1
 8001328:	1cfb      	adds	r3, r7, #3
 800132a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800132c:	1cfb      	adds	r3, r7, #3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b25b      	sxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	da0f      	bge.n	8001356 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001336:	1cfb      	adds	r3, r7, #3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2207      	movs	r2, #7
 800133c:	401a      	ands	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	189b      	adds	r3, r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	3310      	adds	r3, #16
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	18d3      	adds	r3, r2, r3
 800134c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
 8001354:	e00f      	b.n	8001376 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001356:	1cfb      	adds	r3, r7, #3
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2207      	movs	r2, #7
 800135c:	401a      	ands	r2, r3
 800135e:	0013      	movs	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	189b      	adds	r3, r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	3351      	adds	r3, #81	@ 0x51
 8001368:	33ff      	adds	r3, #255	@ 0xff
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	18d3      	adds	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001376:	1cfb      	adds	r3, r7, #3
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2207      	movs	r2, #7
 800137c:	4013      	ands	r3, r2
 800137e:	b2da      	uxtb	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	23a4      	movs	r3, #164	@ 0xa4
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_PCD_EP_Close+0x76>
 8001390:	2302      	movs	r3, #2
 8001392:	e011      	b.n	80013b8 <HAL_PCD_EP_Close+0x9a>
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	23a4      	movs	r3, #164	@ 0xa4
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	2101      	movs	r1, #1
 800139c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 ffbc 	bl	8004324 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	23a4      	movs	r3, #164	@ 0xa4
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	2100      	movs	r1, #0
 80013b4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b004      	add	sp, #16
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	200b      	movs	r0, #11
 80013ce:	183b      	adds	r3, r7, r0
 80013d0:	1c0a      	adds	r2, r1, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d4:	0001      	movs	r1, r0
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2207      	movs	r2, #7
 80013dc:	401a      	ands	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	189b      	adds	r3, r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	3351      	adds	r3, #81	@ 0x51
 80013e8:	33ff      	adds	r3, #255	@ 0xff
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2200      	movs	r2, #0
 8001406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2207      	movs	r2, #7
 800140e:	4013      	ands	r3, r2
 8001410:	b2da      	uxtb	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f003 f940 	bl	80046a4 <USB_EPStartXfer>

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b006      	add	sp, #24
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	000a      	movs	r2, r1
 8001438:	1cfb      	adds	r3, r7, #3
 800143a:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800143c:	1cfb      	adds	r3, r7, #3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2207      	movs	r2, #7
 8001442:	401a      	ands	r2, r3
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	23b6      	movs	r3, #182	@ 0xb6
 8001448:	0059      	lsls	r1, r3, #1
 800144a:	0013      	movs	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	189b      	adds	r3, r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	18c3      	adds	r3, r0, r3
 8001454:	185b      	adds	r3, r3, r1
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	200b      	movs	r0, #11
 800146e:	183b      	adds	r3, r7, r0
 8001470:	1c0a      	adds	r2, r1, #0
 8001472:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001474:	183b      	adds	r3, r7, r0
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2207      	movs	r2, #7
 800147a:	401a      	ands	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	189b      	adds	r3, r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	3310      	adds	r3, #16
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	18d3      	adds	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2224      	movs	r2, #36	@ 0x24
 800149c:	2101      	movs	r1, #1
 800149e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2201      	movs	r2, #1
 80014b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014b2:	183b      	adds	r3, r7, r0
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2207      	movs	r2, #7
 80014b8:	4013      	ands	r3, r2
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f003 f8eb 	bl	80046a4 <USB_EPStartXfer>

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b006      	add	sp, #24
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	000a      	movs	r2, r1
 80014e2:	1cfb      	adds	r3, r7, #3
 80014e4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014e6:	1cfb      	adds	r3, r7, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2207      	movs	r2, #7
 80014ec:	4013      	ands	r3, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	7912      	ldrb	r2, [r2, #4]
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e046      	b.n	8001588 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014fa:	1cfb      	adds	r3, r7, #3
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	da0f      	bge.n	8001524 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001504:	1cfb      	adds	r3, r7, #3
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2207      	movs	r2, #7
 800150a:	401a      	ands	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	189b      	adds	r3, r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	3310      	adds	r3, #16
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	705a      	strb	r2, [r3, #1]
 8001522:	e00d      	b.n	8001540 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001524:	1cfb      	adds	r3, r7, #3
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	0013      	movs	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	189b      	adds	r3, r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	3351      	adds	r3, #81	@ 0x51
 8001532:	33ff      	adds	r3, #255	@ 0xff
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	18d3      	adds	r3, r2, r3
 8001538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001546:	1cfb      	adds	r3, r7, #3
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2207      	movs	r2, #7
 800154c:	4013      	ands	r3, r2
 800154e:	b2da      	uxtb	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	23a4      	movs	r3, #164	@ 0xa4
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_PCD_EP_SetStall+0x8c>
 8001560:	2302      	movs	r3, #2
 8001562:	e011      	b.n	8001588 <HAL_PCD_EP_SetStall+0xb0>
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	23a4      	movs	r3, #164	@ 0xa4
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	2101      	movs	r1, #1
 800156c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	0011      	movs	r1, r2
 8001576:	0018      	movs	r0, r3
 8001578:	f003 fe80 	bl	800527c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	23a4      	movs	r3, #164	@ 0xa4
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	2100      	movs	r1, #0
 8001584:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	000a      	movs	r2, r1
 800159a:	1cfb      	adds	r3, r7, #3
 800159c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800159e:	1cfb      	adds	r3, r7, #3
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	220f      	movs	r2, #15
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	7912      	ldrb	r2, [r2, #4]
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e048      	b.n	8001644 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015b2:	1cfb      	adds	r3, r7, #3
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da0f      	bge.n	80015dc <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015bc:	1cfb      	adds	r3, r7, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2207      	movs	r2, #7
 80015c2:	401a      	ands	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	3310      	adds	r3, #16
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	18d3      	adds	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	705a      	strb	r2, [r3, #1]
 80015da:	e00f      	b.n	80015fc <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015dc:	1cfb      	adds	r3, r7, #3
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2207      	movs	r2, #7
 80015e2:	401a      	ands	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	189b      	adds	r3, r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	3351      	adds	r3, #81	@ 0x51
 80015ee:	33ff      	adds	r3, #255	@ 0xff
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	18d3      	adds	r3, r2, r3
 80015f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001602:	1cfb      	adds	r3, r7, #3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2207      	movs	r2, #7
 8001608:	4013      	ands	r3, r2
 800160a:	b2da      	uxtb	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	23a4      	movs	r3, #164	@ 0xa4
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_PCD_EP_ClrStall+0x90>
 800161c:	2302      	movs	r3, #2
 800161e:	e011      	b.n	8001644 <HAL_PCD_EP_ClrStall+0xb4>
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	23a4      	movs	r3, #164	@ 0xa4
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	2101      	movs	r1, #1
 8001628:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f003 fe72 	bl	800531c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	23a4      	movs	r3, #164	@ 0xa4
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	2100      	movs	r1, #0
 8001640:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bd80      	pop	{r7, pc}

0800164c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b094      	sub	sp, #80	@ 0x50
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001654:	f000 fbbf 	bl	8001dd6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2042      	movs	r0, #66	@ 0x42
 800165e:	183b      	adds	r3, r7, r0
 8001660:	2144      	movs	r1, #68	@ 0x44
 8001662:	5a52      	ldrh	r2, [r2, r1]
 8001664:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001666:	183b      	adds	r3, r7, r0
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	2441      	movs	r4, #65	@ 0x41
 800166e:	193b      	adds	r3, r7, r4
 8001670:	210f      	movs	r1, #15
 8001672:	400a      	ands	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001676:	193b      	adds	r3, r7, r4
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d000      	beq.n	8001680 <PCD_EP_ISR_Handler+0x34>
 800167e:	e151      	b.n	8001924 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001680:	183b      	adds	r3, r7, r0
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2210      	movs	r2, #16
 8001686:	4013      	ands	r3, r2
 8001688:	d14f      	bne.n	800172a <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29a      	uxth	r2, r3
 8001692:	200a      	movs	r0, #10
 8001694:	183b      	adds	r3, r7, r0
 8001696:	49dd      	ldr	r1, [pc, #884]	@ (8001a0c <PCD_EP_ISR_Handler+0x3c0>)
 8001698:	400a      	ands	r2, r1
 800169a:	801a      	strh	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	183a      	adds	r2, r7, r0
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	49da      	ldr	r1, [pc, #872]	@ (8001a10 <PCD_EP_ISR_Handler+0x3c4>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	b292      	uxth	r2, r2
 80016aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3310      	adds	r3, #16
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2250      	movs	r2, #80	@ 0x50
 80016b8:	5a9b      	ldrh	r3, [r3, r2]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	001a      	movs	r2, r3
 80016be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	18d2      	adds	r2, r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	18d3      	adds	r3, r2, r3
 80016cc:	4ad1      	ldr	r2, [pc, #836]	@ (8001a14 <PCD_EP_ISR_Handler+0x3c8>)
 80016ce:	4694      	mov	ip, r2
 80016d0:	4463      	add	r3, ip
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	059b      	lsls	r3, r3, #22
 80016d6:	0d9a      	lsrs	r2, r3, #22
 80016d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	18d2      	adds	r2, r2, r3
 80016e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2100      	movs	r1, #0
 80016ee:	0018      	movs	r0, r3
 80016f0:	f005 ff16 	bl	8007520 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7b1b      	ldrb	r3, [r3, #12]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d100      	bne.n	8001700 <PCD_EP_ISR_Handler+0xb4>
 80016fe:	e36a      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
 8001700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d000      	beq.n	800170a <PCD_EP_ISR_Handler+0xbe>
 8001708:	e365      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7b1b      	ldrb	r3, [r3, #12]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2280      	movs	r2, #128	@ 0x80
 8001712:	4252      	negs	r2, r2
 8001714:	4313      	orrs	r3, r2
 8001716:	b2da      	uxtb	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0011      	movs	r1, r2
 800171e:	224c      	movs	r2, #76	@ 0x4c
 8001720:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	731a      	strb	r2, [r3, #12]
 8001728:	e355      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3351      	adds	r3, #81	@ 0x51
 800172e:	33ff      	adds	r3, #255	@ 0xff
 8001730:	64bb      	str	r3, [r7, #72]	@ 0x48
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	213e      	movs	r1, #62	@ 0x3e
 8001738:	187b      	adds	r3, r7, r1
 800173a:	8812      	ldrh	r2, [r2, #0]
 800173c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800173e:	187b      	adds	r3, r7, r1
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <PCD_EP_ISR_Handler+0x100>
 800174a:	e07d      	b.n	8001848 <PCD_EP_ISR_Handler+0x1fc>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2250      	movs	r2, #80	@ 0x50
 8001752:	5a9b      	ldrh	r3, [r3, r2]
 8001754:	b29b      	uxth	r3, r3
 8001756:	001a      	movs	r2, r3
 8001758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	18d2      	adds	r2, r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	18d3      	adds	r3, r2, r3
 8001766:	4aac      	ldr	r2, [pc, #688]	@ (8001a18 <PCD_EP_ISR_Handler+0x3cc>)
 8001768:	4694      	mov	ip, r2
 800176a:	4463      	add	r3, ip
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	059b      	lsls	r3, r3, #22
 8001770:	0d9a      	lsrs	r2, r3, #22
 8001772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001774:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 8U)
 8001776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d041      	beq.n	8001802 <PCD_EP_ISR_Handler+0x1b6>
          {
            /* Set Stall condition for EP0 IN/OUT */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29a      	uxth	r2, r3
 8001786:	2010      	movs	r0, #16
 8001788:	183b      	adds	r3, r7, r0
 800178a:	49a4      	ldr	r1, [pc, #656]	@ (8001a1c <PCD_EP_ISR_Handler+0x3d0>)
 800178c:	400a      	ands	r2, r1
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	183b      	adds	r3, r7, r0
 8001792:	183a      	adds	r2, r7, r0
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	2180      	movs	r1, #128	@ 0x80
 8001798:	0149      	lsls	r1, r1, #5
 800179a:	404a      	eors	r2, r1
 800179c:	801a      	strh	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	183a      	adds	r2, r7, r0
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	499e      	ldr	r1, [pc, #632]	@ (8001a20 <PCD_EP_ISR_Handler+0x3d4>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	b292      	uxth	r2, r2
 80017ac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	200e      	movs	r0, #14
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	499a      	ldr	r1, [pc, #616]	@ (8001a24 <PCD_EP_ISR_Handler+0x3d8>)
 80017bc:	400a      	ands	r2, r1
 80017be:	801a      	strh	r2, [r3, #0]
 80017c0:	183b      	adds	r3, r7, r0
 80017c2:	183a      	adds	r2, r7, r0
 80017c4:	8812      	ldrh	r2, [r2, #0]
 80017c6:	2110      	movs	r1, #16
 80017c8:	404a      	eors	r2, r1
 80017ca:	801a      	strh	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	183a      	adds	r2, r7, r0
 80017d2:	8812      	ldrh	r2, [r2, #0]
 80017d4:	4992      	ldr	r1, [pc, #584]	@ (8001a20 <PCD_EP_ISR_Handler+0x3d4>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	b292      	uxth	r2, r2
 80017da:	801a      	strh	r2, [r3, #0]

            /* SETUP bit kept frozen while CTR_RX = 1 */
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	200c      	movs	r0, #12
 80017e6:	183b      	adds	r3, r7, r0
 80017e8:	498f      	ldr	r1, [pc, #572]	@ (8001a28 <PCD_EP_ISR_Handler+0x3dc>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	801a      	strh	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	183a      	adds	r2, r7, r0
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	2180      	movs	r1, #128	@ 0x80
 80017f8:	430a      	orrs	r2, r1
 80017fa:	b292      	uxth	r2, r2
 80017fc:	801a      	strh	r2, [r3, #0]

            return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e2f4      	b.n	8001dec <PCD_EP_ISR_Handler+0x7a0>
          }

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	22a6      	movs	r2, #166	@ 0xa6
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	1899      	adds	r1, r3, r2
 800180e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001810:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001814:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001816:	b29b      	uxth	r3, r3
 8001818:	f003 feae 	bl	8005578 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29a      	uxth	r2, r3
 8001824:	2012      	movs	r0, #18
 8001826:	183b      	adds	r3, r7, r0
 8001828:	497f      	ldr	r1, [pc, #508]	@ (8001a28 <PCD_EP_ISR_Handler+0x3dc>)
 800182a:	400a      	ands	r2, r1
 800182c:	801a      	strh	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	183a      	adds	r2, r7, r0
 8001834:	8812      	ldrh	r2, [r2, #0]
 8001836:	2180      	movs	r1, #128	@ 0x80
 8001838:	430a      	orrs	r2, r1
 800183a:	b292      	uxth	r2, r2
 800183c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f005 fe37 	bl	80074b4 <HAL_PCD_SetupStageCallback>
 8001846:	e2c6      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001848:	233e      	movs	r3, #62	@ 0x3e
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	2200      	movs	r2, #0
 800184e:	5e9b      	ldrsh	r3, [r3, r2]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db00      	blt.n	8001856 <PCD_EP_ISR_Handler+0x20a>
 8001854:	e2bf      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	2016      	movs	r0, #22
 8001860:	183b      	adds	r3, r7, r0
 8001862:	4971      	ldr	r1, [pc, #452]	@ (8001a28 <PCD_EP_ISR_Handler+0x3dc>)
 8001864:	400a      	ands	r2, r1
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	183a      	adds	r2, r7, r0
 800186e:	8812      	ldrh	r2, [r2, #0]
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	430a      	orrs	r2, r1
 8001874:	b292      	uxth	r2, r2
 8001876:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2250      	movs	r2, #80	@ 0x50
 800187e:	5a9b      	ldrh	r3, [r3, r2]
 8001880:	b29b      	uxth	r3, r3
 8001882:	001a      	movs	r2, r3
 8001884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	18d2      	adds	r2, r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	18d3      	adds	r3, r2, r3
 8001892:	4a61      	ldr	r2, [pc, #388]	@ (8001a18 <PCD_EP_ISR_Handler+0x3cc>)
 8001894:	4694      	mov	ip, r2
 8001896:	4463      	add	r3, ip
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	059b      	lsls	r3, r3, #22
 800189c:	0d9a      	lsrs	r2, r3, #22
 800189e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a0:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count == 0U)
 80018a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11f      	bne.n	80018ea <PCD_EP_ISR_Handler+0x29e>
          {
            /* Status phase re-arm for next setup */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	2014      	movs	r0, #20
 80018b4:	183b      	adds	r3, r7, r0
 80018b6:	4959      	ldr	r1, [pc, #356]	@ (8001a1c <PCD_EP_ISR_Handler+0x3d0>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	183b      	adds	r3, r7, r0
 80018be:	183a      	adds	r2, r7, r0
 80018c0:	8812      	ldrh	r2, [r2, #0]
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	0149      	lsls	r1, r1, #5
 80018c6:	404a      	eors	r2, r1
 80018c8:	801a      	strh	r2, [r3, #0]
 80018ca:	183b      	adds	r3, r7, r0
 80018cc:	183a      	adds	r2, r7, r0
 80018ce:	8812      	ldrh	r2, [r2, #0]
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	0189      	lsls	r1, r1, #6
 80018d4:	404a      	eors	r2, r1
 80018d6:	801a      	strh	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	183a      	adds	r2, r7, r0
 80018de:	8812      	ldrh	r2, [r2, #0]
 80018e0:	494f      	ldr	r1, [pc, #316]	@ (8001a20 <PCD_EP_ISR_Handler+0x3d4>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	b292      	uxth	r2, r2
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	e275      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
          }
          else
          {
            if (ep->xfer_buff != 0U)
 80018ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d100      	bne.n	80018f4 <PCD_EP_ISR_Handler+0x2a8>
 80018f2:	e270      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018fa:	6959      	ldr	r1, [r3, #20]
 80018fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018fe:	88da      	ldrh	r2, [r3, #6]
                          ep->pmaadress, (uint16_t)ep->xfer_count);  /* max 64bytes */
 8001900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001902:	69db      	ldr	r3, [r3, #28]
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001904:	b29b      	uxth	r3, r3
 8001906:	f003 fe37 	bl	8005578 <USB_ReadPMA>

              ep->xfer_buff += ep->xfer_count;
 800190a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	18d2      	adds	r2, r2, r3
 8001914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001916:	615a      	str	r2, [r3, #20]

              /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataOutStageCallback(hpcd, 0U);
#else
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2100      	movs	r1, #0
 800191c:	0018      	movs	r0, r3
 800191e:	f005 fdde 	bl	80074de <HAL_PCD_DataOutStageCallback>
 8001922:	e258      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	001a      	movs	r2, r3
 800192a:	2041      	movs	r0, #65	@ 0x41
 800192c:	183b      	adds	r3, r7, r0
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	18d2      	adds	r2, r2, r3
 8001934:	213e      	movs	r1, #62	@ 0x3e
 8001936:	187b      	adds	r3, r7, r1
 8001938:	8812      	ldrh	r2, [r2, #0]
 800193a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800193c:	187b      	adds	r3, r7, r1
 800193e:	2200      	movs	r2, #0
 8001940:	5e9b      	ldrsh	r3, [r3, r2]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db00      	blt.n	8001948 <PCD_EP_ISR_Handler+0x2fc>
 8001946:	e10c      	b.n	8001b62 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	001a      	movs	r2, r3
 800194e:	183b      	adds	r3, r7, r0
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	18d3      	adds	r3, r2, r3
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29a      	uxth	r2, r3
 800195a:	2446      	movs	r4, #70	@ 0x46
 800195c:	193b      	adds	r3, r7, r4
 800195e:	4932      	ldr	r1, [pc, #200]	@ (8001a28 <PCD_EP_ISR_Handler+0x3dc>)
 8001960:	400a      	ands	r2, r1
 8001962:	801a      	strh	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	001a      	movs	r2, r3
 800196a:	183b      	adds	r3, r7, r0
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	18d3      	adds	r3, r2, r3
 8001972:	193a      	adds	r2, r7, r4
 8001974:	8812      	ldrh	r2, [r2, #0]
 8001976:	2180      	movs	r1, #128	@ 0x80
 8001978:	430a      	orrs	r2, r1
 800197a:	b292      	uxth	r2, r2
 800197c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800197e:	183b      	adds	r3, r7, r0
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	0013      	movs	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	189b      	adds	r3, r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	3351      	adds	r3, #81	@ 0x51
 800198c:	33ff      	adds	r3, #255	@ 0xff
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d125      	bne.n	80019e8 <PCD_EP_ISR_Handler+0x39c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2250      	movs	r2, #80	@ 0x50
 80019a2:	5a9b      	ldrh	r3, [r3, r2]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	001a      	movs	r2, r3
 80019a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	18d2      	adds	r2, r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	18d3      	adds	r3, r2, r3
 80019b6:	4a18      	ldr	r2, [pc, #96]	@ (8001a18 <PCD_EP_ISR_Handler+0x3cc>)
 80019b8:	4694      	mov	ip, r2
 80019ba:	4463      	add	r3, ip
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	244e      	movs	r4, #78	@ 0x4e
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	0592      	lsls	r2, r2, #22
 80019c4:	0d92      	lsrs	r2, r2, #22
 80019c6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d100      	bne.n	80019d2 <PCD_EP_ISR_Handler+0x386>
 80019d0:	e09e      	b.n	8001b10 <PCD_EP_ISR_Handler+0x4c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019d8:	6959      	ldr	r1, [r3, #20]
 80019da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019dc:	88da      	ldrh	r2, [r3, #6]
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	f003 fdc9 	bl	8005578 <USB_ReadPMA>
 80019e6:	e093      	b.n	8001b10 <PCD_EP_ISR_Handler+0x4c4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ea:	78db      	ldrb	r3, [r3, #3]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d11d      	bne.n	8001a2c <PCD_EP_ISR_Handler+0x3e0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019f0:	234e      	movs	r3, #78	@ 0x4e
 80019f2:	18fc      	adds	r4, r7, r3
 80019f4:	233e      	movs	r3, #62	@ 0x3e
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	881a      	ldrh	r2, [r3, #0]
 80019fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 f9f8 	bl	8001df4 <HAL_PCD_EP_DB_Receive>
 8001a04:	0003      	movs	r3, r0
 8001a06:	8023      	strh	r3, [r4, #0]
 8001a08:	e082      	b.n	8001b10 <PCD_EP_ISR_Handler+0x4c4>
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	ffff8f0f 	.word	0xffff8f0f
 8001a10:	ffff8000 	.word	0xffff8000
 8001a14:	00000402 	.word	0x00000402
 8001a18:	00000406 	.word	0x00000406
 8001a1c:	ffffbf8f 	.word	0xffffbf8f
 8001a20:	ffff8080 	.word	0xffff8080
 8001a24:	ffff8fbf 	.word	0xffff8fbf
 8001a28:	00000f8f 	.word	0x00000f8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	001a      	movs	r2, r3
 8001a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	18d3      	adds	r3, r2, r3
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	2044      	movs	r0, #68	@ 0x44
 8001a40:	183b      	adds	r3, r7, r0
 8001a42:	49cf      	ldr	r1, [pc, #828]	@ (8001d80 <PCD_EP_ISR_Handler+0x734>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	801a      	strh	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	183a      	adds	r2, r7, r0
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	49ca      	ldr	r1, [pc, #808]	@ (8001d84 <PCD_EP_ISR_Handler+0x738>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	001a      	movs	r2, r3
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	01db      	lsls	r3, r3, #7
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d024      	beq.n	8001ac8 <PCD_EP_ISR_Handler+0x47c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2250      	movs	r2, #80	@ 0x50
 8001a84:	5a9b      	ldrh	r3, [r3, r2]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	001a      	movs	r2, r3
 8001a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	18d2      	adds	r2, r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	18d3      	adds	r3, r2, r3
 8001a98:	4abb      	ldr	r2, [pc, #748]	@ (8001d88 <PCD_EP_ISR_Handler+0x73c>)
 8001a9a:	4694      	mov	ip, r2
 8001a9c:	4463      	add	r3, ip
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	244e      	movs	r4, #78	@ 0x4e
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	0592      	lsls	r2, r2, #22
 8001aa6:	0d92      	lsrs	r2, r2, #22
 8001aa8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d02e      	beq.n	8001b10 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ab8:	6959      	ldr	r1, [r3, #20]
 8001aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001abc:	891a      	ldrh	r2, [r3, #8]
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	f003 fd59 	bl	8005578 <USB_ReadPMA>
 8001ac6:	e023      	b.n	8001b10 <PCD_EP_ISR_Handler+0x4c4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2250      	movs	r2, #80	@ 0x50
 8001ace:	5a9b      	ldrh	r3, [r3, r2]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	18d2      	adds	r2, r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	18d3      	adds	r3, r2, r3
 8001ae2:	4aaa      	ldr	r2, [pc, #680]	@ (8001d8c <PCD_EP_ISR_Handler+0x740>)
 8001ae4:	4694      	mov	ip, r2
 8001ae6:	4463      	add	r3, ip
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	244e      	movs	r4, #78	@ 0x4e
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	0592      	lsls	r2, r2, #22
 8001af0:	0d92      	lsrs	r2, r2, #22
 8001af2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d009      	beq.n	8001b10 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b02:	6959      	ldr	r1, [r3, #20]
 8001b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b06:	895a      	ldrh	r2, [r3, #10]
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f003 fd34 	bl	8005578 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	214e      	movs	r1, #78	@ 0x4e
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	18d2      	adds	r2, r2, r3
 8001b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b1e:	61da      	str	r2, [r3, #28]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <PCD_EP_ISR_Handler+0x4e8>
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <PCD_EP_ISR_Handler+0x4f8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f005 fcce 	bl	80074de <HAL_PCD_DataOutStageCallback>
 8001b42:	e00e      	b.n	8001b62 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
           ep->xfer_buff += count;
 8001b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	234e      	movs	r3, #78	@ 0x4e
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	18d2      	adds	r2, r2, r3
 8001b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b52:	615a      	str	r2, [r3, #20]
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f002 fda1 	bl	80046a4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b62:	243e      	movs	r4, #62	@ 0x3e
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	2280      	movs	r2, #128	@ 0x80
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d100      	bne.n	8001b70 <PCD_EP_ISR_Handler+0x524>
 8001b6e:	e132      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b70:	2041      	movs	r0, #65	@ 0x41
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	0013      	movs	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	3310      	adds	r3, #16
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	18d3      	adds	r3, r2, r3
 8001b84:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	183b      	adds	r3, r7, r0
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	18d3      	adds	r3, r2, r3
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	253c      	movs	r5, #60	@ 0x3c
 8001b9a:	197b      	adds	r3, r7, r5
 8001b9c:	497c      	ldr	r1, [pc, #496]	@ (8001d90 <PCD_EP_ISR_Handler+0x744>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	183b      	adds	r3, r7, r0
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	18d3      	adds	r3, r2, r3
 8001bb0:	197a      	adds	r2, r7, r5
 8001bb2:	8812      	ldrh	r2, [r2, #0]
 8001bb4:	4977      	ldr	r1, [pc, #476]	@ (8001d94 <PCD_EP_ISR_Handler+0x748>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bbe:	78db      	ldrb	r3, [r3, #3]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d000      	beq.n	8001bc6 <PCD_EP_ISR_Handler+0x57a>
 8001bc4:	e0a1      	b.n	8001d0a <PCD_EP_ISR_Handler+0x6be>
        {
          ep->xfer_len = 0U;
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bce:	7b1b      	ldrb	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d100      	bne.n	8001bd6 <PCD_EP_ISR_Handler+0x58a>
 8001bd4:	e091      	b.n	8001cfa <PCD_EP_ISR_Handler+0x6ae>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	2240      	movs	r2, #64	@ 0x40
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d046      	beq.n	8001c6e <PCD_EP_ISR_Handler+0x622>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d125      	bne.n	8001c34 <PCD_EP_ISR_Handler+0x5e8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2250      	movs	r2, #80	@ 0x50
 8001bf4:	5a9b      	ldrh	r3, [r3, r2]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	189b      	adds	r3, r3, r2
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	00da      	lsls	r2, r3, #3
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d88 <PCD_EP_ISR_Handler+0x73c>)
 8001c0c:	4694      	mov	ip, r2
 8001c0e:	4463      	add	r3, ip
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	059b      	lsls	r3, r3, #22
 8001c1a:	0d9b      	lsrs	r3, r3, #22
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4a5a      	ldr	r2, [pc, #360]	@ (8001d94 <PCD_EP_ISR_Handler+0x748>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	801a      	strh	r2, [r3, #0]
 8001c32:	e062      	b.n	8001cfa <PCD_EP_ISR_Handler+0x6ae>
 8001c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d15e      	bne.n	8001cfa <PCD_EP_ISR_Handler+0x6ae>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2250      	movs	r2, #80	@ 0x50
 8001c48:	5a9b      	ldrh	r3, [r3, r2]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	189b      	adds	r3, r3, r2
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	00da      	lsls	r2, r3, #3
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	18d3      	adds	r3, r2, r3
 8001c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d88 <PCD_EP_ISR_Handler+0x73c>)
 8001c60:	4694      	mov	ip, r2
 8001c62:	4463      	add	r3, ip
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	801a      	strh	r2, [r3, #0]
 8001c6c:	e045      	b.n	8001cfa <PCD_EP_ISR_Handler+0x6ae>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d125      	bne.n	8001cc8 <PCD_EP_ISR_Handler+0x67c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2250      	movs	r2, #80	@ 0x50
 8001c88:	5a9b      	ldrh	r3, [r3, r2]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c90:	189b      	adds	r3, r3, r2
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	00da      	lsls	r2, r3, #3
 8001c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d8c <PCD_EP_ISR_Handler+0x740>)
 8001ca0:	4694      	mov	ip, r2
 8001ca2:	4463      	add	r3, ip
 8001ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	059b      	lsls	r3, r3, #22
 8001cae:	0d9b      	lsrs	r3, r3, #22
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4a35      	ldr	r2, [pc, #212]	@ (8001d94 <PCD_EP_ISR_Handler+0x748>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	e018      	b.n	8001cfa <PCD_EP_ISR_Handler+0x6ae>
 8001cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d114      	bne.n	8001cfa <PCD_EP_ISR_Handler+0x6ae>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2250      	movs	r2, #80	@ 0x50
 8001cd6:	5a9b      	ldrh	r3, [r3, r2]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	001a      	movs	r2, r3
 8001cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cde:	189b      	adds	r3, r3, r2
 8001ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	00da      	lsls	r2, r3, #3
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cea:	18d3      	adds	r3, r2, r3
 8001cec:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <PCD_EP_ISR_Handler+0x740>)
 8001cee:	4694      	mov	ip, r2
 8001cf0:	4463      	add	r3, ip
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0011      	movs	r1, r2
 8001d02:	0018      	movs	r0, r3
 8001d04:	f005 fc0c 	bl	8007520 <HAL_PCD_DataInStageCallback>
 8001d08:	e065      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d0a:	233e      	movs	r3, #62	@ 0x3e
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	881a      	ldrh	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d156      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x77a>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2250      	movs	r2, #80	@ 0x50
 8001d1e:	5a9b      	ldrh	r3, [r3, r2]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	001a      	movs	r2, r3
 8001d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	18d2      	adds	r2, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	18d3      	adds	r3, r2, r3
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <PCD_EP_ISR_Handler+0x73c>)
 8001d34:	4694      	mov	ip, r2
 8001d36:	4463      	add	r3, ip
 8001d38:	881a      	ldrh	r2, [r3, #0]
 8001d3a:	213a      	movs	r1, #58	@ 0x3a
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	0592      	lsls	r2, r2, #22
 8001d40:	0d92      	lsrs	r2, r2, #22
 8001d42:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d907      	bls.n	8001d60 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	1ad2      	subs	r2, r2, r3
 8001d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d5c:	619a      	str	r2, [r3, #24]
 8001d5e:	e002      	b.n	8001d66 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d114      	bne.n	8001d98 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0011      	movs	r1, r2
 8001d76:	0018      	movs	r0, r3
 8001d78:	f005 fbd2 	bl	8007520 <HAL_PCD_DataInStageCallback>
 8001d7c:	e02b      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	ffff8f8f 	.word	0xffff8f8f
 8001d84:	ffff80c0 	.word	0xffff80c0
 8001d88:	00000402 	.word	0x00000402
 8001d8c:	00000406 	.word	0x00000406
 8001d90:	ffff8f0f 	.word	0xffff8f0f
 8001d94:	ffff8000 	.word	0xffff8000
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	213a      	movs	r1, #58	@ 0x3a
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	18d2      	adds	r2, r2, r3
 8001da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	18d2      	adds	r2, r2, r3
 8001db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001db4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f002 fc70 	bl	80046a4 <USB_EPStartXfer>
 8001dc4:	e007      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001dc6:	233e      	movs	r3, #62	@ 0x3e
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f92b 	bl	800202c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2244      	movs	r2, #68	@ 0x44
 8001ddc:	5a9b      	ldrh	r3, [r3, r2]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da01      	bge.n	8001dea <PCD_EP_ISR_Handler+0x79e>
 8001de6:	f7ff fc37 	bl	8001658 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b014      	add	sp, #80	@ 0x50
 8001df2:	bdb0      	pop	{r4, r5, r7, pc}

08001df4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	1dbb      	adds	r3, r7, #6
 8001e00:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	@ 0x80
 8001e08:	01db      	lsls	r3, r3, #7
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d100      	bne.n	8001e10 <HAL_PCD_EP_DB_Receive+0x1c>
 8001e0e:	e07d      	b.n	8001f0c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2250      	movs	r2, #80	@ 0x50
 8001e16:	5a9b      	ldrh	r3, [r3, r2]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	18d2      	adds	r2, r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	18d3      	adds	r3, r2, r3
 8001e2a:	4a7a      	ldr	r2, [pc, #488]	@ (8002014 <HAL_PCD_EP_DB_Receive+0x220>)
 8001e2c:	4694      	mov	ip, r2
 8001e2e:	4463      	add	r3, ip
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	211a      	movs	r1, #26
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	0592      	lsls	r2, r2, #22
 8001e38:	0d92      	lsrs	r2, r2, #22
 8001e3a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d307      	bcc.n	8001e58 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	699a      	ldr	r2, [r3, #24]
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	1ad2      	subs	r2, r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	e002      	b.n	8001e5e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d121      	bne.n	8001eaa <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	18d3      	adds	r3, r2, r3
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2018      	movs	r0, #24
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	4966      	ldr	r1, [pc, #408]	@ (8002018 <HAL_PCD_EP_DB_Receive+0x224>)
 8001e7e:	400a      	ands	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	183a      	adds	r2, r7, r0
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	0189      	lsls	r1, r1, #6
 8001e8c:	404a      	eors	r2, r1
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	001a      	movs	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	18d3      	adds	r3, r2, r3
 8001e9e:	183a      	adds	r2, r7, r0
 8001ea0:	8812      	ldrh	r2, [r2, #0]
 8001ea2:	495e      	ldr	r1, [pc, #376]	@ (800201c <HAL_PCD_EP_DB_Receive+0x228>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001eaa:	1dbb      	adds	r3, r7, #6
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d01a      	beq.n	8001eea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	2016      	movs	r0, #22
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	4955      	ldr	r1, [pc, #340]	@ (8002020 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	18d3      	adds	r3, r2, r3
 8001ede:	183a      	adds	r2, r7, r0
 8001ee0:	8812      	ldrh	r2, [r2, #0]
 8001ee2:	4950      	ldr	r1, [pc, #320]	@ (8002024 <HAL_PCD_EP_DB_Receive+0x230>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001eea:	241a      	movs	r4, #26
 8001eec:	193b      	adds	r3, r7, r4
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d100      	bne.n	8001ef6 <HAL_PCD_EP_DB_Receive+0x102>
 8001ef4:	e086      	b.n	8002004 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	6959      	ldr	r1, [r3, #20]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	891a      	ldrh	r2, [r3, #8]
 8001f02:	193b      	adds	r3, r7, r4
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f003 fb37 	bl	8005578 <USB_ReadPMA>
 8001f0a:	e07b      	b.n	8002004 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2250      	movs	r2, #80	@ 0x50
 8001f12:	5a9b      	ldrh	r3, [r3, r2]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	001a      	movs	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	18d2      	adds	r2, r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	18d3      	adds	r3, r2, r3
 8001f26:	4a40      	ldr	r2, [pc, #256]	@ (8002028 <HAL_PCD_EP_DB_Receive+0x234>)
 8001f28:	4694      	mov	ip, r2
 8001f2a:	4463      	add	r3, ip
 8001f2c:	881a      	ldrh	r2, [r3, #0]
 8001f2e:	211a      	movs	r1, #26
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	0592      	lsls	r2, r2, #22
 8001f34:	0d92      	lsrs	r2, r2, #22
 8001f36:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	699a      	ldr	r2, [r3, #24]
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d307      	bcc.n	8001f54 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	1ad2      	subs	r2, r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	619a      	str	r2, [r3, #24]
 8001f52:	e002      	b.n	8001f5a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d121      	bne.n	8001fa6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	001a      	movs	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	18d3      	adds	r3, r2, r3
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	201e      	movs	r0, #30
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	4927      	ldr	r1, [pc, #156]	@ (8002018 <HAL_PCD_EP_DB_Receive+0x224>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	183b      	adds	r3, r7, r0
 8001f80:	183a      	adds	r2, r7, r0
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	0189      	lsls	r1, r1, #6
 8001f88:	404a      	eors	r2, r1
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	001a      	movs	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	18d3      	adds	r3, r2, r3
 8001f9a:	183a      	adds	r2, r7, r0
 8001f9c:	8812      	ldrh	r2, [r2, #0]
 8001f9e:	491f      	ldr	r1, [pc, #124]	@ (800201c <HAL_PCD_EP_DB_Receive+0x228>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	801a      	strh	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fa6:	1dbb      	adds	r3, r7, #6
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	2240      	movs	r2, #64	@ 0x40
 8001fac:	4013      	ands	r3, r2
 8001fae:	d11a      	bne.n	8001fe6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	18d3      	adds	r3, r2, r3
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	201c      	movs	r0, #28
 8001fc4:	183b      	adds	r3, r7, r0
 8001fc6:	4916      	ldr	r1, [pc, #88]	@ (8002020 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	801a      	strh	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	18d3      	adds	r3, r2, r3
 8001fda:	183a      	adds	r2, r7, r0
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	4911      	ldr	r1, [pc, #68]	@ (8002024 <HAL_PCD_EP_DB_Receive+0x230>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001fe6:	241a      	movs	r4, #26
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6959      	ldr	r1, [r3, #20]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	895a      	ldrh	r2, [r3, #10]
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	f003 faba 	bl	8005578 <USB_ReadPMA>
    }
  }

  return count;
 8002004:	231a      	movs	r3, #26
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	881b      	ldrh	r3, [r3, #0]
}
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	b009      	add	sp, #36	@ 0x24
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	00000402 	.word	0x00000402
 8002018:	ffffbf8f 	.word	0xffffbf8f
 800201c:	ffff8080 	.word	0xffff8080
 8002020:	ffff8f8f 	.word	0xffff8f8f
 8002024:	ffff80c0 	.word	0xffff80c0
 8002028:	00000406 	.word	0x00000406

0800202c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0a6      	sub	sp, #152	@ 0x98
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	1dbb      	adds	r3, r7, #6
 8002038:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	2240      	movs	r2, #64	@ 0x40
 8002040:	4013      	ands	r3, r2
 8002042:	d100      	bne.n	8002046 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002044:	e1f9      	b.n	800243a <HAL_PCD_EP_DB_Transmit+0x40e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2250      	movs	r2, #80	@ 0x50
 800204c:	5a9b      	ldrh	r3, [r3, r2]
 800204e:	b29b      	uxth	r3, r3
 8002050:	001a      	movs	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	18d2      	adds	r2, r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	18d3      	adds	r3, r2, r3
 8002060:	4ace      	ldr	r2, [pc, #824]	@ (800239c <HAL_PCD_EP_DB_Transmit+0x370>)
 8002062:	4694      	mov	ip, r2
 8002064:	4463      	add	r3, ip
 8002066:	881a      	ldrh	r2, [r3, #0]
 8002068:	2196      	movs	r1, #150	@ 0x96
 800206a:	187b      	adds	r3, r7, r1
 800206c:	0592      	lsls	r2, r2, #22
 800206e:	0d92      	lsrs	r2, r2, #22
 8002070:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	187b      	adds	r3, r7, r1
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d907      	bls.n	800208e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	187b      	adds	r3, r7, r1
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	619a      	str	r2, [r3, #24]
 800208c:	e002      	b.n	8002094 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d000      	beq.n	800209e <HAL_PCD_EP_DB_Transmit+0x72>
 800209c:	e0da      	b.n	8002254 <HAL_PCD_EP_DB_Transmit+0x228>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d125      	bne.n	80020f2 <HAL_PCD_EP_DB_Transmit+0xc6>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2250      	movs	r2, #80	@ 0x50
 80020b2:	5a9b      	ldrh	r3, [r3, r2]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	001a      	movs	r2, r3
 80020b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ba:	189b      	adds	r3, r3, r2
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	00da      	lsls	r2, r3, #3
 80020c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c6:	18d3      	adds	r3, r2, r3
 80020c8:	4ab4      	ldr	r2, [pc, #720]	@ (800239c <HAL_PCD_EP_DB_Transmit+0x370>)
 80020ca:	4694      	mov	ip, r2
 80020cc:	4463      	add	r3, ip
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	059b      	lsls	r3, r3, #22
 80020d8:	0d9b      	lsrs	r3, r3, #22
 80020da:	b29a      	uxth	r2, r3
 80020dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020de:	801a      	strh	r2, [r3, #0]
 80020e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4aae      	ldr	r2, [pc, #696]	@ (80023a0 <HAL_PCD_EP_DB_Transmit+0x374>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ee:	801a      	strh	r2, [r3, #0]
 80020f0:	e01b      	b.n	800212a <HAL_PCD_EP_DB_Transmit+0xfe>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d117      	bne.n	800212a <HAL_PCD_EP_DB_Transmit+0xfe>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2250      	movs	r2, #80	@ 0x50
 8002106:	5a9b      	ldrh	r3, [r3, r2]
 8002108:	b29b      	uxth	r3, r3
 800210a:	001a      	movs	r2, r3
 800210c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210e:	189b      	adds	r3, r3, r2
 8002110:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	00da      	lsls	r2, r3, #3
 8002118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800211a:	18d3      	adds	r3, r2, r3
 800211c:	4a9f      	ldr	r2, [pc, #636]	@ (800239c <HAL_PCD_EP_DB_Transmit+0x370>)
 800211e:	4694      	mov	ip, r2
 8002120:	4463      	add	r3, ip
 8002122:	637b      	str	r3, [r7, #52]	@ 0x34
 8002124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002126:	2200      	movs	r2, #0
 8002128:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d125      	bne.n	8002184 <HAL_PCD_EP_DB_Transmit+0x158>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2250      	movs	r2, #80	@ 0x50
 8002144:	5a9b      	ldrh	r3, [r3, r2]
 8002146:	b29b      	uxth	r3, r3
 8002148:	001a      	movs	r2, r3
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	189b      	adds	r3, r3, r2
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	00da      	lsls	r2, r3, #3
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	18d3      	adds	r3, r2, r3
 800215a:	4a92      	ldr	r2, [pc, #584]	@ (80023a4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800215c:	4694      	mov	ip, r2
 800215e:	4463      	add	r3, ip
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	059b      	lsls	r3, r3, #22
 800216a:	0d9b      	lsrs	r3, r3, #22
 800216c:	b29a      	uxth	r2, r3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4a89      	ldr	r2, [pc, #548]	@ (80023a0 <HAL_PCD_EP_DB_Transmit+0x374>)
 800217a:	4313      	orrs	r3, r2
 800217c:	b29a      	uxth	r2, r3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	e018      	b.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d114      	bne.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2250      	movs	r2, #80	@ 0x50
 8002192:	5a9b      	ldrh	r3, [r3, r2]
 8002194:	b29b      	uxth	r3, r3
 8002196:	001a      	movs	r2, r3
 8002198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219a:	189b      	adds	r3, r3, r2
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	00da      	lsls	r2, r3, #3
 80021a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a6:	18d3      	adds	r3, r2, r3
 80021a8:	4a7e      	ldr	r2, [pc, #504]	@ (80023a4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80021aa:	4694      	mov	ip, r2
 80021ac:	4463      	add	r3, ip
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	2200      	movs	r2, #0
 80021b4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	78db      	ldrb	r3, [r3, #3]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d120      	bne.n	8002200 <HAL_PCD_EP_DB_Transmit+0x1d4>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	001a      	movs	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	18d3      	adds	r3, r2, r3
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	201a      	movs	r0, #26
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	4974      	ldr	r1, [pc, #464]	@ (80023a8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	183a      	adds	r2, r7, r0
 80021de:	8812      	ldrh	r2, [r2, #0]
 80021e0:	2120      	movs	r1, #32
 80021e2:	404a      	eors	r2, r1
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	001a      	movs	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	18d3      	adds	r3, r2, r3
 80021f4:	183a      	adds	r2, r7, r0
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	496c      	ldr	r1, [pc, #432]	@ (80023ac <HAL_PCD_EP_DB_Transmit+0x380>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	b292      	uxth	r2, r2
 80021fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f005 f989 	bl	8007520 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800220e:	1dbb      	adds	r3, r7, #6
 8002210:	881a      	ldrh	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	01db      	lsls	r3, r3, #7
 8002216:	4013      	ands	r3, r2
 8002218:	d01a      	beq.n	8002250 <HAL_PCD_EP_DB_Transmit+0x224>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	001a      	movs	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	18d3      	adds	r3, r2, r3
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29a      	uxth	r2, r3
 800222c:	2018      	movs	r0, #24
 800222e:	183b      	adds	r3, r7, r0
 8002230:	495f      	ldr	r1, [pc, #380]	@ (80023b0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002232:	400a      	ands	r2, r1
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	001a      	movs	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	18d3      	adds	r3, r2, r3
 8002244:	183a      	adds	r2, r7, r0
 8002246:	8812      	ldrh	r2, [r2, #0]
 8002248:	495a      	ldr	r1, [pc, #360]	@ (80023b4 <HAL_PCD_EP_DB_Transmit+0x388>)
 800224a:	430a      	orrs	r2, r1
 800224c:	b292      	uxth	r2, r2
 800224e:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e327      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	01db      	lsls	r3, r3, #7
 800225c:	4013      	ands	r3, r2
 800225e:	d01a      	beq.n	8002296 <HAL_PCD_EP_DB_Transmit+0x26a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	001a      	movs	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29a      	uxth	r2, r3
 8002272:	204e      	movs	r0, #78	@ 0x4e
 8002274:	183b      	adds	r3, r7, r0
 8002276:	494e      	ldr	r1, [pc, #312]	@ (80023b0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002278:	400a      	ands	r2, r1
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	001a      	movs	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	183a      	adds	r2, r7, r0
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	4949      	ldr	r1, [pc, #292]	@ (80023b4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002290:	430a      	orrs	r2, r1
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2224      	movs	r2, #36	@ 0x24
 800229a:	5c9b      	ldrb	r3, [r3, r2]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d000      	beq.n	80022a2 <HAL_PCD_EP_DB_Transmit+0x276>
 80022a0:	e2d8      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	2196      	movs	r1, #150	@ 0x96
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	18d2      	adds	r2, r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	18d2      	adds	r2, r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d309      	bcc.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x2b4>
        {
          len = ep->maxpacket;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	621a      	str	r2, [r3, #32]
 80022de:	e016      	b.n	800230e <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else if (ep->xfer_len_db == 0U)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d108      	bne.n	80022fa <HAL_PCD_EP_DB_Transmit+0x2ce>
        {
          len = TxPctSize;
 80022e8:	2396      	movs	r3, #150	@ 0x96
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2224      	movs	r2, #36	@ 0x24
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]
 80022f8:	e009      	b.n	800230e <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2224      	movs	r2, #36	@ 0x24
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d169      	bne.n	80023ea <HAL_PCD_EP_DB_Transmit+0x3be>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	643b      	str	r3, [r7, #64]	@ 0x40
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2250      	movs	r2, #80	@ 0x50
 8002322:	5a9b      	ldrh	r3, [r3, r2]
 8002324:	b29b      	uxth	r3, r3
 8002326:	001a      	movs	r2, r3
 8002328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800232a:	189b      	adds	r3, r3, r2
 800232c:	643b      	str	r3, [r7, #64]	@ 0x40
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	00da      	lsls	r2, r3, #3
 8002334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002336:	18d3      	adds	r3, r2, r3
 8002338:	4a18      	ldr	r2, [pc, #96]	@ (800239c <HAL_PCD_EP_DB_Transmit+0x370>)
 800233a:	4694      	mov	ip, r2
 800233c:	4463      	add	r3, ip
 800233e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	059b      	lsls	r3, r3, #22
 8002348:	0d9b      	lsrs	r3, r3, #22
 800234a:	b29a      	uxth	r2, r3
 800234c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800234e:	801a      	strh	r2, [r3, #0]
 8002350:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <HAL_PCD_EP_DB_Transmit+0x33c>
 8002356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	4a10      	ldr	r2, [pc, #64]	@ (80023a0 <HAL_PCD_EP_DB_Transmit+0x374>)
 800235e:	4313      	orrs	r3, r2
 8002360:	b29a      	uxth	r2, r3
 8002362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	e05d      	b.n	8002424 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800236a:	2b3e      	cmp	r3, #62	@ 0x3e
 800236c:	d824      	bhi.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x38c>
 800236e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	653b      	str	r3, [r7, #80]	@ 0x50
 8002374:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d002      	beq.n	8002382 <HAL_PCD_EP_DB_Transmit+0x356>
 800237c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800237e:	3301      	adds	r3, #1
 8002380:	653b      	str	r3, [r7, #80]	@ 0x50
 8002382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29a      	uxth	r2, r3
 8002388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800238a:	b29b      	uxth	r3, r3
 800238c:	029b      	lsls	r3, r3, #10
 800238e:	b29b      	uxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b29a      	uxth	r2, r3
 8002394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002396:	801a      	strh	r2, [r3, #0]
 8002398:	e044      	b.n	8002424 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	00000402 	.word	0x00000402
 80023a0:	ffff8000 	.word	0xffff8000
 80023a4:	00000406 	.word	0x00000406
 80023a8:	ffff8fbf 	.word	0xffff8fbf
 80023ac:	ffff8080 	.word	0xffff8080
 80023b0:	ffff8f8f 	.word	0xffff8f8f
 80023b4:	ffffc080 	.word	0xffffc080
 80023b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80023be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023c0:	221f      	movs	r2, #31
 80023c2:	4013      	ands	r3, r2
 80023c4:	d102      	bne.n	80023cc <HAL_PCD_EP_DB_Transmit+0x3a0>
 80023c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023c8:	3b01      	subs	r3, #1
 80023ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80023cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4ace      	ldr	r2, [pc, #824]	@ (8002718 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e01c      	b.n	8002424 <HAL_PCD_EP_DB_Transmit+0x3f8>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d118      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0x3f8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2250      	movs	r2, #80	@ 0x50
 80023fe:	5a9b      	ldrh	r3, [r3, r2]
 8002400:	b29b      	uxth	r3, r3
 8002402:	001a      	movs	r2, r3
 8002404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002406:	189b      	adds	r3, r3, r2
 8002408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00da      	lsls	r2, r3, #3
 8002410:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002412:	18d3      	adds	r3, r2, r3
 8002414:	4ac1      	ldr	r2, [pc, #772]	@ (800271c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002416:	4694      	mov	ip, r2
 8002418:	4463      	add	r3, ip
 800241a:	647b      	str	r3, [r7, #68]	@ 0x44
 800241c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800241e:	b29a      	uxth	r2, r3
 8002420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002422:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6959      	ldr	r1, [r3, #20]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	891a      	ldrh	r2, [r3, #8]
 8002430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002432:	b29b      	uxth	r3, r3
 8002434:	f003 f856 	bl	80054e4 <USB_WritePMA>
 8002438:	e20c      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x828>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2250      	movs	r2, #80	@ 0x50
 8002440:	5a9b      	ldrh	r3, [r3, r2]
 8002442:	b29b      	uxth	r3, r3
 8002444:	001a      	movs	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	18d2      	adds	r2, r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	18d3      	adds	r3, r2, r3
 8002454:	4ab2      	ldr	r2, [pc, #712]	@ (8002720 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002456:	4694      	mov	ip, r2
 8002458:	4463      	add	r3, ip
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	2196      	movs	r1, #150	@ 0x96
 800245e:	187b      	adds	r3, r7, r1
 8002460:	0592      	lsls	r2, r2, #22
 8002462:	0d92      	lsrs	r2, r2, #22
 8002464:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	187b      	adds	r3, r7, r1
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d307      	bcc.n	8002482 <HAL_PCD_EP_DB_Transmit+0x456>
    {
      ep->xfer_len -= TxPctSize;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	187b      	adds	r3, r7, r1
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	1ad2      	subs	r2, r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	619a      	str	r2, [r3, #24]
 8002480:	e002      	b.n	8002488 <HAL_PCD_EP_DB_Transmit+0x45c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d000      	beq.n	8002492 <HAL_PCD_EP_DB_Transmit+0x466>
 8002490:	e0ee      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x644>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d125      	bne.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x4ba>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	677b      	str	r3, [r7, #116]	@ 0x74
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2250      	movs	r2, #80	@ 0x50
 80024a6:	5a9b      	ldrh	r3, [r3, r2]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	001a      	movs	r2, r3
 80024ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	00da      	lsls	r2, r3, #3
 80024b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ba:	18d3      	adds	r3, r2, r3
 80024bc:	4a97      	ldr	r2, [pc, #604]	@ (800271c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80024be:	4694      	mov	ip, r2
 80024c0:	4463      	add	r3, ip
 80024c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80024c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	059b      	lsls	r3, r3, #22
 80024cc:	0d9b      	lsrs	r3, r3, #22
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4a8f      	ldr	r2, [pc, #572]	@ (8002718 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	b29a      	uxth	r2, r3
 80024e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	e01b      	b.n	800251e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d117      	bne.n	800251e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2250      	movs	r2, #80	@ 0x50
 80024fa:	5a9b      	ldrh	r3, [r3, r2]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	001a      	movs	r2, r3
 8002500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002502:	189b      	adds	r3, r3, r2
 8002504:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	00da      	lsls	r2, r3, #3
 800250c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800250e:	18d3      	adds	r3, r2, r3
 8002510:	4a82      	ldr	r2, [pc, #520]	@ (800271c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800251a:	2200      	movs	r2, #0
 800251c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2284      	movs	r2, #132	@ 0x84
 8002524:	18ba      	adds	r2, r7, r2
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d130      	bne.n	8002592 <HAL_PCD_EP_DB_Transmit+0x566>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	218c      	movs	r1, #140	@ 0x8c
 8002536:	187a      	adds	r2, r7, r1
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2250      	movs	r2, #80	@ 0x50
 8002540:	5a9b      	ldrh	r3, [r3, r2]
 8002542:	b29b      	uxth	r3, r3
 8002544:	001a      	movs	r2, r3
 8002546:	187b      	adds	r3, r7, r1
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	189b      	adds	r3, r3, r2
 800254c:	187a      	adds	r2, r7, r1
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	00da      	lsls	r2, r3, #3
 8002556:	187b      	adds	r3, r7, r1
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	18d3      	adds	r3, r2, r3
 800255c:	4a70      	ldr	r2, [pc, #448]	@ (8002720 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800255e:	4694      	mov	ip, r2
 8002560:	4463      	add	r3, ip
 8002562:	2188      	movs	r1, #136	@ 0x88
 8002564:	187a      	adds	r2, r7, r1
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	187b      	adds	r3, r7, r1
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	059b      	lsls	r3, r3, #22
 8002572:	0d9b      	lsrs	r3, r3, #22
 8002574:	b29a      	uxth	r2, r3
 8002576:	187b      	adds	r3, r7, r1
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	187b      	adds	r3, r7, r1
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	4a64      	ldr	r2, [pc, #400]	@ (8002718 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	b29a      	uxth	r2, r3
 800258a:	187b      	adds	r3, r7, r1
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	e01f      	b.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x5a6>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d11b      	bne.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x5a6>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2250      	movs	r2, #80	@ 0x50
 80025a0:	5a9b      	ldrh	r3, [r3, r2]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	001a      	movs	r2, r3
 80025a6:	2184      	movs	r1, #132	@ 0x84
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	187a      	adds	r2, r7, r1
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00da      	lsls	r2, r3, #3
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	18d3      	adds	r3, r2, r3
 80025be:	4a58      	ldr	r2, [pc, #352]	@ (8002720 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80025c0:	4694      	mov	ip, r2
 80025c2:	4463      	add	r3, ip
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	18b9      	adds	r1, r7, r2
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	18bb      	adds	r3, r7, r2
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	78db      	ldrb	r3, [r3, #3]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d120      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0x5f0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	001a      	movs	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	2094      	movs	r0, #148	@ 0x94
 80025ee:	183b      	adds	r3, r7, r0
 80025f0:	494c      	ldr	r1, [pc, #304]	@ (8002724 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80025f2:	400a      	ands	r2, r1
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	183b      	adds	r3, r7, r0
 80025f8:	183a      	adds	r2, r7, r0
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	2120      	movs	r1, #32
 80025fe:	404a      	eors	r2, r1
 8002600:	801a      	strh	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	001a      	movs	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	18d3      	adds	r3, r2, r3
 8002610:	183a      	adds	r2, r7, r0
 8002612:	8812      	ldrh	r2, [r2, #0]
 8002614:	4944      	ldr	r1, [pc, #272]	@ (8002728 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002616:	430a      	orrs	r2, r1
 8002618:	b292      	uxth	r2, r2
 800261a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f004 ff7b 	bl	8007520 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800262a:	1dbb      	adds	r3, r7, #6
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	01db      	lsls	r3, r3, #7
 8002632:	4013      	ands	r3, r2
 8002634:	d11a      	bne.n	800266c <HAL_PCD_EP_DB_Transmit+0x640>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	001a      	movs	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	18d3      	adds	r3, r2, r3
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	2092      	movs	r0, #146	@ 0x92
 800264a:	183b      	adds	r3, r7, r0
 800264c:	4937      	ldr	r1, [pc, #220]	@ (800272c <HAL_PCD_EP_DB_Transmit+0x700>)
 800264e:	400a      	ands	r2, r1
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	001a      	movs	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	183a      	adds	r2, r7, r0
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	4932      	ldr	r1, [pc, #200]	@ (8002730 <HAL_PCD_EP_DB_Transmit+0x704>)
 8002666:	430a      	orrs	r2, r1
 8002668:	b292      	uxth	r2, r2
 800266a:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e119      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002670:	1dbb      	adds	r3, r7, #6
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	4013      	ands	r3, r2
 800267a:	d11a      	bne.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x686>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	001a      	movs	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	18d3      	adds	r3, r2, r3
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29a      	uxth	r2, r3
 800268e:	2056      	movs	r0, #86	@ 0x56
 8002690:	183b      	adds	r3, r7, r0
 8002692:	4926      	ldr	r1, [pc, #152]	@ (800272c <HAL_PCD_EP_DB_Transmit+0x700>)
 8002694:	400a      	ands	r2, r1
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	001a      	movs	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	18d3      	adds	r3, r2, r3
 80026a6:	183a      	adds	r2, r7, r0
 80026a8:	8812      	ldrh	r2, [r2, #0]
 80026aa:	4921      	ldr	r1, [pc, #132]	@ (8002730 <HAL_PCD_EP_DB_Transmit+0x704>)
 80026ac:	430a      	orrs	r2, r1
 80026ae:	b292      	uxth	r2, r2
 80026b0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2224      	movs	r2, #36	@ 0x24
 80026b6:	5c9b      	ldrb	r3, [r3, r2]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d000      	beq.n	80026be <HAL_PCD_EP_DB_Transmit+0x692>
 80026bc:	e0ca      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	2196      	movs	r1, #150	@ 0x96
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	18d2      	adds	r2, r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	18d2      	adds	r2, r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d309      	bcc.n	80026fc <HAL_PCD_EP_DB_Transmit+0x6d0>
        {
          len = ep->maxpacket;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026f4:	1ad2      	subs	r2, r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	621a      	str	r2, [r3, #32]
 80026fa:	e025      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x71c>
        }
        else if (ep->xfer_len_db == 0U)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d117      	bne.n	8002734 <HAL_PCD_EP_DB_Transmit+0x708>
        {
          len = TxPctSize;
 8002704:	2396      	movs	r3, #150	@ 0x96
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2224      	movs	r2, #36	@ 0x24
 8002710:	2100      	movs	r1, #0
 8002712:	5499      	strb	r1, [r3, r2]
 8002714:	e018      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x71c>
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	ffff8000 	.word	0xffff8000
 800271c:	00000402 	.word	0x00000402
 8002720:	00000406 	.word	0x00000406
 8002724:	ffff8fbf 	.word	0xffff8fbf
 8002728:	ffff8080 	.word	0xffff8080
 800272c:	ffff8f8f 	.word	0xffff8f8f
 8002730:	ffffc080 	.word	0xffffc080
        }
        else
        {
          len = ep->xfer_len_db;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	785b      	ldrb	r3, [r3, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d15a      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0x7e0>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2250      	movs	r2, #80	@ 0x50
 8002762:	5a9b      	ldrh	r3, [r3, r2]
 8002764:	b29b      	uxth	r3, r3
 8002766:	001a      	movs	r2, r3
 8002768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800276a:	189b      	adds	r3, r3, r2
 800276c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00da      	lsls	r2, r3, #3
 8002774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002776:	18d3      	adds	r3, r2, r3
 8002778:	4a4c      	ldr	r2, [pc, #304]	@ (80028ac <HAL_PCD_EP_DB_Transmit+0x880>)
 800277a:	4694      	mov	ip, r2
 800277c:	4463      	add	r3, ip
 800277e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	059b      	lsls	r3, r3, #22
 8002788:	0d9b      	lsrs	r3, r3, #22
 800278a:	b29a      	uxth	r2, r3
 800278c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4a44      	ldr	r2, [pc, #272]	@ (80028b0 <HAL_PCD_EP_DB_Transmit+0x884>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	e04b      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x814>
 80027a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80027ac:	d815      	bhi.n	80027da <HAL_PCD_EP_DB_Transmit+0x7ae>
 80027ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027b6:	2201      	movs	r2, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d002      	beq.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x796>
 80027bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027be:	3301      	adds	r3, #1
 80027c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80027c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d6:	801a      	strh	r2, [r3, #0]
 80027d8:	e032      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x814>
 80027da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	663b      	str	r3, [r7, #96]	@ 0x60
 80027e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027e2:	221f      	movs	r2, #31
 80027e4:	4013      	ands	r3, r2
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_EP_DB_Transmit+0x7c2>
 80027e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ea:	3b01      	subs	r3, #1
 80027ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80027ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4a2b      	ldr	r2, [pc, #172]	@ (80028b0 <HAL_PCD_EP_DB_Transmit+0x884>)
 8002802:	4313      	orrs	r3, r2
 8002804:	b29a      	uxth	r2, r3
 8002806:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e019      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x814>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d115      	bne.n	8002840 <HAL_PCD_EP_DB_Transmit+0x814>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2250      	movs	r2, #80	@ 0x50
 800281a:	5a9b      	ldrh	r3, [r3, r2]
 800281c:	b29b      	uxth	r3, r3
 800281e:	001a      	movs	r2, r3
 8002820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002822:	189b      	adds	r3, r3, r2
 8002824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	00da      	lsls	r2, r3, #3
 800282c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800282e:	18d3      	adds	r3, r2, r3
 8002830:	4a1e      	ldr	r2, [pc, #120]	@ (80028ac <HAL_PCD_EP_DB_Transmit+0x880>)
 8002832:	4694      	mov	ip, r2
 8002834:	4463      	add	r3, ip
 8002836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002838:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800283a:	b29a      	uxth	r2, r3
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	895a      	ldrh	r2, [r3, #10]
 800284c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800284e:	b29b      	uxth	r3, r3
 8002850:	f002 fe48 	bl	80054e4 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	001a      	movs	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	18d3      	adds	r3, r2, r3
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29a      	uxth	r2, r3
 8002866:	2016      	movs	r0, #22
 8002868:	183b      	adds	r3, r7, r0
 800286a:	4912      	ldr	r1, [pc, #72]	@ (80028b4 <HAL_PCD_EP_DB_Transmit+0x888>)
 800286c:	400a      	ands	r2, r1
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	183b      	adds	r3, r7, r0
 8002872:	183a      	adds	r2, r7, r0
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	2110      	movs	r1, #16
 8002878:	404a      	eors	r2, r1
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	183b      	adds	r3, r7, r0
 800287e:	183a      	adds	r2, r7, r0
 8002880:	8812      	ldrh	r2, [r2, #0]
 8002882:	2120      	movs	r1, #32
 8002884:	404a      	eors	r2, r1
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	001a      	movs	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	18d3      	adds	r3, r2, r3
 8002896:	183a      	adds	r2, r7, r0
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	4907      	ldr	r1, [pc, #28]	@ (80028b8 <HAL_PCD_EP_DB_Transmit+0x88c>)
 800289c:	430a      	orrs	r2, r1
 800289e:	b292      	uxth	r2, r2
 80028a0:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b026      	add	sp, #152	@ 0x98
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00000406 	.word	0x00000406
 80028b0:	ffff8000 	.word	0xffff8000
 80028b4:	ffff8fbf 	.word	0xffff8fbf
 80028b8:	ffff8080 	.word	0xffff8080

080028bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	0008      	movs	r0, r1
 80028c6:	0011      	movs	r1, r2
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	240a      	movs	r4, #10
 80028cc:	193b      	adds	r3, r7, r4
 80028ce:	1c02      	adds	r2, r0, #0
 80028d0:	801a      	strh	r2, [r3, #0]
 80028d2:	2308      	movs	r3, #8
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	1c0a      	adds	r2, r1, #0
 80028d8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028da:	0021      	movs	r1, r4
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	2280      	movs	r2, #128	@ 0x80
 80028e2:	4013      	ands	r3, r2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	2207      	movs	r2, #7
 80028f0:	401a      	ands	r2, r3
 80028f2:	0013      	movs	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	189b      	adds	r3, r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	3310      	adds	r3, #16
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	18d3      	adds	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e00b      	b.n	800291c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002904:	230a      	movs	r3, #10
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	881a      	ldrh	r2, [r3, #0]
 800290a:	0013      	movs	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	189b      	adds	r3, r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	3351      	adds	r3, #81	@ 0x51
 8002914:	33ff      	adds	r3, #255	@ 0xff
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800291c:	2308      	movs	r3, #8
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	b29a      	uxth	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	80da      	strh	r2, [r3, #6]
 8002934:	e00b      	b.n	800294e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2201      	movs	r2, #1
 800293a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	b29a      	uxth	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b007      	add	sp, #28
 8002956:	bd90      	pop	{r4, r7, pc}

08002958 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	23b4      	movs	r3, #180	@ 0xb4
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	2101      	movs	r1, #1
 800296e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	23b2      	movs	r3, #178	@ 0xb2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	2100      	movs	r1, #0
 8002978:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2254      	movs	r2, #84	@ 0x54
 800297e:	5a9b      	ldrh	r3, [r3, r2]
 8002980:	b29b      	uxth	r3, r3
 8002982:	2201      	movs	r2, #1
 8002984:	4313      	orrs	r3, r2
 8002986:	b299      	uxth	r1, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2254      	movs	r2, #84	@ 0x54
 800298c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2254      	movs	r2, #84	@ 0x54
 8002992:	5a9b      	ldrh	r3, [r3, r2]
 8002994:	b29b      	uxth	r3, r3
 8002996:	2202      	movs	r2, #2
 8002998:	4313      	orrs	r3, r2
 800299a:	b299      	uxth	r1, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2254      	movs	r2, #84	@ 0x54
 80029a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	000a      	movs	r2, r1
 80029b6:	1cfb      	adds	r3, r7, #3
 80029b8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f000 fbbf 	bl	8003156 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d8:	4bc9      	ldr	r3, [pc, #804]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	220c      	movs	r2, #12
 80029de:	4013      	ands	r3, r2
 80029e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e2:	4bc7      	ldr	r3, [pc, #796]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	025b      	lsls	r3, r3, #9
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	d100      	bne.n	80029fa <HAL_RCC_OscConfig+0x36>
 80029f8:	e07e      	b.n	8002af8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d007      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d112      	bne.n	8002a2c <HAL_RCC_OscConfig+0x68>
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	2380      	movs	r3, #128	@ 0x80
 8002a0a:	025b      	lsls	r3, r3, #9
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	4bbb      	ldr	r3, [pc, #748]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	029b      	lsls	r3, r3, #10
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5a>
 8002a1c:	e06b      	b.n	8002af6 <HAL_RCC_OscConfig+0x132>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d167      	bne.n	8002af6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f000 fb95 	bl	8003156 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	025b      	lsls	r3, r3, #9
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x84>
 8002a38:	4bb1      	ldr	r3, [pc, #708]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4bb0      	ldr	r3, [pc, #704]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a3e:	2180      	movs	r1, #128	@ 0x80
 8002a40:	0249      	lsls	r1, r1, #9
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e027      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	23a0      	movs	r3, #160	@ 0xa0
 8002a4e:	02db      	lsls	r3, r3, #11
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d10e      	bne.n	8002a72 <HAL_RCC_OscConfig+0xae>
 8002a54:	4baa      	ldr	r3, [pc, #680]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4ba9      	ldr	r3, [pc, #676]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a5a:	2180      	movs	r1, #128	@ 0x80
 8002a5c:	02c9      	lsls	r1, r1, #11
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	4ba7      	ldr	r3, [pc, #668]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4ba6      	ldr	r3, [pc, #664]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0249      	lsls	r1, r1, #9
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e012      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a72:	4ba3      	ldr	r3, [pc, #652]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4ba2      	ldr	r3, [pc, #648]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a78:	49a2      	ldr	r1, [pc, #648]	@ (8002d04 <HAL_RCC_OscConfig+0x340>)
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	4ba0      	ldr	r3, [pc, #640]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	025b      	lsls	r3, r3, #9
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4b9c      	ldr	r3, [pc, #624]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b9b      	ldr	r3, [pc, #620]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002a92:	499d      	ldr	r1, [pc, #628]	@ (8002d08 <HAL_RCC_OscConfig+0x344>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fd fe82 	bl	80007a8 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa8:	e009      	b.n	8002abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aaa:	f7fd fe7d 	bl	80007a8 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b64      	cmp	r3, #100	@ 0x64
 8002ab6:	d902      	bls.n	8002abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	f000 fb4c 	bl	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002abe:	4b90      	ldr	r3, [pc, #576]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	029b      	lsls	r3, r3, #10
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d0ef      	beq.n	8002aaa <HAL_RCC_OscConfig+0xe6>
 8002aca:	e015      	b.n	8002af8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fd fe6c 	bl	80007a8 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad6:	f7fd fe67 	bl	80007a8 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e336      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ae8:	4b85      	ldr	r3, [pc, #532]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x112>
 8002af4:	e000      	b.n	8002af8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2202      	movs	r2, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_RCC_OscConfig+0x140>
 8002b02:	e099      	b.n	8002c38 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b12:	4b7b      	ldr	r3, [pc, #492]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b7a      	ldr	r3, [pc, #488]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b18:	2120      	movs	r1, #32
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	2220      	movs	r2, #32
 8002b22:	4393      	bics	r3, r2
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d13e      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1ec>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b38:	4b71      	ldr	r3, [pc, #452]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_RCC_OscConfig+0x188>
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e304      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <HAL_RCC_OscConfig+0x348>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	021a      	lsls	r2, r3, #8
 8002b5c:	4b68      	ldr	r3, [pc, #416]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b62:	4b67      	ldr	r3, [pc, #412]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2209      	movs	r2, #9
 8002b68:	4393      	bics	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	4b64      	ldr	r3, [pc, #400]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b74:	f000 fc42 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 8002b78:	0001      	movs	r1, r0
 8002b7a:	4b61      	ldr	r3, [pc, #388]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	220f      	movs	r2, #15
 8002b82:	4013      	ands	r3, r2
 8002b84:	4a62      	ldr	r2, [pc, #392]	@ (8002d10 <HAL_RCC_OscConfig+0x34c>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	000a      	movs	r2, r1
 8002b8a:	40da      	lsrs	r2, r3
 8002b8c:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <HAL_RCC_OscConfig+0x350>)
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b90:	4b61      	ldr	r3, [pc, #388]	@ (8002d18 <HAL_RCC_OscConfig+0x354>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2513      	movs	r5, #19
 8002b96:	197c      	adds	r4, r7, r5
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7fd fdbf 	bl	800071c <HAL_InitTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002ba2:	197b      	adds	r3, r7, r5
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d046      	beq.n	8002c38 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002baa:	197b      	adds	r3, r7, r5
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	e2d2      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d027      	beq.n	8002c06 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bb6:	4b52      	ldr	r3, [pc, #328]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2209      	movs	r2, #9
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fd fdee 	bl	80007a8 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fd fde9 	bl	80007a8 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e2b8      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be4:	4b46      	ldr	r3, [pc, #280]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2204      	movs	r2, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d0f1      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b44      	ldr	r3, [pc, #272]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a46      	ldr	r2, [pc, #280]	@ (8002d0c <HAL_RCC_OscConfig+0x348>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	021a      	lsls	r2, r3, #8
 8002bfe:	4b40      	ldr	r3, [pc, #256]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	e018      	b.n	8002c38 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b3e      	ldr	r3, [pc, #248]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	438a      	bics	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fd fdc9 	bl	80007a8 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7fd fdc4 	bl	80007a8 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e293      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c2e:	4b34      	ldr	r3, [pc, #208]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	d1f1      	bne.n	8002c1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d100      	bne.n	8002c44 <HAL_RCC_OscConfig+0x280>
 8002c42:	e0a2      	b.n	8002d8a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d140      	bne.n	8002ccc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x29e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e279      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c62:	4b27      	ldr	r3, [pc, #156]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <HAL_RCC_OscConfig+0x358>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c70:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c76:	4b22      	ldr	r3, [pc, #136]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	0a19      	lsrs	r1, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	061a      	lsls	r2, r3, #24
 8002c84:	4b1e      	ldr	r3, [pc, #120]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	0b5b      	lsrs	r3, r3, #13
 8002c90:	3301      	adds	r3, #1
 8002c92:	2280      	movs	r2, #128	@ 0x80
 8002c94:	0212      	lsls	r2, r2, #8
 8002c96:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c98:	4b19      	ldr	r3, [pc, #100]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	491b      	ldr	r1, [pc, #108]	@ (8002d10 <HAL_RCC_OscConfig+0x34c>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCC_OscConfig+0x350>)
 8002caa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_RCC_OscConfig+0x354>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2513      	movs	r5, #19
 8002cb2:	197c      	adds	r4, r7, r5
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7fd fd31 	bl	800071c <HAL_InitTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d061      	beq.n	8002d8a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002cc6:	197b      	adds	r3, r7, r5
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	e244      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d040      	beq.n	8002d56 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_RCC_OscConfig+0x33c>)
 8002cda:	2180      	movs	r1, #128	@ 0x80
 8002cdc:	0049      	lsls	r1, r1, #1
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fd61 	bl	80007a8 <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cea:	e019      	b.n	8002d20 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cec:	f7fd fd5c 	bl	80007a8 <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d912      	bls.n	8002d20 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e22b      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	fffeffff 	.word	0xfffeffff
 8002d08:	fffbffff 	.word	0xfffbffff
 8002d0c:	ffffe0ff 	.word	0xffffe0ff
 8002d10:	080084bc 	.word	0x080084bc
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004
 8002d1c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d20:	4bca      	ldr	r3, [pc, #808]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d0df      	beq.n	8002cec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d2c:	4bc7      	ldr	r3, [pc, #796]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4ac7      	ldr	r2, [pc, #796]	@ (8003050 <HAL_RCC_OscConfig+0x68c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3a:	4bc4      	ldr	r3, [pc, #784]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d40:	4bc2      	ldr	r3, [pc, #776]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	0a19      	lsrs	r1, r3, #8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	061a      	lsls	r2, r3, #24
 8002d4e:	4bbf      	ldr	r3, [pc, #764]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d50:	430a      	orrs	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	e019      	b.n	8002d8a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d56:	4bbd      	ldr	r3, [pc, #756]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4bbc      	ldr	r3, [pc, #752]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d5c:	49bd      	ldr	r1, [pc, #756]	@ (8003054 <HAL_RCC_OscConfig+0x690>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fd fd21 	bl	80007a8 <HAL_GetTick>
 8002d66:	0003      	movs	r3, r0
 8002d68:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d6c:	f7fd fd1c 	bl	80007a8 <HAL_GetTick>
 8002d70:	0002      	movs	r2, r0
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1eb      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d7e:	4bb3      	ldr	r3, [pc, #716]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4013      	ands	r3, r2
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2208      	movs	r2, #8
 8002d90:	4013      	ands	r3, r2
 8002d92:	d036      	beq.n	8002e02 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d019      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9c:	4bab      	ldr	r3, [pc, #684]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002d9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002da0:	4baa      	ldr	r3, [pc, #680]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002da2:	2101      	movs	r1, #1
 8002da4:	430a      	orrs	r2, r1
 8002da6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fd fcfe 	bl	80007a8 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fd fcf9 	bl	80007a8 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1c8      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dc4:	4ba1      	ldr	r3, [pc, #644]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc8:	2202      	movs	r2, #2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d0f1      	beq.n	8002db2 <HAL_RCC_OscConfig+0x3ee>
 8002dce:	e018      	b.n	8002e02 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b9e      	ldr	r3, [pc, #632]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002dd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dd4:	4b9d      	ldr	r3, [pc, #628]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	438a      	bics	r2, r1
 8002dda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fd fce4 	bl	80007a8 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fd fcdf 	bl	80007a8 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1ae      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002df8:	4b94      	ldr	r3, [pc, #592]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d1f1      	bne.n	8002de6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2204      	movs	r2, #4
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <HAL_RCC_OscConfig+0x44a>
 8002e0c:	e0ae      	b.n	8002f6c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2023      	movs	r0, #35	@ 0x23
 8002e10:	183b      	adds	r3, r7, r0
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b8d      	ldr	r3, [pc, #564]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	055b      	lsls	r3, r3, #21
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b8a      	ldr	r3, [pc, #552]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e26:	4b89      	ldr	r3, [pc, #548]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	0549      	lsls	r1, r1, #21
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002e30:	183b      	adds	r3, r7, r0
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b88      	ldr	r3, [pc, #544]	@ (8003058 <HAL_RCC_OscConfig+0x694>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d11a      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b85      	ldr	r3, [pc, #532]	@ (8003058 <HAL_RCC_OscConfig+0x694>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b84      	ldr	r3, [pc, #528]	@ (8003058 <HAL_RCC_OscConfig+0x694>)
 8002e48:	2180      	movs	r1, #128	@ 0x80
 8002e4a:	0049      	lsls	r1, r1, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e50:	f7fd fcaa 	bl	80007a8 <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fd fca5 	bl	80007a8 <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	@ 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e174      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8003058 <HAL_RCC_OscConfig+0x694>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
 8002e84:	4b71      	ldr	r3, [pc, #452]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002e86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e88:	4b70      	ldr	r3, [pc, #448]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002e8a:	2180      	movs	r1, #128	@ 0x80
 8002e8c:	0049      	lsls	r1, r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e92:	e031      	b.n	8002ef8 <HAL_RCC_OscConfig+0x534>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4f2>
 8002e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002e9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ea2:	496c      	ldr	r1, [pc, #432]	@ (8003054 <HAL_RCC_OscConfig+0x690>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ea8:	4b68      	ldr	r3, [pc, #416]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002eaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eac:	4b67      	ldr	r3, [pc, #412]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002eae:	496b      	ldr	r1, [pc, #428]	@ (800305c <HAL_RCC_OscConfig+0x698>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002eb4:	e020      	b.n	8002ef8 <HAL_RCC_OscConfig+0x534>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	23a0      	movs	r3, #160	@ 0xa0
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x51c>
 8002ec2:	4b62      	ldr	r3, [pc, #392]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ec6:	4b61      	ldr	r3, [pc, #388]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ec8:	2180      	movs	r1, #128	@ 0x80
 8002eca:	00c9      	lsls	r1, r1, #3
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ed2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	0049      	lsls	r1, r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x534>
 8002ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ee2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ee4:	4b59      	ldr	r3, [pc, #356]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ee6:	495b      	ldr	r1, [pc, #364]	@ (8003054 <HAL_RCC_OscConfig+0x690>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	651a      	str	r2, [r3, #80]	@ 0x50
 8002eec:	4b57      	ldr	r3, [pc, #348]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002eee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ef0:	4b56      	ldr	r3, [pc, #344]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002ef2:	495a      	ldr	r1, [pc, #360]	@ (800305c <HAL_RCC_OscConfig+0x698>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fd fc52 	bl	80007a8 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd fc4d 	bl	80007a8 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	4a52      	ldr	r2, [pc, #328]	@ (8003060 <HAL_RCC_OscConfig+0x69c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e11b      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f22:	2380      	movs	r3, #128	@ 0x80
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4013      	ands	r3, r2
 8002f28:	d0ef      	beq.n	8002f0a <HAL_RCC_OscConfig+0x546>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd fc3c 	bl	80007a8 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fc37 	bl	80007a8 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	4a47      	ldr	r2, [pc, #284]	@ (8003060 <HAL_RCC_OscConfig+0x69c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e105      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f4a:	4b40      	ldr	r3, [pc, #256]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d1ef      	bne.n	8002f36 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f56:	2323      	movs	r3, #35	@ 0x23
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f64:	4b39      	ldr	r3, [pc, #228]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f66:	493f      	ldr	r1, [pc, #252]	@ (8003064 <HAL_RCC_OscConfig+0x6a0>)
 8002f68:	400a      	ands	r2, r1
 8002f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2220      	movs	r2, #32
 8002f72:	4013      	ands	r3, r2
 8002f74:	d049      	beq.n	800300a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d026      	beq.n	8002fcc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f7e:	4b33      	ldr	r3, [pc, #204]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	4b32      	ldr	r3, [pc, #200]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f84:	2101      	movs	r1, #1
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	4b30      	ldr	r3, [pc, #192]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	430a      	orrs	r2, r1
 8002f94:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f96:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_OscConfig+0x6a4>)
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCC_OscConfig+0x6a4>)
 8002f9c:	2180      	movs	r1, #128	@ 0x80
 8002f9e:	0189      	lsls	r1, r1, #6
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fc00 	bl	80007a8 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fae:	f7fd fbfb 	bl	80007a8 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0ca      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fc0:	4b22      	ldr	r3, [pc, #136]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d0f1      	beq.n	8002fae <HAL_RCC_OscConfig+0x5ea>
 8002fca:	e01e      	b.n	800300a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <HAL_RCC_OscConfig+0x6a4>)
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <HAL_RCC_OscConfig+0x6a4>)
 8002fde:	4923      	ldr	r1, [pc, #140]	@ (800306c <HAL_RCC_OscConfig+0x6a8>)
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fbe0 	bl	80007a8 <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7fd fbdb 	bl	80007a8 <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0aa      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2202      	movs	r2, #2
 8003006:	4013      	ands	r3, r2
 8003008:	d1f1      	bne.n	8002fee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	2b00      	cmp	r3, #0
 8003010:	d100      	bne.n	8003014 <HAL_RCC_OscConfig+0x650>
 8003012:	e09f      	b.n	8003154 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d100      	bne.n	800301c <HAL_RCC_OscConfig+0x658>
 800301a:	e078      	b.n	800310e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	2b02      	cmp	r3, #2
 8003022:	d159      	bne.n	80030d8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003024:	4b09      	ldr	r3, [pc, #36]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b08      	ldr	r3, [pc, #32]	@ (800304c <HAL_RCC_OscConfig+0x688>)
 800302a:	4911      	ldr	r1, [pc, #68]	@ (8003070 <HAL_RCC_OscConfig+0x6ac>)
 800302c:	400a      	ands	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fd fbba 	bl	80007a8 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003038:	e01c      	b.n	8003074 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303a:	f7fd fbb5 	bl	80007a8 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d915      	bls.n	8003074 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e084      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
 800304c:	40021000 	.word	0x40021000
 8003050:	ffff1fff 	.word	0xffff1fff
 8003054:	fffffeff 	.word	0xfffffeff
 8003058:	40007000 	.word	0x40007000
 800305c:	fffffbff 	.word	0xfffffbff
 8003060:	00001388 	.word	0x00001388
 8003064:	efffffff 	.word	0xefffffff
 8003068:	40010000 	.word	0x40010000
 800306c:	ffffdfff 	.word	0xffffdfff
 8003070:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003074:	4b3a      	ldr	r3, [pc, #232]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	049b      	lsls	r3, r3, #18
 800307c:	4013      	ands	r3, r2
 800307e:	d1dc      	bne.n	800303a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003080:	4b37      	ldr	r3, [pc, #220]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a37      	ldr	r2, [pc, #220]	@ (8003164 <HAL_RCC_OscConfig+0x7a0>)
 8003086:	4013      	ands	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003098:	431a      	orrs	r2, r3
 800309a:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	0449      	lsls	r1, r1, #17
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fd fb7b 	bl	80007a8 <HAL_GetTick>
 80030b2:	0003      	movs	r3, r0
 80030b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd fb76 	bl	80007a8 <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e045      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030ca:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	049b      	lsls	r3, r3, #18
 80030d2:	4013      	ands	r3, r2
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x6f4>
 80030d6:	e03d      	b.n	8003154 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d8:	4b21      	ldr	r3, [pc, #132]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 80030de:	4922      	ldr	r1, [pc, #136]	@ (8003168 <HAL_RCC_OscConfig+0x7a4>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd fb60 	bl	80007a8 <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd fb5b 	bl	80007a8 <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e02a      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003100:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	049b      	lsls	r3, r3, #18
 8003108:	4013      	ands	r3, r2
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x72a>
 800310c:	e022      	b.n	8003154 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e01d      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800311a:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <HAL_RCC_OscConfig+0x79c>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	025b      	lsls	r3, r3, #9
 8003126:	401a      	ands	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	429a      	cmp	r2, r3
 800312e:	d10f      	bne.n	8003150 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	23f0      	movs	r3, #240	@ 0xf0
 8003134:	039b      	lsls	r3, r3, #14
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	23c0      	movs	r3, #192	@ 0xc0
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	401a      	ands	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b00a      	add	sp, #40	@ 0x28
 800315c:	bdb0      	pop	{r4, r5, r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	40021000 	.word	0x40021000
 8003164:	ff02ffff 	.word	0xff02ffff
 8003168:	feffffff 	.word	0xfeffffff

0800316c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b5b0      	push	{r4, r5, r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e128      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b96      	ldr	r3, [pc, #600]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d91e      	bls.n	80031cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b93      	ldr	r3, [pc, #588]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2201      	movs	r2, #1
 8003194:	4393      	bics	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	4b90      	ldr	r3, [pc, #576]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a0:	f7fd fb02 	bl	80007a8 <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a8:	e009      	b.n	80031be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031aa:	f7fd fafd 	bl	80007a8 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	4a8a      	ldr	r2, [pc, #552]	@ (80033e0 <HAL_RCC_ClockConfig+0x274>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e109      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b87      	ldr	r3, [pc, #540]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4013      	ands	r3, r2
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2202      	movs	r2, #2
 80031d2:	4013      	ands	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d6:	4b83      	ldr	r3, [pc, #524]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	22f0      	movs	r2, #240	@ 0xf0
 80031dc:	4393      	bics	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	4b7f      	ldr	r3, [pc, #508]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 80031e6:	430a      	orrs	r2, r1
 80031e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2201      	movs	r2, #1
 80031f0:	4013      	ands	r3, r2
 80031f2:	d100      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x8a>
 80031f4:	e089      	b.n	800330a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031fe:	4b79      	ldr	r3, [pc, #484]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	@ 0x80
 8003204:	029b      	lsls	r3, r3, #10
 8003206:	4013      	ands	r3, r2
 8003208:	d120      	bne.n	800324c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0e1      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003216:	4b73      	ldr	r3, [pc, #460]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	049b      	lsls	r3, r3, #18
 800321e:	4013      	ands	r3, r2
 8003220:	d114      	bne.n	800324c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0d5      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d106      	bne.n	800323c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800322e:	4b6d      	ldr	r3, [pc, #436]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2204      	movs	r2, #4
 8003234:	4013      	ands	r3, r2
 8003236:	d109      	bne.n	800324c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0ca      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800323c:	4b69      	ldr	r3, [pc, #420]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4013      	ands	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0c2      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324c:	4b65      	ldr	r3, [pc, #404]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2203      	movs	r2, #3
 8003252:	4393      	bics	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4b62      	ldr	r3, [pc, #392]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 800325c:	430a      	orrs	r2, r1
 800325e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fd faa2 	bl	80007a8 <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d111      	bne.n	8003294 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003270:	e009      	b.n	8003286 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003272:	f7fd fa99 	bl	80007a8 <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	4a58      	ldr	r2, [pc, #352]	@ (80033e0 <HAL_RCC_ClockConfig+0x274>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0a5      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003286:	4b57      	ldr	r3, [pc, #348]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	220c      	movs	r2, #12
 800328c:	4013      	ands	r3, r2
 800328e:	2b08      	cmp	r3, #8
 8003290:	d1ef      	bne.n	8003272 <HAL_RCC_ClockConfig+0x106>
 8003292:	e03a      	b.n	800330a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d111      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329c:	e009      	b.n	80032b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329e:	f7fd fa83 	bl	80007a8 <HAL_GetTick>
 80032a2:	0002      	movs	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	4a4d      	ldr	r2, [pc, #308]	@ (80033e0 <HAL_RCC_ClockConfig+0x274>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e08f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b2:	4b4c      	ldr	r3, [pc, #304]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	220c      	movs	r2, #12
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d1ef      	bne.n	800329e <HAL_RCC_ClockConfig+0x132>
 80032be:	e024      	b.n	800330a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d11b      	bne.n	8003300 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c8:	e009      	b.n	80032de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7fd fa6d 	bl	80007a8 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	4a42      	ldr	r2, [pc, #264]	@ (80033e0 <HAL_RCC_ClockConfig+0x274>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e079      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032de:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	220c      	movs	r2, #12
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d1ef      	bne.n	80032ca <HAL_RCC_ClockConfig+0x15e>
 80032ea:	e00e      	b.n	800330a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fd fa5c 	bl	80007a8 <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	4a3a      	ldr	r2, [pc, #232]	@ (80033e0 <HAL_RCC_ClockConfig+0x274>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e068      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003300:	4b38      	ldr	r3, [pc, #224]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	220c      	movs	r2, #12
 8003306:	4013      	ands	r3, r2
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330a:	4b34      	ldr	r3, [pc, #208]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d21e      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003318:	4b30      	ldr	r3, [pc, #192]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	4393      	bics	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	4b2e      	ldr	r3, [pc, #184]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800332a:	f7fd fa3d 	bl	80007a8 <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	e009      	b.n	8003348 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd fa38 	bl	80007a8 <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	4a28      	ldr	r2, [pc, #160]	@ (80033e0 <HAL_RCC_ClockConfig+0x274>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e044      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003348:	4b24      	ldr	r3, [pc, #144]	@ (80033dc <HAL_RCC_ClockConfig+0x270>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2204      	movs	r2, #4
 800335c:	4013      	ands	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b20      	ldr	r3, [pc, #128]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a20      	ldr	r2, [pc, #128]	@ (80033e8 <HAL_RCC_ClockConfig+0x27c>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	4b1d      	ldr	r3, [pc, #116]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003370:	430a      	orrs	r2, r1
 8003372:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2208      	movs	r2, #8
 800337a:	4013      	ands	r3, r2
 800337c:	d00a      	beq.n	8003394 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337e:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <HAL_RCC_ClockConfig+0x280>)
 8003384:	4013      	ands	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	00da      	lsls	r2, r3, #3
 800338e:	4b15      	ldr	r3, [pc, #84]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 8003390:	430a      	orrs	r2, r1
 8003392:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003394:	f000 f832 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 8003398:	0001      	movs	r1, r0
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_RCC_ClockConfig+0x278>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	220f      	movs	r2, #15
 80033a2:	4013      	ands	r3, r2
 80033a4:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <HAL_RCC_ClockConfig+0x284>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	000a      	movs	r2, r1
 80033aa:	40da      	lsrs	r2, r3
 80033ac:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <HAL_RCC_ClockConfig+0x288>)
 80033ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_RCC_ClockConfig+0x28c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	250b      	movs	r5, #11
 80033b6:	197c      	adds	r4, r7, r5
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fd f9af 	bl	800071c <HAL_InitTick>
 80033be:	0003      	movs	r3, r0
 80033c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80033c2:	197b      	adds	r3, r7, r5
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80033ca:	197b      	adds	r3, r7, r5
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b004      	add	sp, #16
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	40022000 	.word	0x40022000
 80033e0:	00001388 	.word	0x00001388
 80033e4:	40021000 	.word	0x40021000
 80033e8:	fffff8ff 	.word	0xfffff8ff
 80033ec:	ffffc7ff 	.word	0xffffc7ff
 80033f0:	080084bc 	.word	0x080084bc
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003402:	4b3c      	ldr	r3, [pc, #240]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	220c      	movs	r2, #12
 800340c:	4013      	ands	r3, r2
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d013      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x3e>
 8003412:	d85c      	bhi.n	80034ce <HAL_RCC_GetSysClockFreq+0xd2>
 8003414:	2b04      	cmp	r3, #4
 8003416:	d002      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x22>
 8003418:	2b08      	cmp	r3, #8
 800341a:	d00b      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x38>
 800341c:	e057      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800341e:	4b35      	ldr	r3, [pc, #212]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2210      	movs	r2, #16
 8003424:	4013      	ands	r3, r2
 8003426:	d002      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003428:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800342a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800342c:	e05d      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800342e:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x100>)
 8003430:	613b      	str	r3, [r7, #16]
      break;
 8003432:	e05a      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003434:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x100>)
 8003436:	613b      	str	r3, [r7, #16]
      break;
 8003438:	e057      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	0c9b      	lsrs	r3, r3, #18
 800343e:	220f      	movs	r2, #15
 8003440:	4013      	ands	r3, r2
 8003442:	4a2f      	ldr	r2, [pc, #188]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x104>)
 8003444:	5cd3      	ldrb	r3, [r2, r3]
 8003446:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	0d9b      	lsrs	r3, r3, #22
 800344c:	2203      	movs	r2, #3
 800344e:	4013      	ands	r3, r2
 8003450:	3301      	adds	r3, #1
 8003452:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003454:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	025b      	lsls	r3, r3, #9
 800345c:	4013      	ands	r3, r2
 800345e:	d00f      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	000a      	movs	r2, r1
 8003464:	0152      	lsls	r2, r2, #5
 8003466:	1a52      	subs	r2, r2, r1
 8003468:	0193      	lsls	r3, r2, #6
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	185b      	adds	r3, r3, r1
 8003470:	029b      	lsls	r3, r3, #10
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f7fc fe59 	bl	800012c <__udivsi3>
 800347a:	0003      	movs	r3, r0
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e023      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003480:	4b1c      	ldr	r3, [pc, #112]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2210      	movs	r2, #16
 8003486:	4013      	ands	r3, r2
 8003488:	d00f      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	000a      	movs	r2, r1
 800348e:	0152      	lsls	r2, r2, #5
 8003490:	1a52      	subs	r2, r2, r1
 8003492:	0193      	lsls	r3, r2, #6
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	185b      	adds	r3, r3, r1
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fc fe44 	bl	800012c <__udivsi3>
 80034a4:	0003      	movs	r3, r0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e00e      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	000a      	movs	r2, r1
 80034ae:	0152      	lsls	r2, r2, #5
 80034b0:	1a52      	subs	r2, r2, r1
 80034b2:	0193      	lsls	r3, r2, #6
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	185b      	adds	r3, r3, r1
 80034ba:	029b      	lsls	r3, r3, #10
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fc fe34 	bl	800012c <__udivsi3>
 80034c4:	0003      	movs	r3, r0
 80034c6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	613b      	str	r3, [r7, #16]
      break;
 80034cc:	e00d      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034ce:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	0b5b      	lsrs	r3, r3, #13
 80034d4:	2207      	movs	r2, #7
 80034d6:	4013      	ands	r3, r2
 80034d8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	2280      	movs	r2, #128	@ 0x80
 80034e0:	0212      	lsls	r2, r2, #8
 80034e2:	409a      	lsls	r2, r3
 80034e4:	0013      	movs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
      break;
 80034e8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034ea:	693b      	ldr	r3, [r7, #16]
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b006      	add	sp, #24
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	003d0900 	.word	0x003d0900
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	080084cc 	.word	0x080084cc

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800350c:	2017      	movs	r0, #23
 800350e:	183b      	adds	r3, r7, r0
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2220      	movs	r2, #32
 800351a:	4013      	ands	r3, r2
 800351c:	d100      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800351e:	e0c7      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003520:	4b9b      	ldr	r3, [pc, #620]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	055b      	lsls	r3, r3, #21
 8003528:	4013      	ands	r3, r2
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352c:	4b98      	ldr	r3, [pc, #608]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800352e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003530:	4b97      	ldr	r3, [pc, #604]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003532:	2180      	movs	r1, #128	@ 0x80
 8003534:	0549      	lsls	r1, r1, #21
 8003536:	430a      	orrs	r2, r1
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800353a:	183b      	adds	r3, r7, r0
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b94      	ldr	r3, [pc, #592]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4013      	ands	r3, r2
 800354a:	d11a      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354c:	4b91      	ldr	r3, [pc, #580]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b90      	ldr	r3, [pc, #576]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003552:	2180      	movs	r1, #128	@ 0x80
 8003554:	0049      	lsls	r1, r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fd f925 	bl	80007a8 <HAL_GetTick>
 800355e:	0003      	movs	r3, r0
 8003560:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fd f920 	bl	80007a8 <HAL_GetTick>
 8003568:	0002      	movs	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	@ 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e107      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b87      	ldr	r3, [pc, #540]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4013      	ands	r3, r2
 8003580:	d0f0      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003582:	4b83      	ldr	r3, [pc, #524]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	23c0      	movs	r3, #192	@ 0xc0
 8003588:	039b      	lsls	r3, r3, #14
 800358a:	4013      	ands	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	23c0      	movs	r3, #192	@ 0xc0
 8003594:	039b      	lsls	r3, r3, #14
 8003596:	4013      	ands	r3, r2
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	429a      	cmp	r2, r3
 800359c:	d013      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	23c0      	movs	r3, #192	@ 0xc0
 80035a4:	029b      	lsls	r3, r3, #10
 80035a6:	401a      	ands	r2, r3
 80035a8:	23c0      	movs	r3, #192	@ 0xc0
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10a      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035b0:	4b77      	ldr	r3, [pc, #476]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	029b      	lsls	r3, r3, #10
 80035b8:	401a      	ands	r2, r3
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	029b      	lsls	r3, r3, #10
 80035be:	429a      	cmp	r2, r3
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0df      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035c6:	4b72      	ldr	r3, [pc, #456]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035ca:	23c0      	movs	r3, #192	@ 0xc0
 80035cc:	029b      	lsls	r3, r3, #10
 80035ce:	4013      	ands	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d03b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	23c0      	movs	r3, #192	@ 0xc0
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	4013      	ands	r3, r2
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d033      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2220      	movs	r2, #32
 80035ee:	4013      	ands	r3, r2
 80035f0:	d02e      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035f2:	4b67      	ldr	r3, [pc, #412]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f6:	4a68      	ldr	r2, [pc, #416]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035fc:	4b64      	ldr	r3, [pc, #400]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003600:	4b63      	ldr	r3, [pc, #396]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003602:	2180      	movs	r1, #128	@ 0x80
 8003604:	0309      	lsls	r1, r1, #12
 8003606:	430a      	orrs	r2, r1
 8003608:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	4b61      	ldr	r3, [pc, #388]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800360c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800360e:	4b60      	ldr	r3, [pc, #384]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003610:	4962      	ldr	r1, [pc, #392]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003612:	400a      	ands	r2, r1
 8003614:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003616:	4b5e      	ldr	r3, [pc, #376]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4013      	ands	r3, r2
 8003624:	d014      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fd f8bf 	bl	80007a8 <HAL_GetTick>
 800362a:	0003      	movs	r3, r0
 800362c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800362e:	e009      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fd f8ba 	bl	80007a8 <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	4a59      	ldr	r2, [pc, #356]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0a0      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003644:	4b52      	ldr	r3, [pc, #328]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003646:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d0ef      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2220      	movs	r2, #32
 8003656:	4013      	ands	r3, r2
 8003658:	d01f      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	23c0      	movs	r3, #192	@ 0xc0
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	401a      	ands	r2, r3
 8003664:	23c0      	movs	r3, #192	@ 0xc0
 8003666:	029b      	lsls	r3, r3, #10
 8003668:	429a      	cmp	r2, r3
 800366a:	d10c      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800366c:	4b48      	ldr	r3, [pc, #288]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a4c      	ldr	r2, [pc, #304]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003672:	4013      	ands	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	23c0      	movs	r3, #192	@ 0xc0
 800367c:	039b      	lsls	r3, r3, #14
 800367e:	401a      	ands	r2, r3
 8003680:	4b43      	ldr	r3, [pc, #268]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	4b42      	ldr	r3, [pc, #264]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003688:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	23c0      	movs	r3, #192	@ 0xc0
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	401a      	ands	r2, r3
 8003694:	4b3e      	ldr	r3, [pc, #248]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003696:	430a      	orrs	r2, r1
 8003698:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800369a:	2317      	movs	r3, #23
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036a8:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036aa:	493f      	ldr	r1, [pc, #252]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ba:	4b35      	ldr	r3, [pc, #212]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	2203      	movs	r2, #3
 80036c0:	4393      	bics	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036ca:	430a      	orrs	r2, r1
 80036cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2202      	movs	r2, #2
 80036d4:	4013      	ands	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036dc:	220c      	movs	r2, #12
 80036de:	4393      	bics	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2204      	movs	r2, #4
 80036f2:	4013      	ands	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036f6:	4b26      	ldr	r3, [pc, #152]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fa:	4a2c      	ldr	r2, [pc, #176]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	0019      	movs	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	4b22      	ldr	r3, [pc, #136]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003706:	430a      	orrs	r2, r1
 8003708:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2208      	movs	r2, #8
 8003710:	4013      	ands	r3, r2
 8003712:	d009      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003714:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003718:	4a25      	ldr	r2, [pc, #148]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800371a:	4013      	ands	r3, r2
 800371c:	0019      	movs	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003724:	430a      	orrs	r2, r1
 8003726:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4013      	ands	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003734:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003738:	4a17      	ldr	r2, [pc, #92]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800373a:	4013      	ands	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003744:	430a      	orrs	r2, r1
 8003746:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2240      	movs	r2, #64	@ 0x40
 800374e:	4013      	ands	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003752:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003756:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003758:	4013      	ands	r3, r2
 800375a:	0019      	movs	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1a      	ldr	r2, [r3, #32]
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003762:	430a      	orrs	r2, r1
 8003764:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2280      	movs	r2, #128	@ 0x80
 800376c:	4013      	ands	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003770:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003774:	4a10      	ldr	r2, [pc, #64]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003776:	4013      	ands	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003780:	430a      	orrs	r2, r1
 8003782:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b006      	add	sp, #24
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
 8003798:	fffcffff 	.word	0xfffcffff
 800379c:	fff7ffff 	.word	0xfff7ffff
 80037a0:	00001388 	.word	0x00001388
 80037a4:	ffcfffff 	.word	0xffcfffff
 80037a8:	efffffff 	.word	0xefffffff
 80037ac:	fffff3ff 	.word	0xfffff3ff
 80037b0:	ffffcfff 	.word	0xffffcfff
 80037b4:	fbffffff 	.word	0xfbffffff
 80037b8:	fff3ffff 	.word	0xfff3ffff

080037bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e083      	b.n	80038d6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	2382      	movs	r3, #130	@ 0x82
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	429a      	cmp	r2, r3
 80037e0:	d009      	beq.n	80037f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	61da      	str	r2, [r3, #28]
 80037e8:	e005      	b.n	80037f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2251      	movs	r2, #81	@ 0x51
 8003800:	5c9b      	ldrb	r3, [r3, r2]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2250      	movs	r2, #80	@ 0x50
 800380c:	2100      	movs	r1, #0
 800380e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0018      	movs	r0, r3
 8003814:	f7fc fe92 	bl	800053c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2251      	movs	r2, #81	@ 0x51
 800381c:	2102      	movs	r1, #2
 800381e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2140      	movs	r1, #64	@ 0x40
 800382c:	438a      	bics	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	2382      	movs	r3, #130	@ 0x82
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	401a      	ands	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6899      	ldr	r1, [r3, #8]
 800383e:	2384      	movs	r3, #132	@ 0x84
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	400b      	ands	r3, r1
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68d9      	ldr	r1, [r3, #12]
 800384a:	2380      	movs	r3, #128	@ 0x80
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	400b      	ands	r3, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2102      	movs	r1, #2
 8003858:	400b      	ands	r3, r1
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	2101      	movs	r1, #1
 8003862:	400b      	ands	r3, r1
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6999      	ldr	r1, [r3, #24]
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	400b      	ands	r3, r1
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2138      	movs	r1, #56	@ 0x38
 8003878:	400b      	ands	r3, r1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	2180      	movs	r1, #128	@ 0x80
 8003882:	400b      	ands	r3, r1
 8003884:	431a      	orrs	r2, r3
 8003886:	0011      	movs	r1, r2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800388c:	2380      	movs	r3, #128	@ 0x80
 800388e:	019b      	lsls	r3, r3, #6
 8003890:	401a      	ands	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	2204      	movs	r2, #4
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	2210      	movs	r2, #16
 80038ac:	401a      	ands	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4907      	ldr	r1, [pc, #28]	@ (80038e0 <HAL_SPI_Init+0x124>)
 80038c2:	400a      	ands	r2, r1
 80038c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2251      	movs	r2, #81	@ 0x51
 80038d0:	2101      	movs	r1, #1
 80038d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	fffff7ff 	.word	0xfffff7ff

080038e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2244      	movs	r2, #68	@ 0x44
 80038f0:	2100      	movs	r1, #0
 80038f2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <USB_EnableGlobalInt+0x28>)
 80038f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	b299      	uxth	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2240      	movs	r2, #64	@ 0x40
 8003900:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b004      	add	sp, #16
 800390a:	bd80      	pop	{r7, pc}
 800390c:	0000bf80 	.word	0x0000bf80

08003910 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003918:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <USB_DisableGlobalInt+0x30>)
 800391a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2240      	movs	r2, #64	@ 0x40
 8003920:	5a9b      	ldrh	r3, [r3, r2]
 8003922:	b29b      	uxth	r3, r3
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	b292      	uxth	r2, r2
 8003928:	43d2      	mvns	r2, r2
 800392a:	b292      	uxth	r2, r2
 800392c:	4013      	ands	r3, r2
 800392e:	b299      	uxth	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2240      	movs	r2, #64	@ 0x40
 8003934:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	0000bf80 	.word	0x0000bf80

08003944 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	6019      	str	r1, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2240      	movs	r2, #64	@ 0x40
 8003956:	2101      	movs	r1, #1
 8003958:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2240      	movs	r2, #64	@ 0x40
 800395e:	2100      	movs	r1, #0
 8003960:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2244      	movs	r2, #68	@ 0x44
 8003966:	2100      	movs	r1, #0
 8003968:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2250      	movs	r2, #80	@ 0x50
 800396e:	2100      	movs	r1, #0
 8003970:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b004      	add	sp, #16
 800397a:	bd80      	pop	{r7, pc}

0800397c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b0a6      	sub	sp, #152	@ 0x98
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003986:	2397      	movs	r3, #151	@ 0x97
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	18d3      	adds	r3, r2, r3
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29a      	uxth	r2, r3
 800399c:	2394      	movs	r3, #148	@ 0x94
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	49a5      	ldr	r1, [pc, #660]	@ (8003c38 <USB_ActivateEndpoint+0x2bc>)
 80039a2:	400a      	ands	r2, r1
 80039a4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	78db      	ldrb	r3, [r3, #3]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d017      	beq.n	80039de <USB_ActivateEndpoint+0x62>
 80039ae:	dc28      	bgt.n	8003a02 <USB_ActivateEndpoint+0x86>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d00e      	beq.n	80039d2 <USB_ActivateEndpoint+0x56>
 80039b4:	dc25      	bgt.n	8003a02 <USB_ActivateEndpoint+0x86>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <USB_ActivateEndpoint+0x44>
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d018      	beq.n	80039f0 <USB_ActivateEndpoint+0x74>
 80039be:	e020      	b.n	8003a02 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80039c0:	2294      	movs	r2, #148	@ 0x94
 80039c2:	18bb      	adds	r3, r7, r2
 80039c4:	18ba      	adds	r2, r7, r2
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	2180      	movs	r1, #128	@ 0x80
 80039ca:	0089      	lsls	r1, r1, #2
 80039cc:	430a      	orrs	r2, r1
 80039ce:	801a      	strh	r2, [r3, #0]
      break;
 80039d0:	e01c      	b.n	8003a0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80039d2:	2294      	movs	r2, #148	@ 0x94
 80039d4:	18bb      	adds	r3, r7, r2
 80039d6:	18ba      	adds	r2, r7, r2
 80039d8:	8812      	ldrh	r2, [r2, #0]
 80039da:	801a      	strh	r2, [r3, #0]
      break;
 80039dc:	e016      	b.n	8003a0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80039de:	2294      	movs	r2, #148	@ 0x94
 80039e0:	18bb      	adds	r3, r7, r2
 80039e2:	18ba      	adds	r2, r7, r2
 80039e4:	8812      	ldrh	r2, [r2, #0]
 80039e6:	21c0      	movs	r1, #192	@ 0xc0
 80039e8:	00c9      	lsls	r1, r1, #3
 80039ea:	430a      	orrs	r2, r1
 80039ec:	801a      	strh	r2, [r3, #0]
      break;
 80039ee:	e00d      	b.n	8003a0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80039f0:	2294      	movs	r2, #148	@ 0x94
 80039f2:	18bb      	adds	r3, r7, r2
 80039f4:	18ba      	adds	r2, r7, r2
 80039f6:	8812      	ldrh	r2, [r2, #0]
 80039f8:	2180      	movs	r1, #128	@ 0x80
 80039fa:	00c9      	lsls	r1, r1, #3
 80039fc:	430a      	orrs	r2, r1
 80039fe:	801a      	strh	r2, [r3, #0]
      break;
 8003a00:	e004      	b.n	8003a0c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003a02:	2397      	movs	r3, #151	@ 0x97
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
      break;
 8003a0a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	2294      	movs	r2, #148	@ 0x94
 8003a18:	18ba      	adds	r2, r7, r2
 8003a1a:	8812      	ldrh	r2, [r2, #0]
 8003a1c:	4987      	ldr	r1, [pc, #540]	@ (8003c3c <USB_ActivateEndpoint+0x2c0>)
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	b292      	uxth	r2, r2
 8003a22:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	18d3      	adds	r3, r2, r3
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	b21b      	sxth	r3, r3
 8003a34:	4a82      	ldr	r2, [pc, #520]	@ (8003c40 <USB_ActivateEndpoint+0x2c4>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	b21a      	sxth	r2, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b21a      	sxth	r2, r3
 8003a44:	2186      	movs	r1, #134	@ 0x86
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	18d3      	adds	r3, r2, r3
 8003a54:	187a      	adds	r2, r7, r1
 8003a56:	8812      	ldrh	r2, [r2, #0]
 8003a58:	4978      	ldr	r1, [pc, #480]	@ (8003c3c <USB_ActivateEndpoint+0x2c0>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	7b1b      	ldrb	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d000      	beq.n	8003a6a <USB_ActivateEndpoint+0xee>
 8003a68:	e185      	b.n	8003d76 <USB_ActivateEndpoint+0x3fa>
  {
    if (ep->is_in != 0U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d100      	bne.n	8003a74 <USB_ActivateEndpoint+0xf8>
 8003a72:	e07c      	b.n	8003b6e <USB_ActivateEndpoint+0x1f2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2250      	movs	r2, #80	@ 0x50
 8003a7c:	5a9b      	ldrh	r3, [r3, r2]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	001a      	movs	r2, r3
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	189b      	adds	r3, r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	00da      	lsls	r2, r3, #3
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	18d3      	adds	r3, r2, r3
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	00d2      	lsls	r2, r2, #3
 8003a96:	4694      	mov	ip, r2
 8003a98:	4463      	add	r3, ip
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	88db      	ldrh	r3, [r3, #6]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	18db      	adds	r3, r3, r3
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	18d2      	adds	r2, r2, r3
 8003ab6:	2112      	movs	r1, #18
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	8812      	ldrh	r2, [r2, #0]
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	2240      	movs	r2, #64	@ 0x40
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d016      	beq.n	8003af6 <USB_ActivateEndpoint+0x17a>
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	18d3      	adds	r3, r2, r3
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	2010      	movs	r0, #16
 8003ad8:	183b      	adds	r3, r7, r0
 8003ada:	4959      	ldr	r1, [pc, #356]	@ (8003c40 <USB_ActivateEndpoint+0x2c4>)
 8003adc:	400a      	ands	r2, r1
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	183a      	adds	r2, r7, r0
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	4955      	ldr	r1, [pc, #340]	@ (8003c44 <USB_ActivateEndpoint+0x2c8>)
 8003af0:	430a      	orrs	r2, r1
 8003af2:	b292      	uxth	r2, r2
 8003af4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	78db      	ldrb	r3, [r3, #3]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d01e      	beq.n	8003b3c <USB_ActivateEndpoint+0x1c0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	200c      	movs	r0, #12
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	494d      	ldr	r1, [pc, #308]	@ (8003c48 <USB_ActivateEndpoint+0x2cc>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	183b      	adds	r3, r7, r0
 8003b18:	183a      	adds	r2, r7, r0
 8003b1a:	8812      	ldrh	r2, [r2, #0]
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	404a      	eors	r2, r1
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	18d3      	adds	r3, r2, r3
 8003b2c:	183a      	adds	r2, r7, r0
 8003b2e:	8812      	ldrh	r2, [r2, #0]
 8003b30:	4942      	ldr	r1, [pc, #264]	@ (8003c3c <USB_ActivateEndpoint+0x2c0>)
 8003b32:	430a      	orrs	r2, r1
 8003b34:	b292      	uxth	r2, r2
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	f000 fbdb 	bl	80042f2 <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	18d3      	adds	r3, r2, r3
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	200e      	movs	r0, #14
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	493e      	ldr	r1, [pc, #248]	@ (8003c48 <USB_ActivateEndpoint+0x2cc>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	18d3      	adds	r3, r2, r3
 8003b5e:	183a      	adds	r2, r7, r0
 8003b60:	8812      	ldrh	r2, [r2, #0]
 8003b62:	4936      	ldr	r1, [pc, #216]	@ (8003c3c <USB_ActivateEndpoint+0x2c0>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	b292      	uxth	r2, r2
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	f000 fbc2 	bl	80042f2 <USB_ActivateEndpoint+0x976>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2250      	movs	r2, #80	@ 0x50
 8003b76:	5a9b      	ldrh	r3, [r3, r2]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	00da      	lsls	r2, r3, #3
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c4c <USB_ActivateEndpoint+0x2d0>)
 8003b8e:	4694      	mov	ip, r2
 8003b90:	4463      	add	r3, ip
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	88db      	ldrh	r3, [r3, #6]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	18db      	adds	r3, r3, r3
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2250      	movs	r2, #80	@ 0x50
 8003bac:	5a9b      	ldrh	r3, [r3, r2]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb4:	189b      	adds	r3, r3, r2
 8003bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	00da      	lsls	r2, r3, #3
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	18d3      	adds	r3, r2, r3
 8003bc2:	4a23      	ldr	r2, [pc, #140]	@ (8003c50 <USB_ActivateEndpoint+0x2d4>)
 8003bc4:	4694      	mov	ip, r2
 8003bc6:	4463      	add	r3, ip
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	059b      	lsls	r3, r3, #22
 8003bd2:	0d9b      	lsrs	r3, r3, #22
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d108      	bne.n	8003bf4 <USB_ActivateEndpoint+0x278>
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <USB_ActivateEndpoint+0x2d8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	e051      	b.n	8003c98 <USB_ActivateEndpoint+0x31c>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003bfa:	d82d      	bhi.n	8003c58 <USB_ActivateEndpoint+0x2dc>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	2190      	movs	r1, #144	@ 0x90
 8003c04:	187a      	adds	r2, r7, r1
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d004      	beq.n	8003c1c <USB_ActivateEndpoint+0x2a0>
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	187a      	adds	r2, r7, r1
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	2390      	movs	r3, #144	@ 0x90
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e02f      	b.n	8003c98 <USB_ActivateEndpoint+0x31c>
 8003c38:	ffff898f 	.word	0xffff898f
 8003c3c:	ffff8080 	.word	0xffff8080
 8003c40:	ffff8f8f 	.word	0xffff8f8f
 8003c44:	ffff80c0 	.word	0xffff80c0
 8003c48:	ffff8fbf 	.word	0xffff8fbf
 8003c4c:	00000404 	.word	0x00000404
 8003c50:	00000406 	.word	0x00000406
 8003c54:	ffff8000 	.word	0xffff8000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2190      	movs	r1, #144	@ 0x90
 8003c60:	187a      	adds	r2, r7, r1
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	221f      	movs	r2, #31
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d104      	bne.n	8003c78 <USB_ActivateEndpoint+0x2fc>
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	187a      	adds	r2, r7, r1
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	2390      	movs	r3, #144	@ 0x90
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	029b      	lsls	r3, r3, #10
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4acf      	ldr	r2, [pc, #828]	@ (8003fcc <USB_ActivateEndpoint+0x650>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	18d2      	adds	r2, r2, r3
 8003ca2:	2122      	movs	r1, #34	@ 0x22
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	8812      	ldrh	r2, [r2, #0]
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	01db      	lsls	r3, r3, #7
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d016      	beq.n	8003ce4 <USB_ActivateEndpoint+0x368>
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	2020      	movs	r0, #32
 8003cc6:	183b      	adds	r3, r7, r0
 8003cc8:	49c1      	ldr	r1, [pc, #772]	@ (8003fd0 <USB_ActivateEndpoint+0x654>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	801a      	strh	r2, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	18d3      	adds	r3, r2, r3
 8003cd8:	183a      	adds	r2, r7, r0
 8003cda:	8812      	ldrh	r2, [r2, #0]
 8003cdc:	49bd      	ldr	r1, [pc, #756]	@ (8003fd4 <USB_ActivateEndpoint+0x658>)
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d125      	bne.n	8003d38 <USB_ActivateEndpoint+0x3bc>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	18d3      	adds	r3, r2, r3
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	201c      	movs	r0, #28
 8003cfc:	183b      	adds	r3, r7, r0
 8003cfe:	49b6      	ldr	r1, [pc, #728]	@ (8003fd8 <USB_ActivateEndpoint+0x65c>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	183b      	adds	r3, r7, r0
 8003d06:	183a      	adds	r2, r7, r0
 8003d08:	8812      	ldrh	r2, [r2, #0]
 8003d0a:	2180      	movs	r1, #128	@ 0x80
 8003d0c:	0149      	lsls	r1, r1, #5
 8003d0e:	404a      	eors	r2, r1
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	183a      	adds	r2, r7, r0
 8003d16:	8812      	ldrh	r2, [r2, #0]
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	0189      	lsls	r1, r1, #6
 8003d1c:	404a      	eors	r2, r1
 8003d1e:	801a      	strh	r2, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	18d3      	adds	r3, r2, r3
 8003d2a:	183a      	adds	r2, r7, r0
 8003d2c:	8812      	ldrh	r2, [r2, #0]
 8003d2e:	49ab      	ldr	r1, [pc, #684]	@ (8003fdc <USB_ActivateEndpoint+0x660>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	b292      	uxth	r2, r2
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e2dc      	b.n	80042f2 <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	201e      	movs	r0, #30
 8003d48:	183b      	adds	r3, r7, r0
 8003d4a:	49a3      	ldr	r1, [pc, #652]	@ (8003fd8 <USB_ActivateEndpoint+0x65c>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	183b      	adds	r3, r7, r0
 8003d52:	183a      	adds	r2, r7, r0
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	2180      	movs	r1, #128	@ 0x80
 8003d58:	0189      	lsls	r1, r1, #6
 8003d5a:	404a      	eors	r2, r1
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	18d3      	adds	r3, r2, r3
 8003d68:	183a      	adds	r2, r7, r0
 8003d6a:	8812      	ldrh	r2, [r2, #0]
 8003d6c:	499b      	ldr	r1, [pc, #620]	@ (8003fdc <USB_ActivateEndpoint+0x660>)
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	b292      	uxth	r2, r2
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	e2bd      	b.n	80042f2 <USB_ActivateEndpoint+0x976>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	78db      	ldrb	r3, [r3, #3]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d117      	bne.n	8003dae <USB_ActivateEndpoint+0x432>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	18d3      	adds	r3, r2, r3
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	2082      	movs	r0, #130	@ 0x82
 8003d8e:	183b      	adds	r3, r7, r0
 8003d90:	498f      	ldr	r1, [pc, #572]	@ (8003fd0 <USB_ActivateEndpoint+0x654>)
 8003d92:	400a      	ands	r2, r1
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	18d3      	adds	r3, r2, r3
 8003da0:	183a      	adds	r2, r7, r0
 8003da2:	8812      	ldrh	r2, [r2, #0]
 8003da4:	498e      	ldr	r1, [pc, #568]	@ (8003fe0 <USB_ActivateEndpoint+0x664>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	b292      	uxth	r2, r2
 8003daa:	801a      	strh	r2, [r3, #0]
 8003dac:	e016      	b.n	8003ddc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	18d3      	adds	r3, r2, r3
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	2084      	movs	r0, #132	@ 0x84
 8003dbe:	183b      	adds	r3, r7, r0
 8003dc0:	4988      	ldr	r1, [pc, #544]	@ (8003fe4 <USB_ActivateEndpoint+0x668>)
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	18d3      	adds	r3, r2, r3
 8003dd0:	183a      	adds	r2, r7, r0
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	4981      	ldr	r1, [pc, #516]	@ (8003fdc <USB_ActivateEndpoint+0x660>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	b292      	uxth	r2, r2
 8003dda:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2250      	movs	r2, #80	@ 0x50
 8003de4:	5a9b      	ldrh	r3, [r3, r2]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	001a      	movs	r2, r3
 8003dea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	00da      	lsls	r2, r3, #3
 8003df6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	00d2      	lsls	r2, r2, #3
 8003dfe:	4694      	mov	ip, r2
 8003e00:	4463      	add	r3, ip
 8003e02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	891b      	ldrh	r3, [r3, #8]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	18db      	adds	r3, r3, r3
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2250      	movs	r2, #80	@ 0x50
 8003e1c:	5a9b      	ldrh	r3, [r3, r2]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	001a      	movs	r2, r3
 8003e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	00da      	lsls	r2, r3, #3
 8003e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e30:	18d3      	adds	r3, r2, r3
 8003e32:	4a6d      	ldr	r2, [pc, #436]	@ (8003fe8 <USB_ActivateEndpoint+0x66c>)
 8003e34:	4694      	mov	ip, r2
 8003e36:	4463      	add	r3, ip
 8003e38:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	895b      	ldrh	r3, [r3, #10]
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	18db      	adds	r3, r3, r3
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e48:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	785b      	ldrb	r3, [r3, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d000      	beq.n	8003e54 <USB_ActivateEndpoint+0x4d8>
 8003e52:	e1b3      	b.n	80041bc <USB_ActivateEndpoint+0x840>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	18d2      	adds	r2, r2, r3
 8003e5e:	2160      	movs	r1, #96	@ 0x60
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	8812      	ldrh	r2, [r2, #0]
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	01db      	lsls	r3, r3, #7
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d016      	beq.n	8003ea0 <USB_ActivateEndpoint+0x524>
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	18d3      	adds	r3, r2, r3
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	205e      	movs	r0, #94	@ 0x5e
 8003e82:	183b      	adds	r3, r7, r0
 8003e84:	4952      	ldr	r1, [pc, #328]	@ (8003fd0 <USB_ActivateEndpoint+0x654>)
 8003e86:	400a      	ands	r2, r1
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	18d3      	adds	r3, r2, r3
 8003e94:	183a      	adds	r2, r7, r0
 8003e96:	8812      	ldrh	r2, [r2, #0]
 8003e98:	494e      	ldr	r1, [pc, #312]	@ (8003fd4 <USB_ActivateEndpoint+0x658>)
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	b292      	uxth	r2, r2
 8003e9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	18d2      	adds	r2, r2, r3
 8003eaa:	215c      	movs	r1, #92	@ 0x5c
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	8812      	ldrh	r2, [r2, #0]
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d016      	beq.n	8003eea <USB_ActivateEndpoint+0x56e>
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	205a      	movs	r0, #90	@ 0x5a
 8003ecc:	183b      	adds	r3, r7, r0
 8003ece:	4940      	ldr	r1, [pc, #256]	@ (8003fd0 <USB_ActivateEndpoint+0x654>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	183a      	adds	r2, r7, r0
 8003ee0:	8812      	ldrh	r2, [r2, #0]
 8003ee2:	4942      	ldr	r1, [pc, #264]	@ (8003fec <USB_ActivateEndpoint+0x670>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d000      	beq.n	8003ef4 <USB_ActivateEndpoint+0x578>
 8003ef2:	e07f      	b.n	8003ff4 <USB_ActivateEndpoint+0x678>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2250      	movs	r2, #80	@ 0x50
 8003efc:	5a9b      	ldrh	r3, [r3, r2]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	001a      	movs	r2, r3
 8003f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	00da      	lsls	r2, r3, #3
 8003f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f10:	18d3      	adds	r3, r2, r3
 8003f12:	4a37      	ldr	r2, [pc, #220]	@ (8003ff0 <USB_ActivateEndpoint+0x674>)
 8003f14:	4694      	mov	ip, r2
 8003f16:	4463      	add	r3, ip
 8003f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	059b      	lsls	r3, r3, #22
 8003f22:	0d9b      	lsrs	r3, r3, #22
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <USB_ActivateEndpoint+0x5c8>
 8003f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <USB_ActivateEndpoint+0x650>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	e073      	b.n	800402c <USB_ActivateEndpoint+0x6b0>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f4a:	d81d      	bhi.n	8003f88 <USB_ActivateEndpoint+0x60c>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	218c      	movs	r1, #140	@ 0x8c
 8003f54:	187a      	adds	r2, r7, r1
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d004      	beq.n	8003f6c <USB_ActivateEndpoint+0x5f0>
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3301      	adds	r3, #1
 8003f68:	187a      	adds	r2, r7, r1
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	238c      	movs	r3, #140	@ 0x8c
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	029b      	lsls	r3, r3, #10
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	e051      	b.n	800402c <USB_ActivateEndpoint+0x6b0>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	218c      	movs	r1, #140	@ 0x8c
 8003f90:	187a      	adds	r2, r7, r1
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	221f      	movs	r2, #31
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d104      	bne.n	8003fa8 <USB_ActivateEndpoint+0x62c>
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	187a      	adds	r2, r7, r1
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	238c      	movs	r3, #140	@ 0x8c
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	029b      	lsls	r3, r3, #10
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4a03      	ldr	r2, [pc, #12]	@ (8003fcc <USB_ActivateEndpoint+0x650>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc6:	801a      	strh	r2, [r3, #0]
 8003fc8:	e030      	b.n	800402c <USB_ActivateEndpoint+0x6b0>
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	ffff8000 	.word	0xffff8000
 8003fd0:	ffff8f8f 	.word	0xffff8f8f
 8003fd4:	ffffc080 	.word	0xffffc080
 8003fd8:	ffffbf8f 	.word	0xffffbf8f
 8003fdc:	ffff8080 	.word	0xffff8080
 8003fe0:	ffff8180 	.word	0xffff8180
 8003fe4:	ffff8e8f 	.word	0xffff8e8f
 8003fe8:	00000404 	.word	0x00000404
 8003fec:	ffff80c0 	.word	0xffff80c0
 8003ff0:	00000402 	.word	0x00000402
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	785b      	ldrb	r3, [r3, #1]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d117      	bne.n	800402c <USB_ActivateEndpoint+0x6b0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2250      	movs	r2, #80	@ 0x50
 8004004:	5a9b      	ldrh	r3, [r3, r2]
 8004006:	b29b      	uxth	r3, r3
 8004008:	001a      	movs	r2, r3
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	189b      	adds	r3, r3, r2
 800400e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	00da      	lsls	r2, r3, #3
 8004016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	4ab9      	ldr	r2, [pc, #740]	@ (8004300 <USB_ActivateEndpoint+0x984>)
 800401c:	4694      	mov	ip, r2
 800401e:	4463      	add	r3, ip
 8004020:	653b      	str	r3, [r7, #80]	@ 0x50
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	b29a      	uxth	r2, r3
 8004028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d16a      	bne.n	800410e <USB_ActivateEndpoint+0x792>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2250      	movs	r2, #80	@ 0x50
 8004040:	5a9b      	ldrh	r3, [r3, r2]
 8004042:	b29b      	uxth	r3, r3
 8004044:	001a      	movs	r2, r3
 8004046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004048:	189b      	adds	r3, r3, r2
 800404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	00da      	lsls	r2, r3, #3
 8004052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004054:	18d3      	adds	r3, r2, r3
 8004056:	4aab      	ldr	r2, [pc, #684]	@ (8004304 <USB_ActivateEndpoint+0x988>)
 8004058:	4694      	mov	ip, r2
 800405a:	4463      	add	r3, ip
 800405c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	059b      	lsls	r3, r3, #22
 8004066:	0d9b      	lsrs	r3, r3, #22
 8004068:	b29a      	uxth	r2, r3
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d108      	bne.n	8004088 <USB_ActivateEndpoint+0x70c>
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	4aa2      	ldr	r2, [pc, #648]	@ (8004308 <USB_ActivateEndpoint+0x98c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	b29a      	uxth	r2, r3
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	e05c      	b.n	8004142 <USB_ActivateEndpoint+0x7c6>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b3e      	cmp	r3, #62	@ 0x3e
 800408e:	d81d      	bhi.n	80040cc <USB_ActivateEndpoint+0x750>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	2188      	movs	r1, #136	@ 0x88
 8004098:	187a      	adds	r2, r7, r1
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	d004      	beq.n	80040b0 <USB_ActivateEndpoint+0x734>
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	187a      	adds	r2, r7, r1
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	2388      	movs	r3, #136	@ 0x88
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e03a      	b.n	8004142 <USB_ActivateEndpoint+0x7c6>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	2188      	movs	r1, #136	@ 0x88
 80040d4:	187a      	adds	r2, r7, r1
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	221f      	movs	r2, #31
 80040de:	4013      	ands	r3, r2
 80040e0:	d104      	bne.n	80040ec <USB_ActivateEndpoint+0x770>
 80040e2:	187b      	adds	r3, r7, r1
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	187a      	adds	r2, r7, r1
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	2388      	movs	r3, #136	@ 0x88
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	029b      	lsls	r3, r3, #10
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4313      	orrs	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	4a81      	ldr	r2, [pc, #516]	@ (8004308 <USB_ActivateEndpoint+0x98c>)
 8004104:	4313      	orrs	r3, r2
 8004106:	b29a      	uxth	r2, r3
 8004108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410a:	801a      	strh	r2, [r3, #0]
 800410c:	e019      	b.n	8004142 <USB_ActivateEndpoint+0x7c6>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d115      	bne.n	8004142 <USB_ActivateEndpoint+0x7c6>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2250      	movs	r2, #80	@ 0x50
 800411a:	5a9b      	ldrh	r3, [r3, r2]
 800411c:	b29b      	uxth	r3, r3
 800411e:	001a      	movs	r2, r3
 8004120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004122:	189b      	adds	r3, r3, r2
 8004124:	647b      	str	r3, [r7, #68]	@ 0x44
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	00da      	lsls	r2, r3, #3
 800412c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412e:	18d3      	adds	r3, r2, r3
 8004130:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <USB_ActivateEndpoint+0x988>)
 8004132:	4694      	mov	ip, r2
 8004134:	4463      	add	r3, ip
 8004136:	643b      	str	r3, [r7, #64]	@ 0x40
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	b29a      	uxth	r2, r3
 800413e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004140:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29a      	uxth	r2, r3
 8004150:	2036      	movs	r0, #54	@ 0x36
 8004152:	183b      	adds	r3, r7, r0
 8004154:	496d      	ldr	r1, [pc, #436]	@ (800430c <USB_ActivateEndpoint+0x990>)
 8004156:	400a      	ands	r2, r1
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	183b      	adds	r3, r7, r0
 800415c:	183a      	adds	r2, r7, r0
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	2180      	movs	r1, #128	@ 0x80
 8004162:	0149      	lsls	r1, r1, #5
 8004164:	404a      	eors	r2, r1
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	183b      	adds	r3, r7, r0
 800416a:	183a      	adds	r2, r7, r0
 800416c:	8812      	ldrh	r2, [r2, #0]
 800416e:	2180      	movs	r1, #128	@ 0x80
 8004170:	0189      	lsls	r1, r1, #6
 8004172:	404a      	eors	r2, r1
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	18d3      	adds	r3, r2, r3
 8004180:	183a      	adds	r2, r7, r0
 8004182:	8812      	ldrh	r2, [r2, #0]
 8004184:	4962      	ldr	r1, [pc, #392]	@ (8004310 <USB_ActivateEndpoint+0x994>)
 8004186:	430a      	orrs	r2, r1
 8004188:	b292      	uxth	r2, r2
 800418a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	18d3      	adds	r3, r2, r3
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29a      	uxth	r2, r3
 800419a:	2034      	movs	r0, #52	@ 0x34
 800419c:	183b      	adds	r3, r7, r0
 800419e:	495d      	ldr	r1, [pc, #372]	@ (8004314 <USB_ActivateEndpoint+0x998>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	18d3      	adds	r3, r2, r3
 80041ae:	183a      	adds	r2, r7, r0
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	4957      	ldr	r1, [pc, #348]	@ (8004310 <USB_ActivateEndpoint+0x994>)
 80041b4:	430a      	orrs	r2, r1
 80041b6:	b292      	uxth	r2, r2
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	e09a      	b.n	80042f2 <USB_ActivateEndpoint+0x976>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	18d2      	adds	r2, r2, r3
 80041c6:	216e      	movs	r1, #110	@ 0x6e
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	8812      	ldrh	r2, [r2, #0]
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	187b      	adds	r3, r7, r1
 80041d0:	881a      	ldrh	r2, [r3, #0]
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	01db      	lsls	r3, r3, #7
 80041d6:	4013      	ands	r3, r2
 80041d8:	d016      	beq.n	8004208 <USB_ActivateEndpoint+0x88c>
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	18d3      	adds	r3, r2, r3
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	206c      	movs	r0, #108	@ 0x6c
 80041ea:	183b      	adds	r3, r7, r0
 80041ec:	494a      	ldr	r1, [pc, #296]	@ (8004318 <USB_ActivateEndpoint+0x99c>)
 80041ee:	400a      	ands	r2, r1
 80041f0:	801a      	strh	r2, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	183a      	adds	r2, r7, r0
 80041fe:	8812      	ldrh	r2, [r2, #0]
 8004200:	4946      	ldr	r1, [pc, #280]	@ (800431c <USB_ActivateEndpoint+0x9a0>)
 8004202:	430a      	orrs	r2, r1
 8004204:	b292      	uxth	r2, r2
 8004206:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	18d2      	adds	r2, r2, r3
 8004212:	216a      	movs	r1, #106	@ 0x6a
 8004214:	187b      	adds	r3, r7, r1
 8004216:	8812      	ldrh	r2, [r2, #0]
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	187b      	adds	r3, r7, r1
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	2240      	movs	r2, #64	@ 0x40
 8004220:	4013      	ands	r3, r2
 8004222:	d016      	beq.n	8004252 <USB_ActivateEndpoint+0x8d6>
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	18d3      	adds	r3, r2, r3
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29a      	uxth	r2, r3
 8004232:	2068      	movs	r0, #104	@ 0x68
 8004234:	183b      	adds	r3, r7, r0
 8004236:	4938      	ldr	r1, [pc, #224]	@ (8004318 <USB_ActivateEndpoint+0x99c>)
 8004238:	400a      	ands	r2, r1
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	183a      	adds	r2, r7, r0
 8004248:	8812      	ldrh	r2, [r2, #0]
 800424a:	4935      	ldr	r1, [pc, #212]	@ (8004320 <USB_ActivateEndpoint+0x9a4>)
 800424c:	430a      	orrs	r2, r1
 800424e:	b292      	uxth	r2, r2
 8004250:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	78db      	ldrb	r3, [r3, #3]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d01d      	beq.n	8004296 <USB_ActivateEndpoint+0x91a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	18d3      	adds	r3, r2, r3
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29a      	uxth	r2, r3
 8004268:	2064      	movs	r0, #100	@ 0x64
 800426a:	183b      	adds	r3, r7, r0
 800426c:	4929      	ldr	r1, [pc, #164]	@ (8004314 <USB_ActivateEndpoint+0x998>)
 800426e:	400a      	ands	r2, r1
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	183b      	adds	r3, r7, r0
 8004274:	183a      	adds	r2, r7, r0
 8004276:	8812      	ldrh	r2, [r2, #0]
 8004278:	2120      	movs	r1, #32
 800427a:	404a      	eors	r2, r1
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	18d3      	adds	r3, r2, r3
 8004288:	183a      	adds	r2, r7, r0
 800428a:	8812      	ldrh	r2, [r2, #0]
 800428c:	4920      	ldr	r1, [pc, #128]	@ (8004310 <USB_ActivateEndpoint+0x994>)
 800428e:	430a      	orrs	r2, r1
 8004290:	b292      	uxth	r2, r2
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	e016      	b.n	80042c4 <USB_ActivateEndpoint+0x948>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	18d3      	adds	r3, r2, r3
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	2066      	movs	r0, #102	@ 0x66
 80042a6:	183b      	adds	r3, r7, r0
 80042a8:	491a      	ldr	r1, [pc, #104]	@ (8004314 <USB_ActivateEndpoint+0x998>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	18d3      	adds	r3, r2, r3
 80042b8:	183a      	adds	r2, r7, r0
 80042ba:	8812      	ldrh	r2, [r2, #0]
 80042bc:	4914      	ldr	r1, [pc, #80]	@ (8004310 <USB_ActivateEndpoint+0x994>)
 80042be:	430a      	orrs	r2, r1
 80042c0:	b292      	uxth	r2, r2
 80042c2:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	2062      	movs	r0, #98	@ 0x62
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	490d      	ldr	r1, [pc, #52]	@ (800430c <USB_ActivateEndpoint+0x990>)
 80042d8:	400a      	ands	r2, r1
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	183a      	adds	r2, r7, r0
 80042e8:	8812      	ldrh	r2, [r2, #0]
 80042ea:	4909      	ldr	r1, [pc, #36]	@ (8004310 <USB_ActivateEndpoint+0x994>)
 80042ec:	430a      	orrs	r2, r1
 80042ee:	b292      	uxth	r2, r2
 80042f0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80042f2:	2397      	movs	r3, #151	@ 0x97
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	781b      	ldrb	r3, [r3, #0]
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b026      	add	sp, #152	@ 0x98
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	00000402 	.word	0x00000402
 8004304:	00000406 	.word	0x00000406
 8004308:	ffff8000 	.word	0xffff8000
 800430c:	ffffbf8f 	.word	0xffffbf8f
 8004310:	ffff8080 	.word	0xffff8080
 8004314:	ffff8fbf 	.word	0xffff8fbf
 8004318:	ffff8f8f 	.word	0xffff8f8f
 800431c:	ffffc080 	.word	0xffffc080
 8004320:	ffff80c0 	.word	0xffff80c0

08004324 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	@ 0x30
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	7b1b      	ldrb	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d000      	beq.n	8004338 <USB_DeactivateEndpoint+0x14>
 8004336:	e07e      	b.n	8004436 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d03c      	beq.n	80043ba <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	18d2      	adds	r2, r2, r3
 800434a:	210c      	movs	r1, #12
 800434c:	187b      	adds	r3, r7, r1
 800434e:	8812      	ldrh	r2, [r2, #0]
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	187b      	adds	r3, r7, r1
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	2240      	movs	r2, #64	@ 0x40
 8004358:	4013      	ands	r3, r2
 800435a:	d016      	beq.n	800438a <USB_DeactivateEndpoint+0x66>
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	18d3      	adds	r3, r2, r3
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29a      	uxth	r2, r3
 800436a:	200a      	movs	r0, #10
 800436c:	183b      	adds	r3, r7, r0
 800436e:	49c7      	ldr	r1, [pc, #796]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 8004370:	400a      	ands	r2, r1
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	18d3      	adds	r3, r2, r3
 800437e:	183a      	adds	r2, r7, r0
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	49c3      	ldr	r1, [pc, #780]	@ (8004690 <USB_DeactivateEndpoint+0x36c>)
 8004384:	430a      	orrs	r2, r1
 8004386:	b292      	uxth	r2, r2
 8004388:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	18d3      	adds	r3, r2, r3
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29a      	uxth	r2, r3
 8004398:	2008      	movs	r0, #8
 800439a:	183b      	adds	r3, r7, r0
 800439c:	49bd      	ldr	r1, [pc, #756]	@ (8004694 <USB_DeactivateEndpoint+0x370>)
 800439e:	400a      	ands	r2, r1
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	18d3      	adds	r3, r2, r3
 80043ac:	183a      	adds	r2, r7, r0
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	49b9      	ldr	r1, [pc, #740]	@ (8004698 <USB_DeactivateEndpoint+0x374>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	b292      	uxth	r2, r2
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	e163      	b.n	8004682 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	18d2      	adds	r2, r2, r3
 80043c4:	2112      	movs	r1, #18
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	@ 0x80
 80043d2:	01db      	lsls	r3, r3, #7
 80043d4:	4013      	ands	r3, r2
 80043d6:	d016      	beq.n	8004406 <USB_DeactivateEndpoint+0xe2>
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	18d3      	adds	r3, r2, r3
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	2010      	movs	r0, #16
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	49a8      	ldr	r1, [pc, #672]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	183a      	adds	r2, r7, r0
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	49a7      	ldr	r1, [pc, #668]	@ (800469c <USB_DeactivateEndpoint+0x378>)
 8004400:	430a      	orrs	r2, r1
 8004402:	b292      	uxth	r2, r2
 8004404:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29a      	uxth	r2, r3
 8004414:	200e      	movs	r0, #14
 8004416:	183b      	adds	r3, r7, r0
 8004418:	49a1      	ldr	r1, [pc, #644]	@ (80046a0 <USB_DeactivateEndpoint+0x37c>)
 800441a:	400a      	ands	r2, r1
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	18d3      	adds	r3, r2, r3
 8004428:	183a      	adds	r2, r7, r0
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	499a      	ldr	r1, [pc, #616]	@ (8004698 <USB_DeactivateEndpoint+0x374>)
 800442e:	430a      	orrs	r2, r1
 8004430:	b292      	uxth	r2, r2
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	e125      	b.n	8004682 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d000      	beq.n	8004440 <USB_DeactivateEndpoint+0x11c>
 800443e:	e090      	b.n	8004562 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	18d2      	adds	r2, r2, r3
 800444a:	2120      	movs	r1, #32
 800444c:	187b      	adds	r3, r7, r1
 800444e:	8812      	ldrh	r2, [r2, #0]
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	187b      	adds	r3, r7, r1
 8004454:	881a      	ldrh	r2, [r3, #0]
 8004456:	2380      	movs	r3, #128	@ 0x80
 8004458:	01db      	lsls	r3, r3, #7
 800445a:	4013      	ands	r3, r2
 800445c:	d016      	beq.n	800448c <USB_DeactivateEndpoint+0x168>
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	18d3      	adds	r3, r2, r3
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29a      	uxth	r2, r3
 800446c:	201e      	movs	r0, #30
 800446e:	183b      	adds	r3, r7, r0
 8004470:	4986      	ldr	r1, [pc, #536]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 8004472:	400a      	ands	r2, r1
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	18d3      	adds	r3, r2, r3
 8004480:	183a      	adds	r2, r7, r0
 8004482:	8812      	ldrh	r2, [r2, #0]
 8004484:	4985      	ldr	r1, [pc, #532]	@ (800469c <USB_DeactivateEndpoint+0x378>)
 8004486:	430a      	orrs	r2, r1
 8004488:	b292      	uxth	r2, r2
 800448a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	18d2      	adds	r2, r2, r3
 8004496:	211c      	movs	r1, #28
 8004498:	187b      	adds	r3, r7, r1
 800449a:	8812      	ldrh	r2, [r2, #0]
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	2240      	movs	r2, #64	@ 0x40
 80044a4:	4013      	ands	r3, r2
 80044a6:	d016      	beq.n	80044d6 <USB_DeactivateEndpoint+0x1b2>
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	18d3      	adds	r3, r2, r3
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	201a      	movs	r0, #26
 80044b8:	183b      	adds	r3, r7, r0
 80044ba:	4974      	ldr	r1, [pc, #464]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 80044bc:	400a      	ands	r2, r1
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	18d3      	adds	r3, r2, r3
 80044ca:	183a      	adds	r2, r7, r0
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	4970      	ldr	r1, [pc, #448]	@ (8004690 <USB_DeactivateEndpoint+0x36c>)
 80044d0:	430a      	orrs	r2, r1
 80044d2:	b292      	uxth	r2, r2
 80044d4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	18d3      	adds	r3, r2, r3
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	2018      	movs	r0, #24
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	4968      	ldr	r1, [pc, #416]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 80044ea:	400a      	ands	r2, r1
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	18d3      	adds	r3, r2, r3
 80044f8:	183a      	adds	r2, r7, r0
 80044fa:	8812      	ldrh	r2, [r2, #0]
 80044fc:	4964      	ldr	r1, [pc, #400]	@ (8004690 <USB_DeactivateEndpoint+0x36c>)
 80044fe:	430a      	orrs	r2, r1
 8004500:	b292      	uxth	r2, r2
 8004502:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29a      	uxth	r2, r3
 8004512:	2016      	movs	r0, #22
 8004514:	183b      	adds	r3, r7, r0
 8004516:	4962      	ldr	r1, [pc, #392]	@ (80046a0 <USB_DeactivateEndpoint+0x37c>)
 8004518:	400a      	ands	r2, r1
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	183a      	adds	r2, r7, r0
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	495b      	ldr	r1, [pc, #364]	@ (8004698 <USB_DeactivateEndpoint+0x374>)
 800452c:	430a      	orrs	r2, r1
 800452e:	b292      	uxth	r2, r2
 8004530:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	18d3      	adds	r3, r2, r3
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29a      	uxth	r2, r3
 8004540:	2014      	movs	r0, #20
 8004542:	183b      	adds	r3, r7, r0
 8004544:	4953      	ldr	r1, [pc, #332]	@ (8004694 <USB_DeactivateEndpoint+0x370>)
 8004546:	400a      	ands	r2, r1
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	183a      	adds	r2, r7, r0
 8004556:	8812      	ldrh	r2, [r2, #0]
 8004558:	494f      	ldr	r1, [pc, #316]	@ (8004698 <USB_DeactivateEndpoint+0x374>)
 800455a:	430a      	orrs	r2, r1
 800455c:	b292      	uxth	r2, r2
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	e08f      	b.n	8004682 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	18d2      	adds	r2, r2, r3
 800456c:	212e      	movs	r1, #46	@ 0x2e
 800456e:	187b      	adds	r3, r7, r1
 8004570:	8812      	ldrh	r2, [r2, #0]
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	187b      	adds	r3, r7, r1
 8004576:	881a      	ldrh	r2, [r3, #0]
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	4013      	ands	r3, r2
 800457e:	d016      	beq.n	80045ae <USB_DeactivateEndpoint+0x28a>
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	18d3      	adds	r3, r2, r3
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29a      	uxth	r2, r3
 800458e:	202c      	movs	r0, #44	@ 0x2c
 8004590:	183b      	adds	r3, r7, r0
 8004592:	493e      	ldr	r1, [pc, #248]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 8004594:	400a      	ands	r2, r1
 8004596:	801a      	strh	r2, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	18d3      	adds	r3, r2, r3
 80045a2:	183a      	adds	r2, r7, r0
 80045a4:	8812      	ldrh	r2, [r2, #0]
 80045a6:	493d      	ldr	r1, [pc, #244]	@ (800469c <USB_DeactivateEndpoint+0x378>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	b292      	uxth	r2, r2
 80045ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	18d2      	adds	r2, r2, r3
 80045b8:	212a      	movs	r1, #42	@ 0x2a
 80045ba:	187b      	adds	r3, r7, r1
 80045bc:	8812      	ldrh	r2, [r2, #0]
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	2240      	movs	r2, #64	@ 0x40
 80045c6:	4013      	ands	r3, r2
 80045c8:	d016      	beq.n	80045f8 <USB_DeactivateEndpoint+0x2d4>
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	2028      	movs	r0, #40	@ 0x28
 80045da:	183b      	adds	r3, r7, r0
 80045dc:	492b      	ldr	r1, [pc, #172]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 80045de:	400a      	ands	r2, r1
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	18d3      	adds	r3, r2, r3
 80045ec:	183a      	adds	r2, r7, r0
 80045ee:	8812      	ldrh	r2, [r2, #0]
 80045f0:	4927      	ldr	r1, [pc, #156]	@ (8004690 <USB_DeactivateEndpoint+0x36c>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	b292      	uxth	r2, r2
 80045f6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29a      	uxth	r2, r3
 8004606:	2026      	movs	r0, #38	@ 0x26
 8004608:	183b      	adds	r3, r7, r0
 800460a:	4920      	ldr	r1, [pc, #128]	@ (800468c <USB_DeactivateEndpoint+0x368>)
 800460c:	400a      	ands	r2, r1
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	183a      	adds	r2, r7, r0
 800461c:	8812      	ldrh	r2, [r2, #0]
 800461e:	491f      	ldr	r1, [pc, #124]	@ (800469c <USB_DeactivateEndpoint+0x378>)
 8004620:	430a      	orrs	r2, r1
 8004622:	b292      	uxth	r2, r2
 8004624:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29a      	uxth	r2, r3
 8004634:	2024      	movs	r0, #36	@ 0x24
 8004636:	183b      	adds	r3, r7, r0
 8004638:	4916      	ldr	r1, [pc, #88]	@ (8004694 <USB_DeactivateEndpoint+0x370>)
 800463a:	400a      	ands	r2, r1
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	18d3      	adds	r3, r2, r3
 8004648:	183a      	adds	r2, r7, r0
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	4912      	ldr	r1, [pc, #72]	@ (8004698 <USB_DeactivateEndpoint+0x374>)
 800464e:	430a      	orrs	r2, r1
 8004650:	b292      	uxth	r2, r2
 8004652:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	18d3      	adds	r3, r2, r3
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29a      	uxth	r2, r3
 8004662:	2022      	movs	r0, #34	@ 0x22
 8004664:	183b      	adds	r3, r7, r0
 8004666:	490e      	ldr	r1, [pc, #56]	@ (80046a0 <USB_DeactivateEndpoint+0x37c>)
 8004668:	400a      	ands	r2, r1
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	183a      	adds	r2, r7, r0
 8004678:	8812      	ldrh	r2, [r2, #0]
 800467a:	4907      	ldr	r1, [pc, #28]	@ (8004698 <USB_DeactivateEndpoint+0x374>)
 800467c:	430a      	orrs	r2, r1
 800467e:	b292      	uxth	r2, r2
 8004680:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	b00c      	add	sp, #48	@ 0x30
 800468a:	bd80      	pop	{r7, pc}
 800468c:	ffff8f8f 	.word	0xffff8f8f
 8004690:	ffff80c0 	.word	0xffff80c0
 8004694:	ffff8fbf 	.word	0xffff8fbf
 8004698:	ffff8080 	.word	0xffff8080
 800469c:	ffffc080 	.word	0xffffc080
 80046a0:	ffffbf8f 	.word	0xffffbf8f

080046a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046a4:	b5b0      	push	{r4, r5, r7, lr}
 80046a6:	b0ac      	sub	sp, #176	@ 0xb0
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d001      	beq.n	80046ba <USB_EPStartXfer+0x16>
 80046b6:	f000 fd07 	bl	80050c8 <USB_EPStartXfer+0xa24>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d905      	bls.n	80046d2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	22ac      	movs	r2, #172	@ 0xac
 80046cc:	18ba      	adds	r2, r7, r2
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e004      	b.n	80046dc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	22ac      	movs	r2, #172	@ 0xac
 80046d8:	18ba      	adds	r2, r7, r2
 80046da:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	7b1b      	ldrb	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d124      	bne.n	800472e <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6959      	ldr	r1, [r3, #20]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	88da      	ldrh	r2, [r3, #6]
 80046ec:	24ac      	movs	r4, #172	@ 0xac
 80046ee:	193b      	adds	r3, r7, r4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fef5 	bl	80054e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2250      	movs	r2, #80	@ 0x50
 8004702:	5a9b      	ldrh	r3, [r3, r2]
 8004704:	b29b      	uxth	r3, r3
 8004706:	001a      	movs	r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	189b      	adds	r3, r3, r2
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	00da      	lsls	r2, r3, #3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	18d3      	adds	r3, r2, r3
 8004718:	4acf      	ldr	r2, [pc, #828]	@ (8004a58 <USB_EPStartXfer+0x3b4>)
 800471a:	4694      	mov	ip, r2
 800471c:	4463      	add	r3, ip
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	193b      	adds	r3, r7, r4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	f000 fca9 	bl	8005080 <USB_EPStartXfer+0x9dc>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d000      	beq.n	8004738 <USB_EPStartXfer+0x94>
 8004736:	e347      	b.n	8004dc8 <USB_EPStartXfer+0x724>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	429a      	cmp	r2, r3
 8004742:	d800      	bhi.n	8004746 <USB_EPStartXfer+0xa2>
 8004744:	e2f0      	b.n	8004d28 <USB_EPStartXfer+0x684>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	18d3      	adds	r3, r2, r3
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29a      	uxth	r2, r3
 8004754:	2056      	movs	r0, #86	@ 0x56
 8004756:	183b      	adds	r3, r7, r0
 8004758:	49c0      	ldr	r1, [pc, #768]	@ (8004a5c <USB_EPStartXfer+0x3b8>)
 800475a:	400a      	ands	r2, r1
 800475c:	801a      	strh	r2, [r3, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	18d3      	adds	r3, r2, r3
 8004768:	183a      	adds	r2, r7, r0
 800476a:	8812      	ldrh	r2, [r2, #0]
 800476c:	49bc      	ldr	r1, [pc, #752]	@ (8004a60 <USB_EPStartXfer+0x3bc>)
 800476e:	430a      	orrs	r2, r1
 8004770:	b292      	uxth	r2, r2
 8004772:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	21ac      	movs	r1, #172	@ 0xac
 800477a:	187b      	adds	r3, r7, r1
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	18d3      	adds	r3, r2, r3
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	001a      	movs	r2, r3
 8004794:	2340      	movs	r3, #64	@ 0x40
 8004796:	4013      	ands	r3, r2
 8004798:	d100      	bne.n	800479c <USB_EPStartXfer+0xf8>
 800479a:	e167      	b.n	8004a6c <USB_EPStartXfer+0x3c8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	633b      	str	r3, [r7, #48]	@ 0x30
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d16c      	bne.n	8004882 <USB_EPStartXfer+0x1de>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2250      	movs	r2, #80	@ 0x50
 80047b0:	5a9b      	ldrh	r3, [r3, r2]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	001a      	movs	r2, r3
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	189b      	adds	r3, r3, r2
 80047ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	00da      	lsls	r2, r3, #3
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	4aa7      	ldr	r2, [pc, #668]	@ (8004a64 <USB_EPStartXfer+0x3c0>)
 80047c8:	4694      	mov	ip, r2
 80047ca:	4463      	add	r3, ip
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	059b      	lsls	r3, r3, #22
 80047d6:	0d9b      	lsrs	r3, r3, #22
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d108      	bne.n	80047f8 <USB_EPStartXfer+0x154>
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	4a9e      	ldr	r2, [pc, #632]	@ (8004a68 <USB_EPStartXfer+0x3c4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e05f      	b.n	80048b8 <USB_EPStartXfer+0x214>
 80047f8:	22ac      	movs	r2, #172	@ 0xac
 80047fa:	18bb      	adds	r3, r7, r2
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004800:	d81d      	bhi.n	800483e <USB_EPStartXfer+0x19a>
 8004802:	18bb      	adds	r3, r7, r2
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	21a8      	movs	r1, #168	@ 0xa8
 800480a:	1878      	adds	r0, r7, r1
 800480c:	6003      	str	r3, [r0, #0]
 800480e:	18bb      	adds	r3, r7, r2
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	d004      	beq.n	8004822 <USB_EPStartXfer+0x17e>
 8004818:	187b      	adds	r3, r7, r1
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	187a      	adds	r2, r7, r1
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29a      	uxth	r2, r3
 8004828:	23a8      	movs	r3, #168	@ 0xa8
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	b29b      	uxth	r3, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	b29a      	uxth	r2, r3
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	e03c      	b.n	80048b8 <USB_EPStartXfer+0x214>
 800483e:	22ac      	movs	r2, #172	@ 0xac
 8004840:	18bb      	adds	r3, r7, r2
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	21a8      	movs	r1, #168	@ 0xa8
 8004848:	1878      	adds	r0, r7, r1
 800484a:	6003      	str	r3, [r0, #0]
 800484c:	18bb      	adds	r3, r7, r2
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	221f      	movs	r2, #31
 8004852:	4013      	ands	r3, r2
 8004854:	d104      	bne.n	8004860 <USB_EPStartXfer+0x1bc>
 8004856:	187b      	adds	r3, r7, r1
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3b01      	subs	r3, #1
 800485c:	187a      	adds	r2, r7, r1
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29a      	uxth	r2, r3
 8004866:	23a8      	movs	r3, #168	@ 0xa8
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	029b      	lsls	r3, r3, #10
 8004870:	b29b      	uxth	r3, r3
 8004872:	4313      	orrs	r3, r2
 8004874:	b29b      	uxth	r3, r3
 8004876:	4a7c      	ldr	r2, [pc, #496]	@ (8004a68 <USB_EPStartXfer+0x3c4>)
 8004878:	4313      	orrs	r3, r2
 800487a:	b29a      	uxth	r2, r3
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	e01a      	b.n	80048b8 <USB_EPStartXfer+0x214>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d116      	bne.n	80048b8 <USB_EPStartXfer+0x214>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2250      	movs	r2, #80	@ 0x50
 800488e:	5a9b      	ldrh	r3, [r3, r2]
 8004890:	b29b      	uxth	r3, r3
 8004892:	001a      	movs	r2, r3
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	189b      	adds	r3, r3, r2
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	00da      	lsls	r2, r3, #3
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	18d3      	adds	r3, r2, r3
 80048a4:	4a6f      	ldr	r2, [pc, #444]	@ (8004a64 <USB_EPStartXfer+0x3c0>)
 80048a6:	4694      	mov	ip, r2
 80048a8:	4463      	add	r3, ip
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ac:	23ac      	movs	r3, #172	@ 0xac
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80048b8:	2076      	movs	r0, #118	@ 0x76
 80048ba:	183b      	adds	r3, r7, r0
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	8952      	ldrh	r2, [r2, #10]
 80048c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6959      	ldr	r1, [r3, #20]
 80048c6:	25ac      	movs	r5, #172	@ 0xac
 80048c8:	197b      	adds	r3, r7, r5
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	b29c      	uxth	r4, r3
 80048ce:	183b      	adds	r3, r7, r0
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	0023      	movs	r3, r4
 80048d6:	f000 fe05 	bl	80054e4 <USB_WritePMA>
            ep->xfer_buff += len;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	197b      	adds	r3, r7, r5
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	18d2      	adds	r2, r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d907      	bls.n	8004904 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	197b      	adds	r3, r7, r5
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	621a      	str	r2, [r3, #32]
 8004902:	e007      	b.n	8004914 <USB_EPStartXfer+0x270>
            }
            else
            {
              len = ep->xfer_len_db;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	22ac      	movs	r2, #172	@ 0xac
 800490a:	18ba      	adds	r2, r7, r2
 800490c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d16d      	bne.n	80049f8 <USB_EPStartXfer+0x354>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2250      	movs	r2, #80	@ 0x50
 8004924:	5a9b      	ldrh	r3, [r3, r2]
 8004926:	b29b      	uxth	r3, r3
 8004928:	001a      	movs	r2, r3
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	189b      	adds	r3, r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	00da      	lsls	r2, r3, #3
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	4a47      	ldr	r2, [pc, #284]	@ (8004a58 <USB_EPStartXfer+0x3b4>)
 800493c:	4694      	mov	ip, r2
 800493e:	4463      	add	r3, ip
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	0d9b      	lsrs	r3, r3, #22
 800494c:	b29a      	uxth	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	23ac      	movs	r3, #172	@ 0xac
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <USB_EPStartXfer+0x2ca>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	4a41      	ldr	r2, [pc, #260]	@ (8004a68 <USB_EPStartXfer+0x3c4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	b29a      	uxth	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	e061      	b.n	8004a32 <USB_EPStartXfer+0x38e>
 800496e:	22ac      	movs	r2, #172	@ 0xac
 8004970:	18bb      	adds	r3, r7, r2
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b3e      	cmp	r3, #62	@ 0x3e
 8004976:	d81d      	bhi.n	80049b4 <USB_EPStartXfer+0x310>
 8004978:	18bb      	adds	r3, r7, r2
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	21a4      	movs	r1, #164	@ 0xa4
 8004980:	1878      	adds	r0, r7, r1
 8004982:	6003      	str	r3, [r0, #0]
 8004984:	18bb      	adds	r3, r7, r2
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	4013      	ands	r3, r2
 800498c:	d004      	beq.n	8004998 <USB_EPStartXfer+0x2f4>
 800498e:	187b      	adds	r3, r7, r1
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3301      	adds	r3, #1
 8004994:	187a      	adds	r2, r7, r1
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29a      	uxth	r2, r3
 800499e:	23a4      	movs	r3, #164	@ 0xa4
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	029b      	lsls	r3, r3, #10
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e03e      	b.n	8004a32 <USB_EPStartXfer+0x38e>
 80049b4:	22ac      	movs	r2, #172	@ 0xac
 80049b6:	18bb      	adds	r3, r7, r2
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	21a4      	movs	r1, #164	@ 0xa4
 80049be:	1878      	adds	r0, r7, r1
 80049c0:	6003      	str	r3, [r0, #0]
 80049c2:	18bb      	adds	r3, r7, r2
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	221f      	movs	r2, #31
 80049c8:	4013      	ands	r3, r2
 80049ca:	d104      	bne.n	80049d6 <USB_EPStartXfer+0x332>
 80049cc:	187b      	adds	r3, r7, r1
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	187a      	adds	r2, r7, r1
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	23a4      	movs	r3, #164	@ 0xa4
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004a68 <USB_EPStartXfer+0x3c4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e01c      	b.n	8004a32 <USB_EPStartXfer+0x38e>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d118      	bne.n	8004a32 <USB_EPStartXfer+0x38e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2250      	movs	r2, #80	@ 0x50
 8004a08:	5a9b      	ldrh	r3, [r3, r2]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	001a      	movs	r2, r3
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	00da      	lsls	r2, r3, #3
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	18d3      	adds	r3, r2, r3
 8004a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a58 <USB_EPStartXfer+0x3b4>)
 8004a20:	4694      	mov	ip, r2
 8004a22:	4463      	add	r3, ip
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	23ac      	movs	r3, #172	@ 0xac
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a32:	2076      	movs	r0, #118	@ 0x76
 8004a34:	183b      	adds	r3, r7, r0
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	8912      	ldrh	r2, [r2, #8]
 8004a3a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6959      	ldr	r1, [r3, #20]
 8004a40:	23ac      	movs	r3, #172	@ 0xac
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b29c      	uxth	r4, r3
 8004a48:	183b      	adds	r3, r7, r0
 8004a4a:	881a      	ldrh	r2, [r3, #0]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	0023      	movs	r3, r4
 8004a50:	f000 fd48 	bl	80054e4 <USB_WritePMA>
 8004a54:	e314      	b.n	8005080 <USB_EPStartXfer+0x9dc>
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	00000402 	.word	0x00000402
 8004a5c:	ffff8f8f 	.word	0xffff8f8f
 8004a60:	ffff8180 	.word	0xffff8180
 8004a64:	00000406 	.word	0x00000406
 8004a68:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d16d      	bne.n	8004b50 <USB_EPStartXfer+0x4ac>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2250      	movs	r2, #80	@ 0x50
 8004a7c:	5a9b      	ldrh	r3, [r3, r2]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	001a      	movs	r2, r3
 8004a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a84:	189b      	adds	r3, r3, r2
 8004a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	00da      	lsls	r2, r3, #3
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a90:	18d3      	adds	r3, r2, r3
 8004a92:	4ac8      	ldr	r2, [pc, #800]	@ (8004db4 <USB_EPStartXfer+0x710>)
 8004a94:	4694      	mov	ip, r2
 8004a96:	4463      	add	r3, ip
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	059b      	lsls	r3, r3, #22
 8004aa2:	0d9b      	lsrs	r3, r3, #22
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa8:	801a      	strh	r2, [r3, #0]
 8004aaa:	23ac      	movs	r3, #172	@ 0xac
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d108      	bne.n	8004ac6 <USB_EPStartXfer+0x422>
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4abf      	ldr	r2, [pc, #764]	@ (8004db8 <USB_EPStartXfer+0x714>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac2:	801a      	strh	r2, [r3, #0]
 8004ac4:	e061      	b.n	8004b8a <USB_EPStartXfer+0x4e6>
 8004ac6:	22ac      	movs	r2, #172	@ 0xac
 8004ac8:	18bb      	adds	r3, r7, r2
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ace:	d81d      	bhi.n	8004b0c <USB_EPStartXfer+0x468>
 8004ad0:	18bb      	adds	r3, r7, r2
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	21a0      	movs	r1, #160	@ 0xa0
 8004ad8:	1878      	adds	r0, r7, r1
 8004ada:	6003      	str	r3, [r0, #0]
 8004adc:	18bb      	adds	r3, r7, r2
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <USB_EPStartXfer+0x44c>
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	187a      	adds	r2, r7, r1
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	23a0      	movs	r3, #160	@ 0xa0
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	4313      	orrs	r3, r2
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	e03e      	b.n	8004b8a <USB_EPStartXfer+0x4e6>
 8004b0c:	22ac      	movs	r2, #172	@ 0xac
 8004b0e:	18bb      	adds	r3, r7, r2
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	21a0      	movs	r1, #160	@ 0xa0
 8004b16:	1878      	adds	r0, r7, r1
 8004b18:	6003      	str	r3, [r0, #0]
 8004b1a:	18bb      	adds	r3, r7, r2
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	221f      	movs	r2, #31
 8004b20:	4013      	ands	r3, r2
 8004b22:	d104      	bne.n	8004b2e <USB_EPStartXfer+0x48a>
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	187a      	adds	r2, r7, r1
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	23a0      	movs	r3, #160	@ 0xa0
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4a9c      	ldr	r2, [pc, #624]	@ (8004db8 <USB_EPStartXfer+0x714>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	e01c      	b.n	8004b8a <USB_EPStartXfer+0x4e6>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d118      	bne.n	8004b8a <USB_EPStartXfer+0x4e6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2250      	movs	r2, #80	@ 0x50
 8004b60:	5a9b      	ldrh	r3, [r3, r2]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	001a      	movs	r2, r3
 8004b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	00da      	lsls	r2, r3, #3
 8004b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b74:	18d3      	adds	r3, r2, r3
 8004b76:	4a8f      	ldr	r2, [pc, #572]	@ (8004db4 <USB_EPStartXfer+0x710>)
 8004b78:	4694      	mov	ip, r2
 8004b7a:	4463      	add	r3, ip
 8004b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b7e:	23ac      	movs	r3, #172	@ 0xac
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b8a:	2076      	movs	r0, #118	@ 0x76
 8004b8c:	183b      	adds	r3, r7, r0
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	8912      	ldrh	r2, [r2, #8]
 8004b92:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6959      	ldr	r1, [r3, #20]
 8004b98:	25ac      	movs	r5, #172	@ 0xac
 8004b9a:	197b      	adds	r3, r7, r5
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b29c      	uxth	r4, r3
 8004ba0:	183b      	adds	r3, r7, r0
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	0023      	movs	r3, r4
 8004ba8:	f000 fc9c 	bl	80054e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	197b      	adds	r3, r7, r5
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	18d2      	adds	r2, r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6a1a      	ldr	r2, [r3, #32]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d907      	bls.n	8004bd6 <USB_EPStartXfer+0x532>
            {
              ep->xfer_len_db -= len;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6a1a      	ldr	r2, [r3, #32]
 8004bca:	197b      	adds	r3, r7, r5
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1ad2      	subs	r2, r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	621a      	str	r2, [r3, #32]
 8004bd4:	e007      	b.n	8004be6 <USB_EPStartXfer+0x542>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	22ac      	movs	r2, #172	@ 0xac
 8004bdc:	18ba      	adds	r2, r7, r2
 8004bde:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d16d      	bne.n	8004cce <USB_EPStartXfer+0x62a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2250      	movs	r2, #80	@ 0x50
 8004bfa:	5a9b      	ldrh	r3, [r3, r2]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	001a      	movs	r2, r3
 8004c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	00da      	lsls	r2, r3, #3
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0e:	18d3      	adds	r3, r2, r3
 8004c10:	4a6a      	ldr	r2, [pc, #424]	@ (8004dbc <USB_EPStartXfer+0x718>)
 8004c12:	4694      	mov	ip, r2
 8004c14:	4463      	add	r3, ip
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	059b      	lsls	r3, r3, #22
 8004c20:	0d9b      	lsrs	r3, r3, #22
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	23ac      	movs	r3, #172	@ 0xac
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <USB_EPStartXfer+0x5a0>
 8004c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	4a5f      	ldr	r2, [pc, #380]	@ (8004db8 <USB_EPStartXfer+0x714>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	e05f      	b.n	8004d04 <USB_EPStartXfer+0x660>
 8004c44:	22ac      	movs	r2, #172	@ 0xac
 8004c46:	18bb      	adds	r3, r7, r2
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c4c:	d81d      	bhi.n	8004c8a <USB_EPStartXfer+0x5e6>
 8004c4e:	18bb      	adds	r3, r7, r2
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	219c      	movs	r1, #156	@ 0x9c
 8004c56:	1878      	adds	r0, r7, r1
 8004c58:	6003      	str	r3, [r0, #0]
 8004c5a:	18bb      	adds	r3, r7, r2
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4013      	ands	r3, r2
 8004c62:	d004      	beq.n	8004c6e <USB_EPStartXfer+0x5ca>
 8004c64:	187b      	adds	r3, r7, r1
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	187a      	adds	r2, r7, r1
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	239c      	movs	r3, #156	@ 0x9c
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	029b      	lsls	r3, r3, #10
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4313      	orrs	r3, r2
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	e03c      	b.n	8004d04 <USB_EPStartXfer+0x660>
 8004c8a:	22ac      	movs	r2, #172	@ 0xac
 8004c8c:	18bb      	adds	r3, r7, r2
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	219c      	movs	r1, #156	@ 0x9c
 8004c94:	1878      	adds	r0, r7, r1
 8004c96:	6003      	str	r3, [r0, #0]
 8004c98:	18bb      	adds	r3, r7, r2
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	221f      	movs	r2, #31
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d104      	bne.n	8004cac <USB_EPStartXfer+0x608>
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	187a      	adds	r2, r7, r1
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	239c      	movs	r3, #156	@ 0x9c
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	029b      	lsls	r3, r3, #10
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8004db8 <USB_EPStartXfer+0x714>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e01a      	b.n	8004d04 <USB_EPStartXfer+0x660>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d116      	bne.n	8004d04 <USB_EPStartXfer+0x660>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2250      	movs	r2, #80	@ 0x50
 8004cda:	5a9b      	ldrh	r3, [r3, r2]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	001a      	movs	r2, r3
 8004ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	00da      	lsls	r2, r3, #3
 8004cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cee:	18d3      	adds	r3, r2, r3
 8004cf0:	4a32      	ldr	r2, [pc, #200]	@ (8004dbc <USB_EPStartXfer+0x718>)
 8004cf2:	4694      	mov	ip, r2
 8004cf4:	4463      	add	r3, ip
 8004cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf8:	23ac      	movs	r3, #172	@ 0xac
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d04:	2076      	movs	r0, #118	@ 0x76
 8004d06:	183b      	adds	r3, r7, r0
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	8952      	ldrh	r2, [r2, #10]
 8004d0c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6959      	ldr	r1, [r3, #20]
 8004d12:	23ac      	movs	r3, #172	@ 0xac
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	b29c      	uxth	r4, r3
 8004d1a:	183b      	adds	r3, r7, r0
 8004d1c:	881a      	ldrh	r2, [r3, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	0023      	movs	r3, r4
 8004d22:	f000 fbdf 	bl	80054e4 <USB_WritePMA>
 8004d26:	e1ab      	b.n	8005080 <USB_EPStartXfer+0x9dc>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	20ac      	movs	r0, #172	@ 0xac
 8004d2e:	183a      	adds	r2, r7, r0
 8004d30:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	18d3      	adds	r3, r2, r3
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	2462      	movs	r4, #98	@ 0x62
 8004d42:	193b      	adds	r3, r7, r4
 8004d44:	491e      	ldr	r1, [pc, #120]	@ (8004dc0 <USB_EPStartXfer+0x71c>)
 8004d46:	400a      	ands	r2, r1
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	18d3      	adds	r3, r2, r3
 8004d54:	193a      	adds	r2, r7, r4
 8004d56:	8812      	ldrh	r2, [r2, #0]
 8004d58:	491a      	ldr	r1, [pc, #104]	@ (8004dc4 <USB_EPStartXfer+0x720>)
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2250      	movs	r2, #80	@ 0x50
 8004d68:	5a9b      	ldrh	r3, [r3, r2]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d70:	189b      	adds	r3, r3, r2
 8004d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	00da      	lsls	r2, r3, #3
 8004d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d7c:	18d3      	adds	r3, r2, r3
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004db4 <USB_EPStartXfer+0x710>)
 8004d80:	4694      	mov	ip, r2
 8004d82:	4463      	add	r3, ip
 8004d84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d86:	183b      	adds	r3, r7, r0
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d90:	2576      	movs	r5, #118	@ 0x76
 8004d92:	197b      	adds	r3, r7, r5
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	8912      	ldrh	r2, [r2, #8]
 8004d98:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6959      	ldr	r1, [r3, #20]
 8004d9e:	183b      	adds	r3, r7, r0
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	b29c      	uxth	r4, r3
 8004da4:	197b      	adds	r3, r7, r5
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	0023      	movs	r3, r4
 8004dac:	f000 fb9a 	bl	80054e4 <USB_WritePMA>
 8004db0:	e166      	b.n	8005080 <USB_EPStartXfer+0x9dc>
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	00000402 	.word	0x00000402
 8004db8:	ffff8000 	.word	0xffff8000
 8004dbc:	00000406 	.word	0x00000406
 8004dc0:	ffff8e8f 	.word	0xffff8e8f
 8004dc4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	21ac      	movs	r1, #172	@ 0xac
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	001a      	movs	r2, r3
 8004de8:	2340      	movs	r3, #64	@ 0x40
 8004dea:	4013      	ands	r3, r2
 8004dec:	d100      	bne.n	8004df0 <USB_EPStartXfer+0x74c>
 8004dee:	e09f      	b.n	8004f30 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d16c      	bne.n	8004ed6 <USB_EPStartXfer+0x832>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2250      	movs	r2, #80	@ 0x50
 8004e04:	5a9b      	ldrh	r3, [r3, r2]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	001a      	movs	r2, r3
 8004e0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	00da      	lsls	r2, r3, #3
 8004e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e18:	18d3      	adds	r3, r2, r3
 8004e1a:	4ad2      	ldr	r2, [pc, #840]	@ (8005164 <USB_EPStartXfer+0xac0>)
 8004e1c:	4694      	mov	ip, r2
 8004e1e:	4463      	add	r3, ip
 8004e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	059b      	lsls	r3, r3, #22
 8004e2a:	0d9b      	lsrs	r3, r3, #22
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d108      	bne.n	8004e4c <USB_EPStartXfer+0x7a8>
 8004e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4ac9      	ldr	r2, [pc, #804]	@ (8005168 <USB_EPStartXfer+0xac4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	e05f      	b.n	8004f0c <USB_EPStartXfer+0x868>
 8004e4c:	22ac      	movs	r2, #172	@ 0xac
 8004e4e:	18bb      	adds	r3, r7, r2
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e54:	d81d      	bhi.n	8004e92 <USB_EPStartXfer+0x7ee>
 8004e56:	18bb      	adds	r3, r7, r2
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	2198      	movs	r1, #152	@ 0x98
 8004e5e:	1878      	adds	r0, r7, r1
 8004e60:	6003      	str	r3, [r0, #0]
 8004e62:	18bb      	adds	r3, r7, r2
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2201      	movs	r2, #1
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <USB_EPStartXfer+0x7d2>
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	187a      	adds	r2, r7, r1
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	2398      	movs	r3, #152	@ 0x98
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	029b      	lsls	r3, r3, #10
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e03c      	b.n	8004f0c <USB_EPStartXfer+0x868>
 8004e92:	22ac      	movs	r2, #172	@ 0xac
 8004e94:	18bb      	adds	r3, r7, r2
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	2198      	movs	r1, #152	@ 0x98
 8004e9c:	1878      	adds	r0, r7, r1
 8004e9e:	6003      	str	r3, [r0, #0]
 8004ea0:	18bb      	adds	r3, r7, r2
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	221f      	movs	r2, #31
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d104      	bne.n	8004eb4 <USB_EPStartXfer+0x810>
 8004eaa:	187b      	adds	r3, r7, r1
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	187a      	adds	r2, r7, r1
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	2398      	movs	r3, #152	@ 0x98
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	029b      	lsls	r3, r3, #10
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4aa7      	ldr	r2, [pc, #668]	@ (8005168 <USB_EPStartXfer+0xac4>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e01a      	b.n	8004f0c <USB_EPStartXfer+0x868>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d116      	bne.n	8004f0c <USB_EPStartXfer+0x868>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2250      	movs	r2, #80	@ 0x50
 8004ee2:	5a9b      	ldrh	r3, [r3, r2]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	001a      	movs	r2, r3
 8004ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	00da      	lsls	r2, r3, #3
 8004ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ef6:	18d3      	adds	r3, r2, r3
 8004ef8:	4a9a      	ldr	r2, [pc, #616]	@ (8005164 <USB_EPStartXfer+0xac0>)
 8004efa:	4694      	mov	ip, r2
 8004efc:	4463      	add	r3, ip
 8004efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f00:	23ac      	movs	r3, #172	@ 0xac
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004f0c:	2076      	movs	r0, #118	@ 0x76
 8004f0e:	183b      	adds	r3, r7, r0
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	8952      	ldrh	r2, [r2, #10]
 8004f14:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6959      	ldr	r1, [r3, #20]
 8004f1a:	23ac      	movs	r3, #172	@ 0xac
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	b29c      	uxth	r4, r3
 8004f22:	183b      	adds	r3, r7, r0
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	0023      	movs	r3, r4
 8004f2a:	f000 fadb 	bl	80054e4 <USB_WritePMA>
 8004f2e:	e0a7      	b.n	8005080 <USB_EPStartXfer+0x9dc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d16d      	bne.n	8005014 <USB_EPStartXfer+0x970>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2250      	movs	r2, #80	@ 0x50
 8004f40:	5a9b      	ldrh	r3, [r3, r2]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	001a      	movs	r2, r3
 8004f46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	00da      	lsls	r2, r3, #3
 8004f52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f54:	18d3      	adds	r3, r2, r3
 8004f56:	4a85      	ldr	r2, [pc, #532]	@ (800516c <USB_EPStartXfer+0xac8>)
 8004f58:	4694      	mov	ip, r2
 8004f5a:	4463      	add	r3, ip
 8004f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	059b      	lsls	r3, r3, #22
 8004f66:	0d9b      	lsrs	r3, r3, #22
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	23ac      	movs	r3, #172	@ 0xac
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d108      	bne.n	8004f8a <USB_EPStartXfer+0x8e6>
 8004f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	4a7a      	ldr	r2, [pc, #488]	@ (8005168 <USB_EPStartXfer+0xac4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	e069      	b.n	800505e <USB_EPStartXfer+0x9ba>
 8004f8a:	22ac      	movs	r2, #172	@ 0xac
 8004f8c:	18bb      	adds	r3, r7, r2
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f92:	d81d      	bhi.n	8004fd0 <USB_EPStartXfer+0x92c>
 8004f94:	18bb      	adds	r3, r7, r2
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	2194      	movs	r1, #148	@ 0x94
 8004f9c:	1878      	adds	r0, r7, r1
 8004f9e:	6003      	str	r3, [r0, #0]
 8004fa0:	18bb      	adds	r3, r7, r2
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <USB_EPStartXfer+0x910>
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	187a      	adds	r2, r7, r1
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	2394      	movs	r3, #148	@ 0x94
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e046      	b.n	800505e <USB_EPStartXfer+0x9ba>
 8004fd0:	22ac      	movs	r2, #172	@ 0xac
 8004fd2:	18bb      	adds	r3, r7, r2
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2194      	movs	r1, #148	@ 0x94
 8004fda:	1878      	adds	r0, r7, r1
 8004fdc:	6003      	str	r3, [r0, #0]
 8004fde:	18bb      	adds	r3, r7, r2
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	221f      	movs	r2, #31
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d104      	bne.n	8004ff2 <USB_EPStartXfer+0x94e>
 8004fe8:	187b      	adds	r3, r7, r1
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	187a      	adds	r2, r7, r1
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	2394      	movs	r3, #148	@ 0x94
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	b29b      	uxth	r3, r3
 8005004:	4313      	orrs	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	4a57      	ldr	r2, [pc, #348]	@ (8005168 <USB_EPStartXfer+0xac4>)
 800500a:	4313      	orrs	r3, r2
 800500c:	b29a      	uxth	r2, r3
 800500e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	e024      	b.n	800505e <USB_EPStartXfer+0x9ba>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d120      	bne.n	800505e <USB_EPStartXfer+0x9ba>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2184      	movs	r1, #132	@ 0x84
 8005020:	187a      	adds	r2, r7, r1
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2250      	movs	r2, #80	@ 0x50
 8005028:	5a9b      	ldrh	r3, [r3, r2]
 800502a:	b29b      	uxth	r3, r3
 800502c:	001a      	movs	r2, r3
 800502e:	187b      	adds	r3, r7, r1
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	189b      	adds	r3, r3, r2
 8005034:	187a      	adds	r2, r7, r1
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	00da      	lsls	r2, r3, #3
 800503e:	187b      	adds	r3, r7, r1
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	18d3      	adds	r3, r2, r3
 8005044:	4a49      	ldr	r2, [pc, #292]	@ (800516c <USB_EPStartXfer+0xac8>)
 8005046:	4694      	mov	ip, r2
 8005048:	4463      	add	r3, ip
 800504a:	2180      	movs	r1, #128	@ 0x80
 800504c:	187a      	adds	r2, r7, r1
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	23ac      	movs	r3, #172	@ 0xac
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	b29a      	uxth	r2, r3
 8005058:	187b      	adds	r3, r7, r1
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800505e:	2076      	movs	r0, #118	@ 0x76
 8005060:	183b      	adds	r3, r7, r0
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	8912      	ldrh	r2, [r2, #8]
 8005066:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6959      	ldr	r1, [r3, #20]
 800506c:	23ac      	movs	r3, #172	@ 0xac
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	b29c      	uxth	r4, r3
 8005074:	183b      	adds	r3, r7, r0
 8005076:	881a      	ldrh	r2, [r3, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	0023      	movs	r3, r4
 800507c:	f000 fa32 	bl	80054e4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	18d3      	adds	r3, r2, r3
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29a      	uxth	r2, r3
 800508e:	200a      	movs	r0, #10
 8005090:	183b      	adds	r3, r7, r0
 8005092:	4937      	ldr	r1, [pc, #220]	@ (8005170 <USB_EPStartXfer+0xacc>)
 8005094:	400a      	ands	r2, r1
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	183b      	adds	r3, r7, r0
 800509a:	183a      	adds	r2, r7, r0
 800509c:	8812      	ldrh	r2, [r2, #0]
 800509e:	2110      	movs	r1, #16
 80050a0:	404a      	eors	r2, r1
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	183b      	adds	r3, r7, r0
 80050a6:	183a      	adds	r2, r7, r0
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	2120      	movs	r1, #32
 80050ac:	404a      	eors	r2, r1
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	18d3      	adds	r3, r2, r3
 80050ba:	183a      	adds	r2, r7, r0
 80050bc:	8812      	ldrh	r2, [r2, #0]
 80050be:	492d      	ldr	r1, [pc, #180]	@ (8005174 <USB_EPStartXfer+0xad0>)
 80050c0:	430a      	orrs	r2, r1
 80050c2:	b292      	uxth	r2, r2
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	e0cc      	b.n	8005262 <USB_EPStartXfer+0xbbe>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	7b1b      	ldrb	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d159      	bne.n	8005184 <USB_EPStartXfer+0xae0>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11b      	bne.n	8005110 <USB_EPStartXfer+0xa6c>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d117      	bne.n	8005110 <USB_EPStartXfer+0xa6c>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	18d3      	adds	r3, r2, r3
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	208e      	movs	r0, #142	@ 0x8e
 80050f0:	183b      	adds	r3, r7, r0
 80050f2:	4921      	ldr	r1, [pc, #132]	@ (8005178 <USB_EPStartXfer+0xad4>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	18d3      	adds	r3, r2, r3
 8005102:	183a      	adds	r2, r7, r0
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	491d      	ldr	r1, [pc, #116]	@ (800517c <USB_EPStartXfer+0xad8>)
 8005108:	430a      	orrs	r2, r1
 800510a:	b292      	uxth	r2, r2
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	e016      	b.n	800513e <USB_EPStartXfer+0xa9a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	18d3      	adds	r3, r2, r3
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29a      	uxth	r2, r3
 800511e:	208c      	movs	r0, #140	@ 0x8c
 8005120:	183b      	adds	r3, r7, r0
 8005122:	4917      	ldr	r1, [pc, #92]	@ (8005180 <USB_EPStartXfer+0xadc>)
 8005124:	400a      	ands	r2, r1
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	18d3      	adds	r3, r2, r3
 8005132:	183a      	adds	r2, r7, r0
 8005134:	8812      	ldrh	r2, [r2, #0]
 8005136:	490f      	ldr	r1, [pc, #60]	@ (8005174 <USB_EPStartXfer+0xad0>)
 8005138:	430a      	orrs	r2, r1
 800513a:	b292      	uxth	r2, r2
 800513c:	801a      	strh	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d907      	bls.n	800515a <USB_EPStartXfer+0xab6>
      {
        ep->xfer_len -= ep->maxpacket;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	1ad2      	subs	r2, r2, r3
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	619a      	str	r2, [r3, #24]
 8005158:	e05e      	b.n	8005218 <USB_EPStartXfer+0xb74>
      }
      else
      {
        ep->xfer_len = 0U;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2200      	movs	r2, #0
 800515e:	619a      	str	r2, [r3, #24]
 8005160:	e05a      	b.n	8005218 <USB_EPStartXfer+0xb74>
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	00000406 	.word	0x00000406
 8005168:	ffff8000 	.word	0xffff8000
 800516c:	00000402 	.word	0x00000402
 8005170:	ffff8fbf 	.word	0xffff8fbf
 8005174:	ffff8080 	.word	0xffff8080
 8005178:	ffff8f8f 	.word	0xffff8f8f
 800517c:	ffff8180 	.word	0xffff8180
 8005180:	ffff8e8f 	.word	0xffff8e8f
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	78db      	ldrb	r3, [r3, #3]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d13b      	bne.n	8005204 <USB_EPStartXfer+0xb60>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d041      	beq.n	8005218 <USB_EPStartXfer+0xb74>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	18d2      	adds	r2, r2, r3
 800519e:	2192      	movs	r1, #146	@ 0x92
 80051a0:	187b      	adds	r3, r7, r1
 80051a2:	8812      	ldrh	r2, [r2, #0]
 80051a4:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	2380      	movs	r3, #128	@ 0x80
 80051ac:	01db      	lsls	r3, r3, #7
 80051ae:	4013      	ands	r3, r2
 80051b0:	d004      	beq.n	80051bc <USB_EPStartXfer+0xb18>
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	2240      	movs	r2, #64	@ 0x40
 80051b8:	4013      	ands	r3, r2
 80051ba:	d10b      	bne.n	80051d4 <USB_EPStartXfer+0xb30>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051bc:	2192      	movs	r1, #146	@ 0x92
 80051be:	187b      	adds	r3, r7, r1
 80051c0:	881a      	ldrh	r2, [r3, #0]
 80051c2:	2380      	movs	r3, #128	@ 0x80
 80051c4:	01db      	lsls	r3, r3, #7
 80051c6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051c8:	d126      	bne.n	8005218 <USB_EPStartXfer+0xb74>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	2240      	movs	r2, #64	@ 0x40
 80051d0:	4013      	ands	r3, r2
 80051d2:	d121      	bne.n	8005218 <USB_EPStartXfer+0xb74>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	18d3      	adds	r3, r2, r3
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	2090      	movs	r0, #144	@ 0x90
 80051e4:	183b      	adds	r3, r7, r0
 80051e6:	4921      	ldr	r1, [pc, #132]	@ (800526c <USB_EPStartXfer+0xbc8>)
 80051e8:	400a      	ands	r2, r1
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	183a      	adds	r2, r7, r0
 80051f8:	8812      	ldrh	r2, [r2, #0]
 80051fa:	491d      	ldr	r1, [pc, #116]	@ (8005270 <USB_EPStartXfer+0xbcc>)
 80051fc:	430a      	orrs	r2, r1
 80051fe:	b292      	uxth	r2, r2
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	e009      	b.n	8005218 <USB_EPStartXfer+0xb74>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	78db      	ldrb	r3, [r3, #3]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d103      	bne.n	8005214 <USB_EPStartXfer+0xb70>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	619a      	str	r2, [r3, #24]
 8005212:	e001      	b.n	8005218 <USB_EPStartXfer+0xb74>
      }
      else
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e025      	b.n	8005264 <USB_EPStartXfer+0xbc0>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	18d3      	adds	r3, r2, r3
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29a      	uxth	r2, r3
 8005226:	208a      	movs	r0, #138	@ 0x8a
 8005228:	183b      	adds	r3, r7, r0
 800522a:	4912      	ldr	r1, [pc, #72]	@ (8005274 <USB_EPStartXfer+0xbd0>)
 800522c:	400a      	ands	r2, r1
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	183b      	adds	r3, r7, r0
 8005232:	183a      	adds	r2, r7, r0
 8005234:	8812      	ldrh	r2, [r2, #0]
 8005236:	2180      	movs	r1, #128	@ 0x80
 8005238:	0149      	lsls	r1, r1, #5
 800523a:	404a      	eors	r2, r1
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	183b      	adds	r3, r7, r0
 8005240:	183a      	adds	r2, r7, r0
 8005242:	8812      	ldrh	r2, [r2, #0]
 8005244:	2180      	movs	r1, #128	@ 0x80
 8005246:	0189      	lsls	r1, r1, #6
 8005248:	404a      	eors	r2, r1
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	183a      	adds	r2, r7, r0
 8005258:	8812      	ldrh	r2, [r2, #0]
 800525a:	4907      	ldr	r1, [pc, #28]	@ (8005278 <USB_EPStartXfer+0xbd4>)
 800525c:	430a      	orrs	r2, r1
 800525e:	b292      	uxth	r2, r2
 8005260:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	0018      	movs	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	b02c      	add	sp, #176	@ 0xb0
 800526a:	bdb0      	pop	{r4, r5, r7, pc}
 800526c:	ffff8f8f 	.word	0xffff8f8f
 8005270:	ffff80c0 	.word	0xffff80c0
 8005274:	ffffbf8f 	.word	0xffffbf8f
 8005278:	ffff8080 	.word	0xffff8080

0800527c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01d      	beq.n	80052ca <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	18d3      	adds	r3, r2, r3
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29a      	uxth	r2, r3
 800529c:	200c      	movs	r0, #12
 800529e:	183b      	adds	r3, r7, r0
 80052a0:	491b      	ldr	r1, [pc, #108]	@ (8005310 <USB_EPSetStall+0x94>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	183b      	adds	r3, r7, r0
 80052a8:	183a      	adds	r2, r7, r0
 80052aa:	8812      	ldrh	r2, [r2, #0]
 80052ac:	2110      	movs	r1, #16
 80052ae:	404a      	eors	r2, r1
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	183a      	adds	r2, r7, r0
 80052be:	8812      	ldrh	r2, [r2, #0]
 80052c0:	4914      	ldr	r1, [pc, #80]	@ (8005314 <USB_EPSetStall+0x98>)
 80052c2:	430a      	orrs	r2, r1
 80052c4:	b292      	uxth	r2, r2
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e01d      	b.n	8005306 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	200e      	movs	r0, #14
 80052da:	183b      	adds	r3, r7, r0
 80052dc:	490e      	ldr	r1, [pc, #56]	@ (8005318 <USB_EPSetStall+0x9c>)
 80052de:	400a      	ands	r2, r1
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	183b      	adds	r3, r7, r0
 80052e4:	183a      	adds	r2, r7, r0
 80052e6:	8812      	ldrh	r2, [r2, #0]
 80052e8:	2180      	movs	r1, #128	@ 0x80
 80052ea:	0149      	lsls	r1, r1, #5
 80052ec:	404a      	eors	r2, r1
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	183a      	adds	r2, r7, r0
 80052fc:	8812      	ldrh	r2, [r2, #0]
 80052fe:	4905      	ldr	r1, [pc, #20]	@ (8005314 <USB_EPSetStall+0x98>)
 8005300:	430a      	orrs	r2, r1
 8005302:	b292      	uxth	r2, r2
 8005304:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	0018      	movs	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	b004      	add	sp, #16
 800530e:	bd80      	pop	{r7, pc}
 8005310:	ffff8fbf 	.word	0xffff8fbf
 8005314:	ffff8080 	.word	0xffff8080
 8005318:	ffffbf8f 	.word	0xffffbf8f

0800531c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d046      	beq.n	80053bc <USB_EPClearStall+0xa0>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	18d2      	adds	r2, r2, r3
 8005338:	2110      	movs	r1, #16
 800533a:	187b      	adds	r3, r7, r1
 800533c:	8812      	ldrh	r2, [r2, #0]
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	187b      	adds	r3, r7, r1
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	2240      	movs	r2, #64	@ 0x40
 8005346:	4013      	ands	r3, r2
 8005348:	d016      	beq.n	8005378 <USB_EPClearStall+0x5c>
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	18d3      	adds	r3, r2, r3
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	200e      	movs	r0, #14
 800535a:	183b      	adds	r3, r7, r0
 800535c:	493f      	ldr	r1, [pc, #252]	@ (800545c <USB_EPClearStall+0x140>)
 800535e:	400a      	ands	r2, r1
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	18d3      	adds	r3, r2, r3
 800536c:	183a      	adds	r2, r7, r0
 800536e:	8812      	ldrh	r2, [r2, #0]
 8005370:	493b      	ldr	r1, [pc, #236]	@ (8005460 <USB_EPClearStall+0x144>)
 8005372:	430a      	orrs	r2, r1
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	78db      	ldrb	r3, [r3, #3]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d068      	beq.n	8005452 <USB_EPClearStall+0x136>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	18d3      	adds	r3, r2, r3
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29a      	uxth	r2, r3
 800538e:	200c      	movs	r0, #12
 8005390:	183b      	adds	r3, r7, r0
 8005392:	4934      	ldr	r1, [pc, #208]	@ (8005464 <USB_EPClearStall+0x148>)
 8005394:	400a      	ands	r2, r1
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	183b      	adds	r3, r7, r0
 800539a:	183a      	adds	r2, r7, r0
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	2120      	movs	r1, #32
 80053a0:	404a      	eors	r2, r1
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	183a      	adds	r2, r7, r0
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	492d      	ldr	r1, [pc, #180]	@ (8005468 <USB_EPClearStall+0x14c>)
 80053b4:	430a      	orrs	r2, r1
 80053b6:	b292      	uxth	r2, r2
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e04a      	b.n	8005452 <USB_EPClearStall+0x136>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	18d2      	adds	r2, r2, r3
 80053c6:	2116      	movs	r1, #22
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	8812      	ldrh	r2, [r2, #0]
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	01db      	lsls	r3, r3, #7
 80053d6:	4013      	ands	r3, r2
 80053d8:	d016      	beq.n	8005408 <USB_EPClearStall+0xec>
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	18d3      	adds	r3, r2, r3
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	2014      	movs	r0, #20
 80053ea:	183b      	adds	r3, r7, r0
 80053ec:	491b      	ldr	r1, [pc, #108]	@ (800545c <USB_EPClearStall+0x140>)
 80053ee:	400a      	ands	r2, r1
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	18d3      	adds	r3, r2, r3
 80053fc:	183a      	adds	r2, r7, r0
 80053fe:	8812      	ldrh	r2, [r2, #0]
 8005400:	491a      	ldr	r1, [pc, #104]	@ (800546c <USB_EPClearStall+0x150>)
 8005402:	430a      	orrs	r2, r1
 8005404:	b292      	uxth	r2, r2
 8005406:	801a      	strh	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	18d3      	adds	r3, r2, r3
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29a      	uxth	r2, r3
 8005416:	2012      	movs	r0, #18
 8005418:	183b      	adds	r3, r7, r0
 800541a:	4915      	ldr	r1, [pc, #84]	@ (8005470 <USB_EPClearStall+0x154>)
 800541c:	400a      	ands	r2, r1
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	183b      	adds	r3, r7, r0
 8005422:	183a      	adds	r2, r7, r0
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	2180      	movs	r1, #128	@ 0x80
 8005428:	0149      	lsls	r1, r1, #5
 800542a:	404a      	eors	r2, r1
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	183b      	adds	r3, r7, r0
 8005430:	183a      	adds	r2, r7, r0
 8005432:	8812      	ldrh	r2, [r2, #0]
 8005434:	2180      	movs	r1, #128	@ 0x80
 8005436:	0189      	lsls	r1, r1, #6
 8005438:	404a      	eors	r2, r1
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	18d3      	adds	r3, r2, r3
 8005446:	183a      	adds	r2, r7, r0
 8005448:	8812      	ldrh	r2, [r2, #0]
 800544a:	4907      	ldr	r1, [pc, #28]	@ (8005468 <USB_EPClearStall+0x14c>)
 800544c:	430a      	orrs	r2, r1
 800544e:	b292      	uxth	r2, r2
 8005450:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	0018      	movs	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	b006      	add	sp, #24
 800545a:	bd80      	pop	{r7, pc}
 800545c:	ffff8f8f 	.word	0xffff8f8f
 8005460:	ffff80c0 	.word	0xffff80c0
 8005464:	ffff8fbf 	.word	0xffff8fbf
 8005468:	ffff8080 	.word	0xffff8080
 800546c:	ffffc080 	.word	0xffffc080
 8005470:	ffffbf8f 	.word	0xffffbf8f

08005474 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	000a      	movs	r2, r1
 800547e:	1cfb      	adds	r3, r7, #3
 8005480:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005482:	1cfb      	adds	r3, r7, #3
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	224c      	movs	r2, #76	@ 0x4c
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}

0800549c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2258      	movs	r2, #88	@ 0x58
 80054a8:	5a9b      	ldrh	r3, [r3, r2]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4a05      	ldr	r2, [pc, #20]	@ (80054c4 <USB_DevConnect+0x28>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b299      	uxth	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2258      	movs	r2, #88	@ 0x58
 80054b6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b002      	add	sp, #8
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	ffff8000 	.word	0xffff8000

080054c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2244      	movs	r2, #68	@ 0x44
 80054d4:	5a9b      	ldrh	r3, [r3, r2]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80054da:	68fb      	ldr	r3, [r7, #12]
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	b004      	add	sp, #16
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	@ 0x28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	0019      	movs	r1, r3
 80054f0:	1dbb      	adds	r3, r7, #6
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	1d3b      	adds	r3, r7, #4
 80054f6:	1c0a      	adds	r2, r1, #0
 80054f8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800550c:	1dbb      	adds	r3, r7, #6
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	2280      	movs	r2, #128	@ 0x80
 8005516:	00d2      	lsls	r2, r2, #3
 8005518:	4694      	mov	ip, r2
 800551a:	4463      	add	r3, ip
 800551c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
 8005522:	e021      	b.n	8005568 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	2112      	movs	r1, #18
 800552a:	187b      	adds	r3, r7, r1
 800552c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b21b      	sxth	r3, r3
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	b21a      	sxth	r2, r3
 800553a:	187b      	adds	r3, r7, r1
 800553c:	2000      	movs	r0, #0
 800553e:	5e1b      	ldrsh	r3, [r3, r0]
 8005540:	4313      	orrs	r3, r2
 8005542:	b21a      	sxth	r2, r3
 8005544:	187b      	adds	r3, r7, r1
 8005546:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	187a      	adds	r2, r7, r1
 800554c:	8812      	ldrh	r2, [r2, #0]
 800554e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	3302      	adds	r3, #2
 8005554:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3301      	adds	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	3301      	adds	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	3b01      	subs	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1da      	bne.n	8005524 <USB_WritePMA+0x40>
  }
}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b00a      	add	sp, #40	@ 0x28
 8005576:	bd80      	pop	{r7, pc}

08005578 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	@ 0x28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	0019      	movs	r1, r3
 8005584:	1dbb      	adds	r3, r7, #6
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	1d3b      	adds	r3, r7, #4
 800558a:	1c0a      	adds	r2, r1, #0
 800558c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	b29b      	uxth	r3, r3
 8005596:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055a0:	1dbb      	adds	r3, r7, #6
 80055a2:	881a      	ldrh	r2, [r3, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	18d3      	adds	r3, r2, r3
 80055a8:	2280      	movs	r2, #128	@ 0x80
 80055aa:	00d2      	lsls	r2, r2, #3
 80055ac:	4694      	mov	ip, r2
 80055ae:	4463      	add	r3, ip
 80055b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b6:	e018      	b.n	80055ea <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	3302      	adds	r3, #2
 80055c4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	3301      	adds	r3, #1
 80055d2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3301      	adds	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	3b01      	subs	r3, #1
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e3      	bne.n	80055b8 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	701a      	strb	r2, [r3, #0]
  }
}
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b00a      	add	sp, #40	@ 0x28
 8005614:	bd80      	pop	{r7, pc}

08005616 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	000a      	movs	r2, r1
 8005620:	1cfb      	adds	r3, r7, #3
 8005622:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005624:	230f      	movs	r3, #15
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7c1b      	ldrb	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d116      	bne.n	8005662 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	2181      	movs	r1, #129	@ 0x81
 800563e:	f002 f884 	bl	800774a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	2101      	movs	r1, #1
 8005652:	f002 f87a 	bl	800774a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	23b6      	movs	r3, #182	@ 0xb6
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2101      	movs	r1, #1
 800565e:	50d1      	str	r1, [r2, r3]
 8005660:	e013      	b.n	800568a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	2340      	movs	r3, #64	@ 0x40
 8005666:	2202      	movs	r2, #2
 8005668:	2181      	movs	r1, #129	@ 0x81
 800566a:	f002 f86e 	bl	800774a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	2340      	movs	r3, #64	@ 0x40
 8005678:	2202      	movs	r2, #2
 800567a:	2101      	movs	r1, #1
 800567c:	f002 f865 	bl	800774a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	23b6      	movs	r3, #182	@ 0xb6
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	2101      	movs	r1, #1
 8005688:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	2308      	movs	r3, #8
 800568e:	2203      	movs	r2, #3
 8005690:	2182      	movs	r1, #130	@ 0x82
 8005692:	f002 f85a 	bl	800774a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800569c:	2387      	movs	r3, #135	@ 0x87
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	0018      	movs	r0, r3
 80056a2:	f002 f9e9 	bl	8007a78 <USBD_static_malloc>
 80056a6:	0001      	movs	r1, r0
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	23ae      	movs	r3, #174	@ 0xae
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	23ae      	movs	r3, #174	@ 0xae
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	58d3      	ldr	r3, [r2, r3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80056bc:	230f      	movs	r3, #15
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	e02c      	b.n	8005720 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	23ae      	movs	r3, #174	@ 0xae
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	58d3      	ldr	r3, [r2, r3]
 80056ce:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	23af      	movs	r3, #175	@ 0xaf
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	58d3      	ldr	r3, [r2, r3]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	2385      	movs	r3, #133	@ 0x85
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	2100      	movs	r1, #0
 80056e4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	2386      	movs	r3, #134	@ 0x86
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	2100      	movs	r1, #0
 80056ee:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7c1b      	ldrb	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	2381      	movs	r3, #129	@ 0x81
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	58d2      	ldr	r2, [r2, r3]
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	2101      	movs	r1, #1
 8005708:	f002 f969 	bl	80079de <USBD_LL_PrepareReceive>
 800570c:	e008      	b.n	8005720 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	2381      	movs	r3, #129	@ 0x81
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	58d2      	ldr	r2, [r2, r3]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	2340      	movs	r3, #64	@ 0x40
 800571a:	2101      	movs	r1, #1
 800571c:	f002 f95f 	bl	80079de <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005720:	230f      	movs	r3, #15
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	781b      	ldrb	r3, [r3, #0]
}
 8005726:	0018      	movs	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	b004      	add	sp, #16
 800572c:	bd80      	pop	{r7, pc}

0800572e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	000a      	movs	r2, r1
 8005738:	1cfb      	adds	r3, r7, #3
 800573a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800573c:	230f      	movs	r3, #15
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2181      	movs	r1, #129	@ 0x81
 8005748:	0018      	movs	r0, r3
 800574a:	f002 f835 	bl	80077b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2101      	movs	r1, #1
 8005758:	0018      	movs	r0, r3
 800575a:	f002 f82d 	bl	80077b8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	23b6      	movs	r3, #182	@ 0xb6
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	2100      	movs	r1, #0
 8005766:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2182      	movs	r1, #130	@ 0x82
 800576c:	0018      	movs	r0, r3
 800576e:	f002 f823 	bl	80077b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	23ae      	movs	r3, #174	@ 0xae
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	58d3      	ldr	r3, [r2, r3]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d011      	beq.n	80057a8 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	23af      	movs	r3, #175	@ 0xaf
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	58d3      	ldr	r3, [r2, r3]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	23ae      	movs	r3, #174	@ 0xae
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	58d3      	ldr	r3, [r2, r3]
 8005798:	0018      	movs	r0, r3
 800579a:	f002 f979 	bl	8007a90 <USBD_static_free>
    pdev->pClassData = NULL;
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	23ae      	movs	r3, #174	@ 0xae
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	2100      	movs	r1, #0
 80057a6:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80057a8:	230f      	movs	r3, #15
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	781b      	ldrb	r3, [r3, #0]
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b004      	add	sp, #16
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	23ae      	movs	r3, #174	@ 0xae
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	58d3      	ldr	r3, [r2, r3]
 80057ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80057cc:	230f      	movs	r3, #15
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80057d4:	230c      	movs	r3, #12
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	2200      	movs	r2, #0
 80057da:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80057dc:	2317      	movs	r3, #23
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	001a      	movs	r2, r3
 80057ea:	2360      	movs	r3, #96	@ 0x60
 80057ec:	4013      	ands	r3, r2
 80057ee:	d03d      	beq.n	800586c <USBD_CDC_Setup+0xb4>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d000      	beq.n	80057f6 <USBD_CDC_Setup+0x3e>
 80057f4:	e094      	b.n	8005920 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	88db      	ldrh	r3, [r3, #6]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02b      	beq.n	8005856 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	b25b      	sxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	da12      	bge.n	800582e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	23af      	movs	r3, #175	@ 0xaf
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	58d3      	ldr	r3, [r2, r3]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005816:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	88d2      	ldrh	r2, [r2, #6]
 800581c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800581e:	6939      	ldr	r1, [r7, #16]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	88da      	ldrh	r2, [r3, #6]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0018      	movs	r0, r3
 8005828:	f001 fbaf 	bl	8006f8a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800582c:	e083      	b.n	8005936 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	7859      	ldrb	r1, [r3, #1]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	2380      	movs	r3, #128	@ 0x80
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	88db      	ldrh	r3, [r3, #6]
 800583e:	b2d9      	uxtb	r1, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4a40      	ldr	r2, [pc, #256]	@ (8005944 <USBD_CDC_Setup+0x18c>)
 8005844:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005846:	6939      	ldr	r1, [r7, #16]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	88da      	ldrh	r2, [r3, #6]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0018      	movs	r0, r3
 8005850:	f001 fbce 	bl	8006ff0 <USBD_CtlPrepareRx>
      break;
 8005854:	e06f      	b.n	8005936 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	23af      	movs	r3, #175	@ 0xaf
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	58d3      	ldr	r3, [r2, r3]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	7850      	ldrb	r0, [r2, #1]
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	4798      	blx	r3
      break;
 800586a:	e064      	b.n	8005936 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b0b      	cmp	r3, #11
 8005872:	d037      	beq.n	80058e4 <USBD_CDC_Setup+0x12c>
 8005874:	dc47      	bgt.n	8005906 <USBD_CDC_Setup+0x14e>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <USBD_CDC_Setup+0xc8>
 800587a:	2b0a      	cmp	r3, #10
 800587c:	d019      	beq.n	80058b2 <USBD_CDC_Setup+0xfa>
 800587e:	e042      	b.n	8005906 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	23a7      	movs	r3, #167	@ 0xa7
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	5cd3      	ldrb	r3, [r2, r3]
 8005888:	2b03      	cmp	r3, #3
 800588a:	d107      	bne.n	800589c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800588c:	230c      	movs	r3, #12
 800588e:	18f9      	adds	r1, r7, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	0018      	movs	r0, r3
 8005896:	f001 fb78 	bl	8006f8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800589a:	e040      	b.n	800591e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0011      	movs	r1, r2
 80058a2:	0018      	movs	r0, r3
 80058a4:	f001 faf3 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 80058a8:	2317      	movs	r3, #23
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	2202      	movs	r2, #2
 80058ae:	701a      	strb	r2, [r3, #0]
          break;
 80058b0:	e035      	b.n	800591e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	23a7      	movs	r3, #167	@ 0xa7
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	5cd3      	ldrb	r3, [r2, r3]
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d107      	bne.n	80058ce <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80058be:	230f      	movs	r3, #15
 80058c0:	18f9      	adds	r1, r7, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	0018      	movs	r0, r3
 80058c8:	f001 fb5f 	bl	8006f8a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058cc:	e027      	b.n	800591e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0011      	movs	r1, r2
 80058d4:	0018      	movs	r0, r3
 80058d6:	f001 fada 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 80058da:	2317      	movs	r3, #23
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	2202      	movs	r2, #2
 80058e0:	701a      	strb	r2, [r3, #0]
          break;
 80058e2:	e01c      	b.n	800591e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	23a7      	movs	r3, #167	@ 0xa7
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	5cd3      	ldrb	r3, [r2, r3]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d015      	beq.n	800591c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	0011      	movs	r1, r2
 80058f6:	0018      	movs	r0, r3
 80058f8:	f001 fac9 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 80058fc:	2317      	movs	r3, #23
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2202      	movs	r2, #2
 8005902:	701a      	strb	r2, [r3, #0]
          }
          break;
 8005904:	e00a      	b.n	800591c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	0011      	movs	r1, r2
 800590c:	0018      	movs	r0, r3
 800590e:	f001 fabe 	bl	8006e8e <USBD_CtlError>
          ret = USBD_FAIL;
 8005912:	2317      	movs	r3, #23
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	2202      	movs	r2, #2
 8005918:	701a      	strb	r2, [r3, #0]
          break;
 800591a:	e000      	b.n	800591e <USBD_CDC_Setup+0x166>
          break;
 800591c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800591e:	e00a      	b.n	8005936 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	0011      	movs	r1, r2
 8005926:	0018      	movs	r0, r3
 8005928:	f001 fab1 	bl	8006e8e <USBD_CtlError>
      ret = USBD_FAIL;
 800592c:	2317      	movs	r3, #23
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2202      	movs	r2, #2
 8005932:	701a      	strb	r2, [r3, #0]
      break;
 8005934:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005936:	2317      	movs	r3, #23
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	781b      	ldrb	r3, [r3, #0]
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b006      	add	sp, #24
 8005942:	bd80      	pop	{r7, pc}
 8005944:	00000201 	.word	0x00000201

08005948 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	000a      	movs	r2, r1
 8005952:	1cfb      	adds	r3, r7, #3
 8005954:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	23ae      	movs	r3, #174	@ 0xae
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	58d3      	ldr	r3, [r2, r3]
 800595e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	23b0      	movs	r3, #176	@ 0xb0
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	58d3      	ldr	r3, [r2, r3]
 8005968:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	23ae      	movs	r3, #174	@ 0xae
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	58d3      	ldr	r3, [r2, r3]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03e      	beq.n	80059f4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005976:	1cfb      	adds	r3, r7, #3
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	0013      	movs	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	189b      	adds	r3, r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	18cb      	adds	r3, r1, r3
 8005986:	331c      	adds	r3, #28
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d02b      	beq.n	80059e6 <USBD_CDC_DataIn+0x9e>
 800598e:	1cfb      	adds	r3, r7, #3
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	0013      	movs	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	189b      	adds	r3, r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	18cb      	adds	r3, r1, r3
 800599e:	331c      	adds	r3, #28
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	1cfb      	adds	r3, r7, #3
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	0013      	movs	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	189b      	adds	r3, r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	18cb      	adds	r3, r1, r3
 80059b2:	3320      	adds	r3, #32
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	0019      	movs	r1, r3
 80059b8:	f7fa fc3e 	bl	8000238 <__aeabi_uidivmod>
 80059bc:	1e0b      	subs	r3, r1, #0
 80059be:	d112      	bne.n	80059e6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80059c0:	1cfb      	adds	r3, r7, #3
 80059c2:	781a      	ldrb	r2, [r3, #0]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	0013      	movs	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	189b      	adds	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	18cb      	adds	r3, r1, r3
 80059d0:	331c      	adds	r3, #28
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059d6:	1cfb      	adds	r3, r7, #3
 80059d8:	7819      	ldrb	r1, [r3, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	2300      	movs	r3, #0
 80059de:	2200      	movs	r2, #0
 80059e0:	f001 ffc6 	bl	8007970 <USBD_LL_Transmit>
 80059e4:	e004      	b.n	80059f0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	2385      	movs	r3, #133	@ 0x85
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	2100      	movs	r1, #0
 80059ee:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b004      	add	sp, #16
 80059fc:	bd80      	pop	{r7, pc}

080059fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	000a      	movs	r2, r1
 8005a08:	1cfb      	adds	r3, r7, #3
 8005a0a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	23ae      	movs	r3, #174	@ 0xae
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	58d3      	ldr	r3, [r2, r3]
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a16:	1cfb      	adds	r3, r7, #3
 8005a18:	781a      	ldrb	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f002 f814 	bl	8007a4c <USBD_LL_GetRxDataSize>
 8005a24:	0001      	movs	r1, r0
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	2383      	movs	r3, #131	@ 0x83
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	23ae      	movs	r3, #174	@ 0xae
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	58d3      	ldr	r3, [r2, r3]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d011      	beq.n	8005a5e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	23af      	movs	r3, #175	@ 0xaf
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	58d3      	ldr	r3, [r2, r3]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	68f9      	ldr	r1, [r7, #12]
 8005a46:	2381      	movs	r3, #129	@ 0x81
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	58c8      	ldr	r0, [r1, r3]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2183      	movs	r1, #131	@ 0x83
 8005a50:	0089      	lsls	r1, r1, #2
 8005a52:	468c      	mov	ip, r1
 8005a54:	4463      	add	r3, ip
 8005a56:	0019      	movs	r1, r3
 8005a58:	4790      	blx	r2

    return USBD_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e000      	b.n	8005a60 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b004      	add	sp, #16
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	23ae      	movs	r3, #174	@ 0xae
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	58d3      	ldr	r3, [r2, r3]
 8005a78:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	23af      	movs	r3, #175	@ 0xaf
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	58d3      	ldr	r3, [r2, r3]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <USBD_CDC_EP0_RxReady+0x50>
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	5cd3      	ldrb	r3, [r2, r3]
 8005a8e:	2bff      	cmp	r3, #255	@ 0xff
 8005a90:	d012      	beq.n	8005ab8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	23af      	movs	r3, #175	@ 0xaf
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	58d3      	ldr	r3, [r2, r3]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	2280      	movs	r2, #128	@ 0x80
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8005aa4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4c06      	ldr	r4, [pc, #24]	@ (8005ac4 <USBD_CDC_EP0_RxReady+0x5c>)
 8005aaa:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005aac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	21ff      	movs	r1, #255	@ 0xff
 8005ab6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	0018      	movs	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b005      	add	sp, #20
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	46c0      	nop			@ (mov r8, r8)
 8005ac4:	00000201 	.word	0x00000201

08005ac8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2243      	movs	r2, #67	@ 0x43
 8005ad4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005ad6:	4b02      	ldr	r3, [pc, #8]	@ (8005ae0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b002      	add	sp, #8
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000094 	.word	0x20000094

08005ae4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2243      	movs	r2, #67	@ 0x43
 8005af0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005af2:	4b02      	ldr	r3, [pc, #8]	@ (8005afc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b002      	add	sp, #8
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000050 	.word	0x20000050

08005b00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2243      	movs	r2, #67	@ 0x43
 8005b0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b0e:	4b02      	ldr	r3, [pc, #8]	@ (8005b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8005b10:	0018      	movs	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b002      	add	sp, #8
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200000d8 	.word	0x200000d8

08005b1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	220a      	movs	r2, #10
 8005b28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b2a:	4b02      	ldr	r3, [pc, #8]	@ (8005b34 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b002      	add	sp, #8
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	2000000c 	.word	0x2000000c

08005b38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005b42:	200f      	movs	r0, #15
 8005b44:	183b      	adds	r3, r7, r0
 8005b46:	2202      	movs	r2, #2
 8005b48:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	23af      	movs	r3, #175	@ 0xaf
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8005b5a:	183b      	adds	r3, r7, r0
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005b60:	230f      	movs	r3, #15
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	781b      	ldrb	r3, [r3, #0]
}
 8005b66:	0018      	movs	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	b004      	add	sp, #16
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b086      	sub	sp, #24
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	1dbb      	adds	r3, r7, #6
 8005b7a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	23ae      	movs	r3, #174	@ 0xae
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	58d3      	ldr	r3, [r2, r3]
 8005b84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	2382      	movs	r3, #130	@ 0x82
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8005b90:	1dbb      	adds	r3, r7, #6
 8005b92:	8819      	ldrh	r1, [r3, #0]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	2384      	movs	r3, #132	@ 0x84
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	23ae      	movs	r3, #174	@ 0xae
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	58d3      	ldr	r3, [r2, r3]
 8005bb8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	2381      	movs	r3, #129	@ 0x81
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b004      	add	sp, #16
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	23ae      	movs	r3, #174	@ 0xae
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	58d3      	ldr	r3, [r2, r3]
 8005bde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	23ae      	movs	r3, #174	@ 0xae
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	58d3      	ldr	r3, [r2, r3]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d022      	beq.n	8005c32 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	2385      	movs	r3, #133	@ 0x85
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	58d3      	ldr	r3, [r2, r3]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	2385      	movs	r3, #133	@ 0x85
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	2101      	movs	r1, #1
 8005c00:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	2384      	movs	r3, #132	@ 0x84
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	58d2      	ldr	r2, [r2, r3]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	2382      	movs	r3, #130	@ 0x82
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	2384      	movs	r3, #132	@ 0x84
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	000a      	movs	r2, r1
 8005c24:	2181      	movs	r1, #129	@ 0x81
 8005c26:	f001 fea3 	bl	8007970 <USBD_LL_Transmit>

      return USBD_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e002      	b.n	8005c34 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c32:	2302      	movs	r3, #2
  }
}
 8005c34:	0018      	movs	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b004      	add	sp, #16
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	23ae      	movs	r3, #174	@ 0xae
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	58d3      	ldr	r3, [r2, r3]
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	23ae      	movs	r3, #174	@ 0xae
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	58d3      	ldr	r3, [r2, r3]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d019      	beq.n	8005c8e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	7c1b      	ldrb	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	2381      	movs	r3, #129	@ 0x81
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	58d2      	ldr	r2, [r2, r3]
 8005c6a:	2380      	movs	r3, #128	@ 0x80
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	2101      	movs	r1, #1
 8005c72:	f001 feb4 	bl	80079de <USBD_LL_PrepareReceive>
 8005c76:	e008      	b.n	8005c8a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	2381      	movs	r3, #129	@ 0x81
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	58d2      	ldr	r2, [r2, r3]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	2340      	movs	r3, #64	@ 0x40
 8005c84:	2101      	movs	r1, #1
 8005c86:	f001 feaa 	bl	80079de <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e000      	b.n	8005c90 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8005c8e:	2302      	movs	r3, #2
  }
}
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b004      	add	sp, #16
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	1dfb      	adds	r3, r7, #7
 8005ca4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cac:	2302      	movs	r3, #2
 8005cae:	e020      	b.n	8005cf2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	23ad      	movs	r3, #173	@ 0xad
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	58d3      	ldr	r3, [r2, r3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	23ad      	movs	r3, #173	@ 0xad
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	23ac      	movs	r3, #172	@ 0xac
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	23a7      	movs	r3, #167	@ 0xa7
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	2101      	movs	r1, #1
 8005cde:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1dfa      	adds	r2, r7, #7
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	0018      	movs	r0, r3
 8005cec:	f001 fca4 	bl	8007638 <USBD_LL_Init>

  return USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b004      	add	sp, #16
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d04:	200f      	movs	r0, #15
 8005d06:	183b      	adds	r3, r7, r0
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	23ad      	movs	r3, #173	@ 0xad
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005d1c:	183b      	adds	r3, r7, r0
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e003      	b.n	8005d2c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d24:	230f      	movs	r3, #15
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	2202      	movs	r2, #2
 8005d2a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d2c:	230f      	movs	r3, #15
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	781b      	ldrb	r3, [r3, #0]
}
 8005d32:	0018      	movs	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b004      	add	sp, #16
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f001 fcdb 	bl	8007700 <USBD_LL_Start>

  return USBD_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b002      	add	sp, #8
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	0018      	movs	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b002      	add	sp, #8
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d66:	b590      	push	{r4, r7, lr}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	000a      	movs	r2, r1
 8005d70:	1cfb      	adds	r3, r7, #3
 8005d72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d74:	240f      	movs	r4, #15
 8005d76:	193b      	adds	r3, r7, r4
 8005d78:	2202      	movs	r2, #2
 8005d7a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	23ad      	movs	r3, #173	@ 0xad
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	58d3      	ldr	r3, [r2, r3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00e      	beq.n	8005da6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	23ad      	movs	r3, #173	@ 0xad
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	58d3      	ldr	r3, [r2, r3]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	1cfa      	adds	r2, r7, #3
 8005d94:	7811      	ldrb	r1, [r2, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	0010      	movs	r0, r2
 8005d9a:	4798      	blx	r3
 8005d9c:	1e03      	subs	r3, r0, #0
 8005d9e:	d102      	bne.n	8005da6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005da0:	193b      	adds	r3, r7, r4
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005da6:	230f      	movs	r3, #15
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	781b      	ldrb	r3, [r3, #0]
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b005      	add	sp, #20
 8005db2:	bd90      	pop	{r4, r7, pc}

08005db4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	000a      	movs	r2, r1
 8005dbe:	1cfb      	adds	r3, r7, #3
 8005dc0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	23ad      	movs	r3, #173	@ 0xad
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	58d3      	ldr	r3, [r2, r3]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	1cfa      	adds	r2, r7, #3
 8005dce:	7811      	ldrb	r1, [r2, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	0010      	movs	r0, r2
 8005dd4:	4798      	blx	r3

  return USBD_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	0018      	movs	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	22aa      	movs	r2, #170	@ 0xaa
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	4694      	mov	ip, r2
 8005df2:	4463      	add	r3, ip
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	0011      	movs	r1, r2
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f001 f810 	bl	8006e1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	23a5      	movs	r3, #165	@ 0xa5
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	2101      	movs	r1, #1
 8005e06:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a23      	ldr	r2, [pc, #140]	@ (8005e98 <USBD_LL_SetupStage+0xb8>)
 8005e0c:	5a9b      	ldrh	r3, [r3, r2]
 8005e0e:	0019      	movs	r1, r3
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	23a6      	movs	r3, #166	@ 0xa6
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	23aa      	movs	r3, #170	@ 0xaa
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	5cd3      	ldrb	r3, [r2, r3]
 8005e20:	001a      	movs	r2, r3
 8005e22:	231f      	movs	r3, #31
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d019      	beq.n	8005e5e <USBD_LL_SetupStage+0x7e>
 8005e2a:	d822      	bhi.n	8005e72 <USBD_LL_SetupStage+0x92>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <USBD_LL_SetupStage+0x56>
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d00a      	beq.n	8005e4a <USBD_LL_SetupStage+0x6a>
 8005e34:	e01d      	b.n	8005e72 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	22aa      	movs	r2, #170	@ 0xaa
 8005e3a:	0092      	lsls	r2, r2, #2
 8005e3c:	189a      	adds	r2, r3, r2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0011      	movs	r1, r2
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 fa10 	bl	8006268 <USBD_StdDevReq>
      break;
 8005e48:	e020      	b.n	8005e8c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	22aa      	movs	r2, #170	@ 0xaa
 8005e4e:	0092      	lsls	r2, r2, #2
 8005e50:	189a      	adds	r2, r3, r2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0011      	movs	r1, r2
 8005e56:	0018      	movs	r0, r3
 8005e58:	f000 fa78 	bl	800634c <USBD_StdItfReq>
      break;
 8005e5c:	e016      	b.n	8005e8c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	22aa      	movs	r2, #170	@ 0xaa
 8005e62:	0092      	lsls	r2, r2, #2
 8005e64:	189a      	adds	r2, r3, r2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0011      	movs	r1, r2
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f000 fac5 	bl	80063fa <USBD_StdEPReq>
      break;
 8005e70:	e00c      	b.n	8005e8c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	23aa      	movs	r3, #170	@ 0xaa
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	5cd3      	ldrb	r3, [r2, r3]
 8005e7a:	227f      	movs	r2, #127	@ 0x7f
 8005e7c:	4393      	bics	r3, r2
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	0011      	movs	r1, r2
 8005e84:	0018      	movs	r0, r3
 8005e86:	f001 fcc2 	bl	800780e <USBD_LL_StallEP>
      break;
 8005e8a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	0018      	movs	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	000002ae 	.word	0x000002ae

08005e9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	200b      	movs	r0, #11
 8005ea8:	183b      	adds	r3, r7, r0
 8005eaa:	1c0a      	adds	r2, r1, #0
 8005eac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d154      	bne.n	8005f60 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3355      	adds	r3, #85	@ 0x55
 8005eba:	33ff      	adds	r3, #255	@ 0xff
 8005ebc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	23a5      	movs	r3, #165	@ 0xa5
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	58d3      	ldr	r3, [r2, r3]
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d139      	bne.n	8005f3e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d919      	bls.n	8005f0a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d203      	bcs.n	8005ef8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	e002      	b.n	8005efe <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	001a      	movs	r2, r3
 8005f04:	f001 f898 	bl	8007038 <USBD_CtlContinueRx>
 8005f08:	e045      	b.n	8005f96 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	23ad      	movs	r3, #173	@ 0xad
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	58d3      	ldr	r3, [r2, r3]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00d      	beq.n	8005f34 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	23a7      	movs	r3, #167	@ 0xa7
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d107      	bne.n	8005f34 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	23ad      	movs	r3, #173	@ 0xad
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	58d3      	ldr	r3, [r2, r3]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	0010      	movs	r0, r2
 8005f32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f001 f891 	bl	800705e <USBD_CtlSendStatus>
 8005f3c:	e02b      	b.n	8005f96 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	23a5      	movs	r3, #165	@ 0xa5
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	58d3      	ldr	r3, [r2, r3]
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d125      	bne.n	8005f96 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	23a5      	movs	r3, #165	@ 0xa5
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	2100      	movs	r1, #0
 8005f52:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2100      	movs	r1, #0
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f001 fc58 	bl	800780e <USBD_LL_StallEP>
 8005f5e:	e01a      	b.n	8005f96 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	23ad      	movs	r3, #173	@ 0xad
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	58d3      	ldr	r3, [r2, r3]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d011      	beq.n	8005f92 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	23a7      	movs	r3, #167	@ 0xa7
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d10b      	bne.n	8005f92 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	23ad      	movs	r3, #173	@ 0xad
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	58d3      	ldr	r3, [r2, r3]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	220b      	movs	r2, #11
 8005f86:	18ba      	adds	r2, r7, r2
 8005f88:	7811      	ldrb	r1, [r2, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	0010      	movs	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	e001      	b.n	8005f96 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f92:	2302      	movs	r3, #2
 8005f94:	e000      	b.n	8005f98 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b006      	add	sp, #24
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	200b      	movs	r0, #11
 8005fac:	183b      	adds	r3, r7, r0
 8005fae:	1c0a      	adds	r2, r1, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005fb2:	183b      	adds	r3, r7, r0
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d000      	beq.n	8005fbc <USBD_LL_DataInStage+0x1c>
 8005fba:	e08e      	b.n	80060da <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3314      	adds	r3, #20
 8005fc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	23a5      	movs	r3, #165	@ 0xa5
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	58d3      	ldr	r3, [r2, r3]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d164      	bne.n	8006098 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d915      	bls.n	8006006 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	1ad2      	subs	r2, r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 ffe9 	bl	8006fca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2100      	movs	r1, #0
 8006000:	f001 fced 	bl	80079de <USBD_LL_PrepareReceive>
 8006004:	e059      	b.n	80060ba <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	0019      	movs	r1, r3
 8006010:	0010      	movs	r0, r2
 8006012:	f7fa f911 	bl	8000238 <__aeabi_uidivmod>
 8006016:	1e0b      	subs	r3, r1, #0
 8006018:	d11f      	bne.n	800605a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006022:	429a      	cmp	r2, r3
 8006024:	d319      	bcc.n	800605a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	23a6      	movs	r3, #166	@ 0xa6
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006032:	429a      	cmp	r2, r3
 8006034:	d211      	bcs.n	800605a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	2100      	movs	r1, #0
 800603c:	0018      	movs	r0, r3
 800603e:	f000 ffc4 	bl	8006fca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	23a6      	movs	r3, #166	@ 0xa6
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	2100      	movs	r1, #0
 800604a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	2300      	movs	r3, #0
 8006050:	2200      	movs	r2, #0
 8006052:	2100      	movs	r1, #0
 8006054:	f001 fcc3 	bl	80079de <USBD_LL_PrepareReceive>
 8006058:	e02f      	b.n	80060ba <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	23ad      	movs	r3, #173	@ 0xad
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	58d3      	ldr	r3, [r2, r3]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	23a7      	movs	r3, #167	@ 0xa7
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006070:	2b03      	cmp	r3, #3
 8006072:	d107      	bne.n	8006084 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	23ad      	movs	r3, #173	@ 0xad
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	58d3      	ldr	r3, [r2, r3]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	0010      	movs	r0, r2
 8006082:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2180      	movs	r1, #128	@ 0x80
 8006088:	0018      	movs	r0, r3
 800608a:	f001 fbc0 	bl	800780e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 fff8 	bl	8007086 <USBD_CtlReceiveStatus>
 8006096:	e010      	b.n	80060ba <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	23a5      	movs	r3, #165	@ 0xa5
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	58d3      	ldr	r3, [r2, r3]
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d005      	beq.n	80060b0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	23a5      	movs	r3, #165	@ 0xa5
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2180      	movs	r1, #128	@ 0x80
 80060b4:	0018      	movs	r0, r3
 80060b6:	f001 fbaa 	bl	800780e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	23a8      	movs	r3, #168	@ 0xa8
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	5cd3      	ldrb	r3, [r2, r3]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d124      	bne.n	8006110 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7ff fe43 	bl	8005d54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	23a8      	movs	r3, #168	@ 0xa8
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	2100      	movs	r1, #0
 80060d6:	54d1      	strb	r1, [r2, r3]
 80060d8:	e01a      	b.n	8006110 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	23ad      	movs	r3, #173	@ 0xad
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	58d3      	ldr	r3, [r2, r3]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d011      	beq.n	800610c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	23a7      	movs	r3, #167	@ 0xa7
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d10b      	bne.n	800610c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	23ad      	movs	r3, #173	@ 0xad
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	58d3      	ldr	r3, [r2, r3]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	220b      	movs	r2, #11
 8006100:	18ba      	adds	r2, r7, r2
 8006102:	7811      	ldrb	r1, [r2, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	0010      	movs	r0, r2
 8006108:	4798      	blx	r3
 800610a:	e001      	b.n	8006110 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800610c:	2302      	movs	r3, #2
 800610e:	e000      	b.n	8006112 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	0018      	movs	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	b006      	add	sp, #24
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	2340      	movs	r3, #64	@ 0x40
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	f001 fb0e 	bl	800774a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	23ac      	movs	r3, #172	@ 0xac
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	2101      	movs	r1, #1
 8006136:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	23b2      	movs	r3, #178	@ 0xb2
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	2140      	movs	r1, #64	@ 0x40
 8006140:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	2340      	movs	r3, #64	@ 0x40
 8006146:	2200      	movs	r2, #0
 8006148:	2180      	movs	r1, #128	@ 0x80
 800614a:	f001 fafe 	bl	800774a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	23a7      	movs	r3, #167	@ 0xa7
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	2101      	movs	r1, #1
 8006162:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	23a5      	movs	r3, #165	@ 0xa5
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	2100      	movs	r1, #0
 800616c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	23a9      	movs	r3, #169	@ 0xa9
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	2100      	movs	r1, #0
 800617c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	23ae      	movs	r3, #174	@ 0xae
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	58d3      	ldr	r3, [r2, r3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	23ad      	movs	r3, #173	@ 0xad
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	58d3      	ldr	r3, [r2, r3]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	b2d9      	uxtb	r1, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	0018      	movs	r0, r3
 800619e:	4790      	blx	r2
  }

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b002      	add	sp, #8
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	000a      	movs	r2, r1
 80061b4:	1cfb      	adds	r3, r7, #3
 80061b6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1cfa      	adds	r2, r7, #3
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	0018      	movs	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b002      	add	sp, #8
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	23a7      	movs	r3, #167	@ 0xa7
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	5cd1      	ldrb	r1, [r2, r3]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a06      	ldr	r2, [pc, #24]	@ (80061f8 <USBD_LL_Suspend+0x2c>)
 80061e0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	23a7      	movs	r3, #167	@ 0xa7
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	2104      	movs	r1, #4
 80061ea:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	0018      	movs	r0, r3
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b002      	add	sp, #8
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	46c0      	nop			@ (mov r8, r8)
 80061f8:	0000029d 	.word	0x0000029d

080061fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	23a7      	movs	r3, #167	@ 0xa7
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	5cd3      	ldrb	r3, [r2, r3]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d106      	bne.n	800621e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a05      	ldr	r2, [pc, #20]	@ (8006228 <USBD_LL_Resume+0x2c>)
 8006214:	5c99      	ldrb	r1, [r3, r2]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	23a7      	movs	r3, #167	@ 0xa7
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b002      	add	sp, #8
 8006226:	bd80      	pop	{r7, pc}
 8006228:	0000029d 	.word	0x0000029d

0800622c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	23a7      	movs	r3, #167	@ 0xa7
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	5cd3      	ldrb	r3, [r2, r3]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d10e      	bne.n	800625e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	23ad      	movs	r3, #173	@ 0xad
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	58d3      	ldr	r3, [r2, r3]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	23ad      	movs	r3, #173	@ 0xad
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	58d3      	ldr	r3, [r2, r3]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	0010      	movs	r0, r2
 800625c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	0018      	movs	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	b002      	add	sp, #8
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006272:	230f      	movs	r3, #15
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	001a      	movs	r2, r3
 8006280:	2360      	movs	r3, #96	@ 0x60
 8006282:	4013      	ands	r3, r2
 8006284:	2b40      	cmp	r3, #64	@ 0x40
 8006286:	d004      	beq.n	8006292 <USBD_StdDevReq+0x2a>
 8006288:	d84f      	bhi.n	800632a <USBD_StdDevReq+0xc2>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <USBD_StdDevReq+0x3e>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d14b      	bne.n	800632a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	23ad      	movs	r3, #173	@ 0xad
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	58d3      	ldr	r3, [r2, r3]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	0010      	movs	r0, r2
 80062a2:	4798      	blx	r3
      break;
 80062a4:	e048      	b.n	8006338 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b09      	cmp	r3, #9
 80062ac:	d835      	bhi.n	800631a <USBD_StdDevReq+0xb2>
 80062ae:	009a      	lsls	r2, r3, #2
 80062b0:	4b25      	ldr	r3, [pc, #148]	@ (8006348 <USBD_StdDevReq+0xe0>)
 80062b2:	18d3      	adds	r3, r2, r3
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0011      	movs	r1, r2
 80062be:	0018      	movs	r0, r3
 80062c0:	f000 fa52 	bl	8006768 <USBD_GetDescriptor>
          break;
 80062c4:	e030      	b.n	8006328 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	0011      	movs	r1, r2
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 fbfd 	bl	8006acc <USBD_SetAddress>
          break;
 80062d2:	e029      	b.n	8006328 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0011      	movs	r1, r2
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 fc4a 	bl	8006b74 <USBD_SetConfig>
          break;
 80062e0:	e022      	b.n	8006328 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	0011      	movs	r1, r2
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 fce7 	bl	8006cbc <USBD_GetConfig>
          break;
 80062ee:	e01b      	b.n	8006328 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0011      	movs	r1, r2
 80062f6:	0018      	movs	r0, r3
 80062f8:	f000 fd1b 	bl	8006d32 <USBD_GetStatus>
          break;
 80062fc:	e014      	b.n	8006328 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	0011      	movs	r1, r2
 8006304:	0018      	movs	r0, r3
 8006306:	f000 fd4e 	bl	8006da6 <USBD_SetFeature>
          break;
 800630a:	e00d      	b.n	8006328 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	0011      	movs	r1, r2
 8006312:	0018      	movs	r0, r3
 8006314:	f000 fd5d 	bl	8006dd2 <USBD_ClrFeature>
          break;
 8006318:	e006      	b.n	8006328 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0011      	movs	r1, r2
 8006320:	0018      	movs	r0, r3
 8006322:	f000 fdb4 	bl	8006e8e <USBD_CtlError>
          break;
 8006326:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006328:	e006      	b.n	8006338 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f000 fdac 	bl	8006e8e <USBD_CtlError>
      break;
 8006336:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006338:	230f      	movs	r3, #15
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	781b      	ldrb	r3, [r3, #0]
}
 800633e:	0018      	movs	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	b004      	add	sp, #16
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	080084d8 	.word	0x080084d8

0800634c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800634c:	b5b0      	push	{r4, r5, r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006356:	230f      	movs	r3, #15
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	2200      	movs	r2, #0
 800635c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	001a      	movs	r2, r3
 8006364:	2360      	movs	r3, #96	@ 0x60
 8006366:	4013      	ands	r3, r2
 8006368:	2b40      	cmp	r3, #64	@ 0x40
 800636a:	d004      	beq.n	8006376 <USBD_StdItfReq+0x2a>
 800636c:	d839      	bhi.n	80063e2 <USBD_StdItfReq+0x96>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <USBD_StdItfReq+0x2a>
 8006372:	2b20      	cmp	r3, #32
 8006374:	d135      	bne.n	80063e2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	23a7      	movs	r3, #167	@ 0xa7
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	5cd3      	ldrb	r3, [r2, r3]
 800637e:	3b01      	subs	r3, #1
 8006380:	2b02      	cmp	r3, #2
 8006382:	d825      	bhi.n	80063d0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d819      	bhi.n	80063c2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	23ad      	movs	r3, #173	@ 0xad
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	58d3      	ldr	r3, [r2, r3]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	250f      	movs	r5, #15
 800639a:	197c      	adds	r4, r7, r5
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	0010      	movs	r0, r2
 80063a2:	4798      	blx	r3
 80063a4:	0003      	movs	r3, r0
 80063a6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	88db      	ldrh	r3, [r3, #6]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d116      	bne.n	80063de <USBD_StdItfReq+0x92>
 80063b0:	197b      	adds	r3, r7, r5
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d112      	bne.n	80063de <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 fe4f 	bl	800705e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063c0:	e00d      	b.n	80063de <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	0011      	movs	r1, r2
 80063c8:	0018      	movs	r0, r3
 80063ca:	f000 fd60 	bl	8006e8e <USBD_CtlError>
          break;
 80063ce:	e006      	b.n	80063de <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0011      	movs	r1, r2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 fd59 	bl	8006e8e <USBD_CtlError>
          break;
 80063dc:	e000      	b.n	80063e0 <USBD_StdItfReq+0x94>
          break;
 80063de:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80063e0:	e006      	b.n	80063f0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	0011      	movs	r1, r2
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 fd50 	bl	8006e8e <USBD_CtlError>
      break;
 80063ee:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	0018      	movs	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b004      	add	sp, #16
 80063f8:	bdb0      	pop	{r4, r5, r7, pc}

080063fa <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063fa:	b5b0      	push	{r4, r5, r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006404:	230f      	movs	r3, #15
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	889a      	ldrh	r2, [r3, #4]
 8006410:	230e      	movs	r3, #14
 8006412:	18fb      	adds	r3, r7, r3
 8006414:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	001a      	movs	r2, r3
 800641c:	2360      	movs	r3, #96	@ 0x60
 800641e:	4013      	ands	r3, r2
 8006420:	2b40      	cmp	r3, #64	@ 0x40
 8006422:	d006      	beq.n	8006432 <USBD_StdEPReq+0x38>
 8006424:	d900      	bls.n	8006428 <USBD_StdEPReq+0x2e>
 8006426:	e190      	b.n	800674a <USBD_StdEPReq+0x350>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00c      	beq.n	8006446 <USBD_StdEPReq+0x4c>
 800642c:	2b20      	cmp	r3, #32
 800642e:	d000      	beq.n	8006432 <USBD_StdEPReq+0x38>
 8006430:	e18b      	b.n	800674a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	23ad      	movs	r3, #173	@ 0xad
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	58d3      	ldr	r3, [r2, r3]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	0010      	movs	r0, r2
 8006442:	4798      	blx	r3
      break;
 8006444:	e188      	b.n	8006758 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	001a      	movs	r2, r3
 800644c:	2360      	movs	r3, #96	@ 0x60
 800644e:	4013      	ands	r3, r2
 8006450:	2b20      	cmp	r3, #32
 8006452:	d10f      	bne.n	8006474 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	23ad      	movs	r3, #173	@ 0xad
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	58d3      	ldr	r3, [r2, r3]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	250f      	movs	r5, #15
 8006460:	197c      	adds	r4, r7, r5
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	0010      	movs	r0, r2
 8006468:	4798      	blx	r3
 800646a:	0003      	movs	r3, r0
 800646c:	7023      	strb	r3, [r4, #0]

        return ret;
 800646e:	197b      	adds	r3, r7, r5
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	e174      	b.n	800675e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b03      	cmp	r3, #3
 800647a:	d007      	beq.n	800648c <USBD_StdEPReq+0x92>
 800647c:	dd00      	ble.n	8006480 <USBD_StdEPReq+0x86>
 800647e:	e15c      	b.n	800673a <USBD_StdEPReq+0x340>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d100      	bne.n	8006486 <USBD_StdEPReq+0x8c>
 8006484:	e092      	b.n	80065ac <USBD_StdEPReq+0x1b2>
 8006486:	2b01      	cmp	r3, #1
 8006488:	d04b      	beq.n	8006522 <USBD_StdEPReq+0x128>
 800648a:	e156      	b.n	800673a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	23a7      	movs	r3, #167	@ 0xa7
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	5cd3      	ldrb	r3, [r2, r3]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d002      	beq.n	800649e <USBD_StdEPReq+0xa4>
 8006498:	2b03      	cmp	r3, #3
 800649a:	d01d      	beq.n	80064d8 <USBD_StdEPReq+0xde>
 800649c:	e039      	b.n	8006512 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800649e:	220e      	movs	r2, #14
 80064a0:	18bb      	adds	r3, r7, r2
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d010      	beq.n	80064ca <USBD_StdEPReq+0xd0>
 80064a8:	18bb      	adds	r3, r7, r2
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b80      	cmp	r3, #128	@ 0x80
 80064ae:	d00c      	beq.n	80064ca <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064b0:	18bb      	adds	r3, r7, r2
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0011      	movs	r1, r2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f001 f9a8 	bl	800780e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2180      	movs	r1, #128	@ 0x80
 80064c2:	0018      	movs	r0, r3
 80064c4:	f001 f9a3 	bl	800780e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064c8:	e02a      	b.n	8006520 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0011      	movs	r1, r2
 80064d0:	0018      	movs	r0, r3
 80064d2:	f000 fcdc 	bl	8006e8e <USBD_CtlError>
              break;
 80064d6:	e023      	b.n	8006520 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	885b      	ldrh	r3, [r3, #2]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d113      	bne.n	8006508 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80064e0:	220e      	movs	r2, #14
 80064e2:	18bb      	adds	r3, r7, r2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <USBD_StdEPReq+0x10e>
 80064ea:	18bb      	adds	r3, r7, r2
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b80      	cmp	r3, #128	@ 0x80
 80064f0:	d00a      	beq.n	8006508 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	88db      	ldrh	r3, [r3, #6]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80064fa:	18bb      	adds	r3, r7, r2
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	0011      	movs	r1, r2
 8006502:	0018      	movs	r0, r3
 8006504:	f001 f983 	bl	800780e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	0018      	movs	r0, r3
 800650c:	f000 fda7 	bl	800705e <USBD_CtlSendStatus>

              break;
 8006510:	e006      	b.n	8006520 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	0011      	movs	r1, r2
 8006518:	0018      	movs	r0, r3
 800651a:	f000 fcb8 	bl	8006e8e <USBD_CtlError>
              break;
 800651e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006520:	e112      	b.n	8006748 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	23a7      	movs	r3, #167	@ 0xa7
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	5cd3      	ldrb	r3, [r2, r3]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d002      	beq.n	8006534 <USBD_StdEPReq+0x13a>
 800652e:	2b03      	cmp	r3, #3
 8006530:	d01d      	beq.n	800656e <USBD_StdEPReq+0x174>
 8006532:	e032      	b.n	800659a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006534:	220e      	movs	r2, #14
 8006536:	18bb      	adds	r3, r7, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d010      	beq.n	8006560 <USBD_StdEPReq+0x166>
 800653e:	18bb      	adds	r3, r7, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b80      	cmp	r3, #128	@ 0x80
 8006544:	d00c      	beq.n	8006560 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006546:	18bb      	adds	r3, r7, r2
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0011      	movs	r1, r2
 800654e:	0018      	movs	r0, r3
 8006550:	f001 f95d 	bl	800780e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2180      	movs	r1, #128	@ 0x80
 8006558:	0018      	movs	r0, r3
 800655a:	f001 f958 	bl	800780e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800655e:	e024      	b.n	80065aa <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0011      	movs	r1, r2
 8006566:	0018      	movs	r0, r3
 8006568:	f000 fc91 	bl	8006e8e <USBD_CtlError>
              break;
 800656c:	e01d      	b.n	80065aa <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	885b      	ldrh	r3, [r3, #2]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d118      	bne.n	80065a8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006576:	210e      	movs	r1, #14
 8006578:	187b      	adds	r3, r7, r1
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	227f      	movs	r2, #127	@ 0x7f
 800657e:	4013      	ands	r3, r2
 8006580:	d006      	beq.n	8006590 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006582:	187b      	adds	r3, r7, r1
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	0011      	movs	r1, r2
 800658a:	0018      	movs	r0, r3
 800658c:	f001 f96a 	bl	8007864 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	0018      	movs	r0, r3
 8006594:	f000 fd63 	bl	800705e <USBD_CtlSendStatus>
              }
              break;
 8006598:	e006      	b.n	80065a8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 fc74 	bl	8006e8e <USBD_CtlError>
              break;
 80065a6:	e000      	b.n	80065aa <USBD_StdEPReq+0x1b0>
              break;
 80065a8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80065aa:	e0cd      	b.n	8006748 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	23a7      	movs	r3, #167	@ 0xa7
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	5cd3      	ldrb	r3, [r2, r3]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d002      	beq.n	80065be <USBD_StdEPReq+0x1c4>
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d03c      	beq.n	8006636 <USBD_StdEPReq+0x23c>
 80065bc:	e0b5      	b.n	800672a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065be:	220e      	movs	r2, #14
 80065c0:	18bb      	adds	r3, r7, r2
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <USBD_StdEPReq+0x1e4>
 80065c8:	18bb      	adds	r3, r7, r2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b80      	cmp	r3, #128	@ 0x80
 80065ce:	d006      	beq.n	80065de <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0011      	movs	r1, r2
 80065d6:	0018      	movs	r0, r3
 80065d8:	f000 fc59 	bl	8006e8e <USBD_CtlError>
                break;
 80065dc:	e0ac      	b.n	8006738 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065de:	220e      	movs	r2, #14
 80065e0:	18bb      	adds	r3, r7, r2
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b25b      	sxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da0c      	bge.n	8006604 <USBD_StdEPReq+0x20a>
 80065ea:	18bb      	adds	r3, r7, r2
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	227f      	movs	r2, #127	@ 0x7f
 80065f0:	401a      	ands	r2, r3
 80065f2:	0013      	movs	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	3310      	adds	r3, #16
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	18d3      	adds	r3, r2, r3
 8006600:	3304      	adds	r3, #4
 8006602:	e00d      	b.n	8006620 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006604:	230e      	movs	r3, #14
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	227f      	movs	r2, #127	@ 0x7f
 800660c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660e:	0013      	movs	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	189b      	adds	r3, r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	3351      	adds	r3, #81	@ 0x51
 8006618:	33ff      	adds	r3, #255	@ 0xff
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	18d3      	adds	r3, r2, r3
 800661e:	3304      	adds	r3, #4
 8006620:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	0018      	movs	r0, r3
 8006630:	f000 fcab 	bl	8006f8a <USBD_CtlSendData>
              break;
 8006634:	e080      	b.n	8006738 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006636:	220e      	movs	r2, #14
 8006638:	18bb      	adds	r3, r7, r2
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b25b      	sxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	da14      	bge.n	800666c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006642:	18bb      	adds	r3, r7, r2
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	220f      	movs	r2, #15
 8006648:	401a      	ands	r2, r3
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	0013      	movs	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	189b      	adds	r3, r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	18cb      	adds	r3, r1, r3
 8006656:	3318      	adds	r3, #24
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d11e      	bne.n	800669c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f000 fc12 	bl	8006e8e <USBD_CtlError>
                  break;
 800666a:	e065      	b.n	8006738 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800666c:	230e      	movs	r3, #14
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	220f      	movs	r2, #15
 8006674:	401a      	ands	r2, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	23ac      	movs	r3, #172	@ 0xac
 800667a:	0059      	lsls	r1, r3, #1
 800667c:	0013      	movs	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	189b      	adds	r3, r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	18c3      	adds	r3, r0, r3
 8006686:	185b      	adds	r3, r3, r1
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	0011      	movs	r1, r2
 8006694:	0018      	movs	r0, r3
 8006696:	f000 fbfa 	bl	8006e8e <USBD_CtlError>
                  break;
 800669a:	e04d      	b.n	8006738 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800669c:	220e      	movs	r2, #14
 800669e:	18bb      	adds	r3, r7, r2
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da0c      	bge.n	80066c2 <USBD_StdEPReq+0x2c8>
 80066a8:	18bb      	adds	r3, r7, r2
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	227f      	movs	r2, #127	@ 0x7f
 80066ae:	401a      	ands	r2, r3
 80066b0:	0013      	movs	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	189b      	adds	r3, r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	3310      	adds	r3, #16
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	18d3      	adds	r3, r2, r3
 80066be:	3304      	adds	r3, #4
 80066c0:	e00d      	b.n	80066de <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066c2:	230e      	movs	r3, #14
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	227f      	movs	r2, #127	@ 0x7f
 80066ca:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066cc:	0013      	movs	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	3351      	adds	r3, #81	@ 0x51
 80066d6:	33ff      	adds	r3, #255	@ 0xff
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	18d3      	adds	r3, r2, r3
 80066dc:	3304      	adds	r3, #4
 80066de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066e0:	220e      	movs	r2, #14
 80066e2:	18bb      	adds	r3, r7, r2
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <USBD_StdEPReq+0x2f8>
 80066ea:	18bb      	adds	r3, r7, r2
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b80      	cmp	r3, #128	@ 0x80
 80066f0:	d103      	bne.n	80066fa <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e010      	b.n	800671c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80066fa:	230e      	movs	r3, #14
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	0011      	movs	r1, r2
 8006704:	0018      	movs	r0, r3
 8006706:	f001 f8d8 	bl	80078ba <USBD_LL_IsStallEP>
 800670a:	1e03      	subs	r3, r0, #0
 800670c:	d003      	beq.n	8006716 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e002      	b.n	800671c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	0018      	movs	r0, r3
 8006724:	f000 fc31 	bl	8006f8a <USBD_CtlSendData>
              break;
 8006728:	e006      	b.n	8006738 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	0011      	movs	r1, r2
 8006730:	0018      	movs	r0, r3
 8006732:	f000 fbac 	bl	8006e8e <USBD_CtlError>
              break;
 8006736:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006738:	e006      	b.n	8006748 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	0011      	movs	r1, r2
 8006740:	0018      	movs	r0, r3
 8006742:	f000 fba4 	bl	8006e8e <USBD_CtlError>
          break;
 8006746:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006748:	e006      	b.n	8006758 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	0011      	movs	r1, r2
 8006750:	0018      	movs	r0, r3
 8006752:	f000 fb9c 	bl	8006e8e <USBD_CtlError>
      break;
 8006756:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006758:	230f      	movs	r3, #15
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	781b      	ldrb	r3, [r3, #0]
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b004      	add	sp, #16
 8006764:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006768 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006772:	2308      	movs	r3, #8
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	2200      	movs	r2, #0
 8006778:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800677e:	230b      	movs	r3, #11
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	885b      	ldrh	r3, [r3, #2]
 800678a:	0a1b      	lsrs	r3, r3, #8
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b07      	cmp	r3, #7
 8006790:	d900      	bls.n	8006794 <USBD_GetDescriptor+0x2c>
 8006792:	e159      	b.n	8006a48 <USBD_GetDescriptor+0x2e0>
 8006794:	009a      	lsls	r2, r3, #2
 8006796:	4bcb      	ldr	r3, [pc, #812]	@ (8006ac4 <USBD_GetDescriptor+0x35c>)
 8006798:	18d3      	adds	r3, r2, r3
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	23ac      	movs	r3, #172	@ 0xac
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	58d3      	ldr	r3, [r2, r3]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	2108      	movs	r1, #8
 80067ae:	1879      	adds	r1, r7, r1
 80067b0:	0010      	movs	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	0003      	movs	r3, r0
 80067b6:	60fb      	str	r3, [r7, #12]
      break;
 80067b8:	e153      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	7c1b      	ldrb	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10f      	bne.n	80067e2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	23ad      	movs	r3, #173	@ 0xad
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	58d3      	ldr	r3, [r2, r3]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	2208      	movs	r2, #8
 80067ce:	18ba      	adds	r2, r7, r2
 80067d0:	0010      	movs	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	0003      	movs	r3, r0
 80067d6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	2202      	movs	r2, #2
 80067de:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067e0:	e13f      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	23ad      	movs	r3, #173	@ 0xad
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	58d3      	ldr	r3, [r2, r3]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	2208      	movs	r2, #8
 80067ee:	18ba      	adds	r2, r7, r2
 80067f0:	0010      	movs	r0, r2
 80067f2:	4798      	blx	r3
 80067f4:	0003      	movs	r3, r0
 80067f6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	2202      	movs	r2, #2
 80067fe:	701a      	strb	r2, [r3, #0]
      break;
 8006800:	e12f      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	885b      	ldrh	r3, [r3, #2]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b05      	cmp	r3, #5
 800680a:	d900      	bls.n	800680e <USBD_GetDescriptor+0xa6>
 800680c:	e0d0      	b.n	80069b0 <USBD_GetDescriptor+0x248>
 800680e:	009a      	lsls	r2, r3, #2
 8006810:	4bad      	ldr	r3, [pc, #692]	@ (8006ac8 <USBD_GetDescriptor+0x360>)
 8006812:	18d3      	adds	r3, r2, r3
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	23ac      	movs	r3, #172	@ 0xac
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	58d3      	ldr	r3, [r2, r3]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00d      	beq.n	8006842 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	23ac      	movs	r3, #172	@ 0xac
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	58d3      	ldr	r3, [r2, r3]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	2108      	movs	r1, #8
 8006836:	1879      	adds	r1, r7, r1
 8006838:	0010      	movs	r0, r2
 800683a:	4798      	blx	r3
 800683c:	0003      	movs	r3, r0
 800683e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006840:	e0c3      	b.n	80069ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	0011      	movs	r1, r2
 8006848:	0018      	movs	r0, r3
 800684a:	f000 fb20 	bl	8006e8e <USBD_CtlError>
            err++;
 800684e:	210b      	movs	r1, #11
 8006850:	187b      	adds	r3, r7, r1
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	187b      	adds	r3, r7, r1
 8006856:	3201      	adds	r2, #1
 8006858:	701a      	strb	r2, [r3, #0]
          break;
 800685a:	e0b6      	b.n	80069ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	23ac      	movs	r3, #172	@ 0xac
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	58d3      	ldr	r3, [r2, r3]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00d      	beq.n	8006886 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	23ac      	movs	r3, #172	@ 0xac
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	58d3      	ldr	r3, [r2, r3]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	7c12      	ldrb	r2, [r2, #16]
 8006878:	2108      	movs	r1, #8
 800687a:	1879      	adds	r1, r7, r1
 800687c:	0010      	movs	r0, r2
 800687e:	4798      	blx	r3
 8006880:	0003      	movs	r3, r0
 8006882:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006884:	e0a1      	b.n	80069ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	0011      	movs	r1, r2
 800688c:	0018      	movs	r0, r3
 800688e:	f000 fafe 	bl	8006e8e <USBD_CtlError>
            err++;
 8006892:	210b      	movs	r1, #11
 8006894:	187b      	adds	r3, r7, r1
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	187b      	adds	r3, r7, r1
 800689a:	3201      	adds	r2, #1
 800689c:	701a      	strb	r2, [r3, #0]
          break;
 800689e:	e094      	b.n	80069ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	23ac      	movs	r3, #172	@ 0xac
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	58d3      	ldr	r3, [r2, r3]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00d      	beq.n	80068ca <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	23ac      	movs	r3, #172	@ 0xac
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	58d3      	ldr	r3, [r2, r3]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7c12      	ldrb	r2, [r2, #16]
 80068bc:	2108      	movs	r1, #8
 80068be:	1879      	adds	r1, r7, r1
 80068c0:	0010      	movs	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	0003      	movs	r3, r0
 80068c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c8:	e07f      	b.n	80069ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 fadc 	bl	8006e8e <USBD_CtlError>
            err++;
 80068d6:	210b      	movs	r1, #11
 80068d8:	187b      	adds	r3, r7, r1
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	3201      	adds	r2, #1
 80068e0:	701a      	strb	r2, [r3, #0]
          break;
 80068e2:	e072      	b.n	80069ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	23ac      	movs	r3, #172	@ 0xac
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	58d3      	ldr	r3, [r2, r3]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	23ac      	movs	r3, #172	@ 0xac
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	58d3      	ldr	r3, [r2, r3]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7c12      	ldrb	r2, [r2, #16]
 8006900:	2108      	movs	r1, #8
 8006902:	1879      	adds	r1, r7, r1
 8006904:	0010      	movs	r0, r2
 8006906:	4798      	blx	r3
 8006908:	0003      	movs	r3, r0
 800690a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690c:	e05d      	b.n	80069ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	0011      	movs	r1, r2
 8006914:	0018      	movs	r0, r3
 8006916:	f000 faba 	bl	8006e8e <USBD_CtlError>
            err++;
 800691a:	210b      	movs	r1, #11
 800691c:	187b      	adds	r3, r7, r1
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	187b      	adds	r3, r7, r1
 8006922:	3201      	adds	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
          break;
 8006926:	e050      	b.n	80069ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	23ac      	movs	r3, #172	@ 0xac
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	58d3      	ldr	r3, [r2, r3]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	23ac      	movs	r3, #172	@ 0xac
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	58d3      	ldr	r3, [r2, r3]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	7c12      	ldrb	r2, [r2, #16]
 8006944:	2108      	movs	r1, #8
 8006946:	1879      	adds	r1, r7, r1
 8006948:	0010      	movs	r0, r2
 800694a:	4798      	blx	r3
 800694c:	0003      	movs	r3, r0
 800694e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006950:	e03b      	b.n	80069ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	0011      	movs	r1, r2
 8006958:	0018      	movs	r0, r3
 800695a:	f000 fa98 	bl	8006e8e <USBD_CtlError>
            err++;
 800695e:	210b      	movs	r1, #11
 8006960:	187b      	adds	r3, r7, r1
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	187b      	adds	r3, r7, r1
 8006966:	3201      	adds	r2, #1
 8006968:	701a      	strb	r2, [r3, #0]
          break;
 800696a:	e02e      	b.n	80069ca <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	23ac      	movs	r3, #172	@ 0xac
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	58d3      	ldr	r3, [r2, r3]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	23ac      	movs	r3, #172	@ 0xac
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	58d3      	ldr	r3, [r2, r3]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	7c12      	ldrb	r2, [r2, #16]
 8006988:	2108      	movs	r1, #8
 800698a:	1879      	adds	r1, r7, r1
 800698c:	0010      	movs	r0, r2
 800698e:	4798      	blx	r3
 8006990:	0003      	movs	r3, r0
 8006992:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006994:	e019      	b.n	80069ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	0011      	movs	r1, r2
 800699c:	0018      	movs	r0, r3
 800699e:	f000 fa76 	bl	8006e8e <USBD_CtlError>
            err++;
 80069a2:	210b      	movs	r1, #11
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	3201      	adds	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
          break;
 80069ae:	e00c      	b.n	80069ca <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	0011      	movs	r1, r2
 80069b6:	0018      	movs	r0, r3
 80069b8:	f000 fa69 	bl	8006e8e <USBD_CtlError>
          err++;
 80069bc:	210b      	movs	r1, #11
 80069be:	187b      	adds	r3, r7, r1
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	187b      	adds	r3, r7, r1
 80069c4:	3201      	adds	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80069c8:	e04b      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>
 80069ca:	e04a      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	23ad      	movs	r3, #173	@ 0xad
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	58d3      	ldr	r3, [r2, r3]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069de:	2208      	movs	r2, #8
 80069e0:	18ba      	adds	r2, r7, r2
 80069e2:	0010      	movs	r0, r2
 80069e4:	4798      	blx	r3
 80069e6:	0003      	movs	r3, r0
 80069e8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069ea:	e03a      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	0011      	movs	r1, r2
 80069f2:	0018      	movs	r0, r3
 80069f4:	f000 fa4b 	bl	8006e8e <USBD_CtlError>
        err++;
 80069f8:	210b      	movs	r1, #11
 80069fa:	187b      	adds	r3, r7, r1
 80069fc:	781a      	ldrb	r2, [r3, #0]
 80069fe:	187b      	adds	r3, r7, r1
 8006a00:	3201      	adds	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
      break;
 8006a04:	e02d      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7c1b      	ldrb	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10f      	bne.n	8006a2e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	23ad      	movs	r3, #173	@ 0xad
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	58d3      	ldr	r3, [r2, r3]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a18:	2208      	movs	r2, #8
 8006a1a:	18ba      	adds	r2, r7, r2
 8006a1c:	0010      	movs	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	0003      	movs	r3, r0
 8006a22:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	2207      	movs	r2, #7
 8006a2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a2c:	e019      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	0011      	movs	r1, r2
 8006a34:	0018      	movs	r0, r3
 8006a36:	f000 fa2a 	bl	8006e8e <USBD_CtlError>
        err++;
 8006a3a:	210b      	movs	r1, #11
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	3201      	adds	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
      break;
 8006a46:	e00c      	b.n	8006a62 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	0011      	movs	r1, r2
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f000 fa1d 	bl	8006e8e <USBD_CtlError>
      err++;
 8006a54:	210b      	movs	r1, #11
 8006a56:	187b      	adds	r3, r7, r1
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	187b      	adds	r3, r7, r1
 8006a5c:	3201      	adds	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
      break;
 8006a60:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8006a62:	230b      	movs	r3, #11
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d127      	bne.n	8006abc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006a6c:	2108      	movs	r1, #8
 8006a6e:	187b      	adds	r3, r7, r1
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d019      	beq.n	8006aaa <USBD_GetDescriptor+0x342>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	88db      	ldrh	r3, [r3, #6]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d015      	beq.n	8006aaa <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	88da      	ldrh	r2, [r3, #6]
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	1c18      	adds	r0, r3, #0
 8006a88:	1c11      	adds	r1, r2, #0
 8006a8a:	b28a      	uxth	r2, r1
 8006a8c:	b283      	uxth	r3, r0
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d900      	bls.n	8006a94 <USBD_GetDescriptor+0x32c>
 8006a92:	1c01      	adds	r1, r0, #0
 8006a94:	b28a      	uxth	r2, r1
 8006a96:	2108      	movs	r1, #8
 8006a98:	187b      	adds	r3, r7, r1
 8006a9a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a9c:	187b      	adds	r3, r7, r1
 8006a9e:	881a      	ldrh	r2, [r3, #0]
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f000 fa70 	bl	8006f8a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	88db      	ldrh	r3, [r3, #6]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d105      	bne.n	8006abe <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 fad2 	bl	800705e <USBD_CtlSendStatus>
 8006aba:	e000      	b.n	8006abe <USBD_GetDescriptor+0x356>
    return;
 8006abc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b004      	add	sp, #16
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	08008500 	.word	0x08008500
 8006ac8:	08008520 	.word	0x08008520

08006acc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	889b      	ldrh	r3, [r3, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d13d      	bne.n	8006b5a <USBD_SetAddress+0x8e>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	88db      	ldrh	r3, [r3, #6]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d139      	bne.n	8006b5a <USBD_SetAddress+0x8e>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	885b      	ldrh	r3, [r3, #2]
 8006aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aec:	d835      	bhi.n	8006b5a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	885b      	ldrh	r3, [r3, #2]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	230f      	movs	r3, #15
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	217f      	movs	r1, #127	@ 0x7f
 8006afa:	400a      	ands	r2, r1
 8006afc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	23a7      	movs	r3, #167	@ 0xa7
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	5cd3      	ldrb	r3, [r2, r3]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d106      	bne.n	8006b18 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0011      	movs	r1, r2
 8006b10:	0018      	movs	r0, r3
 8006b12:	f000 f9bc 	bl	8006e8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b16:	e027      	b.n	8006b68 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	240f      	movs	r4, #15
 8006b1c:	193a      	adds	r2, r7, r4
 8006b1e:	4914      	ldr	r1, [pc, #80]	@ (8006b70 <USBD_SetAddress+0xa4>)
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b24:	193b      	adds	r3, r7, r4
 8006b26:	781a      	ldrb	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	0011      	movs	r1, r2
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 fef4 	bl	800791a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 fa92 	bl	800705e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b3a:	193b      	adds	r3, r7, r4
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	23a7      	movs	r3, #167	@ 0xa7
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	2102      	movs	r1, #2
 8006b4a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4c:	e00c      	b.n	8006b68 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	23a7      	movs	r3, #167	@ 0xa7
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	2101      	movs	r1, #1
 8006b56:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	e006      	b.n	8006b68 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	0011      	movs	r1, r2
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 f994 	bl	8006e8e <USBD_CtlError>
  }
}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	46c0      	nop			@ (mov r8, r8)
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b005      	add	sp, #20
 8006b6e:	bd90      	pop	{r4, r7, pc}
 8006b70:	0000029e 	.word	0x0000029e

08006b74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	4b4c      	ldr	r3, [pc, #304]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006b86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b88:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d906      	bls.n	8006b9e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 f979 	bl	8006e8e <USBD_CtlError>
 8006b9c:	e088      	b.n	8006cb0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	23a7      	movs	r3, #167	@ 0xa7
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	5cd3      	ldrb	r3, [r2, r3]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d002      	beq.n	8006bb0 <USBD_SetConfig+0x3c>
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d029      	beq.n	8006c02 <USBD_SetConfig+0x8e>
 8006bae:	e071      	b.n	8006c94 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bb0:	4b41      	ldr	r3, [pc, #260]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01f      	beq.n	8006bf8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	23a7      	movs	r3, #167	@ 0xa7
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	2103      	movs	r1, #3
 8006bca:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	0011      	movs	r1, r2
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f7ff f8c6 	bl	8005d66 <USBD_SetClassConfig>
 8006bda:	0003      	movs	r3, r0
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d106      	bne.n	8006bee <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0011      	movs	r1, r2
 8006be6:	0018      	movs	r0, r3
 8006be8:	f000 f951 	bl	8006e8e <USBD_CtlError>
            return;
 8006bec:	e060      	b.n	8006cb0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f000 fa34 	bl	800705e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006bf6:	e05b      	b.n	8006cb0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 fa2f 	bl	800705e <USBD_CtlSendStatus>
        break;
 8006c00:	e056      	b.n	8006cb0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c02:	4b2d      	ldr	r3, [pc, #180]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d115      	bne.n	8006c36 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	23a7      	movs	r3, #167	@ 0xa7
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	2102      	movs	r1, #2
 8006c12:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006c14:	4b28      	ldr	r3, [pc, #160]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	001a      	movs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c1e:	4b26      	ldr	r3, [pc, #152]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006c20:	781a      	ldrb	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0011      	movs	r1, r2
 8006c26:	0018      	movs	r0, r3
 8006c28:	f7ff f8c4 	bl	8005db4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 fa15 	bl	800705e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c34:	e03c      	b.n	8006cb0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006c36:	4b20      	ldr	r3, [pc, #128]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d022      	beq.n	8006c8a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	0011      	movs	r1, r2
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7ff f8b0 	bl	8005db4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c54:	4b18      	ldr	r3, [pc, #96]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	001a      	movs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c5e:	4b16      	ldr	r3, [pc, #88]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006c60:	781a      	ldrb	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0011      	movs	r1, r2
 8006c66:	0018      	movs	r0, r3
 8006c68:	f7ff f87d 	bl	8005d66 <USBD_SetClassConfig>
 8006c6c:	0003      	movs	r3, r0
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d106      	bne.n	8006c80 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	0011      	movs	r1, r2
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f000 f908 	bl	8006e8e <USBD_CtlError>
            return;
 8006c7e:	e017      	b.n	8006cb0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	0018      	movs	r0, r3
 8006c84:	f000 f9eb 	bl	800705e <USBD_CtlSendStatus>
        break;
 8006c88:	e012      	b.n	8006cb0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 f9e6 	bl	800705e <USBD_CtlSendStatus>
        break;
 8006c92:	e00d      	b.n	8006cb0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0011      	movs	r1, r2
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f000 f8f7 	bl	8006e8e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ca0:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <USBD_SetConfig+0x144>)
 8006ca2:	781a      	ldrb	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0011      	movs	r1, r2
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7ff f883 	bl	8005db4 <USBD_ClrClassConfig>
        break;
 8006cae:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b002      	add	sp, #8
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	46c0      	nop			@ (mov r8, r8)
 8006cb8:	20000248 	.word	0x20000248

08006cbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	88db      	ldrh	r3, [r3, #6]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d006      	beq.n	8006cdc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	0011      	movs	r1, r2
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f000 f8da 	bl	8006e8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cda:	e026      	b.n	8006d2a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	23a7      	movs	r3, #167	@ 0xa7
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	5cd3      	ldrb	r3, [r2, r3]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	dc02      	bgt.n	8006cee <USBD_GetConfig+0x32>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dc03      	bgt.n	8006cf4 <USBD_GetConfig+0x38>
 8006cec:	e016      	b.n	8006d1c <USBD_GetConfig+0x60>
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d00c      	beq.n	8006d0c <USBD_GetConfig+0x50>
 8006cf2:	e013      	b.n	8006d1c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	0019      	movs	r1, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	0018      	movs	r0, r3
 8006d06:	f000 f940 	bl	8006f8a <USBD_CtlSendData>
        break;
 8006d0a:	e00e      	b.n	8006d2a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1d19      	adds	r1, r3, #4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 f938 	bl	8006f8a <USBD_CtlSendData>
        break;
 8006d1a:	e006      	b.n	8006d2a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	0011      	movs	r1, r2
 8006d22:	0018      	movs	r0, r3
 8006d24:	f000 f8b3 	bl	8006e8e <USBD_CtlError>
        break;
 8006d28:	46c0      	nop			@ (mov r8, r8)
}
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	23a7      	movs	r3, #167	@ 0xa7
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	5cd3      	ldrb	r3, [r2, r3]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d822      	bhi.n	8006d90 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d006      	beq.n	8006d60 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0011      	movs	r1, r2
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 f898 	bl	8006e8e <USBD_CtlError>
        break;
 8006d5e:	e01e      	b.n	8006d9e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	23a9      	movs	r3, #169	@ 0xa9
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	58d3      	ldr	r3, [r2, r3]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	2202      	movs	r2, #2
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	330c      	adds	r3, #12
 8006d82:	0019      	movs	r1, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f000 f8fe 	bl	8006f8a <USBD_CtlSendData>
      break;
 8006d8e:	e006      	b.n	8006d9e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0011      	movs	r1, r2
 8006d96:	0018      	movs	r0, r3
 8006d98:	f000 f879 	bl	8006e8e <USBD_CtlError>
      break;
 8006d9c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006d9e:	46c0      	nop			@ (mov r8, r8)
 8006da0:	46bd      	mov	sp, r7
 8006da2:	b002      	add	sp, #8
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	885b      	ldrh	r3, [r3, #2]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d108      	bne.n	8006dca <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	23a9      	movs	r3, #169	@ 0xa9
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f000 f94a 	bl	800705e <USBD_CtlSendStatus>
  }
}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b002      	add	sp, #8
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	23a7      	movs	r3, #167	@ 0xa7
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	5cd3      	ldrb	r3, [r2, r3]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d80d      	bhi.n	8006e06 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	885b      	ldrh	r3, [r3, #2]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d110      	bne.n	8006e14 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	23a9      	movs	r3, #169	@ 0xa9
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	2100      	movs	r1, #0
 8006dfa:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f000 f92d 	bl	800705e <USBD_CtlSendStatus>
      }
      break;
 8006e04:	e006      	b.n	8006e14 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0011      	movs	r1, r2
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f000 f83e 	bl	8006e8e <USBD_CtlError>
      break;
 8006e12:	e000      	b.n	8006e16 <USBD_ClrFeature+0x44>
      break;
 8006e14:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b002      	add	sp, #8
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	785a      	ldrb	r2, [r3, #1]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	3302      	adds	r3, #2
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	001a      	movs	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	3303      	adds	r3, #3
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	18d3      	adds	r3, r2, r3
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	3304      	adds	r3, #4
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	001a      	movs	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3305      	adds	r3, #5
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	3306      	adds	r3, #6
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	001a      	movs	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	3307      	adds	r3, #7
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	18d3      	adds	r3, r2, r3
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	80da      	strh	r2, [r3, #6]

}
 8006e86:	46c0      	nop			@ (mov r8, r8)
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	b002      	add	sp, #8
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2180      	movs	r1, #128	@ 0x80
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f000 fcb6 	bl	800780e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f000 fcb1 	bl	800780e <USBD_LL_StallEP>
}
 8006eac:	46c0      	nop			@ (mov r8, r8)
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b002      	add	sp, #8
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ec0:	2417      	movs	r4, #23
 8006ec2:	193b      	adds	r3, r7, r4
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d03c      	beq.n	8006f48 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 f83d 	bl	8006f50 <USBD_GetLen>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	18db      	adds	r3, r3, r3
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ee4:	193b      	adds	r3, r7, r4
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	193a      	adds	r2, r7, r4
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	7011      	strb	r1, [r2, #0]
 8006eee:	001a      	movs	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7812      	ldrb	r2, [r2, #0]
 8006ef8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006efa:	193b      	adds	r3, r7, r4
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	193a      	adds	r2, r7, r4
 8006f00:	1c59      	adds	r1, r3, #1
 8006f02:	7011      	strb	r1, [r2, #0]
 8006f04:	001a      	movs	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	189b      	adds	r3, r3, r2
 8006f0a:	2203      	movs	r2, #3
 8006f0c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f0e:	e017      	b.n	8006f40 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	60fa      	str	r2, [r7, #12]
 8006f16:	2417      	movs	r4, #23
 8006f18:	193a      	adds	r2, r7, r4
 8006f1a:	7812      	ldrb	r2, [r2, #0]
 8006f1c:	1939      	adds	r1, r7, r4
 8006f1e:	1c50      	adds	r0, r2, #1
 8006f20:	7008      	strb	r0, [r1, #0]
 8006f22:	0011      	movs	r1, r2
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	1852      	adds	r2, r2, r1
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f2c:	193b      	adds	r3, r7, r4
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	193a      	adds	r2, r7, r4
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	7011      	strb	r1, [r2, #0]
 8006f36:	001a      	movs	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <USBD_GetString+0x5c>
    }
  }
}
 8006f48:	46c0      	nop			@ (mov r8, r8)
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b007      	add	sp, #28
 8006f4e:	bd90      	pop	{r4, r7, pc}

08006f50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f58:	230f      	movs	r3, #15
 8006f5a:	18fb      	adds	r3, r7, r3
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006f60:	e008      	b.n	8006f74 <USBD_GetLen+0x24>
  {
    len++;
 8006f62:	210f      	movs	r1, #15
 8006f64:	187b      	adds	r3, r7, r1
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	187b      	adds	r3, r7, r1
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
    buf++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3301      	adds	r3, #1
 8006f72:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f2      	bne.n	8006f62 <USBD_GetLen+0x12>
  }

  return len;
 8006f7c:	230f      	movs	r3, #15
 8006f7e:	18fb      	adds	r3, r7, r3
 8006f80:	781b      	ldrb	r3, [r3, #0]
}
 8006f82:	0018      	movs	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b004      	add	sp, #16
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	1dbb      	adds	r3, r7, #6
 8006f96:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	23a5      	movs	r3, #165	@ 0xa5
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	2102      	movs	r1, #2
 8006fa0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006fa2:	1dbb      	adds	r3, r7, #6
 8006fa4:	881a      	ldrh	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006faa:	1dbb      	adds	r3, r7, #6
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fb2:	1dbb      	adds	r3, r7, #6
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f000 fcd8 	bl	8007970 <USBD_LL_Transmit>

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	b004      	add	sp, #16
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	1dbb      	adds	r3, r7, #6
 8006fd6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fd8:	1dbb      	adds	r3, r7, #6
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f000 fcc5 	bl	8007970 <USBD_LL_Transmit>

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	0018      	movs	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	b004      	add	sp, #16
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	1dbb      	adds	r3, r7, #6
 8006ffc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	23a5      	movs	r3, #165	@ 0xa5
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	2103      	movs	r1, #3
 8007006:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007008:	1dbb      	adds	r3, r7, #6
 800700a:	8819      	ldrh	r1, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	23ae      	movs	r3, #174	@ 0xae
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8007014:	1dbb      	adds	r3, r7, #6
 8007016:	8819      	ldrh	r1, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	23b0      	movs	r3, #176	@ 0xb0
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007020:	1dbb      	adds	r3, r7, #6
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	2100      	movs	r1, #0
 800702a:	f000 fcd8 	bl	80079de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	0018      	movs	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	b004      	add	sp, #16
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	1dbb      	adds	r3, r7, #6
 8007044:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007046:	1dbb      	adds	r3, r7, #6
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	2100      	movs	r1, #0
 8007050:	f000 fcc5 	bl	80079de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	0018      	movs	r0, r3
 8007058:	46bd      	mov	sp, r7
 800705a:	b004      	add	sp, #16
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	23a5      	movs	r3, #165	@ 0xa5
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	2104      	movs	r1, #4
 800706e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	2300      	movs	r3, #0
 8007074:	2200      	movs	r2, #0
 8007076:	2100      	movs	r1, #0
 8007078:	f000 fc7a 	bl	8007970 <USBD_LL_Transmit>

  return USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	0018      	movs	r0, r3
 8007080:	46bd      	mov	sp, r7
 8007082:	b002      	add	sp, #8
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	23a5      	movs	r3, #165	@ 0xa5
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	2105      	movs	r1, #5
 8007096:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	2300      	movs	r3, #0
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	f000 fc9d 	bl	80079de <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	0018      	movs	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b002      	add	sp, #8
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070b4:	4914      	ldr	r1, [pc, #80]	@ (8007108 <MX_USB_DEVICE_Init+0x58>)
 80070b6:	4b15      	ldr	r3, [pc, #84]	@ (800710c <MX_USB_DEVICE_Init+0x5c>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	0018      	movs	r0, r3
 80070bc:	f7fe fdec 	bl	8005c98 <USBD_Init>
 80070c0:	1e03      	subs	r3, r0, #0
 80070c2:	d001      	beq.n	80070c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070c4:	f7f9 fa20 	bl	8000508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070c8:	4a11      	ldr	r2, [pc, #68]	@ (8007110 <MX_USB_DEVICE_Init+0x60>)
 80070ca:	4b10      	ldr	r3, [pc, #64]	@ (800710c <MX_USB_DEVICE_Init+0x5c>)
 80070cc:	0011      	movs	r1, r2
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7fe fe13 	bl	8005cfa <USBD_RegisterClass>
 80070d4:	1e03      	subs	r3, r0, #0
 80070d6:	d001      	beq.n	80070dc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80070d8:	f7f9 fa16 	bl	8000508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007114 <MX_USB_DEVICE_Init+0x64>)
 80070de:	4b0b      	ldr	r3, [pc, #44]	@ (800710c <MX_USB_DEVICE_Init+0x5c>)
 80070e0:	0011      	movs	r1, r2
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7fe fd28 	bl	8005b38 <USBD_CDC_RegisterInterface>
 80070e8:	1e03      	subs	r3, r0, #0
 80070ea:	d001      	beq.n	80070f0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80070ec:	f7f9 fa0c 	bl	8000508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <MX_USB_DEVICE_Init+0x5c>)
 80070f2:	0018      	movs	r0, r3
 80070f4:	f7fe fe21 	bl	8005d3a <USBD_Start>
 80070f8:	1e03      	subs	r3, r0, #0
 80070fa:	d001      	beq.n	8007100 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80070fc:	f7f9 fa04 	bl	8000508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007100:	46c0      	nop			@ (mov r8, r8)
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	2000012c 	.word	0x2000012c
 800710c:	2000024c 	.word	0x2000024c
 8007110:	20000018 	.word	0x20000018
 8007114:	2000011c 	.word	0x2000011c

08007118 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800711c:	4907      	ldr	r1, [pc, #28]	@ (800713c <CDC_Init_FS+0x24>)
 800711e:	4b08      	ldr	r3, [pc, #32]	@ (8007140 <CDC_Init_FS+0x28>)
 8007120:	2200      	movs	r2, #0
 8007122:	0018      	movs	r0, r3
 8007124:	f7fe fd23 	bl	8005b6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007128:	4a06      	ldr	r2, [pc, #24]	@ (8007144 <CDC_Init_FS+0x2c>)
 800712a:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <CDC_Init_FS+0x28>)
 800712c:	0011      	movs	r1, r2
 800712e:	0018      	movs	r0, r3
 8007130:	f7fe fd39 	bl	8005ba6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007134:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007136:	0018      	movs	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000910 	.word	0x20000910
 8007140:	2000024c 	.word	0x2000024c
 8007144:	20000510 	.word	0x20000510

08007148 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800714c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800714e:	0018      	movs	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6039      	str	r1, [r7, #0]
 800715c:	0011      	movs	r1, r2
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	1c02      	adds	r2, r0, #0
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	1c0a      	adds	r2, r1, #0
 8007168:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800716a:	1dfb      	adds	r3, r7, #7
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b23      	cmp	r3, #35	@ 0x23
 8007170:	d804      	bhi.n	800717c <CDC_Control_FS+0x28>
 8007172:	009a      	lsls	r2, r3, #2
 8007174:	4b04      	ldr	r3, [pc, #16]	@ (8007188 <CDC_Control_FS+0x34>)
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800717c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800717e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007180:	0018      	movs	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	b002      	add	sp, #8
 8007186:	bd80      	pop	{r7, pc}
 8007188:	08008538 	.word	0x08008538

0800718c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4b06      	ldr	r3, [pc, #24]	@ (80071b4 <CDC_Receive_FS+0x28>)
 800719a:	0011      	movs	r1, r2
 800719c:	0018      	movs	r0, r3
 800719e:	f7fe fd02 	bl	8005ba6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071a2:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <CDC_Receive_FS+0x28>)
 80071a4:	0018      	movs	r0, r3
 80071a6:	f7fe fd49 	bl	8005c3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071ac:	0018      	movs	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b002      	add	sp, #8
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	2000024c 	.word	0x2000024c

080071b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80071b8:	b5b0      	push	{r4, r5, r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	000a      	movs	r2, r1
 80071c2:	1cbb      	adds	r3, r7, #2
 80071c4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80071c6:	230f      	movs	r3, #15
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80071ce:	4a11      	ldr	r2, [pc, #68]	@ (8007214 <CDC_Transmit_FS+0x5c>)
 80071d0:	23ae      	movs	r3, #174	@ 0xae
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	58d3      	ldr	r3, [r2, r3]
 80071d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	2385      	movs	r3, #133	@ 0x85
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	58d3      	ldr	r3, [r2, r3]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e010      	b.n	800720a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80071e8:	1cbb      	adds	r3, r7, #2
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <CDC_Transmit_FS+0x5c>)
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7fe fcbc 	bl	8005b6e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80071f6:	250f      	movs	r5, #15
 80071f8:	197c      	adds	r4, r7, r5
 80071fa:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <CDC_Transmit_FS+0x5c>)
 80071fc:	0018      	movs	r0, r3
 80071fe:	f7fe fce6 	bl	8005bce <USBD_CDC_TransmitPacket>
 8007202:	0003      	movs	r3, r0
 8007204:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8007206:	197b      	adds	r3, r7, r5
 8007208:	781b      	ldrb	r3, [r3, #0]
}
 800720a:	0018      	movs	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	b004      	add	sp, #16
 8007210:	bdb0      	pop	{r4, r5, r7, pc}
 8007212:	46c0      	nop			@ (mov r8, r8)
 8007214:	2000024c 	.word	0x2000024c

08007218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	0002      	movs	r2, r0
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	1dfb      	adds	r3, r7, #7
 8007224:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2212      	movs	r2, #18
 800722a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800722c:	4b02      	ldr	r3, [pc, #8]	@ (8007238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800722e:	0018      	movs	r0, r3
 8007230:	46bd      	mov	sp, r7
 8007232:	b002      	add	sp, #8
 8007234:	bd80      	pop	{r7, pc}
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	20000148 	.word	0x20000148

0800723c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	0002      	movs	r2, r0
 8007244:	6039      	str	r1, [r7, #0]
 8007246:	1dfb      	adds	r3, r7, #7
 8007248:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2204      	movs	r2, #4
 800724e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007250:	4b02      	ldr	r3, [pc, #8]	@ (800725c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b002      	add	sp, #8
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	2000015c 	.word	0x2000015c

08007260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	0002      	movs	r2, r0
 8007268:	6039      	str	r1, [r7, #0]
 800726a:	1dfb      	adds	r3, r7, #7
 800726c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800726e:	1dfb      	adds	r3, r7, #7
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	4908      	ldr	r1, [pc, #32]	@ (800729c <USBD_FS_ProductStrDescriptor+0x3c>)
 800727a:	4b09      	ldr	r3, [pc, #36]	@ (80072a0 <USBD_FS_ProductStrDescriptor+0x40>)
 800727c:	0018      	movs	r0, r3
 800727e:	f7ff fe19 	bl	8006eb4 <USBD_GetString>
 8007282:	e005      	b.n	8007290 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	4905      	ldr	r1, [pc, #20]	@ (800729c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007288:	4b05      	ldr	r3, [pc, #20]	@ (80072a0 <USBD_FS_ProductStrDescriptor+0x40>)
 800728a:	0018      	movs	r0, r3
 800728c:	f7ff fe12 	bl	8006eb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007290:	4b02      	ldr	r3, [pc, #8]	@ (800729c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b002      	add	sp, #8
 8007298:	bd80      	pop	{r7, pc}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	20000d10 	.word	0x20000d10
 80072a0:	08008474 	.word	0x08008474

080072a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	0002      	movs	r2, r0
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	1dfb      	adds	r3, r7, #7
 80072b0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	4904      	ldr	r1, [pc, #16]	@ (80072c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072b6:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7ff fdfb 	bl	8006eb4 <USBD_GetString>
  return USBD_StrDesc;
 80072be:	4b02      	ldr	r3, [pc, #8]	@ (80072c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80072c0:	0018      	movs	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b002      	add	sp, #8
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	20000d10 	.word	0x20000d10
 80072cc:	0800848c 	.word	0x0800848c

080072d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	0002      	movs	r2, r0
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	1dfb      	adds	r3, r7, #7
 80072dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	221a      	movs	r2, #26
 80072e2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072e4:	f000 f84c 	bl	8007380 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072e8:	4b02      	ldr	r3, [pc, #8]	@ (80072f4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80072ea:	0018      	movs	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b002      	add	sp, #8
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	46c0      	nop			@ (mov r8, r8)
 80072f4:	20000160 	.word	0x20000160

080072f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	0002      	movs	r2, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	1dfb      	adds	r3, r7, #7
 8007304:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007306:	1dfb      	adds	r3, r7, #7
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	4908      	ldr	r1, [pc, #32]	@ (8007334 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007312:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007314:	0018      	movs	r0, r3
 8007316:	f7ff fdcd 	bl	8006eb4 <USBD_GetString>
 800731a:	e005      	b.n	8007328 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	4905      	ldr	r1, [pc, #20]	@ (8007334 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007320:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007322:	0018      	movs	r0, r3
 8007324:	f7ff fdc6 	bl	8006eb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007328:	4b02      	ldr	r3, [pc, #8]	@ (8007334 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800732a:	0018      	movs	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	b002      	add	sp, #8
 8007330:	bd80      	pop	{r7, pc}
 8007332:	46c0      	nop			@ (mov r8, r8)
 8007334:	20000d10 	.word	0x20000d10
 8007338:	080084a0 	.word	0x080084a0

0800733c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	0002      	movs	r2, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	1dfb      	adds	r3, r7, #7
 8007348:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800734a:	1dfb      	adds	r3, r7, #7
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	4908      	ldr	r1, [pc, #32]	@ (8007378 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007356:	4b09      	ldr	r3, [pc, #36]	@ (800737c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff fdab 	bl	8006eb4 <USBD_GetString>
 800735e:	e005      	b.n	800736c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	4905      	ldr	r1, [pc, #20]	@ (8007378 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007364:	4b05      	ldr	r3, [pc, #20]	@ (800737c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007366:	0018      	movs	r0, r3
 8007368:	f7ff fda4 	bl	8006eb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800736c:	4b02      	ldr	r3, [pc, #8]	@ (8007378 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800736e:	0018      	movs	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	b002      	add	sp, #8
 8007374:	bd80      	pop	{r7, pc}
 8007376:	46c0      	nop			@ (mov r8, r8)
 8007378:	20000d10 	.word	0x20000d10
 800737c:	080084ac 	.word	0x080084ac

08007380 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007386:	4b10      	ldr	r3, [pc, #64]	@ (80073c8 <Get_SerialNum+0x48>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800738c:	4b0f      	ldr	r3, [pc, #60]	@ (80073cc <Get_SerialNum+0x4c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007392:	4b0f      	ldr	r3, [pc, #60]	@ (80073d0 <Get_SerialNum+0x50>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	18d3      	adds	r3, r2, r3
 800739e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073a6:	490b      	ldr	r1, [pc, #44]	@ (80073d4 <Get_SerialNum+0x54>)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2208      	movs	r2, #8
 80073ac:	0018      	movs	r0, r3
 80073ae:	f000 f815 	bl	80073dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073b2:	4909      	ldr	r1, [pc, #36]	@ (80073d8 <Get_SerialNum+0x58>)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2204      	movs	r2, #4
 80073b8:	0018      	movs	r0, r3
 80073ba:	f000 f80f 	bl	80073dc <IntToUnicode>
  }
}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b004      	add	sp, #16
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	46c0      	nop			@ (mov r8, r8)
 80073c8:	1ff80050 	.word	0x1ff80050
 80073cc:	1ff80054 	.word	0x1ff80054
 80073d0:	1ff80058 	.word	0x1ff80058
 80073d4:	20000162 	.word	0x20000162
 80073d8:	20000172 	.word	0x20000172

080073dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	1dfb      	adds	r3, r7, #7
 80073e8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80073ea:	2117      	movs	r1, #23
 80073ec:	187b      	adds	r3, r7, r1
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80073f2:	187b      	adds	r3, r7, r1
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	e02f      	b.n	800745a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	0f1b      	lsrs	r3, r3, #28
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d80d      	bhi.n	800741e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	0f1b      	lsrs	r3, r3, #28
 8007406:	b2da      	uxtb	r2, r3
 8007408:	2317      	movs	r3, #23
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	0019      	movs	r1, r3
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	185b      	adds	r3, r3, r1
 8007416:	3230      	adds	r2, #48	@ 0x30
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	701a      	strb	r2, [r3, #0]
 800741c:	e00c      	b.n	8007438 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	0f1b      	lsrs	r3, r3, #28
 8007422:	b2da      	uxtb	r2, r3
 8007424:	2317      	movs	r3, #23
 8007426:	18fb      	adds	r3, r7, r3
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	0019      	movs	r1, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	185b      	adds	r3, r3, r1
 8007432:	3237      	adds	r2, #55	@ 0x37
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800743e:	2117      	movs	r1, #23
 8007440:	187b      	adds	r3, r7, r1
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	3301      	adds	r3, #1
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	18d3      	adds	r3, r2, r3
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007450:	187b      	adds	r3, r7, r1
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	187b      	adds	r3, r7, r1
 8007456:	3201      	adds	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	2317      	movs	r3, #23
 800745c:	18fa      	adds	r2, r7, r3
 800745e:	1dfb      	adds	r3, r7, #7
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d3c8      	bcc.n	80073fa <IntToUnicode+0x1e>
  }
}
 8007468:	46c0      	nop			@ (mov r8, r8)
 800746a:	46c0      	nop			@ (mov r8, r8)
 800746c:	46bd      	mov	sp, r7
 800746e:	b006      	add	sp, #24
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0a      	ldr	r2, [pc, #40]	@ (80074ac <HAL_PCD_MspInit+0x38>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d10e      	bne.n	80074a4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007486:	4b0a      	ldr	r3, [pc, #40]	@ (80074b0 <HAL_PCD_MspInit+0x3c>)
 8007488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800748a:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <HAL_PCD_MspInit+0x3c>)
 800748c:	2180      	movs	r1, #128	@ 0x80
 800748e:	0409      	lsls	r1, r1, #16
 8007490:	430a      	orrs	r2, r1
 8007492:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	201f      	movs	r0, #31
 800749a:	f7f9 fa5f 	bl	800095c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800749e:	201f      	movs	r0, #31
 80074a0:	f7f9 fa71 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80074a4:	46c0      	nop			@ (mov r8, r8)
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b002      	add	sp, #8
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40005c00 	.word	0x40005c00
 80074b0:	40021000 	.word	0x40021000

080074b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	23b6      	movs	r3, #182	@ 0xb6
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	58d2      	ldr	r2, [r2, r3]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	21a6      	movs	r1, #166	@ 0xa6
 80074c8:	0089      	lsls	r1, r1, #2
 80074ca:	468c      	mov	ip, r1
 80074cc:	4463      	add	r3, ip
 80074ce:	0019      	movs	r1, r3
 80074d0:	0010      	movs	r0, r2
 80074d2:	f7fe fc85 	bl	8005de0 <USBD_LL_SetupStage>
}
 80074d6:	46c0      	nop			@ (mov r8, r8)
 80074d8:	46bd      	mov	sp, r7
 80074da:	b002      	add	sp, #8
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074de:	b590      	push	{r4, r7, lr}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	000a      	movs	r2, r1
 80074e8:	1cfb      	adds	r3, r7, #3
 80074ea:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	23b6      	movs	r3, #182	@ 0xb6
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	58d4      	ldr	r4, [r2, r3]
 80074f4:	1cfb      	adds	r3, r7, #3
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	23b2      	movs	r3, #178	@ 0xb2
 80074fc:	0059      	lsls	r1, r3, #1
 80074fe:	0013      	movs	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	189b      	adds	r3, r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	18c3      	adds	r3, r0, r3
 8007508:	185b      	adds	r3, r3, r1
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	1cfb      	adds	r3, r7, #3
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	0019      	movs	r1, r3
 8007512:	0020      	movs	r0, r4
 8007514:	f7fe fcc2 	bl	8005e9c <USBD_LL_DataOutStage>
}
 8007518:	46c0      	nop			@ (mov r8, r8)
 800751a:	46bd      	mov	sp, r7
 800751c:	b003      	add	sp, #12
 800751e:	bd90      	pop	{r4, r7, pc}

08007520 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	000a      	movs	r2, r1
 800752a:	1cfb      	adds	r3, r7, #3
 800752c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	23b6      	movs	r3, #182	@ 0xb6
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	58d0      	ldr	r0, [r2, r3]
 8007536:	1cfb      	adds	r3, r7, #3
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	0013      	movs	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	189b      	adds	r3, r3, r2
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	18cb      	adds	r3, r1, r3
 8007546:	3324      	adds	r3, #36	@ 0x24
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	1cfb      	adds	r3, r7, #3
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	0019      	movs	r1, r3
 8007550:	f7fe fd26 	bl	8005fa0 <USBD_LL_DataInStage>
}
 8007554:	46c0      	nop			@ (mov r8, r8)
 8007556:	46bd      	mov	sp, r7
 8007558:	b002      	add	sp, #8
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	23b6      	movs	r3, #182	@ 0xb6
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	58d3      	ldr	r3, [r2, r3]
 800756c:	0018      	movs	r0, r3
 800756e:	f7fe fe5d 	bl	800622c <USBD_LL_SOF>
}
 8007572:	46c0      	nop			@ (mov r8, r8)
 8007574:	46bd      	mov	sp, r7
 8007576:	b002      	add	sp, #8
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007582:	230f      	movs	r3, #15
 8007584:	18fb      	adds	r3, r7, r3
 8007586:	2201      	movs	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d001      	beq.n	8007596 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007592:	f7f8 ffb9 	bl	8000508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	23b6      	movs	r3, #182	@ 0xb6
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	58d2      	ldr	r2, [r2, r3]
 800759e:	230f      	movs	r3, #15
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	0019      	movs	r1, r3
 80075a6:	0010      	movs	r0, r2
 80075a8:	f7fe fdff 	bl	80061aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	23b6      	movs	r3, #182	@ 0xb6
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	58d3      	ldr	r3, [r2, r3]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7fe fdb0 	bl	800611a <USBD_LL_Reset>
}
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	46bd      	mov	sp, r7
 80075be:	b004      	add	sp, #16
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	23b6      	movs	r3, #182	@ 0xb6
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	58d3      	ldr	r3, [r2, r3]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f7fe fdf9 	bl	80061cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7a5b      	ldrb	r3, [r3, #9]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075e2:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <HAL_PCD_SuspendCallback+0x34>)
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <HAL_PCD_SuspendCallback+0x34>)
 80075e8:	2106      	movs	r1, #6
 80075ea:	430a      	orrs	r2, r1
 80075ec:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80075ee:	46c0      	nop			@ (mov r8, r8)
 80075f0:	46bd      	mov	sp, r7
 80075f2:	b002      	add	sp, #8
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	46c0      	nop			@ (mov r8, r8)
 80075f8:	e000ed00 	.word	0xe000ed00

080075fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	7a5b      	ldrb	r3, [r3, #9]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800760c:	4b09      	ldr	r3, [pc, #36]	@ (8007634 <HAL_PCD_ResumeCallback+0x38>)
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	4b08      	ldr	r3, [pc, #32]	@ (8007634 <HAL_PCD_ResumeCallback+0x38>)
 8007612:	2106      	movs	r1, #6
 8007614:	438a      	bics	r2, r1
 8007616:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007618:	f000 fa42 	bl	8007aa0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	23b6      	movs	r3, #182	@ 0xb6
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	58d3      	ldr	r3, [r2, r3]
 8007624:	0018      	movs	r0, r3
 8007626:	f7fe fde9 	bl	80061fc <USBD_LL_Resume>
}
 800762a:	46c0      	nop			@ (mov r8, r8)
 800762c:	46bd      	mov	sp, r7
 800762e:	b002      	add	sp, #8
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	e000ed00 	.word	0xe000ed00

08007638 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007640:	4a2d      	ldr	r2, [pc, #180]	@ (80076f8 <USBD_LL_Init+0xc0>)
 8007642:	23b6      	movs	r3, #182	@ 0xb6
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	23b0      	movs	r3, #176	@ 0xb0
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4929      	ldr	r1, [pc, #164]	@ (80076f8 <USBD_LL_Init+0xc0>)
 8007652:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007654:	4b28      	ldr	r3, [pc, #160]	@ (80076f8 <USBD_LL_Init+0xc0>)
 8007656:	4a29      	ldr	r2, [pc, #164]	@ (80076fc <USBD_LL_Init+0xc4>)
 8007658:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800765a:	4b27      	ldr	r3, [pc, #156]	@ (80076f8 <USBD_LL_Init+0xc0>)
 800765c:	2208      	movs	r2, #8
 800765e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007660:	4b25      	ldr	r3, [pc, #148]	@ (80076f8 <USBD_LL_Init+0xc0>)
 8007662:	2202      	movs	r2, #2
 8007664:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007666:	4b24      	ldr	r3, [pc, #144]	@ (80076f8 <USBD_LL_Init+0xc0>)
 8007668:	2202      	movs	r2, #2
 800766a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800766c:	4b22      	ldr	r3, [pc, #136]	@ (80076f8 <USBD_LL_Init+0xc0>)
 800766e:	2200      	movs	r2, #0
 8007670:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007672:	4b21      	ldr	r3, [pc, #132]	@ (80076f8 <USBD_LL_Init+0xc0>)
 8007674:	2200      	movs	r2, #0
 8007676:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007678:	4b1f      	ldr	r3, [pc, #124]	@ (80076f8 <USBD_LL_Init+0xc0>)
 800767a:	2200      	movs	r2, #0
 800767c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800767e:	4b1e      	ldr	r3, [pc, #120]	@ (80076f8 <USBD_LL_Init+0xc0>)
 8007680:	0018      	movs	r0, r3
 8007682:	f7f9 fb53 	bl	8000d2c <HAL_PCD_Init>
 8007686:	1e03      	subs	r3, r0, #0
 8007688:	d001      	beq.n	800768e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800768a:	f7f8 ff3d 	bl	8000508 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	23b0      	movs	r3, #176	@ 0xb0
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	58d0      	ldr	r0, [r2, r3]
 8007696:	2318      	movs	r3, #24
 8007698:	2200      	movs	r2, #0
 800769a:	2100      	movs	r1, #0
 800769c:	f7fb f90e 	bl	80028bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	23b0      	movs	r3, #176	@ 0xb0
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	58d0      	ldr	r0, [r2, r3]
 80076a8:	2358      	movs	r3, #88	@ 0x58
 80076aa:	2200      	movs	r2, #0
 80076ac:	2180      	movs	r1, #128	@ 0x80
 80076ae:	f7fb f905 	bl	80028bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	23b0      	movs	r3, #176	@ 0xb0
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	58d0      	ldr	r0, [r2, r3]
 80076ba:	23c0      	movs	r3, #192	@ 0xc0
 80076bc:	2200      	movs	r2, #0
 80076be:	2181      	movs	r1, #129	@ 0x81
 80076c0:	f7fb f8fc 	bl	80028bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	23b0      	movs	r3, #176	@ 0xb0
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	58d0      	ldr	r0, [r2, r3]
 80076cc:	2388      	movs	r3, #136	@ 0x88
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	2200      	movs	r2, #0
 80076d2:	2101      	movs	r1, #1
 80076d4:	f7fb f8f2 	bl	80028bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	23b0      	movs	r3, #176	@ 0xb0
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	58d0      	ldr	r0, [r2, r3]
 80076e0:	2380      	movs	r3, #128	@ 0x80
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	2200      	movs	r2, #0
 80076e6:	2182      	movs	r1, #130	@ 0x82
 80076e8:	f7fb f8e8 	bl	80028bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	0018      	movs	r0, r3
 80076f0:	46bd      	mov	sp, r7
 80076f2:	b002      	add	sp, #8
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	46c0      	nop			@ (mov r8, r8)
 80076f8:	20000f10 	.word	0x20000f10
 80076fc:	40005c00 	.word	0x40005c00

08007700 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007708:	210f      	movs	r1, #15
 800770a:	187b      	adds	r3, r7, r1
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007710:	260e      	movs	r6, #14
 8007712:	19bb      	adds	r3, r7, r6
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	23b0      	movs	r3, #176	@ 0xb0
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	58d3      	ldr	r3, [r2, r3]
 8007720:	000d      	movs	r5, r1
 8007722:	187c      	adds	r4, r7, r1
 8007724:	0018      	movs	r0, r3
 8007726:	f7f9 fbf5 	bl	8000f14 <HAL_PCD_Start>
 800772a:	0003      	movs	r3, r0
 800772c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772e:	19bc      	adds	r4, r7, r6
 8007730:	197b      	adds	r3, r7, r5
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	0018      	movs	r0, r3
 8007736:	f000 f9ba 	bl	8007aae <USBD_Get_USB_Status>
 800773a:	0003      	movs	r3, r0
 800773c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800773e:	19bb      	adds	r3, r7, r6
 8007740:	781b      	ldrb	r3, [r3, #0]
}
 8007742:	0018      	movs	r0, r3
 8007744:	46bd      	mov	sp, r7
 8007746:	b005      	add	sp, #20
 8007748:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800774a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800774a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	000c      	movs	r4, r1
 8007754:	0010      	movs	r0, r2
 8007756:	0019      	movs	r1, r3
 8007758:	1cfb      	adds	r3, r7, #3
 800775a:	1c22      	adds	r2, r4, #0
 800775c:	701a      	strb	r2, [r3, #0]
 800775e:	1cbb      	adds	r3, r7, #2
 8007760:	1c02      	adds	r2, r0, #0
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	003b      	movs	r3, r7
 8007766:	1c0a      	adds	r2, r1, #0
 8007768:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776a:	260f      	movs	r6, #15
 800776c:	19bb      	adds	r3, r7, r6
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007772:	250e      	movs	r5, #14
 8007774:	197b      	adds	r3, r7, r5
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	23b0      	movs	r3, #176	@ 0xb0
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	58d0      	ldr	r0, [r2, r3]
 8007782:	19bc      	adds	r4, r7, r6
 8007784:	1cbb      	adds	r3, r7, #2
 8007786:	781d      	ldrb	r5, [r3, #0]
 8007788:	003b      	movs	r3, r7
 800778a:	881a      	ldrh	r2, [r3, #0]
 800778c:	1cfb      	adds	r3, r7, #3
 800778e:	7819      	ldrb	r1, [r3, #0]
 8007790:	002b      	movs	r3, r5
 8007792:	f7f9 fd53 	bl	800123c <HAL_PCD_EP_Open>
 8007796:	0003      	movs	r3, r0
 8007798:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800779a:	250e      	movs	r5, #14
 800779c:	197c      	adds	r4, r7, r5
 800779e:	19bb      	adds	r3, r7, r6
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	0018      	movs	r0, r3
 80077a4:	f000 f983 	bl	8007aae <USBD_Get_USB_Status>
 80077a8:	0003      	movs	r3, r0
 80077aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80077ac:	197b      	adds	r3, r7, r5
 80077ae:	781b      	ldrb	r3, [r3, #0]
}
 80077b0:	0018      	movs	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b005      	add	sp, #20
 80077b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	000a      	movs	r2, r1
 80077c2:	1cfb      	adds	r3, r7, #3
 80077c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c6:	210f      	movs	r1, #15
 80077c8:	187b      	adds	r3, r7, r1
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ce:	260e      	movs	r6, #14
 80077d0:	19bb      	adds	r3, r7, r6
 80077d2:	2200      	movs	r2, #0
 80077d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	23b0      	movs	r3, #176	@ 0xb0
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	58d2      	ldr	r2, [r2, r3]
 80077de:	000d      	movs	r5, r1
 80077e0:	187c      	adds	r4, r7, r1
 80077e2:	1cfb      	adds	r3, r7, #3
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	0019      	movs	r1, r3
 80077e8:	0010      	movs	r0, r2
 80077ea:	f7f9 fd98 	bl	800131e <HAL_PCD_EP_Close>
 80077ee:	0003      	movs	r3, r0
 80077f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077f2:	19bc      	adds	r4, r7, r6
 80077f4:	197b      	adds	r3, r7, r5
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	0018      	movs	r0, r3
 80077fa:	f000 f958 	bl	8007aae <USBD_Get_USB_Status>
 80077fe:	0003      	movs	r3, r0
 8007800:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007802:	19bb      	adds	r3, r7, r6
 8007804:	781b      	ldrb	r3, [r3, #0]
}
 8007806:	0018      	movs	r0, r3
 8007808:	46bd      	mov	sp, r7
 800780a:	b005      	add	sp, #20
 800780c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800780e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800780e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	000a      	movs	r2, r1
 8007818:	1cfb      	adds	r3, r7, #3
 800781a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800781c:	210f      	movs	r1, #15
 800781e:	187b      	adds	r3, r7, r1
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007824:	260e      	movs	r6, #14
 8007826:	19bb      	adds	r3, r7, r6
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	23b0      	movs	r3, #176	@ 0xb0
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	58d2      	ldr	r2, [r2, r3]
 8007834:	000d      	movs	r5, r1
 8007836:	187c      	adds	r4, r7, r1
 8007838:	1cfb      	adds	r3, r7, #3
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	0019      	movs	r1, r3
 800783e:	0010      	movs	r0, r2
 8007840:	f7f9 fe4a 	bl	80014d8 <HAL_PCD_EP_SetStall>
 8007844:	0003      	movs	r3, r0
 8007846:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007848:	19bc      	adds	r4, r7, r6
 800784a:	197b      	adds	r3, r7, r5
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	0018      	movs	r0, r3
 8007850:	f000 f92d 	bl	8007aae <USBD_Get_USB_Status>
 8007854:	0003      	movs	r3, r0
 8007856:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007858:	19bb      	adds	r3, r7, r6
 800785a:	781b      	ldrb	r3, [r3, #0]
}
 800785c:	0018      	movs	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	b005      	add	sp, #20
 8007862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007864 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	000a      	movs	r2, r1
 800786e:	1cfb      	adds	r3, r7, #3
 8007870:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007872:	210f      	movs	r1, #15
 8007874:	187b      	adds	r3, r7, r1
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787a:	260e      	movs	r6, #14
 800787c:	19bb      	adds	r3, r7, r6
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	23b0      	movs	r3, #176	@ 0xb0
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	58d2      	ldr	r2, [r2, r3]
 800788a:	000d      	movs	r5, r1
 800788c:	187c      	adds	r4, r7, r1
 800788e:	1cfb      	adds	r3, r7, #3
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	0019      	movs	r1, r3
 8007894:	0010      	movs	r0, r2
 8007896:	f7f9 fe7b 	bl	8001590 <HAL_PCD_EP_ClrStall>
 800789a:	0003      	movs	r3, r0
 800789c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800789e:	19bc      	adds	r4, r7, r6
 80078a0:	197b      	adds	r3, r7, r5
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	0018      	movs	r0, r3
 80078a6:	f000 f902 	bl	8007aae <USBD_Get_USB_Status>
 80078aa:	0003      	movs	r3, r0
 80078ac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078ae:	19bb      	adds	r3, r7, r6
 80078b0:	781b      	ldrb	r3, [r3, #0]
}
 80078b2:	0018      	movs	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b005      	add	sp, #20
 80078b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078ba <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	000a      	movs	r2, r1
 80078c4:	1cfb      	adds	r3, r7, #3
 80078c6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	23b0      	movs	r3, #176	@ 0xb0
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	58d3      	ldr	r3, [r2, r3]
 80078d0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078d2:	1cfb      	adds	r3, r7, #3
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	b25b      	sxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	da0c      	bge.n	80078f6 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078dc:	1cfb      	adds	r3, r7, #3
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	227f      	movs	r2, #127	@ 0x7f
 80078e2:	401a      	ands	r2, r3
 80078e4:	68f9      	ldr	r1, [r7, #12]
 80078e6:	0013      	movs	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	189b      	adds	r3, r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	18cb      	adds	r3, r1, r3
 80078f0:	3312      	adds	r3, #18
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	e00d      	b.n	8007912 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078f6:	1cfb      	adds	r3, r7, #3
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	227f      	movs	r2, #127	@ 0x7f
 80078fc:	401a      	ands	r2, r3
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	23a9      	movs	r3, #169	@ 0xa9
 8007902:	0059      	lsls	r1, r3, #1
 8007904:	0013      	movs	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	189b      	adds	r3, r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	18c3      	adds	r3, r0, r3
 800790e:	185b      	adds	r3, r3, r1
 8007910:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007912:	0018      	movs	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	b004      	add	sp, #16
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800791a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	000a      	movs	r2, r1
 8007924:	1cfb      	adds	r3, r7, #3
 8007926:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007928:	210f      	movs	r1, #15
 800792a:	187b      	adds	r3, r7, r1
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007930:	260e      	movs	r6, #14
 8007932:	19bb      	adds	r3, r7, r6
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	23b0      	movs	r3, #176	@ 0xb0
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	58d2      	ldr	r2, [r2, r3]
 8007940:	000d      	movs	r5, r1
 8007942:	187c      	adds	r4, r7, r1
 8007944:	1cfb      	adds	r3, r7, #3
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	0019      	movs	r1, r3
 800794a:	0010      	movs	r0, r2
 800794c:	f7f9 fc4c 	bl	80011e8 <HAL_PCD_SetAddress>
 8007950:	0003      	movs	r3, r0
 8007952:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007954:	19bc      	adds	r4, r7, r6
 8007956:	197b      	adds	r3, r7, r5
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	0018      	movs	r0, r3
 800795c:	f000 f8a7 	bl	8007aae <USBD_Get_USB_Status>
 8007960:	0003      	movs	r3, r0
 8007962:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007964:	19bb      	adds	r3, r7, r6
 8007966:	781b      	ldrb	r3, [r3, #0]
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b005      	add	sp, #20
 800796e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007970 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	0008      	movs	r0, r1
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	0019      	movs	r1, r3
 800797e:	230b      	movs	r3, #11
 8007980:	18fb      	adds	r3, r7, r3
 8007982:	1c02      	adds	r2, r0, #0
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	2408      	movs	r4, #8
 8007988:	193b      	adds	r3, r7, r4
 800798a:	1c0a      	adds	r2, r1, #0
 800798c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800798e:	2117      	movs	r1, #23
 8007990:	187b      	adds	r3, r7, r1
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007996:	2516      	movs	r5, #22
 8007998:	197b      	adds	r3, r7, r5
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	23b0      	movs	r3, #176	@ 0xb0
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	58d0      	ldr	r0, [r2, r3]
 80079a6:	193b      	adds	r3, r7, r4
 80079a8:	881d      	ldrh	r5, [r3, #0]
 80079aa:	000e      	movs	r6, r1
 80079ac:	187c      	adds	r4, r7, r1
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	230b      	movs	r3, #11
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	7819      	ldrb	r1, [r3, #0]
 80079b6:	002b      	movs	r3, r5
 80079b8:	f7f9 fd52 	bl	8001460 <HAL_PCD_EP_Transmit>
 80079bc:	0003      	movs	r3, r0
 80079be:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c0:	2516      	movs	r5, #22
 80079c2:	197c      	adds	r4, r7, r5
 80079c4:	19bb      	adds	r3, r7, r6
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	0018      	movs	r0, r3
 80079ca:	f000 f870 	bl	8007aae <USBD_Get_USB_Status>
 80079ce:	0003      	movs	r3, r0
 80079d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80079d2:	197b      	adds	r3, r7, r5
 80079d4:	781b      	ldrb	r3, [r3, #0]
}
 80079d6:	0018      	movs	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	b007      	add	sp, #28
 80079dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80079de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e0:	b087      	sub	sp, #28
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	0008      	movs	r0, r1
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	0019      	movs	r1, r3
 80079ec:	230b      	movs	r3, #11
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	1c02      	adds	r2, r0, #0
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	2408      	movs	r4, #8
 80079f6:	193b      	adds	r3, r7, r4
 80079f8:	1c0a      	adds	r2, r1, #0
 80079fa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079fc:	2117      	movs	r1, #23
 80079fe:	187b      	adds	r3, r7, r1
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a04:	2516      	movs	r5, #22
 8007a06:	197b      	adds	r3, r7, r5
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	23b0      	movs	r3, #176	@ 0xb0
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	58d0      	ldr	r0, [r2, r3]
 8007a14:	193b      	adds	r3, r7, r4
 8007a16:	881d      	ldrh	r5, [r3, #0]
 8007a18:	000e      	movs	r6, r1
 8007a1a:	187c      	adds	r4, r7, r1
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	230b      	movs	r3, #11
 8007a20:	18fb      	adds	r3, r7, r3
 8007a22:	7819      	ldrb	r1, [r3, #0]
 8007a24:	002b      	movs	r3, r5
 8007a26:	f7f9 fccb 	bl	80013c0 <HAL_PCD_EP_Receive>
 8007a2a:	0003      	movs	r3, r0
 8007a2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a2e:	2516      	movs	r5, #22
 8007a30:	197c      	adds	r4, r7, r5
 8007a32:	19bb      	adds	r3, r7, r6
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	0018      	movs	r0, r3
 8007a38:	f000 f839 	bl	8007aae <USBD_Get_USB_Status>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a40:	197b      	adds	r3, r7, r5
 8007a42:	781b      	ldrb	r3, [r3, #0]
}
 8007a44:	0018      	movs	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b007      	add	sp, #28
 8007a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a4c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	000a      	movs	r2, r1
 8007a56:	1cfb      	adds	r3, r7, #3
 8007a58:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	23b0      	movs	r3, #176	@ 0xb0
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	58d2      	ldr	r2, [r2, r3]
 8007a62:	1cfb      	adds	r3, r7, #3
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	0019      	movs	r1, r3
 8007a68:	0010      	movs	r0, r2
 8007a6a:	f7f9 fce0 	bl	800142e <HAL_PCD_EP_GetRxCount>
 8007a6e:	0003      	movs	r3, r0
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b002      	add	sp, #8
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a80:	4b02      	ldr	r3, [pc, #8]	@ (8007a8c <USBD_static_malloc+0x14>)
}
 8007a82:	0018      	movs	r0, r3
 8007a84:	46bd      	mov	sp, r7
 8007a86:	b002      	add	sp, #8
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	200011ec 	.word	0x200011ec

08007a90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

}
 8007a98:	46c0      	nop			@ (mov r8, r8)
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007aa4:	f7f8 fc10 	bl	80002c8 <SystemClock_Config>
}
 8007aa8:	46c0      	nop			@ (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	0002      	movs	r2, r0
 8007ab6:	1dfb      	adds	r3, r7, #7
 8007ab8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aba:	230f      	movs	r3, #15
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007ac2:	1dfb      	adds	r3, r7, #7
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d017      	beq.n	8007afa <USBD_Get_USB_Status+0x4c>
 8007aca:	dc1b      	bgt.n	8007b04 <USBD_Get_USB_Status+0x56>
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d00f      	beq.n	8007af0 <USBD_Get_USB_Status+0x42>
 8007ad0:	dc18      	bgt.n	8007b04 <USBD_Get_USB_Status+0x56>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <USBD_Get_USB_Status+0x2e>
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d005      	beq.n	8007ae6 <USBD_Get_USB_Status+0x38>
 8007ada:	e013      	b.n	8007b04 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007adc:	230f      	movs	r3, #15
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
    break;
 8007ae4:	e013      	b.n	8007b0e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ae6:	230f      	movs	r3, #15
 8007ae8:	18fb      	adds	r3, r7, r3
 8007aea:	2202      	movs	r2, #2
 8007aec:	701a      	strb	r2, [r3, #0]
    break;
 8007aee:	e00e      	b.n	8007b0e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007af0:	230f      	movs	r3, #15
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	2201      	movs	r2, #1
 8007af6:	701a      	strb	r2, [r3, #0]
    break;
 8007af8:	e009      	b.n	8007b0e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007afa:	230f      	movs	r3, #15
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	2202      	movs	r2, #2
 8007b00:	701a      	strb	r2, [r3, #0]
    break;
 8007b02:	e004      	b.n	8007b0e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007b04:	230f      	movs	r3, #15
 8007b06:	18fb      	adds	r3, r7, r3
 8007b08:	2202      	movs	r2, #2
 8007b0a:	701a      	strb	r2, [r3, #0]
    break;
 8007b0c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8007b0e:	230f      	movs	r3, #15
 8007b10:	18fb      	adds	r3, r7, r3
 8007b12:	781b      	ldrb	r3, [r3, #0]
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b004      	add	sp, #16
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <siprintf>:
 8007b1c:	b40e      	push	{r1, r2, r3}
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	2400      	movs	r4, #0
 8007b22:	490c      	ldr	r1, [pc, #48]	@ (8007b54 <siprintf+0x38>)
 8007b24:	b09d      	sub	sp, #116	@ 0x74
 8007b26:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007b28:	9002      	str	r0, [sp, #8]
 8007b2a:	9006      	str	r0, [sp, #24]
 8007b2c:	9107      	str	r1, [sp, #28]
 8007b2e:	9104      	str	r1, [sp, #16]
 8007b30:	4809      	ldr	r0, [pc, #36]	@ (8007b58 <siprintf+0x3c>)
 8007b32:	490a      	ldr	r1, [pc, #40]	@ (8007b5c <siprintf+0x40>)
 8007b34:	cb04      	ldmia	r3!, {r2}
 8007b36:	9105      	str	r1, [sp, #20]
 8007b38:	6800      	ldr	r0, [r0, #0]
 8007b3a:	a902      	add	r1, sp, #8
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007b40:	f000 f99e 	bl	8007e80 <_svfiprintf_r>
 8007b44:	9b02      	ldr	r3, [sp, #8]
 8007b46:	701c      	strb	r4, [r3, #0]
 8007b48:	b01d      	add	sp, #116	@ 0x74
 8007b4a:	bc10      	pop	{r4}
 8007b4c:	bc08      	pop	{r3}
 8007b4e:	b003      	add	sp, #12
 8007b50:	4718      	bx	r3
 8007b52:	46c0      	nop			@ (mov r8, r8)
 8007b54:	7fffffff 	.word	0x7fffffff
 8007b58:	2000017c 	.word	0x2000017c
 8007b5c:	ffff0208 	.word	0xffff0208

08007b60 <memset>:
 8007b60:	0003      	movs	r3, r0
 8007b62:	1882      	adds	r2, r0, r2
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d100      	bne.n	8007b6a <memset+0xa>
 8007b68:	4770      	bx	lr
 8007b6a:	7019      	strb	r1, [r3, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	e7f9      	b.n	8007b64 <memset+0x4>

08007b70 <__errno>:
 8007b70:	4b01      	ldr	r3, [pc, #4]	@ (8007b78 <__errno+0x8>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	4770      	bx	lr
 8007b76:	46c0      	nop			@ (mov r8, r8)
 8007b78:	2000017c 	.word	0x2000017c

08007b7c <__libc_init_array>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	2600      	movs	r6, #0
 8007b80:	4c0c      	ldr	r4, [pc, #48]	@ (8007bb4 <__libc_init_array+0x38>)
 8007b82:	4d0d      	ldr	r5, [pc, #52]	@ (8007bb8 <__libc_init_array+0x3c>)
 8007b84:	1b64      	subs	r4, r4, r5
 8007b86:	10a4      	asrs	r4, r4, #2
 8007b88:	42a6      	cmp	r6, r4
 8007b8a:	d109      	bne.n	8007ba0 <__libc_init_array+0x24>
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	f000 fc61 	bl	8008454 <_init>
 8007b92:	4c0a      	ldr	r4, [pc, #40]	@ (8007bbc <__libc_init_array+0x40>)
 8007b94:	4d0a      	ldr	r5, [pc, #40]	@ (8007bc0 <__libc_init_array+0x44>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	42a6      	cmp	r6, r4
 8007b9c:	d105      	bne.n	8007baa <__libc_init_array+0x2e>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	00b3      	lsls	r3, r6, #2
 8007ba2:	58eb      	ldr	r3, [r5, r3]
 8007ba4:	4798      	blx	r3
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	e7ee      	b.n	8007b88 <__libc_init_array+0xc>
 8007baa:	00b3      	lsls	r3, r6, #2
 8007bac:	58eb      	ldr	r3, [r5, r3]
 8007bae:	4798      	blx	r3
 8007bb0:	3601      	adds	r6, #1
 8007bb2:	e7f2      	b.n	8007b9a <__libc_init_array+0x1e>
 8007bb4:	080085fc 	.word	0x080085fc
 8007bb8:	080085fc 	.word	0x080085fc
 8007bbc:	08008600 	.word	0x08008600
 8007bc0:	080085fc 	.word	0x080085fc

08007bc4 <__retarget_lock_acquire_recursive>:
 8007bc4:	4770      	bx	lr

08007bc6 <__retarget_lock_release_recursive>:
 8007bc6:	4770      	bx	lr

08007bc8 <_free_r>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	0005      	movs	r5, r0
 8007bcc:	1e0c      	subs	r4, r1, #0
 8007bce:	d010      	beq.n	8007bf2 <_free_r+0x2a>
 8007bd0:	3c04      	subs	r4, #4
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da00      	bge.n	8007bda <_free_r+0x12>
 8007bd8:	18e4      	adds	r4, r4, r3
 8007bda:	0028      	movs	r0, r5
 8007bdc:	f000 f8e0 	bl	8007da0 <__malloc_lock>
 8007be0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c58 <_free_r+0x90>)
 8007be2:	6813      	ldr	r3, [r2, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d105      	bne.n	8007bf4 <_free_r+0x2c>
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	6014      	str	r4, [r2, #0]
 8007bec:	0028      	movs	r0, r5
 8007bee:	f000 f8df 	bl	8007db0 <__malloc_unlock>
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d908      	bls.n	8007c0a <_free_r+0x42>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	1821      	adds	r1, r4, r0
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	d1f3      	bne.n	8007be8 <_free_r+0x20>
 8007c00:	6819      	ldr	r1, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	1809      	adds	r1, r1, r0
 8007c06:	6021      	str	r1, [r4, #0]
 8007c08:	e7ee      	b.n	8007be8 <_free_r+0x20>
 8007c0a:	001a      	movs	r2, r3
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <_free_r+0x4e>
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	d9f9      	bls.n	8007c0a <_free_r+0x42>
 8007c16:	6811      	ldr	r1, [r2, #0]
 8007c18:	1850      	adds	r0, r2, r1
 8007c1a:	42a0      	cmp	r0, r4
 8007c1c:	d10b      	bne.n	8007c36 <_free_r+0x6e>
 8007c1e:	6820      	ldr	r0, [r4, #0]
 8007c20:	1809      	adds	r1, r1, r0
 8007c22:	1850      	adds	r0, r2, r1
 8007c24:	6011      	str	r1, [r2, #0]
 8007c26:	4283      	cmp	r3, r0
 8007c28:	d1e0      	bne.n	8007bec <_free_r+0x24>
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	1841      	adds	r1, r0, r1
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	6053      	str	r3, [r2, #4]
 8007c34:	e7da      	b.n	8007bec <_free_r+0x24>
 8007c36:	42a0      	cmp	r0, r4
 8007c38:	d902      	bls.n	8007c40 <_free_r+0x78>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	e7d5      	b.n	8007bec <_free_r+0x24>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	d103      	bne.n	8007c50 <_free_r+0x88>
 8007c48:	6819      	ldr	r1, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	1809      	adds	r1, r1, r0
 8007c4e:	6021      	str	r1, [r4, #0]
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	6054      	str	r4, [r2, #4]
 8007c54:	e7ca      	b.n	8007bec <_free_r+0x24>
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	20001550 	.word	0x20001550

08007c5c <sbrk_aligned>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c9c <sbrk_aligned+0x40>)
 8007c60:	000d      	movs	r5, r1
 8007c62:	6831      	ldr	r1, [r6, #0]
 8007c64:	0004      	movs	r4, r0
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d102      	bne.n	8007c70 <sbrk_aligned+0x14>
 8007c6a:	f000 fb95 	bl	8008398 <_sbrk_r>
 8007c6e:	6030      	str	r0, [r6, #0]
 8007c70:	0029      	movs	r1, r5
 8007c72:	0020      	movs	r0, r4
 8007c74:	f000 fb90 	bl	8008398 <_sbrk_r>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d103      	bne.n	8007c84 <sbrk_aligned+0x28>
 8007c7c:	2501      	movs	r5, #1
 8007c7e:	426d      	negs	r5, r5
 8007c80:	0028      	movs	r0, r5
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	2303      	movs	r3, #3
 8007c86:	1cc5      	adds	r5, r0, #3
 8007c88:	439d      	bics	r5, r3
 8007c8a:	42a8      	cmp	r0, r5
 8007c8c:	d0f8      	beq.n	8007c80 <sbrk_aligned+0x24>
 8007c8e:	1a29      	subs	r1, r5, r0
 8007c90:	0020      	movs	r0, r4
 8007c92:	f000 fb81 	bl	8008398 <_sbrk_r>
 8007c96:	3001      	adds	r0, #1
 8007c98:	d1f2      	bne.n	8007c80 <sbrk_aligned+0x24>
 8007c9a:	e7ef      	b.n	8007c7c <sbrk_aligned+0x20>
 8007c9c:	2000154c 	.word	0x2000154c

08007ca0 <_malloc_r>:
 8007ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ca2:	2203      	movs	r2, #3
 8007ca4:	1ccb      	adds	r3, r1, #3
 8007ca6:	4393      	bics	r3, r2
 8007ca8:	3308      	adds	r3, #8
 8007caa:	0005      	movs	r5, r0
 8007cac:	001f      	movs	r7, r3
 8007cae:	2b0c      	cmp	r3, #12
 8007cb0:	d234      	bcs.n	8007d1c <_malloc_r+0x7c>
 8007cb2:	270c      	movs	r7, #12
 8007cb4:	42b9      	cmp	r1, r7
 8007cb6:	d833      	bhi.n	8007d20 <_malloc_r+0x80>
 8007cb8:	0028      	movs	r0, r5
 8007cba:	f000 f871 	bl	8007da0 <__malloc_lock>
 8007cbe:	4e37      	ldr	r6, [pc, #220]	@ (8007d9c <_malloc_r+0xfc>)
 8007cc0:	6833      	ldr	r3, [r6, #0]
 8007cc2:	001c      	movs	r4, r3
 8007cc4:	2c00      	cmp	r4, #0
 8007cc6:	d12f      	bne.n	8007d28 <_malloc_r+0x88>
 8007cc8:	0039      	movs	r1, r7
 8007cca:	0028      	movs	r0, r5
 8007ccc:	f7ff ffc6 	bl	8007c5c <sbrk_aligned>
 8007cd0:	0004      	movs	r4, r0
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	d15f      	bne.n	8007d96 <_malloc_r+0xf6>
 8007cd6:	6834      	ldr	r4, [r6, #0]
 8007cd8:	9400      	str	r4, [sp, #0]
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d14a      	bne.n	8007d76 <_malloc_r+0xd6>
 8007ce0:	2c00      	cmp	r4, #0
 8007ce2:	d052      	beq.n	8007d8a <_malloc_r+0xea>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	0028      	movs	r0, r5
 8007ce8:	18e3      	adds	r3, r4, r3
 8007cea:	9900      	ldr	r1, [sp, #0]
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	f000 fb53 	bl	8008398 <_sbrk_r>
 8007cf2:	9b01      	ldr	r3, [sp, #4]
 8007cf4:	4283      	cmp	r3, r0
 8007cf6:	d148      	bne.n	8007d8a <_malloc_r+0xea>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	0028      	movs	r0, r5
 8007cfc:	1aff      	subs	r7, r7, r3
 8007cfe:	0039      	movs	r1, r7
 8007d00:	f7ff ffac 	bl	8007c5c <sbrk_aligned>
 8007d04:	3001      	adds	r0, #1
 8007d06:	d040      	beq.n	8007d8a <_malloc_r+0xea>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	19db      	adds	r3, r3, r7
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	6833      	ldr	r3, [r6, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	d133      	bne.n	8007d7e <_malloc_r+0xde>
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	6033      	str	r3, [r6, #0]
 8007d1a:	e019      	b.n	8007d50 <_malloc_r+0xb0>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dac9      	bge.n	8007cb4 <_malloc_r+0x14>
 8007d20:	230c      	movs	r3, #12
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	2000      	movs	r0, #0
 8007d26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d28:	6821      	ldr	r1, [r4, #0]
 8007d2a:	1bc9      	subs	r1, r1, r7
 8007d2c:	d420      	bmi.n	8007d70 <_malloc_r+0xd0>
 8007d2e:	290b      	cmp	r1, #11
 8007d30:	d90a      	bls.n	8007d48 <_malloc_r+0xa8>
 8007d32:	19e2      	adds	r2, r4, r7
 8007d34:	6027      	str	r7, [r4, #0]
 8007d36:	42a3      	cmp	r3, r4
 8007d38:	d104      	bne.n	8007d44 <_malloc_r+0xa4>
 8007d3a:	6032      	str	r2, [r6, #0]
 8007d3c:	6863      	ldr	r3, [r4, #4]
 8007d3e:	6011      	str	r1, [r2, #0]
 8007d40:	6053      	str	r3, [r2, #4]
 8007d42:	e005      	b.n	8007d50 <_malloc_r+0xb0>
 8007d44:	605a      	str	r2, [r3, #4]
 8007d46:	e7f9      	b.n	8007d3c <_malloc_r+0x9c>
 8007d48:	6862      	ldr	r2, [r4, #4]
 8007d4a:	42a3      	cmp	r3, r4
 8007d4c:	d10e      	bne.n	8007d6c <_malloc_r+0xcc>
 8007d4e:	6032      	str	r2, [r6, #0]
 8007d50:	0028      	movs	r0, r5
 8007d52:	f000 f82d 	bl	8007db0 <__malloc_unlock>
 8007d56:	0020      	movs	r0, r4
 8007d58:	2207      	movs	r2, #7
 8007d5a:	300b      	adds	r0, #11
 8007d5c:	1d23      	adds	r3, r4, #4
 8007d5e:	4390      	bics	r0, r2
 8007d60:	1ac2      	subs	r2, r0, r3
 8007d62:	4298      	cmp	r0, r3
 8007d64:	d0df      	beq.n	8007d26 <_malloc_r+0x86>
 8007d66:	1a1b      	subs	r3, r3, r0
 8007d68:	50a3      	str	r3, [r4, r2]
 8007d6a:	e7dc      	b.n	8007d26 <_malloc_r+0x86>
 8007d6c:	605a      	str	r2, [r3, #4]
 8007d6e:	e7ef      	b.n	8007d50 <_malloc_r+0xb0>
 8007d70:	0023      	movs	r3, r4
 8007d72:	6864      	ldr	r4, [r4, #4]
 8007d74:	e7a6      	b.n	8007cc4 <_malloc_r+0x24>
 8007d76:	9c00      	ldr	r4, [sp, #0]
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	e7ad      	b.n	8007cda <_malloc_r+0x3a>
 8007d7e:	001a      	movs	r2, r3
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	42a3      	cmp	r3, r4
 8007d84:	d1fb      	bne.n	8007d7e <_malloc_r+0xde>
 8007d86:	2300      	movs	r3, #0
 8007d88:	e7da      	b.n	8007d40 <_malloc_r+0xa0>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	0028      	movs	r0, r5
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	f000 f80e 	bl	8007db0 <__malloc_unlock>
 8007d94:	e7c6      	b.n	8007d24 <_malloc_r+0x84>
 8007d96:	6007      	str	r7, [r0, #0]
 8007d98:	e7da      	b.n	8007d50 <_malloc_r+0xb0>
 8007d9a:	46c0      	nop			@ (mov r8, r8)
 8007d9c:	20001550 	.word	0x20001550

08007da0 <__malloc_lock>:
 8007da0:	b510      	push	{r4, lr}
 8007da2:	4802      	ldr	r0, [pc, #8]	@ (8007dac <__malloc_lock+0xc>)
 8007da4:	f7ff ff0e 	bl	8007bc4 <__retarget_lock_acquire_recursive>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	46c0      	nop			@ (mov r8, r8)
 8007dac:	20001548 	.word	0x20001548

08007db0 <__malloc_unlock>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	4802      	ldr	r0, [pc, #8]	@ (8007dbc <__malloc_unlock+0xc>)
 8007db4:	f7ff ff07 	bl	8007bc6 <__retarget_lock_release_recursive>
 8007db8:	bd10      	pop	{r4, pc}
 8007dba:	46c0      	nop			@ (mov r8, r8)
 8007dbc:	20001548 	.word	0x20001548

08007dc0 <__ssputs_r>:
 8007dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc2:	688e      	ldr	r6, [r1, #8]
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	001f      	movs	r7, r3
 8007dc8:	000c      	movs	r4, r1
 8007dca:	680b      	ldr	r3, [r1, #0]
 8007dcc:	9002      	str	r0, [sp, #8]
 8007dce:	9203      	str	r2, [sp, #12]
 8007dd0:	42be      	cmp	r6, r7
 8007dd2:	d830      	bhi.n	8007e36 <__ssputs_r+0x76>
 8007dd4:	210c      	movs	r1, #12
 8007dd6:	5e62      	ldrsh	r2, [r4, r1]
 8007dd8:	2190      	movs	r1, #144	@ 0x90
 8007dda:	00c9      	lsls	r1, r1, #3
 8007ddc:	420a      	tst	r2, r1
 8007dde:	d028      	beq.n	8007e32 <__ssputs_r+0x72>
 8007de0:	2003      	movs	r0, #3
 8007de2:	6921      	ldr	r1, [r4, #16]
 8007de4:	1a5b      	subs	r3, r3, r1
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	6963      	ldr	r3, [r4, #20]
 8007dea:	4343      	muls	r3, r0
 8007dec:	9801      	ldr	r0, [sp, #4]
 8007dee:	0fdd      	lsrs	r5, r3, #31
 8007df0:	18ed      	adds	r5, r5, r3
 8007df2:	1c7b      	adds	r3, r7, #1
 8007df4:	181b      	adds	r3, r3, r0
 8007df6:	106d      	asrs	r5, r5, #1
 8007df8:	42ab      	cmp	r3, r5
 8007dfa:	d900      	bls.n	8007dfe <__ssputs_r+0x3e>
 8007dfc:	001d      	movs	r5, r3
 8007dfe:	0552      	lsls	r2, r2, #21
 8007e00:	d528      	bpl.n	8007e54 <__ssputs_r+0x94>
 8007e02:	0029      	movs	r1, r5
 8007e04:	9802      	ldr	r0, [sp, #8]
 8007e06:	f7ff ff4b 	bl	8007ca0 <_malloc_r>
 8007e0a:	1e06      	subs	r6, r0, #0
 8007e0c:	d02c      	beq.n	8007e68 <__ssputs_r+0xa8>
 8007e0e:	9a01      	ldr	r2, [sp, #4]
 8007e10:	6921      	ldr	r1, [r4, #16]
 8007e12:	f000 fade 	bl	80083d2 <memcpy>
 8007e16:	89a2      	ldrh	r2, [r4, #12]
 8007e18:	4b18      	ldr	r3, [pc, #96]	@ (8007e7c <__ssputs_r+0xbc>)
 8007e1a:	401a      	ands	r2, r3
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	6126      	str	r6, [r4, #16]
 8007e26:	18f6      	adds	r6, r6, r3
 8007e28:	6026      	str	r6, [r4, #0]
 8007e2a:	003e      	movs	r6, r7
 8007e2c:	6165      	str	r5, [r4, #20]
 8007e2e:	1aed      	subs	r5, r5, r3
 8007e30:	60a5      	str	r5, [r4, #8]
 8007e32:	42be      	cmp	r6, r7
 8007e34:	d900      	bls.n	8007e38 <__ssputs_r+0x78>
 8007e36:	003e      	movs	r6, r7
 8007e38:	0032      	movs	r2, r6
 8007e3a:	9903      	ldr	r1, [sp, #12]
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	f000 fa99 	bl	8008374 <memmove>
 8007e42:	2000      	movs	r0, #0
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	1b9b      	subs	r3, r3, r6
 8007e48:	60a3      	str	r3, [r4, #8]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	199b      	adds	r3, r3, r6
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	b005      	add	sp, #20
 8007e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e54:	002a      	movs	r2, r5
 8007e56:	9802      	ldr	r0, [sp, #8]
 8007e58:	f000 fac4 	bl	80083e4 <_realloc_r>
 8007e5c:	1e06      	subs	r6, r0, #0
 8007e5e:	d1e0      	bne.n	8007e22 <__ssputs_r+0x62>
 8007e60:	6921      	ldr	r1, [r4, #16]
 8007e62:	9802      	ldr	r0, [sp, #8]
 8007e64:	f7ff feb0 	bl	8007bc8 <_free_r>
 8007e68:	230c      	movs	r3, #12
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	9a02      	ldr	r2, [sp, #8]
 8007e6e:	4240      	negs	r0, r0
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	89a2      	ldrh	r2, [r4, #12]
 8007e74:	3334      	adds	r3, #52	@ 0x34
 8007e76:	4313      	orrs	r3, r2
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	e7e9      	b.n	8007e50 <__ssputs_r+0x90>
 8007e7c:	fffffb7f 	.word	0xfffffb7f

08007e80 <_svfiprintf_r>:
 8007e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e82:	b0a1      	sub	sp, #132	@ 0x84
 8007e84:	9003      	str	r0, [sp, #12]
 8007e86:	001d      	movs	r5, r3
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	000f      	movs	r7, r1
 8007e8c:	0016      	movs	r6, r2
 8007e8e:	061b      	lsls	r3, r3, #24
 8007e90:	d511      	bpl.n	8007eb6 <_svfiprintf_r+0x36>
 8007e92:	690b      	ldr	r3, [r1, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10e      	bne.n	8007eb6 <_svfiprintf_r+0x36>
 8007e98:	2140      	movs	r1, #64	@ 0x40
 8007e9a:	f7ff ff01 	bl	8007ca0 <_malloc_r>
 8007e9e:	6038      	str	r0, [r7, #0]
 8007ea0:	6138      	str	r0, [r7, #16]
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d105      	bne.n	8007eb2 <_svfiprintf_r+0x32>
 8007ea6:	230c      	movs	r3, #12
 8007ea8:	9a03      	ldr	r2, [sp, #12]
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	2001      	movs	r0, #1
 8007eae:	4240      	negs	r0, r0
 8007eb0:	e0cf      	b.n	8008052 <_svfiprintf_r+0x1d2>
 8007eb2:	2340      	movs	r3, #64	@ 0x40
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	ac08      	add	r4, sp, #32
 8007eba:	6163      	str	r3, [r4, #20]
 8007ebc:	3320      	adds	r3, #32
 8007ebe:	7663      	strb	r3, [r4, #25]
 8007ec0:	3310      	adds	r3, #16
 8007ec2:	76a3      	strb	r3, [r4, #26]
 8007ec4:	9507      	str	r5, [sp, #28]
 8007ec6:	0035      	movs	r5, r6
 8007ec8:	782b      	ldrb	r3, [r5, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <_svfiprintf_r+0x52>
 8007ece:	2b25      	cmp	r3, #37	@ 0x25
 8007ed0:	d148      	bne.n	8007f64 <_svfiprintf_r+0xe4>
 8007ed2:	1bab      	subs	r3, r5, r6
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	42b5      	cmp	r5, r6
 8007ed8:	d00b      	beq.n	8007ef2 <_svfiprintf_r+0x72>
 8007eda:	0032      	movs	r2, r6
 8007edc:	0039      	movs	r1, r7
 8007ede:	9803      	ldr	r0, [sp, #12]
 8007ee0:	f7ff ff6e 	bl	8007dc0 <__ssputs_r>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d100      	bne.n	8007eea <_svfiprintf_r+0x6a>
 8007ee8:	e0ae      	b.n	8008048 <_svfiprintf_r+0x1c8>
 8007eea:	6963      	ldr	r3, [r4, #20]
 8007eec:	9a05      	ldr	r2, [sp, #20]
 8007eee:	189b      	adds	r3, r3, r2
 8007ef0:	6163      	str	r3, [r4, #20]
 8007ef2:	782b      	ldrb	r3, [r5, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d100      	bne.n	8007efa <_svfiprintf_r+0x7a>
 8007ef8:	e0a6      	b.n	8008048 <_svfiprintf_r+0x1c8>
 8007efa:	2201      	movs	r2, #1
 8007efc:	2300      	movs	r3, #0
 8007efe:	4252      	negs	r2, r2
 8007f00:	6062      	str	r2, [r4, #4]
 8007f02:	a904      	add	r1, sp, #16
 8007f04:	3254      	adds	r2, #84	@ 0x54
 8007f06:	1852      	adds	r2, r2, r1
 8007f08:	1c6e      	adds	r6, r5, #1
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	60e3      	str	r3, [r4, #12]
 8007f0e:	60a3      	str	r3, [r4, #8]
 8007f10:	7013      	strb	r3, [r2, #0]
 8007f12:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007f14:	4b54      	ldr	r3, [pc, #336]	@ (8008068 <_svfiprintf_r+0x1e8>)
 8007f16:	2205      	movs	r2, #5
 8007f18:	0018      	movs	r0, r3
 8007f1a:	7831      	ldrb	r1, [r6, #0]
 8007f1c:	9305      	str	r3, [sp, #20]
 8007f1e:	f000 fa4d 	bl	80083bc <memchr>
 8007f22:	1c75      	adds	r5, r6, #1
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d11f      	bne.n	8007f68 <_svfiprintf_r+0xe8>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	06d3      	lsls	r3, r2, #27
 8007f2c:	d504      	bpl.n	8007f38 <_svfiprintf_r+0xb8>
 8007f2e:	2353      	movs	r3, #83	@ 0x53
 8007f30:	a904      	add	r1, sp, #16
 8007f32:	185b      	adds	r3, r3, r1
 8007f34:	2120      	movs	r1, #32
 8007f36:	7019      	strb	r1, [r3, #0]
 8007f38:	0713      	lsls	r3, r2, #28
 8007f3a:	d504      	bpl.n	8007f46 <_svfiprintf_r+0xc6>
 8007f3c:	2353      	movs	r3, #83	@ 0x53
 8007f3e:	a904      	add	r1, sp, #16
 8007f40:	185b      	adds	r3, r3, r1
 8007f42:	212b      	movs	r1, #43	@ 0x2b
 8007f44:	7019      	strb	r1, [r3, #0]
 8007f46:	7833      	ldrb	r3, [r6, #0]
 8007f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f4a:	d016      	beq.n	8007f7a <_svfiprintf_r+0xfa>
 8007f4c:	0035      	movs	r5, r6
 8007f4e:	2100      	movs	r1, #0
 8007f50:	200a      	movs	r0, #10
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	782a      	ldrb	r2, [r5, #0]
 8007f56:	1c6e      	adds	r6, r5, #1
 8007f58:	3a30      	subs	r2, #48	@ 0x30
 8007f5a:	2a09      	cmp	r2, #9
 8007f5c:	d950      	bls.n	8008000 <_svfiprintf_r+0x180>
 8007f5e:	2900      	cmp	r1, #0
 8007f60:	d111      	bne.n	8007f86 <_svfiprintf_r+0x106>
 8007f62:	e017      	b.n	8007f94 <_svfiprintf_r+0x114>
 8007f64:	3501      	adds	r5, #1
 8007f66:	e7af      	b.n	8007ec8 <_svfiprintf_r+0x48>
 8007f68:	9b05      	ldr	r3, [sp, #20]
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	1ac0      	subs	r0, r0, r3
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4083      	lsls	r3, r0
 8007f72:	4313      	orrs	r3, r2
 8007f74:	002e      	movs	r6, r5
 8007f76:	6023      	str	r3, [r4, #0]
 8007f78:	e7cc      	b.n	8007f14 <_svfiprintf_r+0x94>
 8007f7a:	9b07      	ldr	r3, [sp, #28]
 8007f7c:	1d19      	adds	r1, r3, #4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	9107      	str	r1, [sp, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	db01      	blt.n	8007f8a <_svfiprintf_r+0x10a>
 8007f86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f88:	e004      	b.n	8007f94 <_svfiprintf_r+0x114>
 8007f8a:	425b      	negs	r3, r3
 8007f8c:	60e3      	str	r3, [r4, #12]
 8007f8e:	2302      	movs	r3, #2
 8007f90:	4313      	orrs	r3, r2
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	782b      	ldrb	r3, [r5, #0]
 8007f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f98:	d10c      	bne.n	8007fb4 <_svfiprintf_r+0x134>
 8007f9a:	786b      	ldrb	r3, [r5, #1]
 8007f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f9e:	d134      	bne.n	800800a <_svfiprintf_r+0x18a>
 8007fa0:	9b07      	ldr	r3, [sp, #28]
 8007fa2:	3502      	adds	r5, #2
 8007fa4:	1d1a      	adds	r2, r3, #4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	9207      	str	r2, [sp, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	da01      	bge.n	8007fb2 <_svfiprintf_r+0x132>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	425b      	negs	r3, r3
 8007fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb4:	4e2d      	ldr	r6, [pc, #180]	@ (800806c <_svfiprintf_r+0x1ec>)
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	0030      	movs	r0, r6
 8007fba:	7829      	ldrb	r1, [r5, #0]
 8007fbc:	f000 f9fe 	bl	80083bc <memchr>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d006      	beq.n	8007fd2 <_svfiprintf_r+0x152>
 8007fc4:	2340      	movs	r3, #64	@ 0x40
 8007fc6:	1b80      	subs	r0, r0, r6
 8007fc8:	4083      	lsls	r3, r0
 8007fca:	6822      	ldr	r2, [r4, #0]
 8007fcc:	3501      	adds	r5, #1
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	7829      	ldrb	r1, [r5, #0]
 8007fd4:	2206      	movs	r2, #6
 8007fd6:	4826      	ldr	r0, [pc, #152]	@ (8008070 <_svfiprintf_r+0x1f0>)
 8007fd8:	1c6e      	adds	r6, r5, #1
 8007fda:	7621      	strb	r1, [r4, #24]
 8007fdc:	f000 f9ee 	bl	80083bc <memchr>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d038      	beq.n	8008056 <_svfiprintf_r+0x1d6>
 8007fe4:	4b23      	ldr	r3, [pc, #140]	@ (8008074 <_svfiprintf_r+0x1f4>)
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d122      	bne.n	8008030 <_svfiprintf_r+0x1b0>
 8007fea:	2207      	movs	r2, #7
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	3307      	adds	r3, #7
 8007ff0:	4393      	bics	r3, r2
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	9307      	str	r3, [sp, #28]
 8007ff6:	6963      	ldr	r3, [r4, #20]
 8007ff8:	9a04      	ldr	r2, [sp, #16]
 8007ffa:	189b      	adds	r3, r3, r2
 8007ffc:	6163      	str	r3, [r4, #20]
 8007ffe:	e762      	b.n	8007ec6 <_svfiprintf_r+0x46>
 8008000:	4343      	muls	r3, r0
 8008002:	0035      	movs	r5, r6
 8008004:	2101      	movs	r1, #1
 8008006:	189b      	adds	r3, r3, r2
 8008008:	e7a4      	b.n	8007f54 <_svfiprintf_r+0xd4>
 800800a:	2300      	movs	r3, #0
 800800c:	200a      	movs	r0, #10
 800800e:	0019      	movs	r1, r3
 8008010:	3501      	adds	r5, #1
 8008012:	6063      	str	r3, [r4, #4]
 8008014:	782a      	ldrb	r2, [r5, #0]
 8008016:	1c6e      	adds	r6, r5, #1
 8008018:	3a30      	subs	r2, #48	@ 0x30
 800801a:	2a09      	cmp	r2, #9
 800801c:	d903      	bls.n	8008026 <_svfiprintf_r+0x1a6>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0c8      	beq.n	8007fb4 <_svfiprintf_r+0x134>
 8008022:	9109      	str	r1, [sp, #36]	@ 0x24
 8008024:	e7c6      	b.n	8007fb4 <_svfiprintf_r+0x134>
 8008026:	4341      	muls	r1, r0
 8008028:	0035      	movs	r5, r6
 800802a:	2301      	movs	r3, #1
 800802c:	1889      	adds	r1, r1, r2
 800802e:	e7f1      	b.n	8008014 <_svfiprintf_r+0x194>
 8008030:	aa07      	add	r2, sp, #28
 8008032:	9200      	str	r2, [sp, #0]
 8008034:	0021      	movs	r1, r4
 8008036:	003a      	movs	r2, r7
 8008038:	4b0f      	ldr	r3, [pc, #60]	@ (8008078 <_svfiprintf_r+0x1f8>)
 800803a:	9803      	ldr	r0, [sp, #12]
 800803c:	e000      	b.n	8008040 <_svfiprintf_r+0x1c0>
 800803e:	bf00      	nop
 8008040:	9004      	str	r0, [sp, #16]
 8008042:	9b04      	ldr	r3, [sp, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	d1d6      	bne.n	8007ff6 <_svfiprintf_r+0x176>
 8008048:	89bb      	ldrh	r3, [r7, #12]
 800804a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800804c:	065b      	lsls	r3, r3, #25
 800804e:	d500      	bpl.n	8008052 <_svfiprintf_r+0x1d2>
 8008050:	e72c      	b.n	8007eac <_svfiprintf_r+0x2c>
 8008052:	b021      	add	sp, #132	@ 0x84
 8008054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008056:	aa07      	add	r2, sp, #28
 8008058:	9200      	str	r2, [sp, #0]
 800805a:	0021      	movs	r1, r4
 800805c:	003a      	movs	r2, r7
 800805e:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <_svfiprintf_r+0x1f8>)
 8008060:	9803      	ldr	r0, [sp, #12]
 8008062:	f000 f87b 	bl	800815c <_printf_i>
 8008066:	e7eb      	b.n	8008040 <_svfiprintf_r+0x1c0>
 8008068:	080085c8 	.word	0x080085c8
 800806c:	080085ce 	.word	0x080085ce
 8008070:	080085d2 	.word	0x080085d2
 8008074:	00000000 	.word	0x00000000
 8008078:	08007dc1 	.word	0x08007dc1

0800807c <_printf_common>:
 800807c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800807e:	0016      	movs	r6, r2
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	688a      	ldr	r2, [r1, #8]
 8008084:	690b      	ldr	r3, [r1, #16]
 8008086:	000c      	movs	r4, r1
 8008088:	9000      	str	r0, [sp, #0]
 800808a:	4293      	cmp	r3, r2
 800808c:	da00      	bge.n	8008090 <_printf_common+0x14>
 800808e:	0013      	movs	r3, r2
 8008090:	0022      	movs	r2, r4
 8008092:	6033      	str	r3, [r6, #0]
 8008094:	3243      	adds	r2, #67	@ 0x43
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	2a00      	cmp	r2, #0
 800809a:	d001      	beq.n	80080a0 <_printf_common+0x24>
 800809c:	3301      	adds	r3, #1
 800809e:	6033      	str	r3, [r6, #0]
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	069b      	lsls	r3, r3, #26
 80080a4:	d502      	bpl.n	80080ac <_printf_common+0x30>
 80080a6:	6833      	ldr	r3, [r6, #0]
 80080a8:	3302      	adds	r3, #2
 80080aa:	6033      	str	r3, [r6, #0]
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	2306      	movs	r3, #6
 80080b0:	0015      	movs	r5, r2
 80080b2:	401d      	ands	r5, r3
 80080b4:	421a      	tst	r2, r3
 80080b6:	d027      	beq.n	8008108 <_printf_common+0x8c>
 80080b8:	0023      	movs	r3, r4
 80080ba:	3343      	adds	r3, #67	@ 0x43
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	1e5a      	subs	r2, r3, #1
 80080c0:	4193      	sbcs	r3, r2
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	0692      	lsls	r2, r2, #26
 80080c6:	d430      	bmi.n	800812a <_printf_common+0xae>
 80080c8:	0022      	movs	r2, r4
 80080ca:	9901      	ldr	r1, [sp, #4]
 80080cc:	9800      	ldr	r0, [sp, #0]
 80080ce:	9d08      	ldr	r5, [sp, #32]
 80080d0:	3243      	adds	r2, #67	@ 0x43
 80080d2:	47a8      	blx	r5
 80080d4:	3001      	adds	r0, #1
 80080d6:	d025      	beq.n	8008124 <_printf_common+0xa8>
 80080d8:	2206      	movs	r2, #6
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	2500      	movs	r5, #0
 80080de:	4013      	ands	r3, r2
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d105      	bne.n	80080f0 <_printf_common+0x74>
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	68e5      	ldr	r5, [r4, #12]
 80080e8:	1aed      	subs	r5, r5, r3
 80080ea:	43eb      	mvns	r3, r5
 80080ec:	17db      	asrs	r3, r3, #31
 80080ee:	401d      	ands	r5, r3
 80080f0:	68a3      	ldr	r3, [r4, #8]
 80080f2:	6922      	ldr	r2, [r4, #16]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	dd01      	ble.n	80080fc <_printf_common+0x80>
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	18ed      	adds	r5, r5, r3
 80080fc:	2600      	movs	r6, #0
 80080fe:	42b5      	cmp	r5, r6
 8008100:	d120      	bne.n	8008144 <_printf_common+0xc8>
 8008102:	2000      	movs	r0, #0
 8008104:	e010      	b.n	8008128 <_printf_common+0xac>
 8008106:	3501      	adds	r5, #1
 8008108:	68e3      	ldr	r3, [r4, #12]
 800810a:	6832      	ldr	r2, [r6, #0]
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	42ab      	cmp	r3, r5
 8008110:	ddd2      	ble.n	80080b8 <_printf_common+0x3c>
 8008112:	0022      	movs	r2, r4
 8008114:	2301      	movs	r3, #1
 8008116:	9901      	ldr	r1, [sp, #4]
 8008118:	9800      	ldr	r0, [sp, #0]
 800811a:	9f08      	ldr	r7, [sp, #32]
 800811c:	3219      	adds	r2, #25
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	d1f0      	bne.n	8008106 <_printf_common+0x8a>
 8008124:	2001      	movs	r0, #1
 8008126:	4240      	negs	r0, r0
 8008128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800812a:	2030      	movs	r0, #48	@ 0x30
 800812c:	18e1      	adds	r1, r4, r3
 800812e:	3143      	adds	r1, #67	@ 0x43
 8008130:	7008      	strb	r0, [r1, #0]
 8008132:	0021      	movs	r1, r4
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	3145      	adds	r1, #69	@ 0x45
 8008138:	7809      	ldrb	r1, [r1, #0]
 800813a:	18a2      	adds	r2, r4, r2
 800813c:	3243      	adds	r2, #67	@ 0x43
 800813e:	3302      	adds	r3, #2
 8008140:	7011      	strb	r1, [r2, #0]
 8008142:	e7c1      	b.n	80080c8 <_printf_common+0x4c>
 8008144:	0022      	movs	r2, r4
 8008146:	2301      	movs	r3, #1
 8008148:	9901      	ldr	r1, [sp, #4]
 800814a:	9800      	ldr	r0, [sp, #0]
 800814c:	9f08      	ldr	r7, [sp, #32]
 800814e:	321a      	adds	r2, #26
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	d0e6      	beq.n	8008124 <_printf_common+0xa8>
 8008156:	3601      	adds	r6, #1
 8008158:	e7d1      	b.n	80080fe <_printf_common+0x82>
	...

0800815c <_printf_i>:
 800815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815e:	b08b      	sub	sp, #44	@ 0x2c
 8008160:	9206      	str	r2, [sp, #24]
 8008162:	000a      	movs	r2, r1
 8008164:	3243      	adds	r2, #67	@ 0x43
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	9005      	str	r0, [sp, #20]
 800816a:	9203      	str	r2, [sp, #12]
 800816c:	7e0a      	ldrb	r2, [r1, #24]
 800816e:	000c      	movs	r4, r1
 8008170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008172:	2a78      	cmp	r2, #120	@ 0x78
 8008174:	d809      	bhi.n	800818a <_printf_i+0x2e>
 8008176:	2a62      	cmp	r2, #98	@ 0x62
 8008178:	d80b      	bhi.n	8008192 <_printf_i+0x36>
 800817a:	2a00      	cmp	r2, #0
 800817c:	d100      	bne.n	8008180 <_printf_i+0x24>
 800817e:	e0ba      	b.n	80082f6 <_printf_i+0x19a>
 8008180:	497a      	ldr	r1, [pc, #488]	@ (800836c <_printf_i+0x210>)
 8008182:	9104      	str	r1, [sp, #16]
 8008184:	2a58      	cmp	r2, #88	@ 0x58
 8008186:	d100      	bne.n	800818a <_printf_i+0x2e>
 8008188:	e08e      	b.n	80082a8 <_printf_i+0x14c>
 800818a:	0025      	movs	r5, r4
 800818c:	3542      	adds	r5, #66	@ 0x42
 800818e:	702a      	strb	r2, [r5, #0]
 8008190:	e022      	b.n	80081d8 <_printf_i+0x7c>
 8008192:	0010      	movs	r0, r2
 8008194:	3863      	subs	r0, #99	@ 0x63
 8008196:	2815      	cmp	r0, #21
 8008198:	d8f7      	bhi.n	800818a <_printf_i+0x2e>
 800819a:	f7f7 ffbd 	bl	8000118 <__gnu_thumb1_case_shi>
 800819e:	0016      	.short	0x0016
 80081a0:	fff6001f 	.word	0xfff6001f
 80081a4:	fff6fff6 	.word	0xfff6fff6
 80081a8:	001ffff6 	.word	0x001ffff6
 80081ac:	fff6fff6 	.word	0xfff6fff6
 80081b0:	fff6fff6 	.word	0xfff6fff6
 80081b4:	0036009f 	.word	0x0036009f
 80081b8:	fff6007e 	.word	0xfff6007e
 80081bc:	00b0fff6 	.word	0x00b0fff6
 80081c0:	0036fff6 	.word	0x0036fff6
 80081c4:	fff6fff6 	.word	0xfff6fff6
 80081c8:	0082      	.short	0x0082
 80081ca:	0025      	movs	r5, r4
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	3542      	adds	r5, #66	@ 0x42
 80081d0:	1d11      	adds	r1, r2, #4
 80081d2:	6019      	str	r1, [r3, #0]
 80081d4:	6813      	ldr	r3, [r2, #0]
 80081d6:	702b      	strb	r3, [r5, #0]
 80081d8:	2301      	movs	r3, #1
 80081da:	e09e      	b.n	800831a <_printf_i+0x1be>
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	6809      	ldr	r1, [r1, #0]
 80081e0:	1d02      	adds	r2, r0, #4
 80081e2:	060d      	lsls	r5, r1, #24
 80081e4:	d50b      	bpl.n	80081fe <_printf_i+0xa2>
 80081e6:	6806      	ldr	r6, [r0, #0]
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	da03      	bge.n	80081f6 <_printf_i+0x9a>
 80081ee:	232d      	movs	r3, #45	@ 0x2d
 80081f0:	9a03      	ldr	r2, [sp, #12]
 80081f2:	4276      	negs	r6, r6
 80081f4:	7013      	strb	r3, [r2, #0]
 80081f6:	4b5d      	ldr	r3, [pc, #372]	@ (800836c <_printf_i+0x210>)
 80081f8:	270a      	movs	r7, #10
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	e018      	b.n	8008230 <_printf_i+0xd4>
 80081fe:	6806      	ldr	r6, [r0, #0]
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	0649      	lsls	r1, r1, #25
 8008204:	d5f1      	bpl.n	80081ea <_printf_i+0x8e>
 8008206:	b236      	sxth	r6, r6
 8008208:	e7ef      	b.n	80081ea <_printf_i+0x8e>
 800820a:	6808      	ldr	r0, [r1, #0]
 800820c:	6819      	ldr	r1, [r3, #0]
 800820e:	c940      	ldmia	r1!, {r6}
 8008210:	0605      	lsls	r5, r0, #24
 8008212:	d402      	bmi.n	800821a <_printf_i+0xbe>
 8008214:	0640      	lsls	r0, r0, #25
 8008216:	d500      	bpl.n	800821a <_printf_i+0xbe>
 8008218:	b2b6      	uxth	r6, r6
 800821a:	6019      	str	r1, [r3, #0]
 800821c:	4b53      	ldr	r3, [pc, #332]	@ (800836c <_printf_i+0x210>)
 800821e:	270a      	movs	r7, #10
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	2a6f      	cmp	r2, #111	@ 0x6f
 8008224:	d100      	bne.n	8008228 <_printf_i+0xcc>
 8008226:	3f02      	subs	r7, #2
 8008228:	0023      	movs	r3, r4
 800822a:	2200      	movs	r2, #0
 800822c:	3343      	adds	r3, #67	@ 0x43
 800822e:	701a      	strb	r2, [r3, #0]
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	60a3      	str	r3, [r4, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	db06      	blt.n	8008246 <_printf_i+0xea>
 8008238:	2104      	movs	r1, #4
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	9d03      	ldr	r5, [sp, #12]
 800823e:	438a      	bics	r2, r1
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	4333      	orrs	r3, r6
 8008244:	d00c      	beq.n	8008260 <_printf_i+0x104>
 8008246:	9d03      	ldr	r5, [sp, #12]
 8008248:	0030      	movs	r0, r6
 800824a:	0039      	movs	r1, r7
 800824c:	f7f7 fff4 	bl	8000238 <__aeabi_uidivmod>
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	3d01      	subs	r5, #1
 8008254:	5c5b      	ldrb	r3, [r3, r1]
 8008256:	702b      	strb	r3, [r5, #0]
 8008258:	0033      	movs	r3, r6
 800825a:	0006      	movs	r6, r0
 800825c:	429f      	cmp	r7, r3
 800825e:	d9f3      	bls.n	8008248 <_printf_i+0xec>
 8008260:	2f08      	cmp	r7, #8
 8008262:	d109      	bne.n	8008278 <_printf_i+0x11c>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	07db      	lsls	r3, r3, #31
 8008268:	d506      	bpl.n	8008278 <_printf_i+0x11c>
 800826a:	6862      	ldr	r2, [r4, #4]
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	dc02      	bgt.n	8008278 <_printf_i+0x11c>
 8008272:	2330      	movs	r3, #48	@ 0x30
 8008274:	3d01      	subs	r5, #1
 8008276:	702b      	strb	r3, [r5, #0]
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	1b5b      	subs	r3, r3, r5
 800827c:	6123      	str	r3, [r4, #16]
 800827e:	9b07      	ldr	r3, [sp, #28]
 8008280:	0021      	movs	r1, r4
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	9805      	ldr	r0, [sp, #20]
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	aa09      	add	r2, sp, #36	@ 0x24
 800828a:	f7ff fef7 	bl	800807c <_printf_common>
 800828e:	3001      	adds	r0, #1
 8008290:	d148      	bne.n	8008324 <_printf_i+0x1c8>
 8008292:	2001      	movs	r0, #1
 8008294:	4240      	negs	r0, r0
 8008296:	b00b      	add	sp, #44	@ 0x2c
 8008298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829a:	2220      	movs	r2, #32
 800829c:	6809      	ldr	r1, [r1, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	6022      	str	r2, [r4, #0]
 80082a2:	2278      	movs	r2, #120	@ 0x78
 80082a4:	4932      	ldr	r1, [pc, #200]	@ (8008370 <_printf_i+0x214>)
 80082a6:	9104      	str	r1, [sp, #16]
 80082a8:	0021      	movs	r1, r4
 80082aa:	3145      	adds	r1, #69	@ 0x45
 80082ac:	700a      	strb	r2, [r1, #0]
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	6822      	ldr	r2, [r4, #0]
 80082b2:	c940      	ldmia	r1!, {r6}
 80082b4:	0610      	lsls	r0, r2, #24
 80082b6:	d402      	bmi.n	80082be <_printf_i+0x162>
 80082b8:	0650      	lsls	r0, r2, #25
 80082ba:	d500      	bpl.n	80082be <_printf_i+0x162>
 80082bc:	b2b6      	uxth	r6, r6
 80082be:	6019      	str	r1, [r3, #0]
 80082c0:	07d3      	lsls	r3, r2, #31
 80082c2:	d502      	bpl.n	80082ca <_printf_i+0x16e>
 80082c4:	2320      	movs	r3, #32
 80082c6:	4313      	orrs	r3, r2
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	2e00      	cmp	r6, #0
 80082cc:	d001      	beq.n	80082d2 <_printf_i+0x176>
 80082ce:	2710      	movs	r7, #16
 80082d0:	e7aa      	b.n	8008228 <_printf_i+0xcc>
 80082d2:	2220      	movs	r2, #32
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	4393      	bics	r3, r2
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	e7f8      	b.n	80082ce <_printf_i+0x172>
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	680d      	ldr	r5, [r1, #0]
 80082e0:	1d10      	adds	r0, r2, #4
 80082e2:	6949      	ldr	r1, [r1, #20]
 80082e4:	6018      	str	r0, [r3, #0]
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	062e      	lsls	r6, r5, #24
 80082ea:	d501      	bpl.n	80082f0 <_printf_i+0x194>
 80082ec:	6019      	str	r1, [r3, #0]
 80082ee:	e002      	b.n	80082f6 <_printf_i+0x19a>
 80082f0:	066d      	lsls	r5, r5, #25
 80082f2:	d5fb      	bpl.n	80082ec <_printf_i+0x190>
 80082f4:	8019      	strh	r1, [r3, #0]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9d03      	ldr	r5, [sp, #12]
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	e7bf      	b.n	800827e <_printf_i+0x122>
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	1d11      	adds	r1, r2, #4
 8008302:	6019      	str	r1, [r3, #0]
 8008304:	6815      	ldr	r5, [r2, #0]
 8008306:	2100      	movs	r1, #0
 8008308:	0028      	movs	r0, r5
 800830a:	6862      	ldr	r2, [r4, #4]
 800830c:	f000 f856 	bl	80083bc <memchr>
 8008310:	2800      	cmp	r0, #0
 8008312:	d001      	beq.n	8008318 <_printf_i+0x1bc>
 8008314:	1b40      	subs	r0, r0, r5
 8008316:	6060      	str	r0, [r4, #4]
 8008318:	6863      	ldr	r3, [r4, #4]
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	2300      	movs	r3, #0
 800831e:	9a03      	ldr	r2, [sp, #12]
 8008320:	7013      	strb	r3, [r2, #0]
 8008322:	e7ac      	b.n	800827e <_printf_i+0x122>
 8008324:	002a      	movs	r2, r5
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	9906      	ldr	r1, [sp, #24]
 800832a:	9805      	ldr	r0, [sp, #20]
 800832c:	9d07      	ldr	r5, [sp, #28]
 800832e:	47a8      	blx	r5
 8008330:	3001      	adds	r0, #1
 8008332:	d0ae      	beq.n	8008292 <_printf_i+0x136>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	079b      	lsls	r3, r3, #30
 8008338:	d415      	bmi.n	8008366 <_printf_i+0x20a>
 800833a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833c:	68e0      	ldr	r0, [r4, #12]
 800833e:	4298      	cmp	r0, r3
 8008340:	daa9      	bge.n	8008296 <_printf_i+0x13a>
 8008342:	0018      	movs	r0, r3
 8008344:	e7a7      	b.n	8008296 <_printf_i+0x13a>
 8008346:	0022      	movs	r2, r4
 8008348:	2301      	movs	r3, #1
 800834a:	9906      	ldr	r1, [sp, #24]
 800834c:	9805      	ldr	r0, [sp, #20]
 800834e:	9e07      	ldr	r6, [sp, #28]
 8008350:	3219      	adds	r2, #25
 8008352:	47b0      	blx	r6
 8008354:	3001      	adds	r0, #1
 8008356:	d09c      	beq.n	8008292 <_printf_i+0x136>
 8008358:	3501      	adds	r5, #1
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	42ab      	cmp	r3, r5
 8008362:	dcf0      	bgt.n	8008346 <_printf_i+0x1ea>
 8008364:	e7e9      	b.n	800833a <_printf_i+0x1de>
 8008366:	2500      	movs	r5, #0
 8008368:	e7f7      	b.n	800835a <_printf_i+0x1fe>
 800836a:	46c0      	nop			@ (mov r8, r8)
 800836c:	080085d9 	.word	0x080085d9
 8008370:	080085ea 	.word	0x080085ea

08008374 <memmove>:
 8008374:	b510      	push	{r4, lr}
 8008376:	4288      	cmp	r0, r1
 8008378:	d902      	bls.n	8008380 <memmove+0xc>
 800837a:	188b      	adds	r3, r1, r2
 800837c:	4298      	cmp	r0, r3
 800837e:	d308      	bcc.n	8008392 <memmove+0x1e>
 8008380:	2300      	movs	r3, #0
 8008382:	429a      	cmp	r2, r3
 8008384:	d007      	beq.n	8008396 <memmove+0x22>
 8008386:	5ccc      	ldrb	r4, [r1, r3]
 8008388:	54c4      	strb	r4, [r0, r3]
 800838a:	3301      	adds	r3, #1
 800838c:	e7f9      	b.n	8008382 <memmove+0xe>
 800838e:	5c8b      	ldrb	r3, [r1, r2]
 8008390:	5483      	strb	r3, [r0, r2]
 8008392:	3a01      	subs	r2, #1
 8008394:	d2fb      	bcs.n	800838e <memmove+0x1a>
 8008396:	bd10      	pop	{r4, pc}

08008398 <_sbrk_r>:
 8008398:	2300      	movs	r3, #0
 800839a:	b570      	push	{r4, r5, r6, lr}
 800839c:	4d06      	ldr	r5, [pc, #24]	@ (80083b8 <_sbrk_r+0x20>)
 800839e:	0004      	movs	r4, r0
 80083a0:	0008      	movs	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f8 f934 	bl	8000610 <_sbrk>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d103      	bne.n	80083b4 <_sbrk_r+0x1c>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d000      	beq.n	80083b4 <_sbrk_r+0x1c>
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
 80083b6:	46c0      	nop			@ (mov r8, r8)
 80083b8:	20001544 	.word	0x20001544

080083bc <memchr>:
 80083bc:	b2c9      	uxtb	r1, r1
 80083be:	1882      	adds	r2, r0, r2
 80083c0:	4290      	cmp	r0, r2
 80083c2:	d101      	bne.n	80083c8 <memchr+0xc>
 80083c4:	2000      	movs	r0, #0
 80083c6:	4770      	bx	lr
 80083c8:	7803      	ldrb	r3, [r0, #0]
 80083ca:	428b      	cmp	r3, r1
 80083cc:	d0fb      	beq.n	80083c6 <memchr+0xa>
 80083ce:	3001      	adds	r0, #1
 80083d0:	e7f6      	b.n	80083c0 <memchr+0x4>

080083d2 <memcpy>:
 80083d2:	2300      	movs	r3, #0
 80083d4:	b510      	push	{r4, lr}
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d100      	bne.n	80083dc <memcpy+0xa>
 80083da:	bd10      	pop	{r4, pc}
 80083dc:	5ccc      	ldrb	r4, [r1, r3]
 80083de:	54c4      	strb	r4, [r0, r3]
 80083e0:	3301      	adds	r3, #1
 80083e2:	e7f8      	b.n	80083d6 <memcpy+0x4>

080083e4 <_realloc_r>:
 80083e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083e6:	0006      	movs	r6, r0
 80083e8:	000c      	movs	r4, r1
 80083ea:	0015      	movs	r5, r2
 80083ec:	2900      	cmp	r1, #0
 80083ee:	d105      	bne.n	80083fc <_realloc_r+0x18>
 80083f0:	0011      	movs	r1, r2
 80083f2:	f7ff fc55 	bl	8007ca0 <_malloc_r>
 80083f6:	0004      	movs	r4, r0
 80083f8:	0020      	movs	r0, r4
 80083fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083fc:	2a00      	cmp	r2, #0
 80083fe:	d103      	bne.n	8008408 <_realloc_r+0x24>
 8008400:	f7ff fbe2 	bl	8007bc8 <_free_r>
 8008404:	002c      	movs	r4, r5
 8008406:	e7f7      	b.n	80083f8 <_realloc_r+0x14>
 8008408:	f000 f81c 	bl	8008444 <_malloc_usable_size_r>
 800840c:	0007      	movs	r7, r0
 800840e:	4285      	cmp	r5, r0
 8008410:	d802      	bhi.n	8008418 <_realloc_r+0x34>
 8008412:	0843      	lsrs	r3, r0, #1
 8008414:	42ab      	cmp	r3, r5
 8008416:	d3ef      	bcc.n	80083f8 <_realloc_r+0x14>
 8008418:	0029      	movs	r1, r5
 800841a:	0030      	movs	r0, r6
 800841c:	f7ff fc40 	bl	8007ca0 <_malloc_r>
 8008420:	9001      	str	r0, [sp, #4]
 8008422:	2800      	cmp	r0, #0
 8008424:	d101      	bne.n	800842a <_realloc_r+0x46>
 8008426:	9c01      	ldr	r4, [sp, #4]
 8008428:	e7e6      	b.n	80083f8 <_realloc_r+0x14>
 800842a:	002a      	movs	r2, r5
 800842c:	42bd      	cmp	r5, r7
 800842e:	d900      	bls.n	8008432 <_realloc_r+0x4e>
 8008430:	003a      	movs	r2, r7
 8008432:	0021      	movs	r1, r4
 8008434:	9801      	ldr	r0, [sp, #4]
 8008436:	f7ff ffcc 	bl	80083d2 <memcpy>
 800843a:	0021      	movs	r1, r4
 800843c:	0030      	movs	r0, r6
 800843e:	f7ff fbc3 	bl	8007bc8 <_free_r>
 8008442:	e7f0      	b.n	8008426 <_realloc_r+0x42>

08008444 <_malloc_usable_size_r>:
 8008444:	1f0b      	subs	r3, r1, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	1f18      	subs	r0, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	da01      	bge.n	8008452 <_malloc_usable_size_r+0xe>
 800844e:	580b      	ldr	r3, [r1, r0]
 8008450:	18c0      	adds	r0, r0, r3
 8008452:	4770      	bx	lr

08008454 <_init>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	46c0      	nop			@ (mov r8, r8)
 8008458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845a:	bc08      	pop	{r3}
 800845c:	469e      	mov	lr, r3
 800845e:	4770      	bx	lr

08008460 <_fini>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	46c0      	nop			@ (mov r8, r8)
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr
