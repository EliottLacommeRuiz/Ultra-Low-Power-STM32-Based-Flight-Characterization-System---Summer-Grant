
FCS - Summer Project Code and Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007edc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007f9c  08007f9c  00008f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f0  080080f0  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080080f0  080080f0  0000a17c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080080f0  080080f0  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f0  080080f0  000090f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080f4  080080f4  000090f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080080f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  2000017c  08008274  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08008274  0000a3b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e548  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e93  00000000  00000000  000186ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000973  00000000  00000000  0001c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016366  00000000  00000000  0001cbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dd3  00000000  00000000  00032f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c82c  00000000  00000000  00043cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000c055c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c30f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f84 	.word	0x08007f84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08007f84 	.word	0x08007f84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <Imu_Start_Transmission>:
 *
 * Takes: void
 * Returns: void
 */
void Imu_Start_Transmission(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_RESET);
 8000224:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <Imu_Start_Transmission+0x18>)
 8000226:	2200      	movs	r2, #0
 8000228:	2101      	movs	r1, #1
 800022a:	0018      	movs	r0, r3
 800022c:	f000 fd26 	bl	8000c7c <HAL_GPIO_WritePin>
}
 8000230:	46c0      	nop			@ (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)
 8000238:	50000400 	.word	0x50000400

0800023c <Imu_Stop_Transmission>:
 *
 * Takes: void
 * Returns: void
 */
void Imu_Stop_Transmission(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <Imu_Stop_Transmission+0x18>)
 8000242:	2201      	movs	r2, #1
 8000244:	2101      	movs	r1, #1
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fd18 	bl	8000c7c <HAL_GPIO_WritePin>
}
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	50000400 	.word	0x50000400

08000258 <Imu_Reg16_Read>:
 *
 * Takes: uint8_t address and pointer data
 * Returns: uint8_t status
 */
uint8_t Imu_Reg16_Read(uint8_t addr, uint8_t* data)
{
 8000258:	b5b0      	push	{r4, r5, r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af02      	add	r7, sp, #8
 800025e:	0002      	movs	r2, r0
 8000260:	6039      	str	r1, [r7, #0]
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	701a      	strb	r2, [r3, #0]
	/*
	 * Create a transmit array that will set the transmit data to READ
	 * Will have 4 bytes [(read set + addr), 0x00, 0x00, 0x00]
	 */
	uint8_t tx_buf[4] = { ( (addr & 0x7F) | 0x80), 0x00, 0x00, 0x00 };
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2280      	movs	r2, #128	@ 0x80
 800026c:	4252      	negs	r2, r2
 800026e:	4313      	orrs	r3, r2
 8000270:	b2da      	uxtb	r2, r3
 8000272:	2410      	movs	r4, #16
 8000274:	193b      	adds	r3, r7, r4
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2200      	movs	r2, #0
 800027c:	705a      	strb	r2, [r3, #1]
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2200      	movs	r2, #0
 8000282:	709a      	strb	r2, [r3, #2]
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2200      	movs	r2, #0
 8000288:	70da      	strb	r2, [r3, #3]
	uint8_t rx_buf[4] = {0};
 800028a:	250c      	movs	r5, #12
 800028c:	197b      	adds	r3, r7, r5
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]

	Imu_Start_Transmission();
 8000292:	f7ff ffc5 	bl	8000220 <Imu_Start_Transmission>

	// Send and get data while seeing if out status is ok
	uint8_t status = (HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 4, HAL_MAX_DELAY) == HAL_OK);
 8000296:	197a      	adds	r2, r7, r5
 8000298:	1939      	adds	r1, r7, r4
 800029a:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <Imu_Reg16_Read+0x78>)
 800029c:	2301      	movs	r3, #1
 800029e:	425b      	negs	r3, r3
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	2304      	movs	r3, #4
 80002a4:	f003 fae4 	bl	8003870 <HAL_SPI_TransmitReceive>
 80002a8:	0003      	movs	r3, r0
 80002aa:	425a      	negs	r2, r3
 80002ac:	4153      	adcs	r3, r2
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	2417      	movs	r4, #23
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	701a      	strb	r2, [r3, #0]

	Imu_Stop_Transmission();
 80002b6:	f7ff ffc1 	bl	800023c <Imu_Stop_Transmission>

	*data = rx_buf[2];
 80002ba:	197b      	adds	r3, r7, r5
 80002bc:	789a      	ldrb	r2, [r3, #2]
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	701a      	strb	r2, [r3, #0]
	return status;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	781b      	ldrb	r3, [r3, #0]
}
 80002c6:	0018      	movs	r0, r3
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b006      	add	sp, #24
 80002cc:	bdb0      	pop	{r4, r5, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	20000198 	.word	0x20000198

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002da:	f000 fa03 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002de:	f000 f81d 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e2:	f000 f8c5 	bl	8000470 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002e6:	f000 f88b 	bl	8000400 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80002ea:	f007 f919 	bl	8007520 <MX_USB_DEVICE_Init>
  while (1)
  {

	  /* START of uncommented code for while loop*/

	  uint8_t dummy = 0x00;
 80002ee:	1dbb      	adds	r3, r7, #6
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
//	  // First dummy read to set to SPI
//	  Imu_Reg16_Read(0x00, &data);

	  // Read the chip id
	  Imu_Reg16_Read(IMU_REG_CHIP_ID, &dummy);
 80002f4:	1dbb      	adds	r3, r7, #6
 80002f6:	0019      	movs	r1, r3
 80002f8:	2000      	movs	r0, #0
 80002fa:	f7ff ffad 	bl	8000258 <Imu_Reg16_Read>

	  uint8_t data = 0x01;
 80002fe:	1d7b      	adds	r3, r7, #5
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
	  uint8_t reg_check = 0x01;
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
	  Imu_Reg16_Read(reg_check, &data);
 800030a:	1d7a      	adds	r2, r7, #5
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	0011      	movs	r1, r2
 8000312:	0018      	movs	r0, r3
 8000314:	f7ff ffa0 	bl	8000258 <Imu_Reg16_Read>
  {
 8000318:	46c0      	nop			@ (mov r8, r8)
 800031a:	e7e8      	b.n	80002ee <main+0x1a>

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b09d      	sub	sp, #116	@ 0x74
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	2438      	movs	r4, #56	@ 0x38
 8000324:	193b      	adds	r3, r7, r4
 8000326:	0018      	movs	r0, r3
 8000328:	2338      	movs	r3, #56	@ 0x38
 800032a:	001a      	movs	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f007 fdfd 	bl	8007f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000332:	2324      	movs	r3, #36	@ 0x24
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	0018      	movs	r0, r3
 8000338:	2314      	movs	r3, #20
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f007 fdf5 	bl	8007f2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	2324      	movs	r3, #36	@ 0x24
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f007 fdee 	bl	8007f2c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000350:	4b29      	ldr	r3, [pc, #164]	@ (80003f8 <SystemClock_Config+0xdc>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a29      	ldr	r2, [pc, #164]	@ (80003fc <SystemClock_Config+0xe0>)
 8000356:	401a      	ands	r2, r3
 8000358:	4b27      	ldr	r3, [pc, #156]	@ (80003f8 <SystemClock_Config+0xdc>)
 800035a:	2180      	movs	r1, #128	@ 0x80
 800035c:	0109      	lsls	r1, r1, #4
 800035e:	430a      	orrs	r2, r1
 8000360:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000362:	0021      	movs	r1, r4
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2201      	movs	r2, #1
 8000368:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2280      	movs	r2, #128	@ 0x80
 800036e:	0252      	lsls	r2, r2, #9
 8000370:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2202      	movs	r2, #2
 8000376:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2280      	movs	r2, #128	@ 0x80
 800037c:	0252      	lsls	r2, r2, #9
 800037e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2280      	movs	r2, #128	@ 0x80
 8000384:	0312      	lsls	r2, r2, #12
 8000386:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2280      	movs	r2, #128	@ 0x80
 800038c:	0412      	lsls	r2, r2, #16
 800038e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	187b      	adds	r3, r7, r1
 8000392:	0018      	movs	r0, r3
 8000394:	f002 fadc 	bl	8002950 <HAL_RCC_OscConfig>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800039c:	f000 f8ee 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a0:	2124      	movs	r1, #36	@ 0x24
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	220f      	movs	r2, #15
 80003a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2202      	movs	r2, #2
 80003ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2100      	movs	r1, #0
 80003c4:	0018      	movs	r0, r3
 80003c6:	f002 fe97 	bl	80030f8 <HAL_RCC_ClockConfig>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003ce:	f000 f8d5 	bl	800057c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003d2:	003b      	movs	r3, r7
 80003d4:	2240      	movs	r2, #64	@ 0x40
 80003d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003d8:	003b      	movs	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003de:	003b      	movs	r3, r7
 80003e0:	0018      	movs	r0, r3
 80003e2:	f003 f855 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80003ea:	f000 f8c7 	bl	800057c <Error_Handler>
  }
}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b01d      	add	sp, #116	@ 0x74
 80003f4:	bd90      	pop	{r4, r7, pc}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	40007000 	.word	0x40007000
 80003fc:	ffffe7ff 	.word	0xffffe7ff

08000400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000404:	4b18      	ldr	r3, [pc, #96]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000406:	4a19      	ldr	r2, [pc, #100]	@ (800046c <MX_SPI1_Init+0x6c>)
 8000408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <MX_SPI1_Init+0x68>)
 800040c:	2282      	movs	r2, #130	@ 0x82
 800040e:	0052      	lsls	r2, r2, #1
 8000410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000412:	4b15      	ldr	r3, [pc, #84]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <MX_SPI1_Init+0x68>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041e:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000424:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <MX_SPI1_Init+0x68>)
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	0092      	lsls	r2, r2, #2
 8000430:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000432:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000434:	2208      	movs	r2, #8
 8000436:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <MX_SPI1_Init+0x68>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043e:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <MX_SPI1_Init+0x68>)
 800044c:	2207      	movs	r2, #7
 800044e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <MX_SPI1_Init+0x68>)
 8000452:	0018      	movs	r0, r3
 8000454:	f003 f978 	bl	8003748 <HAL_SPI_Init>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800045c:	f000 f88e 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000460:	46c0      	nop			@ (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	20000198 	.word	0x20000198
 800046c:	40013000 	.word	0x40013000

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b08b      	sub	sp, #44	@ 0x2c
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	2414      	movs	r4, #20
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2314      	movs	r3, #20
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f007 fd53 	bl	8007f2c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b3b      	ldr	r3, [pc, #236]	@ (8000574 <MX_GPIO_Init+0x104>)
 8000488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800048a:	4b3a      	ldr	r3, [pc, #232]	@ (8000574 <MX_GPIO_Init+0x104>)
 800048c:	2104      	movs	r1, #4
 800048e:	430a      	orrs	r2, r1
 8000490:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000492:	4b38      	ldr	r3, [pc, #224]	@ (8000574 <MX_GPIO_Init+0x104>)
 8000494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000496:	2204      	movs	r2, #4
 8000498:	4013      	ands	r3, r2
 800049a:	613b      	str	r3, [r7, #16]
 800049c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800049e:	4b35      	ldr	r3, [pc, #212]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004a2:	4b34      	ldr	r3, [pc, #208]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004a4:	2180      	movs	r1, #128	@ 0x80
 80004a6:	430a      	orrs	r2, r1
 80004a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004aa:	4b32      	ldr	r3, [pc, #200]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ae:	2280      	movs	r2, #128	@ 0x80
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004bc:	2101      	movs	r1, #1
 80004be:	430a      	orrs	r2, r1
 80004c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	4b29      	ldr	r3, [pc, #164]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004d2:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004d4:	2102      	movs	r1, #2
 80004d6:	430a      	orrs	r2, r1
 80004d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004da:	4b26      	ldr	r3, [pc, #152]	@ (8000574 <MX_GPIO_Init+0x104>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004de:	2202      	movs	r2, #2
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin|FLASH_HOLD_RST_Pin|FLASH_WP_Pin, GPIO_PIN_RESET);
 80004e6:	23a0      	movs	r3, #160	@ 0xa0
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2200      	movs	r2, #0
 80004ec:	2107      	movs	r1, #7
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fbc4 	bl	8000c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_NCS_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80004f4:	4b20      	ldr	r3, [pc, #128]	@ (8000578 <MX_GPIO_Init+0x108>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	2161      	movs	r1, #97	@ 0x61
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fbbe 	bl	8000c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_CS_Pin FLASH_HOLD_RST_Pin FLASH_WP_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|FLASH_HOLD_RST_Pin|FLASH_WP_Pin;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2207      	movs	r2, #7
 8000504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2201      	movs	r2, #1
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	193a      	adds	r2, r7, r4
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fa2d 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_NCS_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = IMU_NCS_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2261      	movs	r2, #97	@ 0x61
 800052a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2201      	movs	r2, #1
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	193b      	adds	r3, r7, r4
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <MX_GPIO_Init+0x108>)
 8000542:	0019      	movs	r1, r3
 8000544:	0010      	movs	r0, r2
 8000546:	f000 fa1b 	bl	8000980 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 800054a:	0021      	movs	r1, r4
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2202      	movs	r2, #2
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2288      	movs	r2, #136	@ 0x88
 8000556:	0352      	lsls	r2, r2, #13
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8000560:	187b      	adds	r3, r7, r1
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <MX_GPIO_Init+0x108>)
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f000 fa0a 	bl	8000980 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b00b      	add	sp, #44	@ 0x2c
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	50000400 	.word	0x50000400

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <HAL_MspInit+0x24>)
 800058e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <HAL_MspInit+0x24>)
 8000592:	2101      	movs	r1, #1
 8000594:	430a      	orrs	r2, r1
 8000596:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <HAL_MspInit+0x24>)
 800059a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <HAL_MspInit+0x24>)
 800059e:	2180      	movs	r1, #128	@ 0x80
 80005a0:	0549      	lsls	r1, r1, #21
 80005a2:	430a      	orrs	r2, r1
 80005a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	@ 0x24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	240c      	movs	r4, #12
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	0018      	movs	r0, r3
 80005be:	2314      	movs	r3, #20
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f007 fcb2 	bl	8007f2c <memset>
  if(hspi->Instance==SPI1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a18      	ldr	r2, [pc, #96]	@ (8000630 <HAL_SPI_MspInit+0x80>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d129      	bne.n	8000626 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <HAL_SPI_MspInit+0x84>)
 80005d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <HAL_SPI_MspInit+0x84>)
 80005d8:	2180      	movs	r1, #128	@ 0x80
 80005da:	0149      	lsls	r1, r1, #5
 80005dc:	430a      	orrs	r2, r1
 80005de:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <HAL_SPI_MspInit+0x84>)
 80005e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <HAL_SPI_MspInit+0x84>)
 80005e6:	2101      	movs	r1, #1
 80005e8:	430a      	orrs	r2, r1
 80005ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <HAL_SPI_MspInit+0x84>)
 80005ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f0:	2201      	movs	r2, #1
 80005f2:	4013      	ands	r3, r2
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005f8:	0021      	movs	r1, r4
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	22e0      	movs	r2, #224	@ 0xe0
 80005fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2202      	movs	r2, #2
 8000604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2203      	movs	r2, #3
 8000610:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	187a      	adds	r2, r7, r1
 800061a:	23a0      	movs	r3, #160	@ 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f9ad 	bl	8000980 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b009      	add	sp, #36	@ 0x24
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	40013000 	.word	0x40013000
 8000634:	40021000 	.word	0x40021000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <NMI_Handler+0x4>

08000640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	e7fd      	b.n	8000644 <HardFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000660:	f000 f894 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <USB_IRQHandler+0x14>)
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fc3a 	bl	8000eec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	20000ebc 	.word	0x20000ebc

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000694:	f7ff fff6 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	@ (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	@ (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f007 fc3d 	bl	8007f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c2:	f7ff fe07 	bl	80002d4 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
   ldr   r0, =_estack
 80006c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80006d4:	080080f8 	.word	0x080080f8
  ldr r2, =_sbss
 80006d8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80006dc:	200013b8 	.word	0x200013b8

080006e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_COMP_IRQHandler>
	...

080006e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <HAL_Init+0x3c>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <HAL_Init+0x3c>)
 80006f6:	2140      	movs	r1, #64	@ 0x40
 80006f8:	430a      	orrs	r2, r1
 80006fa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f811 	bl	8000724 <HAL_InitTick>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d003      	beq.n	800070e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	e001      	b.n	8000712 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800070e:	f7ff ff3b 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <HAL_InitTick+0x5c>)
 800072e:	681c      	ldr	r4, [r3, #0]
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <HAL_InitTick+0x60>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	0019      	movs	r1, r3
 8000736:	23fa      	movs	r3, #250	@ 0xfa
 8000738:	0098      	lsls	r0, r3, #2
 800073a:	f7ff fce5 	bl	8000108 <__udivsi3>
 800073e:	0003      	movs	r3, r0
 8000740:	0019      	movs	r1, r3
 8000742:	0020      	movs	r0, r4
 8000744:	f7ff fce0 	bl	8000108 <__udivsi3>
 8000748:	0003      	movs	r3, r0
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f90b 	bl	8000966 <HAL_SYSTICK_Config>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	e00f      	b.n	8000778 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d80b      	bhi.n	8000776 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	2301      	movs	r3, #1
 8000762:	425b      	negs	r3, r3
 8000764:	2200      	movs	r2, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f8d8 	bl	800091c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HAL_InitTick+0x64>)
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	b003      	add	sp, #12
 800077e:	bd90      	pop	{r4, r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	001a      	movs	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	18d2      	adds	r2, r2, r3
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <HAL_IncTick+0x20>)
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	20000008 	.word	0x20000008
 80007ac:	200001f0 	.word	0x200001f0

080007b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <HAL_GetTick+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	200001f0 	.word	0x200001f0

080007c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	0002      	movs	r2, r0
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007d6:	d809      	bhi.n	80007ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	001a      	movs	r2, r3
 80007de:	231f      	movs	r3, #31
 80007e0:	401a      	ands	r2, r3
 80007e2:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__NVIC_EnableIRQ+0x30>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	4091      	lsls	r1, r2
 80007e8:	000a      	movs	r2, r1
 80007ea:	601a      	str	r2, [r3, #0]
  }
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b7f      	cmp	r3, #127	@ 0x7f
 800080c:	d828      	bhi.n	8000860 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080e:	4a2f      	ldr	r2, [pc, #188]	@ (80008cc <__NVIC_SetPriority+0xd4>)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	33c0      	adds	r3, #192	@ 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	589b      	ldr	r3, [r3, r2]
 800081e:	1dfa      	adds	r2, r7, #7
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	0011      	movs	r1, r2
 8000824:	2203      	movs	r2, #3
 8000826:	400a      	ands	r2, r1
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	21ff      	movs	r1, #255	@ 0xff
 800082c:	4091      	lsls	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	43d2      	mvns	r2, r2
 8000832:	401a      	ands	r2, r3
 8000834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	22ff      	movs	r2, #255	@ 0xff
 800083c:	401a      	ands	r2, r3
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	2303      	movs	r3, #3
 8000846:	4003      	ands	r3, r0
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084c:	481f      	ldr	r0, [pc, #124]	@ (80008cc <__NVIC_SetPriority+0xd4>)
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	430a      	orrs	r2, r1
 8000858:	33c0      	adds	r3, #192	@ 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800085e:	e031      	b.n	80008c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <__NVIC_SetPriority+0xd8>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0019      	movs	r1, r3
 8000868:	230f      	movs	r3, #15
 800086a:	400b      	ands	r3, r1
 800086c:	3b08      	subs	r3, #8
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	3306      	adds	r3, #6
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	3304      	adds	r3, #4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1dfa      	adds	r2, r7, #7
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	0011      	movs	r1, r2
 8000880:	2203      	movs	r2, #3
 8000882:	400a      	ands	r2, r1
 8000884:	00d2      	lsls	r2, r2, #3
 8000886:	21ff      	movs	r1, #255	@ 0xff
 8000888:	4091      	lsls	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	43d2      	mvns	r2, r2
 800088e:	401a      	ands	r2, r3
 8000890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	019b      	lsls	r3, r3, #6
 8000896:	22ff      	movs	r2, #255	@ 0xff
 8000898:	401a      	ands	r2, r3
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	0018      	movs	r0, r3
 80008a0:	2303      	movs	r3, #3
 80008a2:	4003      	ands	r3, r0
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <__NVIC_SetPriority+0xd8>)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	001c      	movs	r4, r3
 80008b0:	230f      	movs	r3, #15
 80008b2:	4023      	ands	r3, r4
 80008b4:	3b08      	subs	r3, #8
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	430a      	orrs	r2, r1
 80008ba:	3306      	adds	r3, #6
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	18c3      	adds	r3, r0, r3
 80008c0:	3304      	adds	r3, #4
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b003      	add	sp, #12
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	045b      	lsls	r3, r3, #17
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d301      	bcc.n	80008ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e8:	2301      	movs	r3, #1
 80008ea:	e010      	b.n	800090e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <SysTick_Config+0x44>)
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	3a01      	subs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	2103      	movs	r1, #3
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff ff7c 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <SysTick_Config+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <SysTick_Config+0x44>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	210f      	movs	r1, #15
 8000928:	187b      	adds	r3, r7, r1
 800092a:	1c02      	adds	r2, r0, #0
 800092c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b004      	add	sp, #16
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	0002      	movs	r2, r0
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ff33 	bl	80007c4 <__NVIC_EnableIRQ>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff ffaf 	bl	80008d4 <SysTick_Config>
 8000976:	0003      	movs	r3, r0
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000996:	e155      	b.n	8000c44 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2101      	movs	r1, #1
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	4091      	lsls	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d100      	bne.n	80009b0 <HAL_GPIO_Init+0x30>
 80009ae:	e146      	b.n	8000c3e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2203      	movs	r2, #3
 80009b6:	4013      	ands	r3, r2
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d005      	beq.n	80009c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2203      	movs	r2, #3
 80009c2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d130      	bne.n	8000a2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	409a      	lsls	r2, r3
 80009d6:	0013      	movs	r3, r2
 80009d8:	43da      	mvns	r2, r3
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fe:	2201      	movs	r2, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	43da      	mvns	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	2201      	movs	r2, #1
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2203      	movs	r2, #3
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d017      	beq.n	8000a66 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	43da      	mvns	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d123      	bne.n	8000aba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	08da      	lsrs	r2, r3, #3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	58d3      	ldr	r3, [r2, r3]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	2207      	movs	r2, #7
 8000a84:	4013      	ands	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	691a      	ldr	r2, [r3, #16]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2107      	movs	r1, #7
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	08da      	lsrs	r2, r3, #3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3208      	adds	r2, #8
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	6939      	ldr	r1, [r7, #16]
 8000ab8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	0013      	movs	r3, r2
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	401a      	ands	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	23c0      	movs	r3, #192	@ 0xc0
 8000af4:	029b      	lsls	r3, r3, #10
 8000af6:	4013      	ands	r3, r2
 8000af8:	d100      	bne.n	8000afc <HAL_GPIO_Init+0x17c>
 8000afa:	e0a0      	b.n	8000c3e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afc:	4b57      	ldr	r3, [pc, #348]	@ (8000c5c <HAL_GPIO_Init+0x2dc>)
 8000afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b00:	4b56      	ldr	r3, [pc, #344]	@ (8000c5c <HAL_GPIO_Init+0x2dc>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b08:	4a55      	ldr	r2, [pc, #340]	@ (8000c60 <HAL_GPIO_Init+0x2e0>)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3302      	adds	r3, #2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	589b      	ldr	r3, [r3, r2]
 8000b14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	409a      	lsls	r2, r3
 8000b22:	0013      	movs	r3, r2
 8000b24:	43da      	mvns	r2, r3
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	23a0      	movs	r3, #160	@ 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d01f      	beq.n	8000b76 <HAL_GPIO_Init+0x1f6>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a4a      	ldr	r2, [pc, #296]	@ (8000c64 <HAL_GPIO_Init+0x2e4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d019      	beq.n	8000b72 <HAL_GPIO_Init+0x1f2>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a49      	ldr	r2, [pc, #292]	@ (8000c68 <HAL_GPIO_Init+0x2e8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d013      	beq.n	8000b6e <HAL_GPIO_Init+0x1ee>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a48      	ldr	r2, [pc, #288]	@ (8000c6c <HAL_GPIO_Init+0x2ec>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d00d      	beq.n	8000b6a <HAL_GPIO_Init+0x1ea>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a47      	ldr	r2, [pc, #284]	@ (8000c70 <HAL_GPIO_Init+0x2f0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d007      	beq.n	8000b66 <HAL_GPIO_Init+0x1e6>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a46      	ldr	r2, [pc, #280]	@ (8000c74 <HAL_GPIO_Init+0x2f4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_GPIO_Init+0x1e2>
 8000b5e:	2305      	movs	r3, #5
 8000b60:	e00a      	b.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b62:	2306      	movs	r3, #6
 8000b64:	e008      	b.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b66:	2304      	movs	r3, #4
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e004      	b.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b6e:	2302      	movs	r3, #2
 8000b70:	e002      	b.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_Init+0x1f8>
 8000b76:	2300      	movs	r3, #0
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	4093      	lsls	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b88:	4935      	ldr	r1, [pc, #212]	@ (8000c60 <HAL_GPIO_Init+0x2e0>)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b96:	4b38      	ldr	r3, [pc, #224]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	035b      	lsls	r3, r3, #13
 8000bae:	4013      	ands	r3, r2
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bba:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43da      	mvns	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	039b      	lsls	r3, r3, #14
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000be4:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000bea:	4b23      	ldr	r3, [pc, #140]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	2380      	movs	r3, #128	@ 0x80
 8000c00:	029b      	lsls	r3, r3, #10
 8000c02:	4013      	ands	r3, r2
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	2380      	movs	r3, #128	@ 0x80
 8000c2a:	025b      	lsls	r3, r3, #9
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_GPIO_Init+0x2f8>)
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	40da      	lsrs	r2, r3
 8000c4c:	1e13      	subs	r3, r2, #0
 8000c4e:	d000      	beq.n	8000c52 <HAL_GPIO_Init+0x2d2>
 8000c50:	e6a2      	b.n	8000998 <HAL_GPIO_Init+0x18>
  }
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000
 8000c64:	50000400 	.word	0x50000400
 8000c68:	50000800 	.word	0x50000800
 8000c6c:	50000c00 	.word	0x50000c00
 8000c70:	50001000 	.word	0x50001000
 8000c74:	50001c00 	.word	0x50001c00
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	0008      	movs	r0, r1
 8000c86:	0011      	movs	r1, r2
 8000c88:	1cbb      	adds	r3, r7, #2
 8000c8a:	1c02      	adds	r2, r0, #0
 8000c8c:	801a      	strh	r2, [r3, #0]
 8000c8e:	1c7b      	adds	r3, r7, #1
 8000c90:	1c0a      	adds	r2, r1, #0
 8000c92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c94:	1c7b      	adds	r3, r7, #1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	881a      	ldrh	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ca6:	1cbb      	adds	r3, r7, #2
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0e4      	b.n	8000e94 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a73      	ldr	r2, [pc, #460]	@ (8000e9c <HAL_PCD_Init+0x1e4>)
 8000cce:	5c9b      	ldrb	r3, [r3, r2]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d108      	bne.n	8000ce8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	23a4      	movs	r3, #164	@ 0xa4
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	2100      	movs	r1, #0
 8000cde:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f006 fdce 	bl	8007884 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a6c      	ldr	r2, [pc, #432]	@ (8000e9c <HAL_PCD_Init+0x1e4>)
 8000cec:	2103      	movs	r1, #3
 8000cee:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f003 f879 	bl	8003dec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e047      	b.n	8000d94 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d04:	200f      	movs	r0, #15
 8000d06:	183b      	adds	r3, r7, r0
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	18cb      	adds	r3, r1, r3
 8000d16:	3311      	adds	r3, #17
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d1c:	183b      	adds	r3, r7, r0
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	0013      	movs	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	189b      	adds	r3, r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	18cb      	adds	r3, r1, r3
 8000d2c:	3310      	adds	r3, #16
 8000d2e:	183a      	adds	r2, r7, r0
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d34:	183b      	adds	r3, r7, r0
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	18cb      	adds	r3, r1, r3
 8000d44:	3313      	adds	r3, #19
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	0013      	movs	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	18cb      	adds	r3, r1, r3
 8000d5a:	3320      	adds	r3, #32
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d60:	183b      	adds	r3, r7, r0
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	0013      	movs	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	189b      	adds	r3, r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	18cb      	adds	r3, r1, r3
 8000d70:	3324      	adds	r3, #36	@ 0x24
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d76:	183b      	adds	r3, r7, r0
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	0013      	movs	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	189b      	adds	r3, r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	2200      	movs	r2, #0
 8000d88:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d8a:	183b      	adds	r3, r7, r0
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	183b      	adds	r3, r7, r0
 8000d90:	3201      	adds	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	210f      	movs	r1, #15
 8000d9a:	187a      	adds	r2, r7, r1
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3b0      	bcc.n	8000d04 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e056      	b.n	8000e58 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000daa:	240f      	movs	r4, #15
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	2352      	movs	r3, #82	@ 0x52
 8000db4:	33ff      	adds	r3, #255	@ 0xff
 8000db6:	0019      	movs	r1, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	189b      	adds	r3, r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	18c3      	adds	r3, r0, r3
 8000dc2:	185b      	adds	r3, r3, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	23a8      	movs	r3, #168	@ 0xa8
 8000dd0:	0059      	lsls	r1, r3, #1
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	189b      	adds	r3, r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	18c3      	adds	r3, r0, r3
 8000ddc:	185b      	adds	r3, r3, r1
 8000dde:	193a      	adds	r2, r7, r4
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	2354      	movs	r3, #84	@ 0x54
 8000dec:	33ff      	adds	r3, #255	@ 0xff
 8000dee:	0019      	movs	r1, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	189b      	adds	r3, r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	18c3      	adds	r3, r0, r3
 8000dfa:	185b      	adds	r3, r3, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	23b0      	movs	r3, #176	@ 0xb0
 8000e08:	0059      	lsls	r1, r3, #1
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	18c3      	adds	r3, r0, r3
 8000e14:	185b      	adds	r3, r3, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	23b2      	movs	r3, #178	@ 0xb2
 8000e22:	0059      	lsls	r1, r3, #1
 8000e24:	0013      	movs	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	189b      	adds	r3, r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	18c3      	adds	r3, r0, r3
 8000e2e:	185b      	adds	r3, r3, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	23b4      	movs	r3, #180	@ 0xb4
 8000e3c:	0059      	lsls	r1, r3, #1
 8000e3e:	0013      	movs	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	189b      	adds	r3, r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	18c3      	adds	r3, r0, r3
 8000e48:	185b      	adds	r3, r3, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	3201      	adds	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	791b      	ldrb	r3, [r3, #4]
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	18ba      	adds	r2, r7, r2
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3a1      	bcc.n	8000daa <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6859      	ldr	r1, [r3, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	f002 ffd6 	bl	8003e20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_PCD_Init+0x1e4>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a9b      	ldrb	r3, [r3, #10]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d103      	bne.n	8000e92 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 fd29 	bl	80028e4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b005      	add	sp, #20
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	00000291 	.word	0x00000291

08000ea0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	23a4      	movs	r3, #164	@ 0xa4
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <HAL_PCD_Start+0x18>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e014      	b.n	8000ee2 <HAL_PCD_Start+0x42>
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	23a4      	movs	r3, #164	@ 0xa4
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f002 ff7a 	bl	8003dc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f004 fd51 	bl	8005978 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	23a4      	movs	r3, #164	@ 0xa4
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	2100      	movs	r1, #0
 8000ede:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f004 fd53 	bl	80059a4 <USB_ReadInterrupts>
 8000efe:	0003      	movs	r3, r0
 8000f00:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d004      	beq.n	8000f16 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 fb62 	bl	80015d8 <PCD_EP_ISR_Handler>

    return;
 8000f14:	e11d      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	2380      	movs	r3, #128	@ 0x80
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d015      	beq.n	8000f4c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2244      	movs	r2, #68	@ 0x44
 8000f26:	5a9b      	ldrh	r3, [r3, r2]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	498a      	ldr	r1, [pc, #552]	@ (8001158 <HAL_PCD_IRQHandler+0x26c>)
 8000f30:	400a      	ands	r2, r1
 8000f32:	b291      	uxth	r1, r2
 8000f34:	2244      	movs	r2, #68	@ 0x44
 8000f36:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f006 fd25 	bl	800798a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2100      	movs	r1, #0
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 f915 	bl	8001174 <HAL_PCD_SetAddress>

    return;
 8000f4a:	e102      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	01db      	lsls	r3, r3, #7
 8000f52:	4013      	ands	r3, r2
 8000f54:	d00c      	beq.n	8000f70 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2244      	movs	r2, #68	@ 0x44
 8000f5c:	5a9b      	ldrh	r3, [r3, r2]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	497d      	ldr	r1, [pc, #500]	@ (800115c <HAL_PCD_IRQHandler+0x270>)
 8000f66:	400a      	ands	r2, r1
 8000f68:	b291      	uxth	r1, r2
 8000f6a:	2244      	movs	r2, #68	@ 0x44
 8000f6c:	5299      	strh	r1, [r3, r2]

    return;
 8000f6e:	e0f0      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	4013      	ands	r3, r2
 8000f78:	d00c      	beq.n	8000f94 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2244      	movs	r2, #68	@ 0x44
 8000f80:	5a9b      	ldrh	r3, [r3, r2]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4975      	ldr	r1, [pc, #468]	@ (8001160 <HAL_PCD_IRQHandler+0x274>)
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	b291      	uxth	r1, r2
 8000f8e:	2244      	movs	r2, #68	@ 0x44
 8000f90:	5299      	strh	r1, [r3, r2]

    return;
 8000f92:	e0de      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	2380      	movs	r3, #128	@ 0x80
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d038      	beq.n	8001010 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2240      	movs	r2, #64	@ 0x40
 8000fa4:	5a9b      	ldrh	r3, [r3, r2]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2104      	movs	r1, #4
 8000fae:	438a      	bics	r2, r1
 8000fb0:	b291      	uxth	r1, r2
 8000fb2:	2240      	movs	r2, #64	@ 0x40
 8000fb4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2240      	movs	r2, #64	@ 0x40
 8000fbc:	5a9b      	ldrh	r3, [r3, r2]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	b291      	uxth	r1, r2
 8000fca:	2240      	movs	r2, #64	@ 0x40
 8000fcc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	23b2      	movs	r3, #178	@ 0xb2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d109      	bne.n	8000fee <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	23b2      	movs	r3, #178	@ 0xb2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f001 fca5 	bl	8002938 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f006 fd0b 	bl	8007a0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2244      	movs	r2, #68	@ 0x44
 8000ffc:	5a9b      	ldrh	r3, [r3, r2]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4957      	ldr	r1, [pc, #348]	@ (8001164 <HAL_PCD_IRQHandler+0x278>)
 8001006:	400a      	ands	r2, r1
 8001008:	b291      	uxth	r1, r2
 800100a:	2244      	movs	r2, #68	@ 0x44
 800100c:	5299      	strh	r1, [r3, r2]

    return;
 800100e:	e0a0      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	2380      	movs	r3, #128	@ 0x80
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4013      	ands	r3, r2
 8001018:	d028      	beq.n	800106c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2240      	movs	r2, #64	@ 0x40
 8001020:	5a9b      	ldrh	r3, [r3, r2]
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2108      	movs	r1, #8
 800102a:	430a      	orrs	r2, r1
 800102c:	b291      	uxth	r1, r2
 800102e:	2240      	movs	r2, #64	@ 0x40
 8001030:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2244      	movs	r2, #68	@ 0x44
 8001038:	5a9b      	ldrh	r3, [r3, r2]
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4949      	ldr	r1, [pc, #292]	@ (8001168 <HAL_PCD_IRQHandler+0x27c>)
 8001042:	400a      	ands	r2, r1
 8001044:	b291      	uxth	r1, r2
 8001046:	2244      	movs	r2, #68	@ 0x44
 8001048:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2240      	movs	r2, #64	@ 0x40
 8001050:	5a9b      	ldrh	r3, [r3, r2]
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2104      	movs	r1, #4
 800105a:	430a      	orrs	r2, r1
 800105c:	b291      	uxth	r1, r2
 800105e:	2240      	movs	r2, #64	@ 0x40
 8001060:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0018      	movs	r0, r3
 8001066:	f006 fcb5 	bl	80079d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800106a:	e072      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	4013      	ands	r3, r2
 8001072:	d046      	beq.n	8001102 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2244      	movs	r2, #68	@ 0x44
 800107a:	5a9b      	ldrh	r3, [r3, r2]
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2180      	movs	r1, #128	@ 0x80
 8001084:	438a      	bics	r2, r1
 8001086:	b291      	uxth	r1, r2
 8001088:	2244      	movs	r2, #68	@ 0x44
 800108a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	23b2      	movs	r3, #178	@ 0xb2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d12f      	bne.n	80010f8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2240      	movs	r2, #64	@ 0x40
 800109e:	5a9b      	ldrh	r3, [r3, r2]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2104      	movs	r1, #4
 80010a8:	430a      	orrs	r2, r1
 80010aa:	b291      	uxth	r1, r2
 80010ac:	2240      	movs	r2, #64	@ 0x40
 80010ae:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2240      	movs	r2, #64	@ 0x40
 80010b6:	5a9b      	ldrh	r3, [r3, r2]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2108      	movs	r1, #8
 80010c0:	430a      	orrs	r2, r1
 80010c2:	b291      	uxth	r1, r2
 80010c4:	2240      	movs	r2, #64	@ 0x40
 80010c6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	23b2      	movs	r3, #178	@ 0xb2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	2101      	movs	r1, #1
 80010d0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2254      	movs	r2, #84	@ 0x54
 80010d8:	5a9b      	ldrh	r3, [r3, r2]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	223c      	movs	r2, #60	@ 0x3c
 80010e0:	4013      	ands	r3, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	23b3      	movs	r3, #179	@ 0xb3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2101      	movs	r1, #1
 80010f0:	0018      	movs	r0, r3
 80010f2:	f001 fc21 	bl	8002938 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80010f6:	e02c      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0018      	movs	r0, r3
 80010fc:	f006 fc6a 	bl	80079d4 <HAL_PCD_SuspendCallback>
    return;
 8001100:	e027      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4013      	ands	r3, r2
 800110a:	d010      	beq.n	800112e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2244      	movs	r2, #68	@ 0x44
 8001112:	5a9b      	ldrh	r3, [r3, r2]
 8001114:	b29a      	uxth	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4914      	ldr	r1, [pc, #80]	@ (800116c <HAL_PCD_IRQHandler+0x280>)
 800111c:	400a      	ands	r2, r1
 800111e:	b291      	uxth	r1, r2
 8001120:	2244      	movs	r2, #68	@ 0x44
 8001122:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	0018      	movs	r0, r3
 8001128:	f006 fc20 	bl	800796c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800112c:	e011      	b.n	8001152 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4013      	ands	r3, r2
 8001136:	d00c      	beq.n	8001152 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2244      	movs	r2, #68	@ 0x44
 800113e:	5a9b      	ldrh	r3, [r3, r2]
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	490a      	ldr	r1, [pc, #40]	@ (8001170 <HAL_PCD_IRQHandler+0x284>)
 8001148:	400a      	ands	r2, r1
 800114a:	b291      	uxth	r1, r2
 800114c:	2244      	movs	r2, #68	@ 0x44
 800114e:	5299      	strh	r1, [r3, r2]

    return;
 8001150:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001152:	46bd      	mov	sp, r7
 8001154:	b004      	add	sp, #16
 8001156:	bd80      	pop	{r7, pc}
 8001158:	fffffbff 	.word	0xfffffbff
 800115c:	ffffbfff 	.word	0xffffbfff
 8001160:	ffffdfff 	.word	0xffffdfff
 8001164:	ffffefff 	.word	0xffffefff
 8001168:	fffff7ff 	.word	0xfffff7ff
 800116c:	fffffdff 	.word	0xfffffdff
 8001170:	fffffeff 	.word	0xfffffeff

08001174 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	000a      	movs	r2, r1
 800117e:	1cfb      	adds	r3, r7, #3
 8001180:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	23a4      	movs	r3, #164	@ 0xa4
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_PCD_SetAddress+0x1e>
 800118e:	2302      	movs	r3, #2
 8001190:	e016      	b.n	80011c0 <HAL_PCD_SetAddress+0x4c>
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	23a4      	movs	r3, #164	@ 0xa4
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	2101      	movs	r1, #1
 800119a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1cfa      	adds	r2, r7, #3
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	1cfb      	adds	r3, r7, #3
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	0019      	movs	r1, r3
 80011ae:	0010      	movs	r0, r2
 80011b0:	f004 fbce 	bl	8005950 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	23a4      	movs	r3, #164	@ 0xa4
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	000c      	movs	r4, r1
 80011d2:	0010      	movs	r0, r2
 80011d4:	0019      	movs	r1, r3
 80011d6:	1cfb      	adds	r3, r7, #3
 80011d8:	1c22      	adds	r2, r4, #0
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	003b      	movs	r3, r7
 80011de:	1c02      	adds	r2, r0, #0
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	1cbb      	adds	r3, r7, #2
 80011e4:	1c0a      	adds	r2, r1, #0
 80011e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80011e8:	230b      	movs	r3, #11
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011f0:	1cfb      	adds	r3, r7, #3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da0f      	bge.n	800121a <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011fa:	1cfb      	adds	r3, r7, #3
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2207      	movs	r2, #7
 8001200:	401a      	ands	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	189b      	adds	r3, r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	3310      	adds	r3, #16
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	18d3      	adds	r3, r2, r3
 8001210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2201      	movs	r2, #1
 8001216:	705a      	strb	r2, [r3, #1]
 8001218:	e00f      	b.n	800123a <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800121a:	1cfb      	adds	r3, r7, #3
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2207      	movs	r2, #7
 8001220:	401a      	ands	r2, r3
 8001222:	0013      	movs	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	189b      	adds	r3, r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	3351      	adds	r3, #81	@ 0x51
 800122c:	33ff      	adds	r3, #255	@ 0xff
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800123a:	1cfb      	adds	r3, r7, #3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2207      	movs	r2, #7
 8001240:	4013      	ands	r3, r2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001248:	003b      	movs	r3, r7
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	055b      	lsls	r3, r3, #21
 800124e:	0d5a      	lsrs	r2, r3, #21
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1cba      	adds	r2, r7, #2
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800125c:	1cbb      	adds	r3, r7, #2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d102      	bne.n	800126a <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	23a4      	movs	r3, #164	@ 0xa4
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_PCD_EP_Open+0xb2>
 8001276:	2302      	movs	r3, #2
 8001278:	e013      	b.n	80012a2 <HAL_PCD_EP_Open+0xda>
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	23a4      	movs	r3, #164	@ 0xa4
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	2101      	movs	r1, #1
 8001282:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	0011      	movs	r1, r2
 800128c:	0018      	movs	r0, r3
 800128e:	f002 fde3 	bl	8003e58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	23a4      	movs	r3, #164	@ 0xa4
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	2100      	movs	r1, #0
 800129a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800129c:	230b      	movs	r3, #11
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b005      	add	sp, #20
 80012a8:	bd90      	pop	{r4, r7, pc}

080012aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	000a      	movs	r2, r1
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012b8:	1cfb      	adds	r3, r7, #3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da0f      	bge.n	80012e2 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012c2:	1cfb      	adds	r3, r7, #3
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2207      	movs	r2, #7
 80012c8:	401a      	ands	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	189b      	adds	r3, r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	3310      	adds	r3, #16
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	18d3      	adds	r3, r2, r3
 80012d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2201      	movs	r2, #1
 80012de:	705a      	strb	r2, [r3, #1]
 80012e0:	e00f      	b.n	8001302 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e2:	1cfb      	adds	r3, r7, #3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2207      	movs	r2, #7
 80012e8:	401a      	ands	r2, r3
 80012ea:	0013      	movs	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	189b      	adds	r3, r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	3351      	adds	r3, #81	@ 0x51
 80012f4:	33ff      	adds	r3, #255	@ 0xff
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001302:	1cfb      	adds	r3, r7, #3
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2207      	movs	r2, #7
 8001308:	4013      	ands	r3, r2
 800130a:	b2da      	uxtb	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	23a4      	movs	r3, #164	@ 0xa4
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_PCD_EP_Close+0x76>
 800131c:	2302      	movs	r3, #2
 800131e:	e011      	b.n	8001344 <HAL_PCD_EP_Close+0x9a>
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	23a4      	movs	r3, #164	@ 0xa4
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	2101      	movs	r1, #1
 8001328:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f003 fa64 	bl	8004800 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	23a4      	movs	r3, #164	@ 0xa4
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	2100      	movs	r1, #0
 8001340:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	200b      	movs	r0, #11
 800135a:	183b      	adds	r3, r7, r0
 800135c:	1c0a      	adds	r2, r1, #0
 800135e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001360:	0001      	movs	r1, r0
 8001362:	187b      	adds	r3, r7, r1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2207      	movs	r2, #7
 8001368:	401a      	ands	r2, r3
 800136a:	0013      	movs	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	189b      	adds	r3, r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	3351      	adds	r3, #81	@ 0x51
 8001374:	33ff      	adds	r3, #255	@ 0xff
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2200      	movs	r2, #0
 8001392:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2207      	movs	r2, #7
 800139a:	4013      	ands	r3, r2
 800139c:	b2da      	uxtb	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	0011      	movs	r1, r2
 80013aa:	0018      	movs	r0, r3
 80013ac:	f003 fbe8 	bl	8004b80 <USB_EPStartXfer>

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b006      	add	sp, #24
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	000a      	movs	r2, r1
 80013c4:	1cfb      	adds	r3, r7, #3
 80013c6:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013c8:	1cfb      	adds	r3, r7, #3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2207      	movs	r2, #7
 80013ce:	401a      	ands	r2, r3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	23b6      	movs	r3, #182	@ 0xb6
 80013d4:	0059      	lsls	r1, r3, #1
 80013d6:	0013      	movs	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	189b      	adds	r3, r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	18c3      	adds	r3, r0, r3
 80013e0:	185b      	adds	r3, r3, r1
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	200b      	movs	r0, #11
 80013fa:	183b      	adds	r3, r7, r0
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001400:	183b      	adds	r3, r7, r0
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2207      	movs	r2, #7
 8001406:	401a      	ands	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	189b      	adds	r3, r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	3310      	adds	r3, #16
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	18d3      	adds	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2224      	movs	r2, #36	@ 0x24
 8001428:	2101      	movs	r1, #1
 800142a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2201      	movs	r2, #1
 800143c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800143e:	183b      	adds	r3, r7, r0
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2207      	movs	r2, #7
 8001444:	4013      	ands	r3, r2
 8001446:	b2da      	uxtb	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	0011      	movs	r1, r2
 8001454:	0018      	movs	r0, r3
 8001456:	f003 fb93 	bl	8004b80 <USB_EPStartXfer>

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b006      	add	sp, #24
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	000a      	movs	r2, r1
 800146e:	1cfb      	adds	r3, r7, #3
 8001470:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001472:	1cfb      	adds	r3, r7, #3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2207      	movs	r2, #7
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	7912      	ldrb	r2, [r2, #4]
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e046      	b.n	8001514 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001486:	1cfb      	adds	r3, r7, #3
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	da0f      	bge.n	80014b0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001490:	1cfb      	adds	r3, r7, #3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2207      	movs	r2, #7
 8001496:	401a      	ands	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	189b      	adds	r3, r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	3310      	adds	r3, #16
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	18d3      	adds	r3, r2, r3
 80014a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	705a      	strb	r2, [r3, #1]
 80014ae:	e00d      	b.n	80014cc <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014b0:	1cfb      	adds	r3, r7, #3
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	0013      	movs	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	189b      	adds	r3, r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	3351      	adds	r3, #81	@ 0x51
 80014be:	33ff      	adds	r3, #255	@ 0xff
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	18d3      	adds	r3, r2, r3
 80014c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d2:	1cfb      	adds	r3, r7, #3
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2207      	movs	r2, #7
 80014d8:	4013      	ands	r3, r2
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	23a4      	movs	r3, #164	@ 0xa4
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_PCD_EP_SetStall+0x8c>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e011      	b.n	8001514 <HAL_PCD_EP_SetStall+0xb0>
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	23a4      	movs	r3, #164	@ 0xa4
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	2101      	movs	r1, #1
 80014f8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f004 f928 	bl	8005758 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	23a4      	movs	r3, #164	@ 0xa4
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	2100      	movs	r1, #0
 8001510:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	000a      	movs	r2, r1
 8001526:	1cfb      	adds	r3, r7, #3
 8001528:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800152a:	1cfb      	adds	r3, r7, #3
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	220f      	movs	r2, #15
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	7912      	ldrb	r2, [r2, #4]
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e048      	b.n	80015d0 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800153e:	1cfb      	adds	r3, r7, #3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b25b      	sxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	da0f      	bge.n	8001568 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001548:	1cfb      	adds	r3, r7, #3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2207      	movs	r2, #7
 800154e:	401a      	ands	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	189b      	adds	r3, r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	3310      	adds	r3, #16
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2201      	movs	r2, #1
 8001564:	705a      	strb	r2, [r3, #1]
 8001566:	e00f      	b.n	8001588 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001568:	1cfb      	adds	r3, r7, #3
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2207      	movs	r2, #7
 800156e:	401a      	ands	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	189b      	adds	r3, r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	3351      	adds	r3, #81	@ 0x51
 800157a:	33ff      	adds	r3, #255	@ 0xff
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	18d3      	adds	r3, r2, r3
 8001580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800158e:	1cfb      	adds	r3, r7, #3
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2207      	movs	r2, #7
 8001594:	4013      	ands	r3, r2
 8001596:	b2da      	uxtb	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	23a4      	movs	r3, #164	@ 0xa4
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_PCD_EP_ClrStall+0x90>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e011      	b.n	80015d0 <HAL_PCD_EP_ClrStall+0xb4>
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	23a4      	movs	r3, #164	@ 0xa4
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	2101      	movs	r1, #1
 80015b4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f004 f91a 	bl	80057f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	23a4      	movs	r3, #164	@ 0xa4
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	2100      	movs	r1, #0
 80015cc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b094      	sub	sp, #80	@ 0x50
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015e0:	f000 fbbf 	bl	8001d62 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2042      	movs	r0, #66	@ 0x42
 80015ea:	183b      	adds	r3, r7, r0
 80015ec:	2144      	movs	r1, #68	@ 0x44
 80015ee:	5a52      	ldrh	r2, [r2, r1]
 80015f0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015f2:	183b      	adds	r3, r7, r0
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	2441      	movs	r4, #65	@ 0x41
 80015fa:	193b      	adds	r3, r7, r4
 80015fc:	210f      	movs	r1, #15
 80015fe:	400a      	ands	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001602:	193b      	adds	r3, r7, r4
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d000      	beq.n	800160c <PCD_EP_ISR_Handler+0x34>
 800160a:	e151      	b.n	80018b0 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800160c:	183b      	adds	r3, r7, r0
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	2210      	movs	r2, #16
 8001612:	4013      	ands	r3, r2
 8001614:	d14f      	bne.n	80016b6 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	200a      	movs	r0, #10
 8001620:	183b      	adds	r3, r7, r0
 8001622:	49dd      	ldr	r1, [pc, #884]	@ (8001998 <PCD_EP_ISR_Handler+0x3c0>)
 8001624:	400a      	ands	r2, r1
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	183a      	adds	r2, r7, r0
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	49da      	ldr	r1, [pc, #872]	@ (800199c <PCD_EP_ISR_Handler+0x3c4>)
 8001632:	430a      	orrs	r2, r1
 8001634:	b292      	uxth	r2, r2
 8001636:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3310      	adds	r3, #16
 800163c:	64bb      	str	r3, [r7, #72]	@ 0x48

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2250      	movs	r2, #80	@ 0x50
 8001644:	5a9b      	ldrh	r3, [r3, r2]
 8001646:	b29b      	uxth	r3, r3
 8001648:	001a      	movs	r2, r3
 800164a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	18d2      	adds	r2, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	18d3      	adds	r3, r2, r3
 8001658:	4ad1      	ldr	r2, [pc, #836]	@ (80019a0 <PCD_EP_ISR_Handler+0x3c8>)
 800165a:	4694      	mov	ip, r2
 800165c:	4463      	add	r3, ip
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	059b      	lsls	r3, r3, #22
 8001662:	0d9a      	lsrs	r2, r3, #22
 8001664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001666:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	18d2      	adds	r2, r2, r3
 8001672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001674:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2100      	movs	r1, #0
 800167a:	0018      	movs	r0, r3
 800167c:	f006 f958 	bl	8007930 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7b1b      	ldrb	r3, [r3, #12]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <PCD_EP_ISR_Handler+0xb4>
 800168a:	e36a      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
 800168c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d000      	beq.n	8001696 <PCD_EP_ISR_Handler+0xbe>
 8001694:	e365      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7b1b      	ldrb	r3, [r3, #12]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2280      	movs	r2, #128	@ 0x80
 800169e:	4252      	negs	r2, r2
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0011      	movs	r1, r2
 80016aa:	224c      	movs	r2, #76	@ 0x4c
 80016ac:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	731a      	strb	r2, [r3, #12]
 80016b4:	e355      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3351      	adds	r3, #81	@ 0x51
 80016ba:	33ff      	adds	r3, #255	@ 0xff
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	213e      	movs	r1, #62	@ 0x3e
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	8812      	ldrh	r2, [r2, #0]
 80016c8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	4013      	ands	r3, r2
 80016d4:	d100      	bne.n	80016d8 <PCD_EP_ISR_Handler+0x100>
 80016d6:	e07d      	b.n	80017d4 <PCD_EP_ISR_Handler+0x1fc>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2250      	movs	r2, #80	@ 0x50
 80016de:	5a9b      	ldrh	r3, [r3, r2]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	001a      	movs	r2, r3
 80016e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	18d2      	adds	r2, r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	18d3      	adds	r3, r2, r3
 80016f2:	4aac      	ldr	r2, [pc, #688]	@ (80019a4 <PCD_EP_ISR_Handler+0x3cc>)
 80016f4:	4694      	mov	ip, r2
 80016f6:	4463      	add	r3, ip
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	059b      	lsls	r3, r3, #22
 80016fc:	0d9a      	lsrs	r2, r3, #22
 80016fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001700:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 8U)
 8001702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d041      	beq.n	800178e <PCD_EP_ISR_Handler+0x1b6>
          {
            /* Set Stall condition for EP0 IN/OUT */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b29a      	uxth	r2, r3
 8001712:	2010      	movs	r0, #16
 8001714:	183b      	adds	r3, r7, r0
 8001716:	49a4      	ldr	r1, [pc, #656]	@ (80019a8 <PCD_EP_ISR_Handler+0x3d0>)
 8001718:	400a      	ands	r2, r1
 800171a:	801a      	strh	r2, [r3, #0]
 800171c:	183b      	adds	r3, r7, r0
 800171e:	183a      	adds	r2, r7, r0
 8001720:	8812      	ldrh	r2, [r2, #0]
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	0149      	lsls	r1, r1, #5
 8001726:	404a      	eors	r2, r1
 8001728:	801a      	strh	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	183a      	adds	r2, r7, r0
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	499e      	ldr	r1, [pc, #632]	@ (80019ac <PCD_EP_ISR_Handler+0x3d4>)
 8001734:	430a      	orrs	r2, r1
 8001736:	b292      	uxth	r2, r2
 8001738:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b29a      	uxth	r2, r3
 8001742:	200e      	movs	r0, #14
 8001744:	183b      	adds	r3, r7, r0
 8001746:	499a      	ldr	r1, [pc, #616]	@ (80019b0 <PCD_EP_ISR_Handler+0x3d8>)
 8001748:	400a      	ands	r2, r1
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	183b      	adds	r3, r7, r0
 800174e:	183a      	adds	r2, r7, r0
 8001750:	8812      	ldrh	r2, [r2, #0]
 8001752:	2110      	movs	r1, #16
 8001754:	404a      	eors	r2, r1
 8001756:	801a      	strh	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	183a      	adds	r2, r7, r0
 800175e:	8812      	ldrh	r2, [r2, #0]
 8001760:	4992      	ldr	r1, [pc, #584]	@ (80019ac <PCD_EP_ISR_Handler+0x3d4>)
 8001762:	430a      	orrs	r2, r1
 8001764:	b292      	uxth	r2, r2
 8001766:	801a      	strh	r2, [r3, #0]

            /* SETUP bit kept frozen while CTR_RX = 1 */
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b29a      	uxth	r2, r3
 8001770:	200c      	movs	r0, #12
 8001772:	183b      	adds	r3, r7, r0
 8001774:	498f      	ldr	r1, [pc, #572]	@ (80019b4 <PCD_EP_ISR_Handler+0x3dc>)
 8001776:	400a      	ands	r2, r1
 8001778:	801a      	strh	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	183a      	adds	r2, r7, r0
 8001780:	8812      	ldrh	r2, [r2, #0]
 8001782:	2180      	movs	r1, #128	@ 0x80
 8001784:	430a      	orrs	r2, r1
 8001786:	b292      	uxth	r2, r2
 8001788:	801a      	strh	r2, [r3, #0]

            return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e2f4      	b.n	8001d78 <PCD_EP_ISR_Handler+0x7a0>
          }

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	22a6      	movs	r2, #166	@ 0xa6
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	1899      	adds	r1, r3, r2
 800179a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800179c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800179e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f004 f956 	bl	8005a54 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2012      	movs	r0, #18
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	497f      	ldr	r1, [pc, #508]	@ (80019b4 <PCD_EP_ISR_Handler+0x3dc>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	183a      	adds	r2, r7, r0
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	2180      	movs	r1, #128	@ 0x80
 80017c4:	430a      	orrs	r2, r1
 80017c6:	b292      	uxth	r2, r2
 80017c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f006 f879 	bl	80078c4 <HAL_PCD_SetupStageCallback>
 80017d2:	e2c6      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017d4:	233e      	movs	r3, #62	@ 0x3e
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	2200      	movs	r2, #0
 80017da:	5e9b      	ldrsh	r3, [r3, r2]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db00      	blt.n	80017e2 <PCD_EP_ISR_Handler+0x20a>
 80017e0:	e2bf      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	2016      	movs	r0, #22
 80017ec:	183b      	adds	r3, r7, r0
 80017ee:	4971      	ldr	r1, [pc, #452]	@ (80019b4 <PCD_EP_ISR_Handler+0x3dc>)
 80017f0:	400a      	ands	r2, r1
 80017f2:	801a      	strh	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	183a      	adds	r2, r7, r0
 80017fa:	8812      	ldrh	r2, [r2, #0]
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	430a      	orrs	r2, r1
 8001800:	b292      	uxth	r2, r2
 8001802:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2250      	movs	r2, #80	@ 0x50
 800180a:	5a9b      	ldrh	r3, [r3, r2]
 800180c:	b29b      	uxth	r3, r3
 800180e:	001a      	movs	r2, r3
 8001810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	18d2      	adds	r2, r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	18d3      	adds	r3, r2, r3
 800181e:	4a61      	ldr	r2, [pc, #388]	@ (80019a4 <PCD_EP_ISR_Handler+0x3cc>)
 8001820:	4694      	mov	ip, r2
 8001822:	4463      	add	r3, ip
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	059b      	lsls	r3, r3, #22
 8001828:	0d9a      	lsrs	r2, r3, #22
 800182a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800182c:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count == 0U)
 800182e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11f      	bne.n	8001876 <PCD_EP_ISR_Handler+0x29e>
          {
            /* Status phase re-arm for next setup */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29a      	uxth	r2, r3
 800183e:	2014      	movs	r0, #20
 8001840:	183b      	adds	r3, r7, r0
 8001842:	4959      	ldr	r1, [pc, #356]	@ (80019a8 <PCD_EP_ISR_Handler+0x3d0>)
 8001844:	400a      	ands	r2, r1
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	183b      	adds	r3, r7, r0
 800184a:	183a      	adds	r2, r7, r0
 800184c:	8812      	ldrh	r2, [r2, #0]
 800184e:	2180      	movs	r1, #128	@ 0x80
 8001850:	0149      	lsls	r1, r1, #5
 8001852:	404a      	eors	r2, r1
 8001854:	801a      	strh	r2, [r3, #0]
 8001856:	183b      	adds	r3, r7, r0
 8001858:	183a      	adds	r2, r7, r0
 800185a:	8812      	ldrh	r2, [r2, #0]
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	0189      	lsls	r1, r1, #6
 8001860:	404a      	eors	r2, r1
 8001862:	801a      	strh	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	183a      	adds	r2, r7, r0
 800186a:	8812      	ldrh	r2, [r2, #0]
 800186c:	494f      	ldr	r1, [pc, #316]	@ (80019ac <PCD_EP_ISR_Handler+0x3d4>)
 800186e:	430a      	orrs	r2, r1
 8001870:	b292      	uxth	r2, r2
 8001872:	801a      	strh	r2, [r3, #0]
 8001874:	e275      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
          }
          else
          {
            if (ep->xfer_buff != 0U)
 8001876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <PCD_EP_ISR_Handler+0x2a8>
 800187e:	e270      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001886:	6959      	ldr	r1, [r3, #20]
 8001888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188a:	88da      	ldrh	r2, [r3, #6]
                          ep->pmaadress, (uint16_t)ep->xfer_count);  /* max 64bytes */
 800188c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188e:	69db      	ldr	r3, [r3, #28]
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001890:	b29b      	uxth	r3, r3
 8001892:	f004 f8df 	bl	8005a54 <USB_ReadPMA>

              ep->xfer_buff += ep->xfer_count;
 8001896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	18d2      	adds	r2, r2, r3
 80018a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a2:	615a      	str	r2, [r3, #20]

              /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataOutStageCallback(hpcd, 0U);
#else
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2100      	movs	r1, #0
 80018a8:	0018      	movs	r0, r3
 80018aa:	f006 f820 	bl	80078ee <HAL_PCD_DataOutStageCallback>
 80018ae:	e258      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	001a      	movs	r2, r3
 80018b6:	2041      	movs	r0, #65	@ 0x41
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	18d2      	adds	r2, r2, r3
 80018c0:	213e      	movs	r1, #62	@ 0x3e
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	8812      	ldrh	r2, [r2, #0]
 80018c6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	5e9b      	ldrsh	r3, [r3, r2]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db00      	blt.n	80018d4 <PCD_EP_ISR_Handler+0x2fc>
 80018d2:	e10c      	b.n	8001aee <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	001a      	movs	r2, r3
 80018da:	183b      	adds	r3, r7, r0
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	2446      	movs	r4, #70	@ 0x46
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	4932      	ldr	r1, [pc, #200]	@ (80019b4 <PCD_EP_ISR_Handler+0x3dc>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	801a      	strh	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	001a      	movs	r2, r3
 80018f6:	183b      	adds	r3, r7, r0
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	193a      	adds	r2, r7, r4
 8001900:	8812      	ldrh	r2, [r2, #0]
 8001902:	2180      	movs	r1, #128	@ 0x80
 8001904:	430a      	orrs	r2, r1
 8001906:	b292      	uxth	r2, r2
 8001908:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800190a:	183b      	adds	r3, r7, r0
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	0013      	movs	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	189b      	adds	r3, r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	3351      	adds	r3, #81	@ 0x51
 8001918:	33ff      	adds	r3, #255	@ 0xff
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001922:	7b1b      	ldrb	r3, [r3, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d125      	bne.n	8001974 <PCD_EP_ISR_Handler+0x39c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2250      	movs	r2, #80	@ 0x50
 800192e:	5a9b      	ldrh	r3, [r3, r2]
 8001930:	b29b      	uxth	r3, r3
 8001932:	001a      	movs	r2, r3
 8001934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	18d2      	adds	r2, r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	4a18      	ldr	r2, [pc, #96]	@ (80019a4 <PCD_EP_ISR_Handler+0x3cc>)
 8001944:	4694      	mov	ip, r2
 8001946:	4463      	add	r3, ip
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	244e      	movs	r4, #78	@ 0x4e
 800194c:	193b      	adds	r3, r7, r4
 800194e:	0592      	lsls	r2, r2, #22
 8001950:	0d92      	lsrs	r2, r2, #22
 8001952:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001954:	193b      	adds	r3, r7, r4
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d100      	bne.n	800195e <PCD_EP_ISR_Handler+0x386>
 800195c:	e09e      	b.n	8001a9c <PCD_EP_ISR_Handler+0x4c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001968:	88da      	ldrh	r2, [r3, #6]
 800196a:	193b      	adds	r3, r7, r4
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f004 f871 	bl	8005a54 <USB_ReadPMA>
 8001972:	e093      	b.n	8001a9c <PCD_EP_ISR_Handler+0x4c4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d11d      	bne.n	80019b8 <PCD_EP_ISR_Handler+0x3e0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800197c:	234e      	movs	r3, #78	@ 0x4e
 800197e:	18fc      	adds	r4, r7, r3
 8001980:	233e      	movs	r3, #62	@ 0x3e
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 f9f8 	bl	8001d80 <HAL_PCD_EP_DB_Receive>
 8001990:	0003      	movs	r3, r0
 8001992:	8023      	strh	r3, [r4, #0]
 8001994:	e082      	b.n	8001a9c <PCD_EP_ISR_Handler+0x4c4>
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	ffff8f0f 	.word	0xffff8f0f
 800199c:	ffff8000 	.word	0xffff8000
 80019a0:	00000402 	.word	0x00000402
 80019a4:	00000406 	.word	0x00000406
 80019a8:	ffffbf8f 	.word	0xffffbf8f
 80019ac:	ffff8080 	.word	0xffff8080
 80019b0:	ffff8fbf 	.word	0xffff8fbf
 80019b4:	00000f8f 	.word	0x00000f8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	001a      	movs	r2, r3
 80019be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	2044      	movs	r0, #68	@ 0x44
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	49cf      	ldr	r1, [pc, #828]	@ (8001d0c <PCD_EP_ISR_Handler+0x734>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	801a      	strh	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	001a      	movs	r2, r3
 80019da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	18d3      	adds	r3, r2, r3
 80019e2:	183a      	adds	r2, r7, r0
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	49ca      	ldr	r1, [pc, #808]	@ (8001d10 <PCD_EP_ISR_Handler+0x738>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	b292      	uxth	r2, r2
 80019ec:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	001a      	movs	r2, r3
 80019f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	18d3      	adds	r3, r2, r3
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	001a      	movs	r2, r3
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	01db      	lsls	r3, r3, #7
 8001a06:	4013      	ands	r3, r2
 8001a08:	d024      	beq.n	8001a54 <PCD_EP_ISR_Handler+0x47c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2250      	movs	r2, #80	@ 0x50
 8001a10:	5a9b      	ldrh	r3, [r3, r2]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	001a      	movs	r2, r3
 8001a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	18d2      	adds	r2, r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	18d3      	adds	r3, r2, r3
 8001a24:	4abb      	ldr	r2, [pc, #748]	@ (8001d14 <PCD_EP_ISR_Handler+0x73c>)
 8001a26:	4694      	mov	ip, r2
 8001a28:	4463      	add	r3, ip
 8001a2a:	881a      	ldrh	r2, [r3, #0]
 8001a2c:	244e      	movs	r4, #78	@ 0x4e
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	0592      	lsls	r2, r2, #22
 8001a32:	0d92      	lsrs	r2, r2, #22
 8001a34:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02e      	beq.n	8001a9c <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a44:	6959      	ldr	r1, [r3, #20]
 8001a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a48:	891a      	ldrh	r2, [r3, #8]
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	f004 f801 	bl	8005a54 <USB_ReadPMA>
 8001a52:	e023      	b.n	8001a9c <PCD_EP_ISR_Handler+0x4c4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2250      	movs	r2, #80	@ 0x50
 8001a5a:	5a9b      	ldrh	r3, [r3, r2]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	001a      	movs	r2, r3
 8001a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	18d2      	adds	r2, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	18d3      	adds	r3, r2, r3
 8001a6e:	4aaa      	ldr	r2, [pc, #680]	@ (8001d18 <PCD_EP_ISR_Handler+0x740>)
 8001a70:	4694      	mov	ip, r2
 8001a72:	4463      	add	r3, ip
 8001a74:	881a      	ldrh	r2, [r3, #0]
 8001a76:	244e      	movs	r4, #78	@ 0x4e
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	0592      	lsls	r2, r2, #22
 8001a7c:	0d92      	lsrs	r2, r2, #22
 8001a7e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a8e:	6959      	ldr	r1, [r3, #20]
 8001a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a92:	895a      	ldrh	r2, [r3, #10]
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	f003 ffdc 	bl	8005a54 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	214e      	movs	r1, #78	@ 0x4e
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	18d2      	adds	r2, r2, r3
 8001aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aaa:	61da      	str	r2, [r3, #28]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x4e8>
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	881a      	ldrh	r2, [r3, #0]
 8001ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <PCD_EP_ISR_Handler+0x4f8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f005 ff10 	bl	80078ee <HAL_PCD_DataOutStageCallback>
 8001ace:	e00e      	b.n	8001aee <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
           ep->xfer_buff += count;
 8001ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	234e      	movs	r3, #78	@ 0x4e
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	18d2      	adds	r2, r2, r3
 8001adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ade:	615a      	str	r2, [r3, #20]
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f003 f849 	bl	8004b80 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001aee:	243e      	movs	r4, #62	@ 0x3e
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	2280      	movs	r2, #128	@ 0x80
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <PCD_EP_ISR_Handler+0x524>
 8001afa:	e132      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001afc:	2041      	movs	r0, #65	@ 0x41
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	0013      	movs	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	189b      	adds	r3, r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	3310      	adds	r3, #16
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	18d3      	adds	r3, r2, r3
 8001b10:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	001a      	movs	r2, r3
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	18d3      	adds	r3, r2, r3
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	253c      	movs	r5, #60	@ 0x3c
 8001b26:	197b      	adds	r3, r7, r5
 8001b28:	497c      	ldr	r1, [pc, #496]	@ (8001d1c <PCD_EP_ISR_Handler+0x744>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	001a      	movs	r2, r3
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	18d3      	adds	r3, r2, r3
 8001b3c:	197a      	adds	r2, r7, r5
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	4977      	ldr	r1, [pc, #476]	@ (8001d20 <PCD_EP_ISR_Handler+0x748>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	b292      	uxth	r2, r2
 8001b46:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b4a:	78db      	ldrb	r3, [r3, #3]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d000      	beq.n	8001b52 <PCD_EP_ISR_Handler+0x57a>
 8001b50:	e0a1      	b.n	8001c96 <PCD_EP_ISR_Handler+0x6be>
        {
          ep->xfer_len = 0U;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b5a:	7b1b      	ldrb	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d100      	bne.n	8001b62 <PCD_EP_ISR_Handler+0x58a>
 8001b60:	e091      	b.n	8001c86 <PCD_EP_ISR_Handler+0x6ae>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2240      	movs	r2, #64	@ 0x40
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <PCD_EP_ISR_Handler+0x622>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d125      	bne.n	8001bc0 <PCD_EP_ISR_Handler+0x5e8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2250      	movs	r2, #80	@ 0x50
 8001b80:	5a9b      	ldrh	r3, [r3, r2]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	001a      	movs	r2, r3
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	189b      	adds	r3, r3, r2
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	00da      	lsls	r2, r3, #3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	4a5f      	ldr	r2, [pc, #380]	@ (8001d14 <PCD_EP_ISR_Handler+0x73c>)
 8001b98:	4694      	mov	ip, r2
 8001b9a:	4463      	add	r3, ip
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	059b      	lsls	r3, r3, #22
 8001ba6:	0d9b      	lsrs	r3, r3, #22
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001d20 <PCD_EP_ISR_Handler+0x748>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	e062      	b.n	8001c86 <PCD_EP_ISR_Handler+0x6ae>
 8001bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d15e      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x6ae>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2250      	movs	r2, #80	@ 0x50
 8001bd4:	5a9b      	ldrh	r3, [r3, r2]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	001a      	movs	r2, r3
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	189b      	adds	r3, r3, r2
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	00da      	lsls	r2, r3, #3
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	18d3      	adds	r3, r2, r3
 8001bea:	4a4a      	ldr	r2, [pc, #296]	@ (8001d14 <PCD_EP_ISR_Handler+0x73c>)
 8001bec:	4694      	mov	ip, r2
 8001bee:	4463      	add	r3, ip
 8001bf0:	623b      	str	r3, [r7, #32]
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
 8001bf8:	e045      	b.n	8001c86 <PCD_EP_ISR_Handler+0x6ae>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d125      	bne.n	8001c54 <PCD_EP_ISR_Handler+0x67c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2250      	movs	r2, #80	@ 0x50
 8001c14:	5a9b      	ldrh	r3, [r3, r2]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	001a      	movs	r2, r3
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	189b      	adds	r3, r3, r2
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	00da      	lsls	r2, r3, #3
 8001c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c28:	18d3      	adds	r3, r2, r3
 8001c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d18 <PCD_EP_ISR_Handler+0x740>)
 8001c2c:	4694      	mov	ip, r2
 8001c2e:	4463      	add	r3, ip
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	059b      	lsls	r3, r3, #22
 8001c3a:	0d9b      	lsrs	r3, r3, #22
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4a35      	ldr	r2, [pc, #212]	@ (8001d20 <PCD_EP_ISR_Handler+0x748>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	e018      	b.n	8001c86 <PCD_EP_ISR_Handler+0x6ae>
 8001c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d114      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x6ae>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2250      	movs	r2, #80	@ 0x50
 8001c62:	5a9b      	ldrh	r3, [r3, r2]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	001a      	movs	r2, r3
 8001c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6a:	189b      	adds	r3, r3, r2
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	00da      	lsls	r2, r3, #3
 8001c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c76:	18d3      	adds	r3, r2, r3
 8001c78:	4a27      	ldr	r2, [pc, #156]	@ (8001d18 <PCD_EP_ISR_Handler+0x740>)
 8001c7a:	4694      	mov	ip, r2
 8001c7c:	4463      	add	r3, ip
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0011      	movs	r1, r2
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f005 fe4e 	bl	8007930 <HAL_PCD_DataInStageCallback>
 8001c94:	e065      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001c96:	233e      	movs	r3, #62	@ 0x3e
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d156      	bne.n	8001d52 <PCD_EP_ISR_Handler+0x77a>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2250      	movs	r2, #80	@ 0x50
 8001caa:	5a9b      	ldrh	r3, [r3, r2]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	001a      	movs	r2, r3
 8001cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	18d2      	adds	r2, r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	18d3      	adds	r3, r2, r3
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <PCD_EP_ISR_Handler+0x73c>)
 8001cc0:	4694      	mov	ip, r2
 8001cc2:	4463      	add	r3, ip
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	213a      	movs	r1, #58	@ 0x3a
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	0592      	lsls	r2, r2, #22
 8001ccc:	0d92      	lsrs	r2, r2, #22
 8001cce:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d907      	bls.n	8001cec <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	1ad2      	subs	r2, r2, r3
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ce8:	619a      	str	r2, [r3, #24]
 8001cea:	e002      	b.n	8001cf2 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d114      	bne.n	8001d24 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0011      	movs	r1, r2
 8001d02:	0018      	movs	r0, r3
 8001d04:	f005 fe14 	bl	8007930 <HAL_PCD_DataInStageCallback>
 8001d08:	e02b      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	ffff8f8f 	.word	0xffff8f8f
 8001d10:	ffff80c0 	.word	0xffff80c0
 8001d14:	00000402 	.word	0x00000402
 8001d18:	00000406 	.word	0x00000406
 8001d1c:	ffff8f0f 	.word	0xffff8f0f
 8001d20:	ffff8000 	.word	0xffff8000
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	213a      	movs	r1, #58	@ 0x3a
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	18d2      	adds	r2, r2, r3
 8001d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d32:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	18d2      	adds	r2, r2, r3
 8001d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d40:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d48:	0011      	movs	r1, r2
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f002 ff18 	bl	8004b80 <USB_EPStartXfer>
 8001d50:	e007      	b.n	8001d62 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d52:	233e      	movs	r3, #62	@ 0x3e
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	881a      	ldrh	r2, [r3, #0]
 8001d58:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 f92b 	bl	8001fb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2244      	movs	r2, #68	@ 0x44
 8001d68:	5a9b      	ldrh	r3, [r3, r2]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da01      	bge.n	8001d76 <PCD_EP_ISR_Handler+0x79e>
 8001d72:	f7ff fc37 	bl	80015e4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b014      	add	sp, #80	@ 0x50
 8001d7e:	bdb0      	pop	{r4, r5, r7, pc}

08001d80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b089      	sub	sp, #36	@ 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	1dbb      	adds	r3, r7, #6
 8001d8c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d8e:	1dbb      	adds	r3, r7, #6
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	01db      	lsls	r3, r3, #7
 8001d96:	4013      	ands	r3, r2
 8001d98:	d100      	bne.n	8001d9c <HAL_PCD_EP_DB_Receive+0x1c>
 8001d9a:	e07d      	b.n	8001e98 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2250      	movs	r2, #80	@ 0x50
 8001da2:	5a9b      	ldrh	r3, [r3, r2]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	001a      	movs	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	18d2      	adds	r2, r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	18d3      	adds	r3, r2, r3
 8001db6:	4a7a      	ldr	r2, [pc, #488]	@ (8001fa0 <HAL_PCD_EP_DB_Receive+0x220>)
 8001db8:	4694      	mov	ip, r2
 8001dba:	4463      	add	r3, ip
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	211a      	movs	r1, #26
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	0592      	lsls	r2, r2, #22
 8001dc4:	0d92      	lsrs	r2, r2, #22
 8001dc6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d307      	bcc.n	8001de4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	1ad2      	subs	r2, r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	619a      	str	r2, [r3, #24]
 8001de2:	e002      	b.n	8001dea <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d121      	bne.n	8001e36 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	001a      	movs	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	18d3      	adds	r3, r2, r3
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	2018      	movs	r0, #24
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	4966      	ldr	r1, [pc, #408]	@ (8001fa4 <HAL_PCD_EP_DB_Receive+0x224>)
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	183b      	adds	r3, r7, r0
 8001e10:	183a      	adds	r2, r7, r0
 8001e12:	8812      	ldrh	r2, [r2, #0]
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	0189      	lsls	r1, r1, #6
 8001e18:	404a      	eors	r2, r1
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	001a      	movs	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	18d3      	adds	r3, r2, r3
 8001e2a:	183a      	adds	r2, r7, r0
 8001e2c:	8812      	ldrh	r2, [r2, #0]
 8001e2e:	495e      	ldr	r1, [pc, #376]	@ (8001fa8 <HAL_PCD_EP_DB_Receive+0x228>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	b292      	uxth	r2, r2
 8001e34:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d01a      	beq.n	8001e76 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	001a      	movs	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	2016      	movs	r0, #22
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	4955      	ldr	r1, [pc, #340]	@ (8001fac <HAL_PCD_EP_DB_Receive+0x22c>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	001a      	movs	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	18d3      	adds	r3, r2, r3
 8001e6a:	183a      	adds	r2, r7, r0
 8001e6c:	8812      	ldrh	r2, [r2, #0]
 8001e6e:	4950      	ldr	r1, [pc, #320]	@ (8001fb0 <HAL_PCD_EP_DB_Receive+0x230>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	b292      	uxth	r2, r2
 8001e74:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001e76:	241a      	movs	r4, #26
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d100      	bne.n	8001e82 <HAL_PCD_EP_DB_Receive+0x102>
 8001e80:	e086      	b.n	8001f90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	6959      	ldr	r1, [r3, #20]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	891a      	ldrh	r2, [r3, #8]
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	f003 fddf 	bl	8005a54 <USB_ReadPMA>
 8001e96:	e07b      	b.n	8001f90 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2250      	movs	r2, #80	@ 0x50
 8001e9e:	5a9b      	ldrh	r3, [r3, r2]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	18d2      	adds	r2, r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	4a40      	ldr	r2, [pc, #256]	@ (8001fb4 <HAL_PCD_EP_DB_Receive+0x234>)
 8001eb4:	4694      	mov	ip, r2
 8001eb6:	4463      	add	r3, ip
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	211a      	movs	r1, #26
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	0592      	lsls	r2, r2, #22
 8001ec0:	0d92      	lsrs	r2, r2, #22
 8001ec2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d307      	bcc.n	8001ee0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	1ad2      	subs	r2, r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	619a      	str	r2, [r3, #24]
 8001ede:	e002      	b.n	8001ee6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d121      	bne.n	8001f32 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	201e      	movs	r0, #30
 8001f02:	183b      	adds	r3, r7, r0
 8001f04:	4927      	ldr	r1, [pc, #156]	@ (8001fa4 <HAL_PCD_EP_DB_Receive+0x224>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	801a      	strh	r2, [r3, #0]
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	183a      	adds	r2, r7, r0
 8001f0e:	8812      	ldrh	r2, [r2, #0]
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	0189      	lsls	r1, r1, #6
 8001f14:	404a      	eors	r2, r1
 8001f16:	801a      	strh	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	18d3      	adds	r3, r2, r3
 8001f26:	183a      	adds	r2, r7, r0
 8001f28:	8812      	ldrh	r2, [r2, #0]
 8001f2a:	491f      	ldr	r1, [pc, #124]	@ (8001fa8 <HAL_PCD_EP_DB_Receive+0x228>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	801a      	strh	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f32:	1dbb      	adds	r3, r7, #6
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	2240      	movs	r2, #64	@ 0x40
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d11a      	bne.n	8001f72 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	001a      	movs	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	201c      	movs	r0, #28
 8001f50:	183b      	adds	r3, r7, r0
 8001f52:	4916      	ldr	r1, [pc, #88]	@ (8001fac <HAL_PCD_EP_DB_Receive+0x22c>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	18d3      	adds	r3, r2, r3
 8001f66:	183a      	adds	r2, r7, r0
 8001f68:	8812      	ldrh	r2, [r2, #0]
 8001f6a:	4911      	ldr	r1, [pc, #68]	@ (8001fb0 <HAL_PCD_EP_DB_Receive+0x230>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001f72:	241a      	movs	r4, #26
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6959      	ldr	r1, [r3, #20]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	895a      	ldrh	r2, [r3, #10]
 8001f88:	193b      	adds	r3, r7, r4
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	f003 fd62 	bl	8005a54 <USB_ReadPMA>
    }
  }

  return count;
 8001f90:	231a      	movs	r3, #26
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	881b      	ldrh	r3, [r3, #0]
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b009      	add	sp, #36	@ 0x24
 8001f9c:	bd90      	pop	{r4, r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	00000402 	.word	0x00000402
 8001fa4:	ffffbf8f 	.word	0xffffbf8f
 8001fa8:	ffff8080 	.word	0xffff8080
 8001fac:	ffff8f8f 	.word	0xffff8f8f
 8001fb0:	ffff80c0 	.word	0xffff80c0
 8001fb4:	00000406 	.word	0x00000406

08001fb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0a6      	sub	sp, #152	@ 0x98
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	1dbb      	adds	r3, r7, #6
 8001fc4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fc6:	1dbb      	adds	r3, r7, #6
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2240      	movs	r2, #64	@ 0x40
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8001fd0:	e1f9      	b.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x40e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2250      	movs	r2, #80	@ 0x50
 8001fd8:	5a9b      	ldrh	r3, [r3, r2]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	001a      	movs	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	18d2      	adds	r2, r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	18d3      	adds	r3, r2, r3
 8001fec:	4ace      	ldr	r2, [pc, #824]	@ (8002328 <HAL_PCD_EP_DB_Transmit+0x370>)
 8001fee:	4694      	mov	ip, r2
 8001ff0:	4463      	add	r3, ip
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	2196      	movs	r1, #150	@ 0x96
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	0592      	lsls	r2, r2, #22
 8001ffa:	0d92      	lsrs	r2, r2, #22
 8001ffc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	187b      	adds	r3, r7, r1
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d907      	bls.n	800201a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	187b      	adds	r3, r7, r1
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	1ad2      	subs	r2, r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	619a      	str	r2, [r3, #24]
 8002018:	e002      	b.n	8002020 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d000      	beq.n	800202a <HAL_PCD_EP_DB_Transmit+0x72>
 8002028:	e0da      	b.n	80021e0 <HAL_PCD_EP_DB_Transmit+0x228>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d125      	bne.n	800207e <HAL_PCD_EP_DB_Transmit+0xc6>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2250      	movs	r2, #80	@ 0x50
 800203e:	5a9b      	ldrh	r3, [r3, r2]
 8002040:	b29b      	uxth	r3, r3
 8002042:	001a      	movs	r2, r3
 8002044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002046:	189b      	adds	r3, r3, r2
 8002048:	633b      	str	r3, [r7, #48]	@ 0x30
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	00da      	lsls	r2, r3, #3
 8002050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	4ab4      	ldr	r2, [pc, #720]	@ (8002328 <HAL_PCD_EP_DB_Transmit+0x370>)
 8002056:	4694      	mov	ip, r2
 8002058:	4463      	add	r3, ip
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	059b      	lsls	r3, r3, #22
 8002064:	0d9b      	lsrs	r3, r3, #22
 8002066:	b29a      	uxth	r2, r3
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4aae      	ldr	r2, [pc, #696]	@ (800232c <HAL_PCD_EP_DB_Transmit+0x374>)
 8002074:	4313      	orrs	r3, r2
 8002076:	b29a      	uxth	r2, r3
 8002078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207a:	801a      	strh	r2, [r3, #0]
 800207c:	e01b      	b.n	80020b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d117      	bne.n	80020b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2250      	movs	r2, #80	@ 0x50
 8002092:	5a9b      	ldrh	r3, [r3, r2]
 8002094:	b29b      	uxth	r3, r3
 8002096:	001a      	movs	r2, r3
 8002098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209a:	189b      	adds	r3, r3, r2
 800209c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	00da      	lsls	r2, r3, #3
 80020a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a6:	18d3      	adds	r3, r2, r3
 80020a8:	4a9f      	ldr	r2, [pc, #636]	@ (8002328 <HAL_PCD_EP_DB_Transmit+0x370>)
 80020aa:	4694      	mov	ip, r2
 80020ac:	4463      	add	r3, ip
 80020ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b2:	2200      	movs	r2, #0
 80020b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d125      	bne.n	8002110 <HAL_PCD_EP_DB_Transmit+0x158>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2250      	movs	r2, #80	@ 0x50
 80020d0:	5a9b      	ldrh	r3, [r3, r2]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	001a      	movs	r2, r3
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	189b      	adds	r3, r3, r2
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	00da      	lsls	r2, r3, #3
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	18d3      	adds	r3, r2, r3
 80020e6:	4a92      	ldr	r2, [pc, #584]	@ (8002330 <HAL_PCD_EP_DB_Transmit+0x378>)
 80020e8:	4694      	mov	ip, r2
 80020ea:	4463      	add	r3, ip
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	059b      	lsls	r3, r3, #22
 80020f6:	0d9b      	lsrs	r3, r3, #22
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4a89      	ldr	r2, [pc, #548]	@ (800232c <HAL_PCD_EP_DB_Transmit+0x374>)
 8002106:	4313      	orrs	r3, r2
 8002108:	b29a      	uxth	r2, r3
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	e018      	b.n	8002142 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	785b      	ldrb	r3, [r3, #1]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d114      	bne.n	8002142 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2250      	movs	r2, #80	@ 0x50
 800211e:	5a9b      	ldrh	r3, [r3, r2]
 8002120:	b29b      	uxth	r3, r3
 8002122:	001a      	movs	r2, r3
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	189b      	adds	r3, r3, r2
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	00da      	lsls	r2, r3, #3
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	18d3      	adds	r3, r2, r3
 8002134:	4a7e      	ldr	r2, [pc, #504]	@ (8002330 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002136:	4694      	mov	ip, r2
 8002138:	4463      	add	r3, ip
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	2200      	movs	r2, #0
 8002140:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	78db      	ldrb	r3, [r3, #3]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d120      	bne.n	800218c <HAL_PCD_EP_DB_Transmit+0x1d4>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	001a      	movs	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	18d3      	adds	r3, r2, r3
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29a      	uxth	r2, r3
 800215c:	201a      	movs	r0, #26
 800215e:	183b      	adds	r3, r7, r0
 8002160:	4974      	ldr	r1, [pc, #464]	@ (8002334 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002162:	400a      	ands	r2, r1
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	183b      	adds	r3, r7, r0
 8002168:	183a      	adds	r2, r7, r0
 800216a:	8812      	ldrh	r2, [r2, #0]
 800216c:	2120      	movs	r1, #32
 800216e:	404a      	eors	r2, r1
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	001a      	movs	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	18d3      	adds	r3, r2, r3
 8002180:	183a      	adds	r2, r7, r0
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	496c      	ldr	r1, [pc, #432]	@ (8002338 <HAL_PCD_EP_DB_Transmit+0x380>)
 8002186:	430a      	orrs	r2, r1
 8002188:	b292      	uxth	r2, r2
 800218a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	0011      	movs	r1, r2
 8002194:	0018      	movs	r0, r3
 8002196:	f005 fbcb 	bl	8007930 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800219a:	1dbb      	adds	r3, r7, #6
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	01db      	lsls	r3, r3, #7
 80021a2:	4013      	ands	r3, r2
 80021a4:	d01a      	beq.n	80021dc <HAL_PCD_EP_DB_Transmit+0x224>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	001a      	movs	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	18d3      	adds	r3, r2, r3
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2018      	movs	r0, #24
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	495f      	ldr	r1, [pc, #380]	@ (800233c <HAL_PCD_EP_DB_Transmit+0x384>)
 80021be:	400a      	ands	r2, r1
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	001a      	movs	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	18d3      	adds	r3, r2, r3
 80021d0:	183a      	adds	r2, r7, r0
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	495a      	ldr	r1, [pc, #360]	@ (8002340 <HAL_PCD_EP_DB_Transmit+0x388>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	b292      	uxth	r2, r2
 80021da:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e327      	b.n	8002830 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021e0:	1dbb      	adds	r3, r7, #6
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	01db      	lsls	r3, r3, #7
 80021e8:	4013      	ands	r3, r2
 80021ea:	d01a      	beq.n	8002222 <HAL_PCD_EP_DB_Transmit+0x26a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	001a      	movs	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	18d3      	adds	r3, r2, r3
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	204e      	movs	r0, #78	@ 0x4e
 8002200:	183b      	adds	r3, r7, r0
 8002202:	494e      	ldr	r1, [pc, #312]	@ (800233c <HAL_PCD_EP_DB_Transmit+0x384>)
 8002204:	400a      	ands	r2, r1
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	001a      	movs	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	18d3      	adds	r3, r2, r3
 8002216:	183a      	adds	r2, r7, r0
 8002218:	8812      	ldrh	r2, [r2, #0]
 800221a:	4949      	ldr	r1, [pc, #292]	@ (8002340 <HAL_PCD_EP_DB_Transmit+0x388>)
 800221c:	430a      	orrs	r2, r1
 800221e:	b292      	uxth	r2, r2
 8002220:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2224      	movs	r2, #36	@ 0x24
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d000      	beq.n	800222e <HAL_PCD_EP_DB_Transmit+0x276>
 800222c:	e2d8      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	2196      	movs	r1, #150	@ 0x96
 8002234:	187b      	adds	r3, r7, r1
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	18d2      	adds	r2, r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	187b      	adds	r3, r7, r1
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	18d2      	adds	r2, r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d309      	bcc.n	800226c <HAL_PCD_EP_DB_Transmit+0x2b4>
        {
          len = ep->maxpacket;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002264:	1ad2      	subs	r2, r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	621a      	str	r2, [r3, #32]
 800226a:	e016      	b.n	800229a <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else if (ep->xfer_len_db == 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <HAL_PCD_EP_DB_Transmit+0x2ce>
        {
          len = TxPctSize;
 8002274:	2396      	movs	r3, #150	@ 0x96
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2224      	movs	r2, #36	@ 0x24
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]
 8002284:	e009      	b.n	800229a <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2224      	movs	r2, #36	@ 0x24
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d169      	bne.n	8002376 <HAL_PCD_EP_DB_Transmit+0x3be>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2250      	movs	r2, #80	@ 0x50
 80022ae:	5a9b      	ldrh	r3, [r3, r2]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	001a      	movs	r2, r3
 80022b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	00da      	lsls	r2, r3, #3
 80022c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c2:	18d3      	adds	r3, r2, r3
 80022c4:	4a18      	ldr	r2, [pc, #96]	@ (8002328 <HAL_PCD_EP_DB_Transmit+0x370>)
 80022c6:	4694      	mov	ip, r2
 80022c8:	4463      	add	r3, ip
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	059b      	lsls	r3, r3, #22
 80022d4:	0d9b      	lsrs	r3, r3, #22
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022da:	801a      	strh	r2, [r3, #0]
 80022dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x33c>
 80022e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4a10      	ldr	r2, [pc, #64]	@ (800232c <HAL_PCD_EP_DB_Transmit+0x374>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	e05d      	b.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x3f8>
 80022f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80022f8:	d824      	bhi.n	8002344 <HAL_PCD_EP_DB_Transmit+0x38c>
 80022fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002302:	2201      	movs	r2, #1
 8002304:	4013      	ands	r3, r2
 8002306:	d002      	beq.n	800230e <HAL_PCD_EP_DB_Transmit+0x356>
 8002308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800230a:	3301      	adds	r3, #1
 800230c:	653b      	str	r3, [r7, #80]	@ 0x50
 800230e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29a      	uxth	r2, r3
 8002314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002316:	b29b      	uxth	r3, r3
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	b29b      	uxth	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b29a      	uxth	r2, r3
 8002320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e044      	b.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	00000402 	.word	0x00000402
 800232c:	ffff8000 	.word	0xffff8000
 8002330:	00000406 	.word	0x00000406
 8002334:	ffff8fbf 	.word	0xffff8fbf
 8002338:	ffff8080 	.word	0xffff8080
 800233c:	ffff8f8f 	.word	0xffff8f8f
 8002340:	ffffc080 	.word	0xffffc080
 8002344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	653b      	str	r3, [r7, #80]	@ 0x50
 800234a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800234c:	221f      	movs	r2, #31
 800234e:	4013      	ands	r3, r2
 8002350:	d102      	bne.n	8002358 <HAL_PCD_EP_DB_Transmit+0x3a0>
 8002352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002354:	3b01      	subs	r3, #1
 8002356:	653b      	str	r3, [r7, #80]	@ 0x50
 8002358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29a      	uxth	r2, r3
 800235e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	b29b      	uxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b29b      	uxth	r3, r3
 800236a:	4ace      	ldr	r2, [pc, #824]	@ (80026a4 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 800236c:	4313      	orrs	r3, r2
 800236e:	b29a      	uxth	r2, r3
 8002370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	e01c      	b.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d118      	bne.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2250      	movs	r2, #80	@ 0x50
 800238a:	5a9b      	ldrh	r3, [r3, r2]
 800238c:	b29b      	uxth	r3, r3
 800238e:	001a      	movs	r2, r3
 8002390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002392:	189b      	adds	r3, r3, r2
 8002394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	00da      	lsls	r2, r3, #3
 800239c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800239e:	18d3      	adds	r3, r2, r3
 80023a0:	4ac1      	ldr	r2, [pc, #772]	@ (80026a8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80023a2:	4694      	mov	ip, r2
 80023a4:	4463      	add	r3, ip
 80023a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	6959      	ldr	r1, [r3, #20]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	891a      	ldrh	r2, [r3, #8]
 80023bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f003 fafe 	bl	80059c0 <USB_WritePMA>
 80023c4:	e20c      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x828>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2250      	movs	r2, #80	@ 0x50
 80023cc:	5a9b      	ldrh	r3, [r3, r2]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	001a      	movs	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	18d2      	adds	r2, r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	18d3      	adds	r3, r2, r3
 80023e0:	4ab2      	ldr	r2, [pc, #712]	@ (80026ac <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80023e2:	4694      	mov	ip, r2
 80023e4:	4463      	add	r3, ip
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	2196      	movs	r1, #150	@ 0x96
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	0592      	lsls	r2, r2, #22
 80023ee:	0d92      	lsrs	r2, r2, #22
 80023f0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d307      	bcc.n	800240e <HAL_PCD_EP_DB_Transmit+0x456>
    {
      ep->xfer_len -= TxPctSize;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	187b      	adds	r3, r7, r1
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	e002      	b.n	8002414 <HAL_PCD_EP_DB_Transmit+0x45c>
    }
    else
    {
      ep->xfer_len = 0U;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d000      	beq.n	800241e <HAL_PCD_EP_DB_Transmit+0x466>
 800241c:	e0ee      	b.n	80025fc <HAL_PCD_EP_DB_Transmit+0x644>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d125      	bne.n	8002472 <HAL_PCD_EP_DB_Transmit+0x4ba>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	677b      	str	r3, [r7, #116]	@ 0x74
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2250      	movs	r2, #80	@ 0x50
 8002432:	5a9b      	ldrh	r3, [r3, r2]
 8002434:	b29b      	uxth	r3, r3
 8002436:	001a      	movs	r2, r3
 8002438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243a:	189b      	adds	r3, r3, r2
 800243c:	677b      	str	r3, [r7, #116]	@ 0x74
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	00da      	lsls	r2, r3, #3
 8002444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002446:	18d3      	adds	r3, r2, r3
 8002448:	4a97      	ldr	r2, [pc, #604]	@ (80026a8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800244a:	4694      	mov	ip, r2
 800244c:	4463      	add	r3, ip
 800244e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002450:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	059b      	lsls	r3, r3, #22
 8002458:	0d9b      	lsrs	r3, r3, #22
 800245a:	b29a      	uxth	r2, r3
 800245c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	4a8f      	ldr	r2, [pc, #572]	@ (80026a4 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8002468:	4313      	orrs	r3, r2
 800246a:	b29a      	uxth	r2, r3
 800246c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800246e:	801a      	strh	r2, [r3, #0]
 8002470:	e01b      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d117      	bne.n	80024aa <HAL_PCD_EP_DB_Transmit+0x4f2>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2250      	movs	r2, #80	@ 0x50
 8002486:	5a9b      	ldrh	r3, [r3, r2]
 8002488:	b29b      	uxth	r3, r3
 800248a:	001a      	movs	r2, r3
 800248c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800248e:	189b      	adds	r3, r3, r2
 8002490:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	00da      	lsls	r2, r3, #3
 8002498:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800249a:	18d3      	adds	r3, r2, r3
 800249c:	4a82      	ldr	r2, [pc, #520]	@ (80026a8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a6:	2200      	movs	r2, #0
 80024a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2284      	movs	r2, #132	@ 0x84
 80024b0:	18ba      	adds	r2, r7, r2
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d130      	bne.n	800251e <HAL_PCD_EP_DB_Transmit+0x566>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	218c      	movs	r1, #140	@ 0x8c
 80024c2:	187a      	adds	r2, r7, r1
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2250      	movs	r2, #80	@ 0x50
 80024cc:	5a9b      	ldrh	r3, [r3, r2]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	001a      	movs	r2, r3
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	189b      	adds	r3, r3, r2
 80024d8:	187a      	adds	r2, r7, r1
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	00da      	lsls	r2, r3, #3
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	18d3      	adds	r3, r2, r3
 80024e8:	4a70      	ldr	r2, [pc, #448]	@ (80026ac <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80024ea:	4694      	mov	ip, r2
 80024ec:	4463      	add	r3, ip
 80024ee:	2188      	movs	r1, #136	@ 0x88
 80024f0:	187a      	adds	r2, r7, r1
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	059b      	lsls	r3, r3, #22
 80024fe:	0d9b      	lsrs	r3, r3, #22
 8002500:	b29a      	uxth	r2, r3
 8002502:	187b      	adds	r3, r7, r1
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	187b      	adds	r3, r7, r1
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4a64      	ldr	r2, [pc, #400]	@ (80026a4 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8002512:	4313      	orrs	r3, r2
 8002514:	b29a      	uxth	r2, r3
 8002516:	187b      	adds	r3, r7, r1
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e01f      	b.n	800255e <HAL_PCD_EP_DB_Transmit+0x5a6>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d11b      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0x5a6>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2250      	movs	r2, #80	@ 0x50
 800252c:	5a9b      	ldrh	r3, [r3, r2]
 800252e:	b29b      	uxth	r3, r3
 8002530:	001a      	movs	r2, r3
 8002532:	2184      	movs	r1, #132	@ 0x84
 8002534:	187b      	adds	r3, r7, r1
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	189b      	adds	r3, r3, r2
 800253a:	187a      	adds	r2, r7, r1
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	00da      	lsls	r2, r3, #3
 8002544:	187b      	adds	r3, r7, r1
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	4a58      	ldr	r2, [pc, #352]	@ (80026ac <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800254c:	4694      	mov	ip, r2
 800254e:	4463      	add	r3, ip
 8002550:	2280      	movs	r2, #128	@ 0x80
 8002552:	18b9      	adds	r1, r7, r2
 8002554:	600b      	str	r3, [r1, #0]
 8002556:	18bb      	adds	r3, r7, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d120      	bne.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x5f0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	001a      	movs	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	18d3      	adds	r3, r2, r3
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29a      	uxth	r2, r3
 8002578:	2094      	movs	r0, #148	@ 0x94
 800257a:	183b      	adds	r3, r7, r0
 800257c:	494c      	ldr	r1, [pc, #304]	@ (80026b0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800257e:	400a      	ands	r2, r1
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	183b      	adds	r3, r7, r0
 8002584:	183a      	adds	r2, r7, r0
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	2120      	movs	r1, #32
 800258a:	404a      	eors	r2, r1
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	001a      	movs	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	18d3      	adds	r3, r2, r3
 800259c:	183a      	adds	r2, r7, r0
 800259e:	8812      	ldrh	r2, [r2, #0]
 80025a0:	4944      	ldr	r1, [pc, #272]	@ (80026b4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	b292      	uxth	r2, r2
 80025a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	0011      	movs	r1, r2
 80025b0:	0018      	movs	r0, r3
 80025b2:	f005 f9bd 	bl	8007930 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025b6:	1dbb      	adds	r3, r7, #6
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	@ 0x80
 80025bc:	01db      	lsls	r3, r3, #7
 80025be:	4013      	ands	r3, r2
 80025c0:	d11a      	bne.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x640>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	001a      	movs	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	18d3      	adds	r3, r2, r3
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	2092      	movs	r0, #146	@ 0x92
 80025d6:	183b      	adds	r3, r7, r0
 80025d8:	4937      	ldr	r1, [pc, #220]	@ (80026b8 <HAL_PCD_EP_DB_Transmit+0x700>)
 80025da:	400a      	ands	r2, r1
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	001a      	movs	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	183a      	adds	r2, r7, r0
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	4932      	ldr	r1, [pc, #200]	@ (80026bc <HAL_PCD_EP_DB_Transmit+0x704>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	b292      	uxth	r2, r2
 80025f6:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e119      	b.n	8002830 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025fc:	1dbb      	adds	r3, r7, #6
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	01db      	lsls	r3, r3, #7
 8002604:	4013      	ands	r3, r2
 8002606:	d11a      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x686>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	001a      	movs	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	18d3      	adds	r3, r2, r3
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b29a      	uxth	r2, r3
 800261a:	2056      	movs	r0, #86	@ 0x56
 800261c:	183b      	adds	r3, r7, r0
 800261e:	4926      	ldr	r1, [pc, #152]	@ (80026b8 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002620:	400a      	ands	r2, r1
 8002622:	801a      	strh	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	001a      	movs	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	18d3      	adds	r3, r2, r3
 8002632:	183a      	adds	r2, r7, r0
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	4921      	ldr	r1, [pc, #132]	@ (80026bc <HAL_PCD_EP_DB_Transmit+0x704>)
 8002638:	430a      	orrs	r2, r1
 800263a:	b292      	uxth	r2, r2
 800263c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2224      	movs	r2, #36	@ 0x24
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d000      	beq.n	800264a <HAL_PCD_EP_DB_Transmit+0x692>
 8002648:	e0ca      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	2196      	movs	r1, #150	@ 0x96
 8002650:	187b      	adds	r3, r7, r1
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	18d2      	adds	r2, r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	187b      	adds	r3, r7, r1
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	18d2      	adds	r2, r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6a1a      	ldr	r2, [r3, #32]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	429a      	cmp	r2, r3
 8002672:	d309      	bcc.n	8002688 <HAL_PCD_EP_DB_Transmit+0x6d0>
        {
          len = ep->maxpacket;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	621a      	str	r2, [r3, #32]
 8002686:	e025      	b.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x71c>
        }
        else if (ep->xfer_len_db == 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d117      	bne.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x708>
        {
          len = TxPctSize;
 8002690:	2396      	movs	r3, #150	@ 0x96
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2224      	movs	r2, #36	@ 0x24
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]
 80026a0:	e018      	b.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x71c>
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	ffff8000 	.word	0xffff8000
 80026a8:	00000402 	.word	0x00000402
 80026ac:	00000406 	.word	0x00000406
 80026b0:	ffff8fbf 	.word	0xffff8fbf
 80026b4:	ffff8080 	.word	0xffff8080
 80026b8:	ffff8f8f 	.word	0xffff8f8f
 80026bc:	ffffc080 	.word	0xffffc080
        }
        else
        {
          len = ep->xfer_len_db;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2224      	movs	r2, #36	@ 0x24
 80026d0:	2100      	movs	r1, #0
 80026d2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d15a      	bne.n	8002798 <HAL_PCD_EP_DB_Transmit+0x7e0>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2250      	movs	r2, #80	@ 0x50
 80026ee:	5a9b      	ldrh	r3, [r3, r2]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	001a      	movs	r2, r3
 80026f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	00da      	lsls	r2, r3, #3
 8002700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002702:	18d3      	adds	r3, r2, r3
 8002704:	4a4c      	ldr	r2, [pc, #304]	@ (8002838 <HAL_PCD_EP_DB_Transmit+0x880>)
 8002706:	4694      	mov	ip, r2
 8002708:	4463      	add	r3, ip
 800270a:	667b      	str	r3, [r7, #100]	@ 0x64
 800270c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	059b      	lsls	r3, r3, #22
 8002714:	0d9b      	lsrs	r3, r3, #22
 8002716:	b29a      	uxth	r2, r3
 8002718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4a44      	ldr	r2, [pc, #272]	@ (800283c <HAL_PCD_EP_DB_Transmit+0x884>)
 800272a:	4313      	orrs	r3, r2
 800272c:	b29a      	uxth	r2, r3
 800272e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	e04b      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x814>
 8002734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002736:	2b3e      	cmp	r3, #62	@ 0x3e
 8002738:	d815      	bhi.n	8002766 <HAL_PCD_EP_DB_Transmit+0x7ae>
 800273a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002742:	2201      	movs	r2, #1
 8002744:	4013      	ands	r3, r2
 8002746:	d002      	beq.n	800274e <HAL_PCD_EP_DB_Transmit+0x796>
 8002748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800274a:	3301      	adds	r3, #1
 800274c:	663b      	str	r3, [r7, #96]	@ 0x60
 800274e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29a      	uxth	r2, r3
 8002754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002756:	b29b      	uxth	r3, r3
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	b29b      	uxth	r3, r3
 800275c:	4313      	orrs	r3, r2
 800275e:	b29a      	uxth	r2, r3
 8002760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	e032      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x814>
 8002766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	663b      	str	r3, [r7, #96]	@ 0x60
 800276c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800276e:	221f      	movs	r2, #31
 8002770:	4013      	ands	r3, r2
 8002772:	d102      	bne.n	800277a <HAL_PCD_EP_DB_Transmit+0x7c2>
 8002774:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002776:	3b01      	subs	r3, #1
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
 800277a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29a      	uxth	r2, r3
 8002780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002782:	b29b      	uxth	r3, r3
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	b29b      	uxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	4a2b      	ldr	r2, [pc, #172]	@ (800283c <HAL_PCD_EP_DB_Transmit+0x884>)
 800278e:	4313      	orrs	r3, r2
 8002790:	b29a      	uxth	r2, r3
 8002792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	e019      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x814>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d115      	bne.n	80027cc <HAL_PCD_EP_DB_Transmit+0x814>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2250      	movs	r2, #80	@ 0x50
 80027a6:	5a9b      	ldrh	r3, [r3, r2]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	001a      	movs	r2, r3
 80027ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00da      	lsls	r2, r3, #3
 80027b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ba:	18d3      	adds	r3, r2, r3
 80027bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002838 <HAL_PCD_EP_DB_Transmit+0x880>)
 80027be:	4694      	mov	ip, r2
 80027c0:	4463      	add	r3, ip
 80027c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	895a      	ldrh	r2, [r3, #10]
 80027d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f003 f8f0 	bl	80059c0 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	001a      	movs	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	18d3      	adds	r3, r2, r3
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	2016      	movs	r0, #22
 80027f4:	183b      	adds	r3, r7, r0
 80027f6:	4912      	ldr	r1, [pc, #72]	@ (8002840 <HAL_PCD_EP_DB_Transmit+0x888>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	183b      	adds	r3, r7, r0
 80027fe:	183a      	adds	r2, r7, r0
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	2110      	movs	r1, #16
 8002804:	404a      	eors	r2, r1
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	183b      	adds	r3, r7, r0
 800280a:	183a      	adds	r2, r7, r0
 800280c:	8812      	ldrh	r2, [r2, #0]
 800280e:	2120      	movs	r1, #32
 8002810:	404a      	eors	r2, r1
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	001a      	movs	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	18d3      	adds	r3, r2, r3
 8002822:	183a      	adds	r2, r7, r0
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	4907      	ldr	r1, [pc, #28]	@ (8002844 <HAL_PCD_EP_DB_Transmit+0x88c>)
 8002828:	430a      	orrs	r2, r1
 800282a:	b292      	uxth	r2, r2
 800282c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b026      	add	sp, #152	@ 0x98
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00000406 	.word	0x00000406
 800283c:	ffff8000 	.word	0xffff8000
 8002840:	ffff8fbf 	.word	0xffff8fbf
 8002844:	ffff8080 	.word	0xffff8080

08002848 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	0008      	movs	r0, r1
 8002852:	0011      	movs	r1, r2
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	240a      	movs	r4, #10
 8002858:	193b      	adds	r3, r7, r4
 800285a:	1c02      	adds	r2, r0, #0
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	2308      	movs	r3, #8
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	1c0a      	adds	r2, r1, #0
 8002864:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002866:	0021      	movs	r1, r4
 8002868:	187b      	adds	r3, r7, r1
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	4013      	ands	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002876:	187b      	adds	r3, r7, r1
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	2207      	movs	r2, #7
 800287c:	401a      	ands	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	189b      	adds	r3, r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	3310      	adds	r3, #16
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	18d3      	adds	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e00b      	b.n	80028a8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002890:	230a      	movs	r3, #10
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	0013      	movs	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	189b      	adds	r3, r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	3351      	adds	r3, #81	@ 0x51
 80028a0:	33ff      	adds	r3, #255	@ 0xff
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028a8:	2308      	movs	r3, #8
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	80da      	strh	r2, [r3, #6]
 80028c0:	e00b      	b.n	80028da <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2201      	movs	r2, #1
 80028c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b007      	add	sp, #28
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	23b4      	movs	r3, #180	@ 0xb4
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	2101      	movs	r1, #1
 80028fa:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	23b2      	movs	r3, #178	@ 0xb2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	2100      	movs	r1, #0
 8002904:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2254      	movs	r2, #84	@ 0x54
 800290a:	5a9b      	ldrh	r3, [r3, r2]
 800290c:	b29b      	uxth	r3, r3
 800290e:	2201      	movs	r2, #1
 8002910:	4313      	orrs	r3, r2
 8002912:	b299      	uxth	r1, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2254      	movs	r2, #84	@ 0x54
 8002918:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2254      	movs	r2, #84	@ 0x54
 800291e:	5a9b      	ldrh	r3, [r3, r2]
 8002920:	b29b      	uxth	r3, r3
 8002922:	2202      	movs	r2, #2
 8002924:	4313      	orrs	r3, r2
 8002926:	b299      	uxth	r1, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2254      	movs	r2, #84	@ 0x54
 800292c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	000a      	movs	r2, r1
 8002942:	1cfb      	adds	r3, r7, #3
 8002944:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f000 fbbf 	bl	80030e2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4bc9      	ldr	r3, [pc, #804]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	220c      	movs	r2, #12
 800296a:	4013      	ands	r3, r2
 800296c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296e:	4bc7      	ldr	r3, [pc, #796]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	025b      	lsls	r3, r3, #9
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	4013      	ands	r3, r2
 8002982:	d100      	bne.n	8002986 <HAL_RCC_OscConfig+0x36>
 8002984:	e07e      	b.n	8002a84 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d007      	beq.n	800299c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_OscConfig+0x68>
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	429a      	cmp	r2, r3
 800299a:	d10d      	bne.n	80029b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4bbb      	ldr	r3, [pc, #748]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	029b      	lsls	r3, r3, #10
 80029a4:	4013      	ands	r3, r2
 80029a6:	d100      	bne.n	80029aa <HAL_RCC_OscConfig+0x5a>
 80029a8:	e06b      	b.n	8002a82 <HAL_RCC_OscConfig+0x132>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d167      	bne.n	8002a82 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f000 fb95 	bl	80030e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	025b      	lsls	r3, r3, #9
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_OscConfig+0x84>
 80029c4:	4bb1      	ldr	r3, [pc, #708]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4bb0      	ldr	r3, [pc, #704]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 80029ca:	2180      	movs	r1, #128	@ 0x80
 80029cc:	0249      	lsls	r1, r1, #9
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e027      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	23a0      	movs	r3, #160	@ 0xa0
 80029da:	02db      	lsls	r3, r3, #11
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10e      	bne.n	80029fe <HAL_RCC_OscConfig+0xae>
 80029e0:	4baa      	ldr	r3, [pc, #680]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4ba9      	ldr	r3, [pc, #676]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 80029e6:	2180      	movs	r1, #128	@ 0x80
 80029e8:	02c9      	lsls	r1, r1, #11
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	4ba7      	ldr	r3, [pc, #668]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4ba6      	ldr	r3, [pc, #664]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	0249      	lsls	r1, r1, #9
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e012      	b.n	8002a24 <HAL_RCC_OscConfig+0xd4>
 80029fe:	4ba3      	ldr	r3, [pc, #652]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4ba2      	ldr	r3, [pc, #648]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002a04:	49a2      	ldr	r1, [pc, #648]	@ (8002c90 <HAL_RCC_OscConfig+0x340>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	4ba0      	ldr	r3, [pc, #640]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	025b      	lsls	r3, r3, #9
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4b9c      	ldr	r3, [pc, #624]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b9b      	ldr	r3, [pc, #620]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002a1e:	499d      	ldr	r1, [pc, #628]	@ (8002c94 <HAL_RCC_OscConfig+0x344>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fd fec0 	bl	80007b0 <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a34:	e009      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a36:	f7fd febb 	bl	80007b0 <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b64      	cmp	r3, #100	@ 0x64
 8002a42:	d902      	bls.n	8002a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	f000 fb4c 	bl	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a4a:	4b90      	ldr	r3, [pc, #576]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	4013      	ands	r3, r2
 8002a54:	d0ef      	beq.n	8002a36 <HAL_RCC_OscConfig+0xe6>
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fd feaa 	bl	80007b0 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a62:	f7fd fea5 	bl	80007b0 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	@ 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e336      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a74:	4b85      	ldr	r3, [pc, #532]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	029b      	lsls	r3, r3, #10
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x112>
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d100      	bne.n	8002a90 <HAL_RCC_OscConfig+0x140>
 8002a8e:	e099      	b.n	8002bc4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002aa4:	2120      	movs	r1, #32
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	2220      	movs	r2, #32
 8002aae:	4393      	bics	r3, r2
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d13e      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1ec>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d13b      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002ac4:	4b71      	ldr	r3, [pc, #452]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4013      	ands	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x188>
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e304      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a6e      	ldr	r2, [pc, #440]	@ (8002c98 <HAL_RCC_OscConfig+0x348>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	021a      	lsls	r2, r3, #8
 8002ae8:	4b68      	ldr	r3, [pc, #416]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002aee:	4b67      	ldr	r3, [pc, #412]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2209      	movs	r2, #9
 8002af4:	4393      	bics	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	4b64      	ldr	r3, [pc, #400]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b00:	f000 fc42 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8002b04:	0001      	movs	r1, r0
 8002b06:	4b61      	ldr	r3, [pc, #388]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	4013      	ands	r3, r2
 8002b10:	4a62      	ldr	r2, [pc, #392]	@ (8002c9c <HAL_RCC_OscConfig+0x34c>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	000a      	movs	r2, r1
 8002b16:	40da      	lsrs	r2, r3
 8002b18:	4b61      	ldr	r3, [pc, #388]	@ (8002ca0 <HAL_RCC_OscConfig+0x350>)
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002b1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <HAL_RCC_OscConfig+0x354>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2513      	movs	r5, #19
 8002b22:	197c      	adds	r4, r7, r5
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7fd fdfd 	bl	8000724 <HAL_InitTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002b2e:	197b      	adds	r3, r7, r5
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d046      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002b36:	197b      	adds	r3, r7, r5
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	e2d2      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d027      	beq.n	8002b92 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b42:	4b52      	ldr	r3, [pc, #328]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2209      	movs	r2, #9
 8002b48:	4393      	bics	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fd fe2c 	bl	80007b0 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fd fe27 	bl	80007b0 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e2b8      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b70:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2204      	movs	r2, #4
 8002b76:	4013      	ands	r3, r2
 8002b78:	d0f1      	beq.n	8002b5e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b44      	ldr	r3, [pc, #272]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4a46      	ldr	r2, [pc, #280]	@ (8002c98 <HAL_RCC_OscConfig+0x348>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	021a      	lsls	r2, r3, #8
 8002b8a:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	e018      	b.n	8002bc4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002b98:	2101      	movs	r1, #1
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fd fe07 	bl	80007b0 <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7fd fe02 	bl	80007b0 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e293      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d1f1      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d100      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x280>
 8002bce:	e0a2      	b.n	8002d16 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d140      	bne.n	8002c58 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x29e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e279      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bee:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca8 <HAL_RCC_OscConfig+0x358>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bfc:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c02:	4b22      	ldr	r3, [pc, #136]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	0a19      	lsrs	r1, r3, #8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	061a      	lsls	r2, r3, #24
 8002c10:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	0b5b      	lsrs	r3, r3, #13
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	2280      	movs	r2, #128	@ 0x80
 8002c20:	0212      	lsls	r2, r2, #8
 8002c22:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c24:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	400b      	ands	r3, r1
 8002c2e:	491b      	ldr	r1, [pc, #108]	@ (8002c9c <HAL_RCC_OscConfig+0x34c>)
 8002c30:	5ccb      	ldrb	r3, [r1, r3]
 8002c32:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca0 <HAL_RCC_OscConfig+0x350>)
 8002c36:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCC_OscConfig+0x354>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2513      	movs	r5, #19
 8002c3e:	197c      	adds	r4, r7, r5
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fd fd6f 	bl	8000724 <HAL_InitTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002c4a:	197b      	adds	r3, r7, r5
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d061      	beq.n	8002d16 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002c52:	197b      	adds	r3, r7, r5
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	e244      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d040      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c60:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_OscConfig+0x33c>)
 8002c66:	2180      	movs	r1, #128	@ 0x80
 8002c68:	0049      	lsls	r1, r1, #1
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fd fd9f 	bl	80007b0 <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c76:	e019      	b.n	8002cac <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c78:	f7fd fd9a 	bl	80007b0 <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d912      	bls.n	8002cac <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e22b      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	fffeffff 	.word	0xfffeffff
 8002c94:	fffbffff 	.word	0xfffbffff
 8002c98:	ffffe0ff 	.word	0xffffe0ff
 8002c9c:	08007fe4 	.word	0x08007fe4
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000004 	.word	0x20000004
 8002ca8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cac:	4bca      	ldr	r3, [pc, #808]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d0df      	beq.n	8002c78 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb8:	4bc7      	ldr	r3, [pc, #796]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4ac7      	ldr	r2, [pc, #796]	@ (8002fdc <HAL_RCC_OscConfig+0x68c>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc6:	4bc4      	ldr	r3, [pc, #784]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ccc:	4bc2      	ldr	r3, [pc, #776]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	0a19      	lsrs	r1, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	061a      	lsls	r2, r3, #24
 8002cda:	4bbf      	ldr	r3, [pc, #764]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	e019      	b.n	8002d16 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ce2:	4bbd      	ldr	r3, [pc, #756]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4bbc      	ldr	r3, [pc, #752]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002ce8:	49bd      	ldr	r1, [pc, #756]	@ (8002fe0 <HAL_RCC_OscConfig+0x690>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fd fd5f 	bl	80007b0 <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf8:	f7fd fd5a 	bl	80007b0 <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1eb      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d0a:	4bb3      	ldr	r3, [pc, #716]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4013      	ands	r3, r2
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d036      	beq.n	8002d8e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d019      	beq.n	8002d5c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d28:	4bab      	ldr	r3, [pc, #684]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002d2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d2c:	4baa      	ldr	r3, [pc, #680]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	430a      	orrs	r2, r1
 8002d32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d34:	f7fd fd3c 	bl	80007b0 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3e:	f7fd fd37 	bl	80007b0 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1c8      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d50:	4ba1      	ldr	r3, [pc, #644]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d54:	2202      	movs	r2, #2
 8002d56:	4013      	ands	r3, r2
 8002d58:	d0f1      	beq.n	8002d3e <HAL_RCC_OscConfig+0x3ee>
 8002d5a:	e018      	b.n	8002d8e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002d5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d60:	4b9d      	ldr	r3, [pc, #628]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002d62:	2101      	movs	r1, #1
 8002d64:	438a      	bics	r2, r1
 8002d66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fd fd22 	bl	80007b0 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fd fd1d 	bl	80007b0 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1ae      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d84:	4b94      	ldr	r3, [pc, #592]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d88:	2202      	movs	r2, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d1f1      	bne.n	8002d72 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2204      	movs	r2, #4
 8002d94:	4013      	ands	r3, r2
 8002d96:	d100      	bne.n	8002d9a <HAL_RCC_OscConfig+0x44a>
 8002d98:	e0ae      	b.n	8002ef8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2023      	movs	r0, #35	@ 0x23
 8002d9c:	183b      	adds	r3, r7, r0
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da2:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	055b      	lsls	r3, r3, #21
 8002daa:	4013      	ands	r3, r2
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	4b8a      	ldr	r3, [pc, #552]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db2:	4b89      	ldr	r3, [pc, #548]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002db4:	2180      	movs	r1, #128	@ 0x80
 8002db6:	0549      	lsls	r1, r1, #21
 8002db8:	430a      	orrs	r2, r1
 8002dba:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_RCC_OscConfig+0x694>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d11a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b85      	ldr	r3, [pc, #532]	@ (8002fe4 <HAL_RCC_OscConfig+0x694>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b84      	ldr	r3, [pc, #528]	@ (8002fe4 <HAL_RCC_OscConfig+0x694>)
 8002dd4:	2180      	movs	r1, #128	@ 0x80
 8002dd6:	0049      	lsls	r1, r1, #1
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ddc:	f7fd fce8 	bl	80007b0 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fd fce3 	bl	80007b0 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	@ 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e174      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b7a      	ldr	r3, [pc, #488]	@ (8002fe4 <HAL_RCC_OscConfig+0x694>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4013      	ands	r3, r2
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	2380      	movs	r3, #128	@ 0x80
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4d0>
 8002e10:	4b71      	ldr	r3, [pc, #452]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e14:	4b70      	ldr	r3, [pc, #448]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e16:	2180      	movs	r1, #128	@ 0x80
 8002e18:	0049      	lsls	r1, r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e1e:	e031      	b.n	8002e84 <HAL_RCC_OscConfig+0x534>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x4f2>
 8002e28:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e2e:	496c      	ldr	r1, [pc, #432]	@ (8002fe0 <HAL_RCC_OscConfig+0x690>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e34:	4b68      	ldr	r3, [pc, #416]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e38:	4b67      	ldr	r3, [pc, #412]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e3a:	496b      	ldr	r1, [pc, #428]	@ (8002fe8 <HAL_RCC_OscConfig+0x698>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e40:	e020      	b.n	8002e84 <HAL_RCC_OscConfig+0x534>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	23a0      	movs	r3, #160	@ 0xa0
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d10e      	bne.n	8002e6c <HAL_RCC_OscConfig+0x51c>
 8002e4e:	4b62      	ldr	r3, [pc, #392]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e52:	4b61      	ldr	r3, [pc, #388]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e54:	2180      	movs	r1, #128	@ 0x80
 8002e56:	00c9      	lsls	r1, r1, #3
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e60:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	0049      	lsls	r1, r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0x534>
 8002e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e70:	4b59      	ldr	r3, [pc, #356]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e72:	495b      	ldr	r1, [pc, #364]	@ (8002fe0 <HAL_RCC_OscConfig+0x690>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e78:	4b57      	ldr	r3, [pc, #348]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e7c:	4b56      	ldr	r3, [pc, #344]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002e7e:	495a      	ldr	r1, [pc, #360]	@ (8002fe8 <HAL_RCC_OscConfig+0x698>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8c:	f7fd fc90 	bl	80007b0 <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e94:	e009      	b.n	8002eaa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fd fc8b 	bl	80007b0 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	4a52      	ldr	r2, [pc, #328]	@ (8002fec <HAL_RCC_OscConfig+0x69c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e11b      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002eac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d0ef      	beq.n	8002e96 <HAL_RCC_OscConfig+0x546>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fd fc7a 	bl	80007b0 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ec0:	e009      	b.n	8002ed6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fd fc75 	bl	80007b0 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	4a47      	ldr	r2, [pc, #284]	@ (8002fec <HAL_RCC_OscConfig+0x69c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e105      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed6:	4b40      	ldr	r3, [pc, #256]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002ed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d1ef      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee2:	2323      	movs	r3, #35	@ 0x23
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef0:	4b39      	ldr	r3, [pc, #228]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002ef2:	493f      	ldr	r1, [pc, #252]	@ (8002ff0 <HAL_RCC_OscConfig+0x6a0>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2220      	movs	r2, #32
 8002efe:	4013      	ands	r3, r2
 8002f00:	d049      	beq.n	8002f96 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d026      	beq.n	8002f58 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f0a:	4b33      	ldr	r3, [pc, #204]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	4b32      	ldr	r3, [pc, #200]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	4b30      	ldr	r3, [pc, #192]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f22:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <HAL_RCC_OscConfig+0x6a4>)
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	4b33      	ldr	r3, [pc, #204]	@ (8002ff4 <HAL_RCC_OscConfig+0x6a4>)
 8002f28:	2180      	movs	r1, #128	@ 0x80
 8002f2a:	0189      	lsls	r1, r1, #6
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fd fc3e 	bl	80007b0 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f3a:	f7fd fc39 	bl	80007b0 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0ca      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f4c:	4b22      	ldr	r3, [pc, #136]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2202      	movs	r2, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d0f1      	beq.n	8002f3a <HAL_RCC_OscConfig+0x5ea>
 8002f56:	e01e      	b.n	8002f96 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f58:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	4b23      	ldr	r3, [pc, #140]	@ (8002ff4 <HAL_RCC_OscConfig+0x6a4>)
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <HAL_RCC_OscConfig+0x6a4>)
 8002f6a:	4923      	ldr	r1, [pc, #140]	@ (8002ff8 <HAL_RCC_OscConfig+0x6a8>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fd fc1e 	bl	80007b0 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7a:	f7fd fc19 	bl	80007b0 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0aa      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f8c:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d1f1      	bne.n	8002f7a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d100      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x650>
 8002f9e:	e09f      	b.n	80030e0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d100      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x658>
 8002fa6:	e078      	b.n	800309a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d159      	bne.n	8003064 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_RCC_OscConfig+0x688>)
 8002fb6:	4911      	ldr	r1, [pc, #68]	@ (8002ffc <HAL_RCC_OscConfig+0x6ac>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fd fbf8 	bl	80007b0 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fc4:	e01c      	b.n	8003000 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fd fbf3 	bl	80007b0 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d915      	bls.n	8003000 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e084      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	ffff1fff 	.word	0xffff1fff
 8002fe0:	fffffeff 	.word	0xfffffeff
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	fffffbff 	.word	0xfffffbff
 8002fec:	00001388 	.word	0x00001388
 8002ff0:	efffffff 	.word	0xefffffff
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	ffffdfff 	.word	0xffffdfff
 8002ffc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003000:	4b3a      	ldr	r3, [pc, #232]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	049b      	lsls	r3, r3, #18
 8003008:	4013      	ands	r3, r2
 800300a:	d1dc      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300c:	4b37      	ldr	r3, [pc, #220]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a37      	ldr	r2, [pc, #220]	@ (80030f0 <HAL_RCC_OscConfig+0x7a0>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003024:	431a      	orrs	r2, r3
 8003026:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 8003028:	430a      	orrs	r2, r1
 800302a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b2f      	ldr	r3, [pc, #188]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	0449      	lsls	r1, r1, #17
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fd fbb9 	bl	80007b0 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fd fbb4 	bl	80007b0 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e045      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	049b      	lsls	r3, r3, #18
 800305e:	4013      	ands	r3, r2
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x6f4>
 8003062:	e03d      	b.n	80030e0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b21      	ldr	r3, [pc, #132]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 800306a:	4922      	ldr	r1, [pc, #136]	@ (80030f4 <HAL_RCC_OscConfig+0x7a4>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fd fb9e 	bl	80007b0 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fd fb99 	bl	80007b0 <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e02a      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800308c:	4b17      	ldr	r3, [pc, #92]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	049b      	lsls	r3, r3, #18
 8003094:	4013      	ands	r3, r2
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x72a>
 8003098:	e022      	b.n	80030e0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e01d      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_RCC_OscConfig+0x79c>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	025b      	lsls	r3, r3, #9
 80030b2:	401a      	ands	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d10f      	bne.n	80030dc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	23f0      	movs	r3, #240	@ 0xf0
 80030c0:	039b      	lsls	r3, r3, #14
 80030c2:	401a      	ands	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	23c0      	movs	r3, #192	@ 0xc0
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	401a      	ands	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b00a      	add	sp, #40	@ 0x28
 80030e8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	40021000 	.word	0x40021000
 80030f0:	ff02ffff 	.word	0xff02ffff
 80030f4:	feffffff 	.word	0xfeffffff

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e128      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b96      	ldr	r3, [pc, #600]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2201      	movs	r2, #1
 8003112:	4013      	ands	r3, r2
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d91e      	bls.n	8003158 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b93      	ldr	r3, [pc, #588]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	4393      	bics	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	4b90      	ldr	r3, [pc, #576]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800312c:	f7fd fb40 	bl	80007b0 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003134:	e009      	b.n	800314a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003136:	f7fd fb3b 	bl	80007b0 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	4a8a      	ldr	r2, [pc, #552]	@ (800336c <HAL_RCC_ClockConfig+0x274>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e109      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d1ee      	bne.n	8003136 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2202      	movs	r2, #2
 800315e:	4013      	ands	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003162:	4b83      	ldr	r3, [pc, #524]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	22f0      	movs	r2, #240	@ 0xf0
 8003168:	4393      	bics	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	4b7f      	ldr	r3, [pc, #508]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 8003172:	430a      	orrs	r2, r1
 8003174:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	4013      	ands	r3, r2
 800317e:	d100      	bne.n	8003182 <HAL_RCC_ClockConfig+0x8a>
 8003180:	e089      	b.n	8003296 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800318a:	4b79      	ldr	r3, [pc, #484]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	029b      	lsls	r3, r3, #10
 8003192:	4013      	ands	r3, r2
 8003194:	d120      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0e1      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a2:	4b73      	ldr	r3, [pc, #460]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	049b      	lsls	r3, r3, #18
 80031aa:	4013      	ands	r3, r2
 80031ac:	d114      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0d5      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2204      	movs	r2, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	d109      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0ca      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031c8:	4b69      	ldr	r3, [pc, #420]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2380      	movs	r3, #128	@ 0x80
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0c2      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d8:	4b65      	ldr	r3, [pc, #404]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2203      	movs	r2, #3
 80031de:	4393      	bics	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4b62      	ldr	r3, [pc, #392]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7fd fae0 	bl	80007b0 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d111      	bne.n	8003220 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	e009      	b.n	8003212 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fe:	f7fd fad7 	bl	80007b0 <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	4a58      	ldr	r2, [pc, #352]	@ (800336c <HAL_RCC_ClockConfig+0x274>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0a5      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003212:	4b57      	ldr	r3, [pc, #348]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	220c      	movs	r2, #12
 8003218:	4013      	ands	r3, r2
 800321a:	2b08      	cmp	r3, #8
 800321c:	d1ef      	bne.n	80031fe <HAL_RCC_ClockConfig+0x106>
 800321e:	e03a      	b.n	8003296 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d111      	bne.n	800324c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003228:	e009      	b.n	800323e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322a:	f7fd fac1 	bl	80007b0 <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	4a4d      	ldr	r2, [pc, #308]	@ (800336c <HAL_RCC_ClockConfig+0x274>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e08f      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800323e:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	220c      	movs	r2, #12
 8003244:	4013      	ands	r3, r2
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_ClockConfig+0x132>
 800324a:	e024      	b.n	8003296 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d11b      	bne.n	800328c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003254:	e009      	b.n	800326a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003256:	f7fd faab 	bl	80007b0 <HAL_GetTick>
 800325a:	0002      	movs	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	4a42      	ldr	r2, [pc, #264]	@ (800336c <HAL_RCC_ClockConfig+0x274>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e079      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800326a:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	220c      	movs	r2, #12
 8003270:	4013      	ands	r3, r2
 8003272:	2b04      	cmp	r3, #4
 8003274:	d1ef      	bne.n	8003256 <HAL_RCC_ClockConfig+0x15e>
 8003276:	e00e      	b.n	8003296 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7fd fa9a 	bl	80007b0 <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	4a3a      	ldr	r2, [pc, #232]	@ (800336c <HAL_RCC_ClockConfig+0x274>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e068      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800328c:	4b38      	ldr	r3, [pc, #224]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	220c      	movs	r2, #12
 8003292:	4013      	ands	r3, r2
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003296:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	4013      	ands	r3, r2
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d21e      	bcs.n	80032e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a4:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2201      	movs	r2, #1
 80032aa:	4393      	bics	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032b6:	f7fd fa7b 	bl	80007b0 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	e009      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fd fa76 	bl	80007b0 <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	4a28      	ldr	r2, [pc, #160]	@ (800336c <HAL_RCC_ClockConfig+0x274>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e044      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d4:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_RCC_ClockConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2201      	movs	r2, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d1ee      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2204      	movs	r2, #4
 80032e8:	4013      	ands	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a20      	ldr	r2, [pc, #128]	@ (8003374 <HAL_RCC_ClockConfig+0x27c>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	0019      	movs	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	4013      	ands	r3, r2
 8003308:	d00a      	beq.n	8003320 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800330a:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_RCC_ClockConfig+0x280>)
 8003310:	4013      	ands	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	00da      	lsls	r2, r3, #3
 800331a:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 800331c:	430a      	orrs	r2, r1
 800331e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003320:	f000 f832 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003324:	0001      	movs	r1, r0
 8003326:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <HAL_RCC_ClockConfig+0x278>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	220f      	movs	r2, #15
 800332e:	4013      	ands	r3, r2
 8003330:	4a12      	ldr	r2, [pc, #72]	@ (800337c <HAL_RCC_ClockConfig+0x284>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	000a      	movs	r2, r1
 8003336:	40da      	lsrs	r2, r3
 8003338:	4b11      	ldr	r3, [pc, #68]	@ (8003380 <HAL_RCC_ClockConfig+0x288>)
 800333a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_RCC_ClockConfig+0x28c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	250b      	movs	r5, #11
 8003342:	197c      	adds	r4, r7, r5
 8003344:	0018      	movs	r0, r3
 8003346:	f7fd f9ed 	bl	8000724 <HAL_InitTick>
 800334a:	0003      	movs	r3, r0
 800334c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800334e:	197b      	adds	r3, r7, r5
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003356:	197b      	adds	r3, r7, r5
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	e000      	b.n	800335e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b004      	add	sp, #16
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	40022000 	.word	0x40022000
 800336c:	00001388 	.word	0x00001388
 8003370:	40021000 	.word	0x40021000
 8003374:	fffff8ff 	.word	0xfffff8ff
 8003378:	ffffc7ff 	.word	0xffffc7ff
 800337c:	08007fe4 	.word	0x08007fe4
 8003380:	20000000 	.word	0x20000000
 8003384:	20000004 	.word	0x20000004

08003388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800338e:	4b3c      	ldr	r3, [pc, #240]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	220c      	movs	r2, #12
 8003398:	4013      	ands	r3, r2
 800339a:	2b0c      	cmp	r3, #12
 800339c:	d013      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x3e>
 800339e:	d85c      	bhi.n	800345a <HAL_RCC_GetSysClockFreq+0xd2>
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d002      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x22>
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d00b      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x38>
 80033a8:	e057      	b.n	800345a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80033aa:	4b35      	ldr	r3, [pc, #212]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2210      	movs	r2, #16
 80033b0:	4013      	ands	r3, r2
 80033b2:	d002      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80033b4:	4b33      	ldr	r3, [pc, #204]	@ (8003484 <HAL_RCC_GetSysClockFreq+0xfc>)
 80033b6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80033b8:	e05d      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80033ba:	4b33      	ldr	r3, [pc, #204]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x100>)
 80033bc:	613b      	str	r3, [r7, #16]
      break;
 80033be:	e05a      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c0:	4b31      	ldr	r3, [pc, #196]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x100>)
 80033c2:	613b      	str	r3, [r7, #16]
      break;
 80033c4:	e057      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	0c9b      	lsrs	r3, r3, #18
 80033ca:	220f      	movs	r2, #15
 80033cc:	4013      	ands	r3, r2
 80033ce:	4a2f      	ldr	r2, [pc, #188]	@ (800348c <HAL_RCC_GetSysClockFreq+0x104>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	0d9b      	lsrs	r3, r3, #22
 80033d8:	2203      	movs	r2, #3
 80033da:	4013      	ands	r3, r2
 80033dc:	3301      	adds	r3, #1
 80033de:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e0:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	2380      	movs	r3, #128	@ 0x80
 80033e6:	025b      	lsls	r3, r3, #9
 80033e8:	4013      	ands	r3, r2
 80033ea:	d00f      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	000a      	movs	r2, r1
 80033f0:	0152      	lsls	r2, r2, #5
 80033f2:	1a52      	subs	r2, r2, r1
 80033f4:	0193      	lsls	r3, r2, #6
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	185b      	adds	r3, r3, r1
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f7fc fe81 	bl	8000108 <__udivsi3>
 8003406:	0003      	movs	r3, r0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	e023      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800340c:	4b1c      	ldr	r3, [pc, #112]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	4013      	ands	r3, r2
 8003414:	d00f      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	000a      	movs	r2, r1
 800341a:	0152      	lsls	r2, r2, #5
 800341c:	1a52      	subs	r2, r2, r1
 800341e:	0193      	lsls	r3, r2, #6
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	185b      	adds	r3, r3, r1
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	0018      	movs	r0, r3
 800342c:	f7fc fe6c 	bl	8000108 <__udivsi3>
 8003430:	0003      	movs	r3, r0
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e00e      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	000a      	movs	r2, r1
 800343a:	0152      	lsls	r2, r2, #5
 800343c:	1a52      	subs	r2, r2, r1
 800343e:	0193      	lsls	r3, r2, #6
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	185b      	adds	r3, r3, r1
 8003446:	029b      	lsls	r3, r3, #10
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f7fc fe5c 	bl	8000108 <__udivsi3>
 8003450:	0003      	movs	r3, r0
 8003452:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	613b      	str	r3, [r7, #16]
      break;
 8003458:	e00d      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800345a:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0b5b      	lsrs	r3, r3, #13
 8003460:	2207      	movs	r2, #7
 8003462:	4013      	ands	r3, r2
 8003464:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	2280      	movs	r2, #128	@ 0x80
 800346c:	0212      	lsls	r2, r2, #8
 800346e:	409a      	lsls	r2, r3
 8003470:	0013      	movs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
      break;
 8003474:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003476:	693b      	ldr	r3, [r7, #16]
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b006      	add	sp, #24
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	003d0900 	.word	0x003d0900
 8003488:	00f42400 	.word	0x00f42400
 800348c:	08007ff4 	.word	0x08007ff4

08003490 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003498:	2017      	movs	r0, #23
 800349a:	183b      	adds	r3, r7, r0
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2220      	movs	r2, #32
 80034a6:	4013      	ands	r3, r2
 80034a8:	d100      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80034aa:	e0c7      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ac:	4b9b      	ldr	r3, [pc, #620]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	055b      	lsls	r3, r3, #21
 80034b4:	4013      	ands	r3, r2
 80034b6:	d109      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b98      	ldr	r3, [pc, #608]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034bc:	4b97      	ldr	r3, [pc, #604]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034be:	2180      	movs	r1, #128	@ 0x80
 80034c0:	0549      	lsls	r1, r1, #21
 80034c2:	430a      	orrs	r2, r1
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80034c6:	183b      	adds	r3, r7, r0
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b94      	ldr	r3, [pc, #592]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	2380      	movs	r3, #128	@ 0x80
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d11a      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d8:	4b91      	ldr	r3, [pc, #580]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b90      	ldr	r3, [pc, #576]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	0049      	lsls	r1, r1, #1
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fd f963 	bl	80007b0 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	e008      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f0:	f7fd f95e 	bl	80007b0 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e107      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b87      	ldr	r3, [pc, #540]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2380      	movs	r3, #128	@ 0x80
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4013      	ands	r3, r2
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800350e:	4b83      	ldr	r3, [pc, #524]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	23c0      	movs	r3, #192	@ 0xc0
 8003514:	039b      	lsls	r3, r3, #14
 8003516:	4013      	ands	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	23c0      	movs	r3, #192	@ 0xc0
 8003520:	039b      	lsls	r3, r3, #14
 8003522:	4013      	ands	r3, r2
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	429a      	cmp	r2, r3
 8003528:	d013      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	23c0      	movs	r3, #192	@ 0xc0
 8003530:	029b      	lsls	r3, r3, #10
 8003532:	401a      	ands	r2, r3
 8003534:	23c0      	movs	r3, #192	@ 0xc0
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	429a      	cmp	r2, r3
 800353a:	d10a      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800353c:	4b77      	ldr	r3, [pc, #476]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	029b      	lsls	r3, r3, #10
 8003544:	401a      	ands	r2, r3
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	029b      	lsls	r3, r3, #10
 800354a:	429a      	cmp	r2, r3
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0df      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003552:	4b72      	ldr	r3, [pc, #456]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003556:	23c0      	movs	r3, #192	@ 0xc0
 8003558:	029b      	lsls	r3, r3, #10
 800355a:	4013      	ands	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d03b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	23c0      	movs	r3, #192	@ 0xc0
 800356a:	029b      	lsls	r3, r3, #10
 800356c:	4013      	ands	r3, r2
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d033      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2220      	movs	r2, #32
 800357a:	4013      	ands	r3, r2
 800357c:	d02e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800357e:	4b67      	ldr	r3, [pc, #412]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003582:	4a68      	ldr	r2, [pc, #416]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003588:	4b64      	ldr	r3, [pc, #400]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800358a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800358c:	4b63      	ldr	r3, [pc, #396]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800358e:	2180      	movs	r1, #128	@ 0x80
 8003590:	0309      	lsls	r1, r1, #12
 8003592:	430a      	orrs	r2, r1
 8003594:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003596:	4b61      	ldr	r3, [pc, #388]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003598:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800359a:	4b60      	ldr	r3, [pc, #384]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800359c:	4962      	ldr	r1, [pc, #392]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800359e:	400a      	ands	r2, r1
 80035a0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80035a2:	4b5e      	ldr	r3, [pc, #376]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	d014      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fd f8fd 	bl	80007b0 <HAL_GetTick>
 80035b6:	0003      	movs	r3, r0
 80035b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ba:	e009      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fd f8f8 	bl	80007b0 <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	4a59      	ldr	r2, [pc, #356]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0a0      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035d0:	4b52      	ldr	r3, [pc, #328]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4013      	ands	r3, r2
 80035da:	d0ef      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2220      	movs	r2, #32
 80035e2:	4013      	ands	r3, r2
 80035e4:	d01f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	23c0      	movs	r3, #192	@ 0xc0
 80035ec:	029b      	lsls	r3, r3, #10
 80035ee:	401a      	ands	r2, r3
 80035f0:	23c0      	movs	r3, #192	@ 0xc0
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d10c      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80035f8:	4b48      	ldr	r3, [pc, #288]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003730 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	23c0      	movs	r3, #192	@ 0xc0
 8003608:	039b      	lsls	r3, r3, #14
 800360a:	401a      	ands	r2, r3
 800360c:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	4b42      	ldr	r3, [pc, #264]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003614:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	23c0      	movs	r3, #192	@ 0xc0
 800361c:	029b      	lsls	r3, r3, #10
 800361e:	401a      	ands	r2, r3
 8003620:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003622:	430a      	orrs	r2, r1
 8003624:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003626:	2317      	movs	r3, #23
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4b3a      	ldr	r3, [pc, #232]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003634:	4b39      	ldr	r3, [pc, #228]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003636:	493f      	ldr	r1, [pc, #252]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003638:	400a      	ands	r2, r1
 800363a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2201      	movs	r2, #1
 8003642:	4013      	ands	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003646:	4b35      	ldr	r3, [pc, #212]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	2203      	movs	r2, #3
 800364c:	4393      	bics	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	4b31      	ldr	r3, [pc, #196]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003656:	430a      	orrs	r2, r1
 8003658:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2202      	movs	r2, #2
 8003660:	4013      	ands	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003664:	4b2d      	ldr	r3, [pc, #180]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003668:	220c      	movs	r2, #12
 800366a:	4393      	bics	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003674:	430a      	orrs	r2, r1
 8003676:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003682:	4b26      	ldr	r3, [pc, #152]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003686:	4a2c      	ldr	r2, [pc, #176]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	4b22      	ldr	r3, [pc, #136]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003692:	430a      	orrs	r2, r1
 8003694:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2208      	movs	r2, #8
 800369c:	4013      	ands	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a0:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a4:	4a25      	ldr	r2, [pc, #148]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4013      	ands	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	4a17      	ldr	r2, [pc, #92]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	4b13      	ldr	r3, [pc, #76]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036d0:	430a      	orrs	r2, r1
 80036d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2240      	movs	r2, #64	@ 0x40
 80036da:	4013      	ands	r3, r2
 80036dc:	d009      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036de:	4b0f      	ldr	r3, [pc, #60]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036ee:	430a      	orrs	r2, r1
 80036f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2280      	movs	r2, #128	@ 0x80
 80036f8:	4013      	ands	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80036fc:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003700:	4a10      	ldr	r2, [pc, #64]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003702:	4013      	ands	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	4b04      	ldr	r3, [pc, #16]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800370c:	430a      	orrs	r2, r1
 800370e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b006      	add	sp, #24
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	fffcffff 	.word	0xfffcffff
 8003728:	fff7ffff 	.word	0xfff7ffff
 800372c:	00001388 	.word	0x00001388
 8003730:	ffcfffff 	.word	0xffcfffff
 8003734:	efffffff 	.word	0xefffffff
 8003738:	fffff3ff 	.word	0xfffff3ff
 800373c:	ffffcfff 	.word	0xffffcfff
 8003740:	fbffffff 	.word	0xfbffffff
 8003744:	fff3ffff 	.word	0xfff3ffff

08003748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e083      	b.n	8003862 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	2382      	movs	r3, #130	@ 0x82
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	429a      	cmp	r2, r3
 800376c:	d009      	beq.n	8003782 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	61da      	str	r2, [r3, #28]
 8003774:	e005      	b.n	8003782 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2251      	movs	r2, #81	@ 0x51
 800378c:	5c9b      	ldrb	r3, [r3, r2]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2250      	movs	r2, #80	@ 0x50
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fc ff06 	bl	80005b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2251      	movs	r2, #81	@ 0x51
 80037a8:	2102      	movs	r1, #2
 80037aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2140      	movs	r1, #64	@ 0x40
 80037b8:	438a      	bics	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	2382      	movs	r3, #130	@ 0x82
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	2384      	movs	r3, #132	@ 0x84
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	400b      	ands	r3, r1
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68d9      	ldr	r1, [r3, #12]
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	400b      	ands	r3, r1
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2102      	movs	r1, #2
 80037e4:	400b      	ands	r3, r1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2101      	movs	r1, #1
 80037ee:	400b      	ands	r3, r1
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	2380      	movs	r3, #128	@ 0x80
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	400b      	ands	r3, r1
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	2138      	movs	r1, #56	@ 0x38
 8003804:	400b      	ands	r3, r1
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	400b      	ands	r3, r1
 8003810:	431a      	orrs	r2, r3
 8003812:	0011      	movs	r1, r2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	019b      	lsls	r3, r3, #6
 800381c:	401a      	ands	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	0c1b      	lsrs	r3, r3, #16
 800382c:	2204      	movs	r2, #4
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	2210      	movs	r2, #16
 8003838:	401a      	ands	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4907      	ldr	r1, [pc, #28]	@ (800386c <HAL_SPI_Init+0x124>)
 800384e:	400a      	ands	r2, r1
 8003850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2251      	movs	r2, #81	@ 0x51
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b002      	add	sp, #8
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	fffff7ff 	.word	0xfffff7ff

08003870 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	@ 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	001a      	movs	r2, r3
 800387e:	1cbb      	adds	r3, r7, #2
 8003880:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003882:	2301      	movs	r3, #1
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003886:	f7fc ff93 	bl	80007b0 <HAL_GetTick>
 800388a:	0003      	movs	r3, r0
 800388c:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800388e:	201f      	movs	r0, #31
 8003890:	183b      	adds	r3, r7, r0
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	2151      	movs	r1, #81	@ 0x51
 8003896:	5c52      	ldrb	r2, [r2, r1]
 8003898:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038a0:	2316      	movs	r3, #22
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	1cba      	adds	r2, r7, #2
 80038a6:	8812      	ldrh	r2, [r2, #0]
 80038a8:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038aa:	183b      	adds	r3, r7, r0
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d00e      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x60>
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	2382      	movs	r3, #130	@ 0x82
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d107      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d103      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x5c>
 80038c4:	183b      	adds	r3, r7, r0
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d001      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
 80038ce:	e18a      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x376>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x74>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x74>
 80038dc:	1cbb      	adds	r3, r7, #2
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_SPI_TransmitReceive+0x78>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e17e      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x376>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2250      	movs	r2, #80	@ 0x50
 80038ec:	5c9b      	ldrb	r3, [r3, r2]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x86>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e177      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x376>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2250      	movs	r2, #80	@ 0x50
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2251      	movs	r2, #81	@ 0x51
 8003902:	5c9b      	ldrb	r3, [r3, r2]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b04      	cmp	r3, #4
 8003908:	d003      	beq.n	8003912 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2251      	movs	r2, #81	@ 0x51
 800390e:	2105      	movs	r1, #5
 8003910:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1cba      	adds	r2, r7, #2
 8003922:	8812      	ldrh	r2, [r2, #0]
 8003924:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1cba      	adds	r2, r7, #2
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1cba      	adds	r2, r7, #2
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1cba      	adds	r2, r7, #2
 8003940:	8812      	ldrh	r2, [r2, #0]
 8003942:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2240      	movs	r2, #64	@ 0x40
 8003958:	4013      	ands	r3, r2
 800395a:	2b40      	cmp	r3, #64	@ 0x40
 800395c:	d007      	beq.n	800396e <HAL_SPI_TransmitReceive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2140      	movs	r1, #64	@ 0x40
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	2380      	movs	r3, #128	@ 0x80
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	429a      	cmp	r2, r3
 8003978:	d000      	beq.n	800397c <HAL_SPI_TransmitReceive+0x10c>
 800397a:	e080      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x20e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x120>
 8003984:	2316      	movs	r3, #22
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d000      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x120>
 800398e:	e06b      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x1f8>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039b4:	e058      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x1f8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2202      	movs	r2, #2
 80039be:	4013      	ands	r3, r2
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d11b      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x18c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x18c>
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d113      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x18c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	881a      	ldrh	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d119      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x1ce>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d014      	beq.n	8003a3e <HAL_SPI_TransmitReceive+0x1ce>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a26:	1c9a      	adds	r2, r3, #2
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a3e:	f7fc feb7 	bl	80007b0 <HAL_GetTick>
 8003a42:	0002      	movs	r2, r0
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d80c      	bhi.n	8003a68 <HAL_SPI_TransmitReceive+0x1f8>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a50:	3301      	adds	r3, #1
 8003a52:	d009      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x1f8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2251      	movs	r2, #81	@ 0x51
 8003a58:	2101      	movs	r1, #1
 8003a5a:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2250      	movs	r2, #80	@ 0x50
 8003a60:	2100      	movs	r1, #0
 8003a62:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0be      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1a1      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x146>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d19c      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x146>
 8003a7c:	e084      	b.n	8003b88 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x222>
 8003a86:	2316      	movs	r3, #22
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d000      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x222>
 8003a90:	e070      	b.n	8003b74 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab8:	e05c      	b.n	8003b74 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d11c      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x292>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d017      	beq.n	8003b02 <HAL_SPI_TransmitReceive+0x292>
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d114      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x292>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d119      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x2d4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d014      	beq.n	8003b44 <HAL_SPI_TransmitReceive+0x2d4>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b40:	2301      	movs	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b44:	f7fc fe34 	bl	80007b0 <HAL_GetTick>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d802      	bhi.n	8003b5a <HAL_SPI_TransmitReceive+0x2ea>
 8003b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b56:	3301      	adds	r3, #1
 8003b58:	d102      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x2f0>
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x304>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2251      	movs	r2, #81	@ 0x51
 8003b64:	2101      	movs	r1, #1
 8003b66:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2250      	movs	r2, #80	@ 0x50
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e038      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d19d      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x24a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d198      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x24a>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f8bc 	bl	8003d0c <SPI_EndRxTxTransaction>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d008      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x33a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2250      	movs	r2, #80	@ 0x50
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e01d      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x376>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2251      	movs	r2, #81	@ 0x51
 8003bcc:	2101      	movs	r1, #1
 8003bce:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2250      	movs	r2, #80	@ 0x50
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x374>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_SPI_TransmitReceive+0x376>
  }
  else
  {
    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
  }
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b00a      	add	sp, #40	@ 0x28
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c00:	f7fc fdd6 	bl	80007b0 <HAL_GetTick>
 8003c04:	0002      	movs	r2, r0
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	18d3      	adds	r3, r2, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c10:	f7fc fdce 	bl	80007b0 <HAL_GetTick>
 8003c14:	0003      	movs	r3, r0
 8003c16:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c18:	4b3a      	ldr	r3, [pc, #232]	@ (8003d04 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	015b      	lsls	r3, r3, #5
 8003c1e:	0d1b      	lsrs	r3, r3, #20
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	4353      	muls	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c26:	e059      	b.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	d056      	beq.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c2e:	f7fc fdbf 	bl	80007b0 <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d902      	bls.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d142      	bne.n	8003cca <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	21e0      	movs	r1, #224	@ 0xe0
 8003c50:	438a      	bics	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	2382      	movs	r3, #130	@ 0x82
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d113      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d005      	beq.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	2380      	movs	r3, #128	@ 0x80
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d107      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2140      	movs	r1, #64	@ 0x40
 8003c84:	438a      	bics	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	019b      	lsls	r3, r3, #6
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d110      	bne.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	491a      	ldr	r1, [pc, #104]	@ (8003d08 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2180      	movs	r1, #128	@ 0x80
 8003cb0:	0189      	lsls	r1, r1, #6
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2251      	movs	r2, #81	@ 0x51
 8003cba:	2101      	movs	r1, #1
 8003cbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2250      	movs	r2, #80	@ 0x50
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e018      	b.n	8003cfc <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	e002      	b.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	425a      	negs	r2, r3
 8003cec:	4153      	adcs	r3, r2
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	1dfb      	adds	r3, r7, #7
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d196      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b008      	add	sp, #32
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000000 	.word	0x20000000
 8003d08:	ffffdfff 	.word	0xffffdfff

08003d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	0013      	movs	r3, r2
 8003d22:	2201      	movs	r2, #1
 8003d24:	2102      	movs	r1, #2
 8003d26:	f7ff ff63 	bl	8003bf0 <SPI_WaitFlagStateUntilTimeout>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d007      	beq.n	8003d3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	2220      	movs	r2, #32
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e037      	b.n	8003dae <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003db8 <SPI_EndRxTxTransaction+0xac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	491e      	ldr	r1, [pc, #120]	@ (8003dbc <SPI_EndRxTxTransaction+0xb0>)
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7fc f9df 	bl	8000108 <__udivsi3>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	0013      	movs	r3, r2
 8003d50:	015b      	lsls	r3, r3, #5
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	2382      	movs	r3, #130	@ 0x82
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d112      	bne.n	8003d8e <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	0013      	movs	r3, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	@ 0x80
 8003d76:	f7ff ff3b 	bl	8003bf0 <SPI_WaitFlagStateUntilTimeout>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d016      	beq.n	8003dac <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	2220      	movs	r2, #32
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e00f      	b.n	8003dae <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b80      	cmp	r3, #128	@ 0x80
 8003da6:	d0f2      	beq.n	8003d8e <SPI_EndRxTxTransaction+0x82>
 8003da8:	e000      	b.n	8003dac <SPI_EndRxTxTransaction+0xa0>
        break;
 8003daa:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b006      	add	sp, #24
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	016e3600 	.word	0x016e3600

08003dc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2244      	movs	r2, #68	@ 0x44
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <USB_EnableGlobalInt+0x28>)
 8003dd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2240      	movs	r2, #64	@ 0x40
 8003ddc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	0000bf80 	.word	0x0000bf80

08003dec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003df4:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <USB_DisableGlobalInt+0x30>)
 8003df6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2240      	movs	r2, #64	@ 0x40
 8003dfc:	5a9b      	ldrh	r3, [r3, r2]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	b292      	uxth	r2, r2
 8003e04:	43d2      	mvns	r2, r2
 8003e06:	b292      	uxth	r2, r2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b299      	uxth	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b004      	add	sp, #16
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	0000bf80 	.word	0x0000bf80

08003e20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	6019      	str	r1, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2240      	movs	r2, #64	@ 0x40
 8003e32:	2101      	movs	r1, #1
 8003e34:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2240      	movs	r2, #64	@ 0x40
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2244      	movs	r2, #68	@ 0x44
 8003e42:	2100      	movs	r1, #0
 8003e44:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2250      	movs	r2, #80	@ 0x50
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0a6      	sub	sp, #152	@ 0x98
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e62:	2397      	movs	r3, #151	@ 0x97
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	18d3      	adds	r3, r2, r3
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	2394      	movs	r3, #148	@ 0x94
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	49a5      	ldr	r1, [pc, #660]	@ (8004114 <USB_ActivateEndpoint+0x2bc>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	78db      	ldrb	r3, [r3, #3]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d017      	beq.n	8003eba <USB_ActivateEndpoint+0x62>
 8003e8a:	dc28      	bgt.n	8003ede <USB_ActivateEndpoint+0x86>
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d00e      	beq.n	8003eae <USB_ActivateEndpoint+0x56>
 8003e90:	dc25      	bgt.n	8003ede <USB_ActivateEndpoint+0x86>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <USB_ActivateEndpoint+0x44>
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d018      	beq.n	8003ecc <USB_ActivateEndpoint+0x74>
 8003e9a:	e020      	b.n	8003ede <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e9c:	2294      	movs	r2, #148	@ 0x94
 8003e9e:	18bb      	adds	r3, r7, r2
 8003ea0:	18ba      	adds	r2, r7, r2
 8003ea2:	8812      	ldrh	r2, [r2, #0]
 8003ea4:	2180      	movs	r1, #128	@ 0x80
 8003ea6:	0089      	lsls	r1, r1, #2
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	801a      	strh	r2, [r3, #0]
      break;
 8003eac:	e01c      	b.n	8003ee8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003eae:	2294      	movs	r2, #148	@ 0x94
 8003eb0:	18bb      	adds	r3, r7, r2
 8003eb2:	18ba      	adds	r2, r7, r2
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	801a      	strh	r2, [r3, #0]
      break;
 8003eb8:	e016      	b.n	8003ee8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003eba:	2294      	movs	r2, #148	@ 0x94
 8003ebc:	18bb      	adds	r3, r7, r2
 8003ebe:	18ba      	adds	r2, r7, r2
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	21c0      	movs	r1, #192	@ 0xc0
 8003ec4:	00c9      	lsls	r1, r1, #3
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	801a      	strh	r2, [r3, #0]
      break;
 8003eca:	e00d      	b.n	8003ee8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ecc:	2294      	movs	r2, #148	@ 0x94
 8003ece:	18bb      	adds	r3, r7, r2
 8003ed0:	18ba      	adds	r2, r7, r2
 8003ed2:	8812      	ldrh	r2, [r2, #0]
 8003ed4:	2180      	movs	r1, #128	@ 0x80
 8003ed6:	00c9      	lsls	r1, r1, #3
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	801a      	strh	r2, [r3, #0]
      break;
 8003edc:	e004      	b.n	8003ee8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003ede:	2397      	movs	r3, #151	@ 0x97
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
      break;
 8003ee6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	2294      	movs	r2, #148	@ 0x94
 8003ef4:	18ba      	adds	r2, r7, r2
 8003ef6:	8812      	ldrh	r2, [r2, #0]
 8003ef8:	4987      	ldr	r1, [pc, #540]	@ (8004118 <USB_ActivateEndpoint+0x2c0>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	b292      	uxth	r2, r2
 8003efe:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	18d3      	adds	r3, r2, r3
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b21b      	sxth	r3, r3
 8003f10:	4a82      	ldr	r2, [pc, #520]	@ (800411c <USB_ActivateEndpoint+0x2c4>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	b21a      	sxth	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	b21b      	sxth	r3, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b21a      	sxth	r2, r3
 8003f20:	2186      	movs	r1, #134	@ 0x86
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	18d3      	adds	r3, r2, r3
 8003f30:	187a      	adds	r2, r7, r1
 8003f32:	8812      	ldrh	r2, [r2, #0]
 8003f34:	4978      	ldr	r1, [pc, #480]	@ (8004118 <USB_ActivateEndpoint+0x2c0>)
 8003f36:	430a      	orrs	r2, r1
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	7b1b      	ldrb	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d000      	beq.n	8003f46 <USB_ActivateEndpoint+0xee>
 8003f44:	e185      	b.n	8004252 <USB_ActivateEndpoint+0x3fa>
  {
    if (ep->is_in != 0U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d100      	bne.n	8003f50 <USB_ActivateEndpoint+0xf8>
 8003f4e:	e07c      	b.n	800404a <USB_ActivateEndpoint+0x1f2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2250      	movs	r2, #80	@ 0x50
 8003f58:	5a9b      	ldrh	r3, [r3, r2]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	00da      	lsls	r2, r3, #3
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	18d3      	adds	r3, r2, r3
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	00d2      	lsls	r2, r2, #3
 8003f72:	4694      	mov	ip, r2
 8003f74:	4463      	add	r3, ip
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	88db      	ldrh	r3, [r3, #6]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	18db      	adds	r3, r3, r3
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	18d2      	adds	r2, r2, r3
 8003f92:	2112      	movs	r1, #18
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	2240      	movs	r2, #64	@ 0x40
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d016      	beq.n	8003fd2 <USB_ActivateEndpoint+0x17a>
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	2010      	movs	r0, #16
 8003fb4:	183b      	adds	r3, r7, r0
 8003fb6:	4959      	ldr	r1, [pc, #356]	@ (800411c <USB_ActivateEndpoint+0x2c4>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	183a      	adds	r2, r7, r0
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	4955      	ldr	r1, [pc, #340]	@ (8004120 <USB_ActivateEndpoint+0x2c8>)
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	78db      	ldrb	r3, [r3, #3]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d01e      	beq.n	8004018 <USB_ActivateEndpoint+0x1c0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18d3      	adds	r3, r2, r3
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	200c      	movs	r0, #12
 8003fea:	183b      	adds	r3, r7, r0
 8003fec:	494d      	ldr	r1, [pc, #308]	@ (8004124 <USB_ActivateEndpoint+0x2cc>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	183b      	adds	r3, r7, r0
 8003ff4:	183a      	adds	r2, r7, r0
 8003ff6:	8812      	ldrh	r2, [r2, #0]
 8003ff8:	2120      	movs	r1, #32
 8003ffa:	404a      	eors	r2, r1
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	18d3      	adds	r3, r2, r3
 8004008:	183a      	adds	r2, r7, r0
 800400a:	8812      	ldrh	r2, [r2, #0]
 800400c:	4942      	ldr	r1, [pc, #264]	@ (8004118 <USB_ActivateEndpoint+0x2c0>)
 800400e:	430a      	orrs	r2, r1
 8004010:	b292      	uxth	r2, r2
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	f000 fbdb 	bl	80047ce <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	18d3      	adds	r3, r2, r3
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	200e      	movs	r0, #14
 8004028:	183b      	adds	r3, r7, r0
 800402a:	493e      	ldr	r1, [pc, #248]	@ (8004124 <USB_ActivateEndpoint+0x2cc>)
 800402c:	400a      	ands	r2, r1
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	183a      	adds	r2, r7, r0
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	4936      	ldr	r1, [pc, #216]	@ (8004118 <USB_ActivateEndpoint+0x2c0>)
 8004040:	430a      	orrs	r2, r1
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	f000 fbc2 	bl	80047ce <USB_ActivateEndpoint+0x976>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	633b      	str	r3, [r7, #48]	@ 0x30
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2250      	movs	r2, #80	@ 0x50
 8004052:	5a9b      	ldrh	r3, [r3, r2]
 8004054:	b29b      	uxth	r3, r3
 8004056:	001a      	movs	r2, r3
 8004058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405a:	189b      	adds	r3, r3, r2
 800405c:	633b      	str	r3, [r7, #48]	@ 0x30
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	00da      	lsls	r2, r3, #3
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	18d3      	adds	r3, r2, r3
 8004068:	4a2f      	ldr	r2, [pc, #188]	@ (8004128 <USB_ActivateEndpoint+0x2d0>)
 800406a:	4694      	mov	ip, r2
 800406c:	4463      	add	r3, ip
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	88db      	ldrh	r3, [r3, #6]
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	18db      	adds	r3, r3, r3
 800407a:	b29a      	uxth	r2, r3
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2250      	movs	r2, #80	@ 0x50
 8004088:	5a9b      	ldrh	r3, [r3, r2]
 800408a:	b29b      	uxth	r3, r3
 800408c:	001a      	movs	r2, r3
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	189b      	adds	r3, r3, r2
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	00da      	lsls	r2, r3, #3
 800409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409c:	18d3      	adds	r3, r2, r3
 800409e:	4a23      	ldr	r2, [pc, #140]	@ (800412c <USB_ActivateEndpoint+0x2d4>)
 80040a0:	4694      	mov	ip, r2
 80040a2:	4463      	add	r3, ip
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	059b      	lsls	r3, r3, #22
 80040ae:	0d9b      	lsrs	r3, r3, #22
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <USB_ActivateEndpoint+0x278>
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004130 <USB_ActivateEndpoint+0x2d8>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	e051      	b.n	8004174 <USB_ActivateEndpoint+0x31c>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80040d6:	d82d      	bhi.n	8004134 <USB_ActivateEndpoint+0x2dc>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	2190      	movs	r1, #144	@ 0x90
 80040e0:	187a      	adds	r2, r7, r1
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d004      	beq.n	80040f8 <USB_ActivateEndpoint+0x2a0>
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	187a      	adds	r2, r7, r1
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	2390      	movs	r3, #144	@ 0x90
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	b29b      	uxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b29a      	uxth	r2, r3
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	e02f      	b.n	8004174 <USB_ActivateEndpoint+0x31c>
 8004114:	ffff898f 	.word	0xffff898f
 8004118:	ffff8080 	.word	0xffff8080
 800411c:	ffff8f8f 	.word	0xffff8f8f
 8004120:	ffff80c0 	.word	0xffff80c0
 8004124:	ffff8fbf 	.word	0xffff8fbf
 8004128:	00000404 	.word	0x00000404
 800412c:	00000406 	.word	0x00000406
 8004130:	ffff8000 	.word	0xffff8000
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	2190      	movs	r1, #144	@ 0x90
 800413c:	187a      	adds	r2, r7, r1
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	221f      	movs	r2, #31
 8004146:	4013      	ands	r3, r2
 8004148:	d104      	bne.n	8004154 <USB_ActivateEndpoint+0x2fc>
 800414a:	187b      	adds	r3, r7, r1
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3b01      	subs	r3, #1
 8004150:	187a      	adds	r2, r7, r1
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29a      	uxth	r2, r3
 800415a:	2390      	movs	r3, #144	@ 0x90
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	029b      	lsls	r3, r3, #10
 8004164:	b29b      	uxth	r3, r3
 8004166:	4313      	orrs	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	4acf      	ldr	r2, [pc, #828]	@ (80044a8 <USB_ActivateEndpoint+0x650>)
 800416c:	4313      	orrs	r3, r2
 800416e:	b29a      	uxth	r2, r3
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	18d2      	adds	r2, r2, r3
 800417e:	2122      	movs	r1, #34	@ 0x22
 8004180:	187b      	adds	r3, r7, r1
 8004182:	8812      	ldrh	r2, [r2, #0]
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	187b      	adds	r3, r7, r1
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	@ 0x80
 800418c:	01db      	lsls	r3, r3, #7
 800418e:	4013      	ands	r3, r2
 8004190:	d016      	beq.n	80041c0 <USB_ActivateEndpoint+0x368>
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29a      	uxth	r2, r3
 80041a0:	2020      	movs	r0, #32
 80041a2:	183b      	adds	r3, r7, r0
 80041a4:	49c1      	ldr	r1, [pc, #772]	@ (80044ac <USB_ActivateEndpoint+0x654>)
 80041a6:	400a      	ands	r2, r1
 80041a8:	801a      	strh	r2, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	18d3      	adds	r3, r2, r3
 80041b4:	183a      	adds	r2, r7, r0
 80041b6:	8812      	ldrh	r2, [r2, #0]
 80041b8:	49bd      	ldr	r1, [pc, #756]	@ (80044b0 <USB_ActivateEndpoint+0x658>)
 80041ba:	430a      	orrs	r2, r1
 80041bc:	b292      	uxth	r2, r2
 80041be:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d125      	bne.n	8004214 <USB_ActivateEndpoint+0x3bc>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	201c      	movs	r0, #28
 80041d8:	183b      	adds	r3, r7, r0
 80041da:	49b6      	ldr	r1, [pc, #728]	@ (80044b4 <USB_ActivateEndpoint+0x65c>)
 80041dc:	400a      	ands	r2, r1
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	183b      	adds	r3, r7, r0
 80041e2:	183a      	adds	r2, r7, r0
 80041e4:	8812      	ldrh	r2, [r2, #0]
 80041e6:	2180      	movs	r1, #128	@ 0x80
 80041e8:	0149      	lsls	r1, r1, #5
 80041ea:	404a      	eors	r2, r1
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	183b      	adds	r3, r7, r0
 80041f0:	183a      	adds	r2, r7, r0
 80041f2:	8812      	ldrh	r2, [r2, #0]
 80041f4:	2180      	movs	r1, #128	@ 0x80
 80041f6:	0189      	lsls	r1, r1, #6
 80041f8:	404a      	eors	r2, r1
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	18d3      	adds	r3, r2, r3
 8004206:	183a      	adds	r2, r7, r0
 8004208:	8812      	ldrh	r2, [r2, #0]
 800420a:	49ab      	ldr	r1, [pc, #684]	@ (80044b8 <USB_ActivateEndpoint+0x660>)
 800420c:	430a      	orrs	r2, r1
 800420e:	b292      	uxth	r2, r2
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e2dc      	b.n	80047ce <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29a      	uxth	r2, r3
 8004222:	201e      	movs	r0, #30
 8004224:	183b      	adds	r3, r7, r0
 8004226:	49a3      	ldr	r1, [pc, #652]	@ (80044b4 <USB_ActivateEndpoint+0x65c>)
 8004228:	400a      	ands	r2, r1
 800422a:	801a      	strh	r2, [r3, #0]
 800422c:	183b      	adds	r3, r7, r0
 800422e:	183a      	adds	r2, r7, r0
 8004230:	8812      	ldrh	r2, [r2, #0]
 8004232:	2180      	movs	r1, #128	@ 0x80
 8004234:	0189      	lsls	r1, r1, #6
 8004236:	404a      	eors	r2, r1
 8004238:	801a      	strh	r2, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	18d3      	adds	r3, r2, r3
 8004244:	183a      	adds	r2, r7, r0
 8004246:	8812      	ldrh	r2, [r2, #0]
 8004248:	499b      	ldr	r1, [pc, #620]	@ (80044b8 <USB_ActivateEndpoint+0x660>)
 800424a:	430a      	orrs	r2, r1
 800424c:	b292      	uxth	r2, r2
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	e2bd      	b.n	80047ce <USB_ActivateEndpoint+0x976>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	78db      	ldrb	r3, [r3, #3]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d117      	bne.n	800428a <USB_ActivateEndpoint+0x432>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	18d3      	adds	r3, r2, r3
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29a      	uxth	r2, r3
 8004268:	2082      	movs	r0, #130	@ 0x82
 800426a:	183b      	adds	r3, r7, r0
 800426c:	498f      	ldr	r1, [pc, #572]	@ (80044ac <USB_ActivateEndpoint+0x654>)
 800426e:	400a      	ands	r2, r1
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	18d3      	adds	r3, r2, r3
 800427c:	183a      	adds	r2, r7, r0
 800427e:	8812      	ldrh	r2, [r2, #0]
 8004280:	498e      	ldr	r1, [pc, #568]	@ (80044bc <USB_ActivateEndpoint+0x664>)
 8004282:	430a      	orrs	r2, r1
 8004284:	b292      	uxth	r2, r2
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	e016      	b.n	80042b8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	2084      	movs	r0, #132	@ 0x84
 800429a:	183b      	adds	r3, r7, r0
 800429c:	4988      	ldr	r1, [pc, #544]	@ (80044c0 <USB_ActivateEndpoint+0x668>)
 800429e:	400a      	ands	r2, r1
 80042a0:	801a      	strh	r2, [r3, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	18d3      	adds	r3, r2, r3
 80042ac:	183a      	adds	r2, r7, r0
 80042ae:	8812      	ldrh	r2, [r2, #0]
 80042b0:	4981      	ldr	r1, [pc, #516]	@ (80044b8 <USB_ActivateEndpoint+0x660>)
 80042b2:	430a      	orrs	r2, r1
 80042b4:	b292      	uxth	r2, r2
 80042b6:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2250      	movs	r2, #80	@ 0x50
 80042c0:	5a9b      	ldrh	r3, [r3, r2]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	001a      	movs	r2, r3
 80042c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	00da      	lsls	r2, r3, #3
 80042d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042d4:	18d3      	adds	r3, r2, r3
 80042d6:	2280      	movs	r2, #128	@ 0x80
 80042d8:	00d2      	lsls	r2, r2, #3
 80042da:	4694      	mov	ip, r2
 80042dc:	4463      	add	r3, ip
 80042de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	891b      	ldrh	r3, [r3, #8]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	18db      	adds	r3, r3, r3
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2250      	movs	r2, #80	@ 0x50
 80042f8:	5a9b      	ldrh	r3, [r3, r2]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	001a      	movs	r2, r3
 80042fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004300:	189b      	adds	r3, r3, r2
 8004302:	677b      	str	r3, [r7, #116]	@ 0x74
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	00da      	lsls	r2, r3, #3
 800430a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430c:	18d3      	adds	r3, r2, r3
 800430e:	4a6d      	ldr	r2, [pc, #436]	@ (80044c4 <USB_ActivateEndpoint+0x66c>)
 8004310:	4694      	mov	ip, r2
 8004312:	4463      	add	r3, ip
 8004314:	673b      	str	r3, [r7, #112]	@ 0x70
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	895b      	ldrh	r3, [r3, #10]
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	b29b      	uxth	r3, r3
 800431e:	18db      	adds	r3, r3, r3
 8004320:	b29a      	uxth	r2, r3
 8004322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004324:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d000      	beq.n	8004330 <USB_ActivateEndpoint+0x4d8>
 800432e:	e1b3      	b.n	8004698 <USB_ActivateEndpoint+0x840>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	18d2      	adds	r2, r2, r3
 800433a:	2160      	movs	r1, #96	@ 0x60
 800433c:	187b      	adds	r3, r7, r1
 800433e:	8812      	ldrh	r2, [r2, #0]
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	187b      	adds	r3, r7, r1
 8004344:	881a      	ldrh	r2, [r3, #0]
 8004346:	2380      	movs	r3, #128	@ 0x80
 8004348:	01db      	lsls	r3, r3, #7
 800434a:	4013      	ands	r3, r2
 800434c:	d016      	beq.n	800437c <USB_ActivateEndpoint+0x524>
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	18d3      	adds	r3, r2, r3
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29a      	uxth	r2, r3
 800435c:	205e      	movs	r0, #94	@ 0x5e
 800435e:	183b      	adds	r3, r7, r0
 8004360:	4952      	ldr	r1, [pc, #328]	@ (80044ac <USB_ActivateEndpoint+0x654>)
 8004362:	400a      	ands	r2, r1
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	18d3      	adds	r3, r2, r3
 8004370:	183a      	adds	r2, r7, r0
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	494e      	ldr	r1, [pc, #312]	@ (80044b0 <USB_ActivateEndpoint+0x658>)
 8004376:	430a      	orrs	r2, r1
 8004378:	b292      	uxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	18d2      	adds	r2, r2, r3
 8004386:	215c      	movs	r1, #92	@ 0x5c
 8004388:	187b      	adds	r3, r7, r1
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	187b      	adds	r3, r7, r1
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	4013      	ands	r3, r2
 8004396:	d016      	beq.n	80043c6 <USB_ActivateEndpoint+0x56e>
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	18d3      	adds	r3, r2, r3
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	205a      	movs	r0, #90	@ 0x5a
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	4940      	ldr	r1, [pc, #256]	@ (80044ac <USB_ActivateEndpoint+0x654>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	183a      	adds	r2, r7, r0
 80043bc:	8812      	ldrh	r2, [r2, #0]
 80043be:	4942      	ldr	r1, [pc, #264]	@ (80044c8 <USB_ActivateEndpoint+0x670>)
 80043c0:	430a      	orrs	r2, r1
 80043c2:	b292      	uxth	r2, r2
 80043c4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d000      	beq.n	80043d0 <USB_ActivateEndpoint+0x578>
 80043ce:	e07f      	b.n	80044d0 <USB_ActivateEndpoint+0x678>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2250      	movs	r2, #80	@ 0x50
 80043d8:	5a9b      	ldrh	r3, [r3, r2]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	001a      	movs	r2, r3
 80043de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	00da      	lsls	r2, r3, #3
 80043ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ec:	18d3      	adds	r3, r2, r3
 80043ee:	4a37      	ldr	r2, [pc, #220]	@ (80044cc <USB_ActivateEndpoint+0x674>)
 80043f0:	4694      	mov	ip, r2
 80043f2:	4463      	add	r3, ip
 80043f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	059b      	lsls	r3, r3, #22
 80043fe:	0d9b      	lsrs	r3, r3, #22
 8004400:	b29a      	uxth	r2, r3
 8004402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d108      	bne.n	8004420 <USB_ActivateEndpoint+0x5c8>
 800440e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	4a24      	ldr	r2, [pc, #144]	@ (80044a8 <USB_ActivateEndpoint+0x650>)
 8004416:	4313      	orrs	r3, r2
 8004418:	b29a      	uxth	r2, r3
 800441a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	e073      	b.n	8004508 <USB_ActivateEndpoint+0x6b0>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b3e      	cmp	r3, #62	@ 0x3e
 8004426:	d81d      	bhi.n	8004464 <USB_ActivateEndpoint+0x60c>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	218c      	movs	r1, #140	@ 0x8c
 8004430:	187a      	adds	r2, r7, r1
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2201      	movs	r2, #1
 800443a:	4013      	ands	r3, r2
 800443c:	d004      	beq.n	8004448 <USB_ActivateEndpoint+0x5f0>
 800443e:	187b      	adds	r3, r7, r1
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	187a      	adds	r2, r7, r1
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29a      	uxth	r2, r3
 800444e:	238c      	movs	r3, #140	@ 0x8c
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	029b      	lsls	r3, r3, #10
 8004458:	b29b      	uxth	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	b29a      	uxth	r2, r3
 800445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	e051      	b.n	8004508 <USB_ActivateEndpoint+0x6b0>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	218c      	movs	r1, #140	@ 0x8c
 800446c:	187a      	adds	r2, r7, r1
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	221f      	movs	r2, #31
 8004476:	4013      	ands	r3, r2
 8004478:	d104      	bne.n	8004484 <USB_ActivateEndpoint+0x62c>
 800447a:	187b      	adds	r3, r7, r1
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	187a      	adds	r2, r7, r1
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29a      	uxth	r2, r3
 800448a:	238c      	movs	r3, #140	@ 0x8c
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	029b      	lsls	r3, r3, #10
 8004494:	b29b      	uxth	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b29b      	uxth	r3, r3
 800449a:	4a03      	ldr	r2, [pc, #12]	@ (80044a8 <USB_ActivateEndpoint+0x650>)
 800449c:	4313      	orrs	r3, r2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e030      	b.n	8004508 <USB_ActivateEndpoint+0x6b0>
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	ffff8000 	.word	0xffff8000
 80044ac:	ffff8f8f 	.word	0xffff8f8f
 80044b0:	ffffc080 	.word	0xffffc080
 80044b4:	ffffbf8f 	.word	0xffffbf8f
 80044b8:	ffff8080 	.word	0xffff8080
 80044bc:	ffff8180 	.word	0xffff8180
 80044c0:	ffff8e8f 	.word	0xffff8e8f
 80044c4:	00000404 	.word	0x00000404
 80044c8:	ffff80c0 	.word	0xffff80c0
 80044cc:	00000402 	.word	0x00000402
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d117      	bne.n	8004508 <USB_ActivateEndpoint+0x6b0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	657b      	str	r3, [r7, #84]	@ 0x54
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2250      	movs	r2, #80	@ 0x50
 80044e0:	5a9b      	ldrh	r3, [r3, r2]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	001a      	movs	r2, r3
 80044e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e8:	189b      	adds	r3, r3, r2
 80044ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	00da      	lsls	r2, r3, #3
 80044f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	4ab9      	ldr	r2, [pc, #740]	@ (80047dc <USB_ActivateEndpoint+0x984>)
 80044f8:	4694      	mov	ip, r2
 80044fa:	4463      	add	r3, ip
 80044fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	b29a      	uxth	r2, r3
 8004504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	647b      	str	r3, [r7, #68]	@ 0x44
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d16a      	bne.n	80045ea <USB_ActivateEndpoint+0x792>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2250      	movs	r2, #80	@ 0x50
 800451c:	5a9b      	ldrh	r3, [r3, r2]
 800451e:	b29b      	uxth	r3, r3
 8004520:	001a      	movs	r2, r3
 8004522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004524:	189b      	adds	r3, r3, r2
 8004526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00da      	lsls	r2, r3, #3
 800452e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004530:	18d3      	adds	r3, r2, r3
 8004532:	4aab      	ldr	r2, [pc, #684]	@ (80047e0 <USB_ActivateEndpoint+0x988>)
 8004534:	4694      	mov	ip, r2
 8004536:	4463      	add	r3, ip
 8004538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800453a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	059b      	lsls	r3, r3, #22
 8004542:	0d9b      	lsrs	r3, r3, #22
 8004544:	b29a      	uxth	r2, r3
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d108      	bne.n	8004564 <USB_ActivateEndpoint+0x70c>
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	4aa2      	ldr	r2, [pc, #648]	@ (80047e4 <USB_ActivateEndpoint+0x98c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	b29a      	uxth	r2, r3
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	e05c      	b.n	800461e <USB_ActivateEndpoint+0x7c6>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b3e      	cmp	r3, #62	@ 0x3e
 800456a:	d81d      	bhi.n	80045a8 <USB_ActivateEndpoint+0x750>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	2188      	movs	r1, #136	@ 0x88
 8004574:	187a      	adds	r2, r7, r1
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2201      	movs	r2, #1
 800457e:	4013      	ands	r3, r2
 8004580:	d004      	beq.n	800458c <USB_ActivateEndpoint+0x734>
 8004582:	187b      	adds	r3, r7, r1
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	187a      	adds	r2, r7, r1
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29a      	uxth	r2, r3
 8004592:	2388      	movs	r3, #136	@ 0x88
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	029b      	lsls	r3, r3, #10
 800459c:	b29b      	uxth	r3, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	e03a      	b.n	800461e <USB_ActivateEndpoint+0x7c6>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2188      	movs	r1, #136	@ 0x88
 80045b0:	187a      	adds	r2, r7, r1
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	221f      	movs	r2, #31
 80045ba:	4013      	ands	r3, r2
 80045bc:	d104      	bne.n	80045c8 <USB_ActivateEndpoint+0x770>
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	187a      	adds	r2, r7, r1
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	2388      	movs	r3, #136	@ 0x88
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	029b      	lsls	r3, r3, #10
 80045d8:	b29b      	uxth	r3, r3
 80045da:	4313      	orrs	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4a81      	ldr	r2, [pc, #516]	@ (80047e4 <USB_ActivateEndpoint+0x98c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	e019      	b.n	800461e <USB_ActivateEndpoint+0x7c6>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d115      	bne.n	800461e <USB_ActivateEndpoint+0x7c6>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2250      	movs	r2, #80	@ 0x50
 80045f6:	5a9b      	ldrh	r3, [r3, r2]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	001a      	movs	r2, r3
 80045fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045fe:	189b      	adds	r3, r3, r2
 8004600:	647b      	str	r3, [r7, #68]	@ 0x44
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	00da      	lsls	r2, r3, #3
 8004608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460a:	18d3      	adds	r3, r2, r3
 800460c:	4a74      	ldr	r2, [pc, #464]	@ (80047e0 <USB_ActivateEndpoint+0x988>)
 800460e:	4694      	mov	ip, r2
 8004610:	4463      	add	r3, ip
 8004612:	643b      	str	r3, [r7, #64]	@ 0x40
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	b29a      	uxth	r2, r3
 800461a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800461c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	18d3      	adds	r3, r2, r3
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29a      	uxth	r2, r3
 800462c:	2036      	movs	r0, #54	@ 0x36
 800462e:	183b      	adds	r3, r7, r0
 8004630:	496d      	ldr	r1, [pc, #436]	@ (80047e8 <USB_ActivateEndpoint+0x990>)
 8004632:	400a      	ands	r2, r1
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	183b      	adds	r3, r7, r0
 8004638:	183a      	adds	r2, r7, r0
 800463a:	8812      	ldrh	r2, [r2, #0]
 800463c:	2180      	movs	r1, #128	@ 0x80
 800463e:	0149      	lsls	r1, r1, #5
 8004640:	404a      	eors	r2, r1
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	183b      	adds	r3, r7, r0
 8004646:	183a      	adds	r2, r7, r0
 8004648:	8812      	ldrh	r2, [r2, #0]
 800464a:	2180      	movs	r1, #128	@ 0x80
 800464c:	0189      	lsls	r1, r1, #6
 800464e:	404a      	eors	r2, r1
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	18d3      	adds	r3, r2, r3
 800465c:	183a      	adds	r2, r7, r0
 800465e:	8812      	ldrh	r2, [r2, #0]
 8004660:	4962      	ldr	r1, [pc, #392]	@ (80047ec <USB_ActivateEndpoint+0x994>)
 8004662:	430a      	orrs	r2, r1
 8004664:	b292      	uxth	r2, r2
 8004666:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	18d3      	adds	r3, r2, r3
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29a      	uxth	r2, r3
 8004676:	2034      	movs	r0, #52	@ 0x34
 8004678:	183b      	adds	r3, r7, r0
 800467a:	495d      	ldr	r1, [pc, #372]	@ (80047f0 <USB_ActivateEndpoint+0x998>)
 800467c:	400a      	ands	r2, r1
 800467e:	801a      	strh	r2, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	183a      	adds	r2, r7, r0
 800468c:	8812      	ldrh	r2, [r2, #0]
 800468e:	4957      	ldr	r1, [pc, #348]	@ (80047ec <USB_ActivateEndpoint+0x994>)
 8004690:	430a      	orrs	r2, r1
 8004692:	b292      	uxth	r2, r2
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	e09a      	b.n	80047ce <USB_ActivateEndpoint+0x976>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	18d2      	adds	r2, r2, r3
 80046a2:	216e      	movs	r1, #110	@ 0x6e
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	@ 0x80
 80046b0:	01db      	lsls	r3, r3, #7
 80046b2:	4013      	ands	r3, r2
 80046b4:	d016      	beq.n	80046e4 <USB_ActivateEndpoint+0x88c>
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	18d3      	adds	r3, r2, r3
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	206c      	movs	r0, #108	@ 0x6c
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	494a      	ldr	r1, [pc, #296]	@ (80047f4 <USB_ActivateEndpoint+0x99c>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	18d3      	adds	r3, r2, r3
 80046d8:	183a      	adds	r2, r7, r0
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	4946      	ldr	r1, [pc, #280]	@ (80047f8 <USB_ActivateEndpoint+0x9a0>)
 80046de:	430a      	orrs	r2, r1
 80046e0:	b292      	uxth	r2, r2
 80046e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	18d2      	adds	r2, r2, r3
 80046ee:	216a      	movs	r1, #106	@ 0x6a
 80046f0:	187b      	adds	r3, r7, r1
 80046f2:	8812      	ldrh	r2, [r2, #0]
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	2240      	movs	r2, #64	@ 0x40
 80046fc:	4013      	ands	r3, r2
 80046fe:	d016      	beq.n	800472e <USB_ActivateEndpoint+0x8d6>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29a      	uxth	r2, r3
 800470e:	2068      	movs	r0, #104	@ 0x68
 8004710:	183b      	adds	r3, r7, r0
 8004712:	4938      	ldr	r1, [pc, #224]	@ (80047f4 <USB_ActivateEndpoint+0x99c>)
 8004714:	400a      	ands	r2, r1
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	18d3      	adds	r3, r2, r3
 8004722:	183a      	adds	r2, r7, r0
 8004724:	8812      	ldrh	r2, [r2, #0]
 8004726:	4935      	ldr	r1, [pc, #212]	@ (80047fc <USB_ActivateEndpoint+0x9a4>)
 8004728:	430a      	orrs	r2, r1
 800472a:	b292      	uxth	r2, r2
 800472c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d01d      	beq.n	8004772 <USB_ActivateEndpoint+0x91a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	18d3      	adds	r3, r2, r3
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29a      	uxth	r2, r3
 8004744:	2064      	movs	r0, #100	@ 0x64
 8004746:	183b      	adds	r3, r7, r0
 8004748:	4929      	ldr	r1, [pc, #164]	@ (80047f0 <USB_ActivateEndpoint+0x998>)
 800474a:	400a      	ands	r2, r1
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	183b      	adds	r3, r7, r0
 8004750:	183a      	adds	r2, r7, r0
 8004752:	8812      	ldrh	r2, [r2, #0]
 8004754:	2120      	movs	r1, #32
 8004756:	404a      	eors	r2, r1
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	18d3      	adds	r3, r2, r3
 8004764:	183a      	adds	r2, r7, r0
 8004766:	8812      	ldrh	r2, [r2, #0]
 8004768:	4920      	ldr	r1, [pc, #128]	@ (80047ec <USB_ActivateEndpoint+0x994>)
 800476a:	430a      	orrs	r2, r1
 800476c:	b292      	uxth	r2, r2
 800476e:	801a      	strh	r2, [r3, #0]
 8004770:	e016      	b.n	80047a0 <USB_ActivateEndpoint+0x948>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	18d3      	adds	r3, r2, r3
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	2066      	movs	r0, #102	@ 0x66
 8004782:	183b      	adds	r3, r7, r0
 8004784:	491a      	ldr	r1, [pc, #104]	@ (80047f0 <USB_ActivateEndpoint+0x998>)
 8004786:	400a      	ands	r2, r1
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	18d3      	adds	r3, r2, r3
 8004794:	183a      	adds	r2, r7, r0
 8004796:	8812      	ldrh	r2, [r2, #0]
 8004798:	4914      	ldr	r1, [pc, #80]	@ (80047ec <USB_ActivateEndpoint+0x994>)
 800479a:	430a      	orrs	r2, r1
 800479c:	b292      	uxth	r2, r2
 800479e:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	2062      	movs	r0, #98	@ 0x62
 80047b0:	183b      	adds	r3, r7, r0
 80047b2:	490d      	ldr	r1, [pc, #52]	@ (80047e8 <USB_ActivateEndpoint+0x990>)
 80047b4:	400a      	ands	r2, r1
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	18d3      	adds	r3, r2, r3
 80047c2:	183a      	adds	r2, r7, r0
 80047c4:	8812      	ldrh	r2, [r2, #0]
 80047c6:	4909      	ldr	r1, [pc, #36]	@ (80047ec <USB_ActivateEndpoint+0x994>)
 80047c8:	430a      	orrs	r2, r1
 80047ca:	b292      	uxth	r2, r2
 80047cc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80047ce:	2397      	movs	r3, #151	@ 0x97
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	781b      	ldrb	r3, [r3, #0]
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b026      	add	sp, #152	@ 0x98
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	00000402 	.word	0x00000402
 80047e0:	00000406 	.word	0x00000406
 80047e4:	ffff8000 	.word	0xffff8000
 80047e8:	ffffbf8f 	.word	0xffffbf8f
 80047ec:	ffff8080 	.word	0xffff8080
 80047f0:	ffff8fbf 	.word	0xffff8fbf
 80047f4:	ffff8f8f 	.word	0xffff8f8f
 80047f8:	ffffc080 	.word	0xffffc080
 80047fc:	ffff80c0 	.word	0xffff80c0

08004800 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08c      	sub	sp, #48	@ 0x30
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	7b1b      	ldrb	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d000      	beq.n	8004814 <USB_DeactivateEndpoint+0x14>
 8004812:	e07e      	b.n	8004912 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d03c      	beq.n	8004896 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	18d2      	adds	r2, r2, r3
 8004826:	210c      	movs	r1, #12
 8004828:	187b      	adds	r3, r7, r1
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	187b      	adds	r3, r7, r1
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	2240      	movs	r2, #64	@ 0x40
 8004834:	4013      	ands	r3, r2
 8004836:	d016      	beq.n	8004866 <USB_DeactivateEndpoint+0x66>
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	18d3      	adds	r3, r2, r3
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29a      	uxth	r2, r3
 8004846:	200a      	movs	r0, #10
 8004848:	183b      	adds	r3, r7, r0
 800484a:	49c7      	ldr	r1, [pc, #796]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 800484c:	400a      	ands	r2, r1
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	18d3      	adds	r3, r2, r3
 800485a:	183a      	adds	r2, r7, r0
 800485c:	8812      	ldrh	r2, [r2, #0]
 800485e:	49c3      	ldr	r1, [pc, #780]	@ (8004b6c <USB_DeactivateEndpoint+0x36c>)
 8004860:	430a      	orrs	r2, r1
 8004862:	b292      	uxth	r2, r2
 8004864:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	18d3      	adds	r3, r2, r3
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29a      	uxth	r2, r3
 8004874:	2008      	movs	r0, #8
 8004876:	183b      	adds	r3, r7, r0
 8004878:	49bd      	ldr	r1, [pc, #756]	@ (8004b70 <USB_DeactivateEndpoint+0x370>)
 800487a:	400a      	ands	r2, r1
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	18d3      	adds	r3, r2, r3
 8004888:	183a      	adds	r2, r7, r0
 800488a:	8812      	ldrh	r2, [r2, #0]
 800488c:	49b9      	ldr	r1, [pc, #740]	@ (8004b74 <USB_DeactivateEndpoint+0x374>)
 800488e:	430a      	orrs	r2, r1
 8004890:	b292      	uxth	r2, r2
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	e163      	b.n	8004b5e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	18d2      	adds	r2, r2, r3
 80048a0:	2112      	movs	r1, #18
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	8812      	ldrh	r2, [r2, #0]
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	01db      	lsls	r3, r3, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	d016      	beq.n	80048e2 <USB_DeactivateEndpoint+0xe2>
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	2010      	movs	r0, #16
 80048c4:	183b      	adds	r3, r7, r0
 80048c6:	49a8      	ldr	r1, [pc, #672]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	18d3      	adds	r3, r2, r3
 80048d6:	183a      	adds	r2, r7, r0
 80048d8:	8812      	ldrh	r2, [r2, #0]
 80048da:	49a7      	ldr	r1, [pc, #668]	@ (8004b78 <USB_DeactivateEndpoint+0x378>)
 80048dc:	430a      	orrs	r2, r1
 80048de:	b292      	uxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	18d3      	adds	r3, r2, r3
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	200e      	movs	r0, #14
 80048f2:	183b      	adds	r3, r7, r0
 80048f4:	49a1      	ldr	r1, [pc, #644]	@ (8004b7c <USB_DeactivateEndpoint+0x37c>)
 80048f6:	400a      	ands	r2, r1
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	18d3      	adds	r3, r2, r3
 8004904:	183a      	adds	r2, r7, r0
 8004906:	8812      	ldrh	r2, [r2, #0]
 8004908:	499a      	ldr	r1, [pc, #616]	@ (8004b74 <USB_DeactivateEndpoint+0x374>)
 800490a:	430a      	orrs	r2, r1
 800490c:	b292      	uxth	r2, r2
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	e125      	b.n	8004b5e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d000      	beq.n	800491c <USB_DeactivateEndpoint+0x11c>
 800491a:	e090      	b.n	8004a3e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	18d2      	adds	r2, r2, r3
 8004926:	2120      	movs	r1, #32
 8004928:	187b      	adds	r3, r7, r1
 800492a:	8812      	ldrh	r2, [r2, #0]
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	187b      	adds	r3, r7, r1
 8004930:	881a      	ldrh	r2, [r3, #0]
 8004932:	2380      	movs	r3, #128	@ 0x80
 8004934:	01db      	lsls	r3, r3, #7
 8004936:	4013      	ands	r3, r2
 8004938:	d016      	beq.n	8004968 <USB_DeactivateEndpoint+0x168>
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	18d3      	adds	r3, r2, r3
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29a      	uxth	r2, r3
 8004948:	201e      	movs	r0, #30
 800494a:	183b      	adds	r3, r7, r0
 800494c:	4986      	ldr	r1, [pc, #536]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 800494e:	400a      	ands	r2, r1
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	18d3      	adds	r3, r2, r3
 800495c:	183a      	adds	r2, r7, r0
 800495e:	8812      	ldrh	r2, [r2, #0]
 8004960:	4985      	ldr	r1, [pc, #532]	@ (8004b78 <USB_DeactivateEndpoint+0x378>)
 8004962:	430a      	orrs	r2, r1
 8004964:	b292      	uxth	r2, r2
 8004966:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	18d2      	adds	r2, r2, r3
 8004972:	211c      	movs	r1, #28
 8004974:	187b      	adds	r3, r7, r1
 8004976:	8812      	ldrh	r2, [r2, #0]
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	187b      	adds	r3, r7, r1
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2240      	movs	r2, #64	@ 0x40
 8004980:	4013      	ands	r3, r2
 8004982:	d016      	beq.n	80049b2 <USB_DeactivateEndpoint+0x1b2>
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	18d3      	adds	r3, r2, r3
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	201a      	movs	r0, #26
 8004994:	183b      	adds	r3, r7, r0
 8004996:	4974      	ldr	r1, [pc, #464]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 8004998:	400a      	ands	r2, r1
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	18d3      	adds	r3, r2, r3
 80049a6:	183a      	adds	r2, r7, r0
 80049a8:	8812      	ldrh	r2, [r2, #0]
 80049aa:	4970      	ldr	r1, [pc, #448]	@ (8004b6c <USB_DeactivateEndpoint+0x36c>)
 80049ac:	430a      	orrs	r2, r1
 80049ae:	b292      	uxth	r2, r2
 80049b0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	18d3      	adds	r3, r2, r3
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	2018      	movs	r0, #24
 80049c2:	183b      	adds	r3, r7, r0
 80049c4:	4968      	ldr	r1, [pc, #416]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 80049c6:	400a      	ands	r2, r1
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	18d3      	adds	r3, r2, r3
 80049d4:	183a      	adds	r2, r7, r0
 80049d6:	8812      	ldrh	r2, [r2, #0]
 80049d8:	4964      	ldr	r1, [pc, #400]	@ (8004b6c <USB_DeactivateEndpoint+0x36c>)
 80049da:	430a      	orrs	r2, r1
 80049dc:	b292      	uxth	r2, r2
 80049de:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	18d3      	adds	r3, r2, r3
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	2016      	movs	r0, #22
 80049f0:	183b      	adds	r3, r7, r0
 80049f2:	4962      	ldr	r1, [pc, #392]	@ (8004b7c <USB_DeactivateEndpoint+0x37c>)
 80049f4:	400a      	ands	r2, r1
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	18d3      	adds	r3, r2, r3
 8004a02:	183a      	adds	r2, r7, r0
 8004a04:	8812      	ldrh	r2, [r2, #0]
 8004a06:	495b      	ldr	r1, [pc, #364]	@ (8004b74 <USB_DeactivateEndpoint+0x374>)
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	18d3      	adds	r3, r2, r3
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	2014      	movs	r0, #20
 8004a1e:	183b      	adds	r3, r7, r0
 8004a20:	4953      	ldr	r1, [pc, #332]	@ (8004b70 <USB_DeactivateEndpoint+0x370>)
 8004a22:	400a      	ands	r2, r1
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	183a      	adds	r2, r7, r0
 8004a32:	8812      	ldrh	r2, [r2, #0]
 8004a34:	494f      	ldr	r1, [pc, #316]	@ (8004b74 <USB_DeactivateEndpoint+0x374>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	e08f      	b.n	8004b5e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	18d2      	adds	r2, r2, r3
 8004a48:	212e      	movs	r1, #46	@ 0x2e
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	8812      	ldrh	r2, [r2, #0]
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	01db      	lsls	r3, r3, #7
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d016      	beq.n	8004a8a <USB_DeactivateEndpoint+0x28a>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	18d3      	adds	r3, r2, r3
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	202c      	movs	r0, #44	@ 0x2c
 8004a6c:	183b      	adds	r3, r7, r0
 8004a6e:	493e      	ldr	r1, [pc, #248]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 8004a70:	400a      	ands	r2, r1
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	18d3      	adds	r3, r2, r3
 8004a7e:	183a      	adds	r2, r7, r0
 8004a80:	8812      	ldrh	r2, [r2, #0]
 8004a82:	493d      	ldr	r1, [pc, #244]	@ (8004b78 <USB_DeactivateEndpoint+0x378>)
 8004a84:	430a      	orrs	r2, r1
 8004a86:	b292      	uxth	r2, r2
 8004a88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	18d2      	adds	r2, r2, r3
 8004a94:	212a      	movs	r1, #42	@ 0x2a
 8004a96:	187b      	adds	r3, r7, r1
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	801a      	strh	r2, [r3, #0]
 8004a9c:	187b      	adds	r3, r7, r1
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	2240      	movs	r2, #64	@ 0x40
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d016      	beq.n	8004ad4 <USB_DeactivateEndpoint+0x2d4>
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	18d3      	adds	r3, r2, r3
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	2028      	movs	r0, #40	@ 0x28
 8004ab6:	183b      	adds	r3, r7, r0
 8004ab8:	492b      	ldr	r1, [pc, #172]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	801a      	strh	r2, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	18d3      	adds	r3, r2, r3
 8004ac8:	183a      	adds	r2, r7, r0
 8004aca:	8812      	ldrh	r2, [r2, #0]
 8004acc:	4927      	ldr	r1, [pc, #156]	@ (8004b6c <USB_DeactivateEndpoint+0x36c>)
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	18d3      	adds	r3, r2, r3
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	2026      	movs	r0, #38	@ 0x26
 8004ae4:	183b      	adds	r3, r7, r0
 8004ae6:	4920      	ldr	r1, [pc, #128]	@ (8004b68 <USB_DeactivateEndpoint+0x368>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	801a      	strh	r2, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18d3      	adds	r3, r2, r3
 8004af6:	183a      	adds	r2, r7, r0
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	491f      	ldr	r1, [pc, #124]	@ (8004b78 <USB_DeactivateEndpoint+0x378>)
 8004afc:	430a      	orrs	r2, r1
 8004afe:	b292      	uxth	r2, r2
 8004b00:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	18d3      	adds	r3, r2, r3
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	2024      	movs	r0, #36	@ 0x24
 8004b12:	183b      	adds	r3, r7, r0
 8004b14:	4916      	ldr	r1, [pc, #88]	@ (8004b70 <USB_DeactivateEndpoint+0x370>)
 8004b16:	400a      	ands	r2, r1
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	18d3      	adds	r3, r2, r3
 8004b24:	183a      	adds	r2, r7, r0
 8004b26:	8812      	ldrh	r2, [r2, #0]
 8004b28:	4912      	ldr	r1, [pc, #72]	@ (8004b74 <USB_DeactivateEndpoint+0x374>)
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	18d3      	adds	r3, r2, r3
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	2022      	movs	r0, #34	@ 0x22
 8004b40:	183b      	adds	r3, r7, r0
 8004b42:	490e      	ldr	r1, [pc, #56]	@ (8004b7c <USB_DeactivateEndpoint+0x37c>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	18d3      	adds	r3, r2, r3
 8004b52:	183a      	adds	r2, r7, r0
 8004b54:	8812      	ldrh	r2, [r2, #0]
 8004b56:	4907      	ldr	r1, [pc, #28]	@ (8004b74 <USB_DeactivateEndpoint+0x374>)
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	b292      	uxth	r2, r2
 8004b5c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b00c      	add	sp, #48	@ 0x30
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	ffff8f8f 	.word	0xffff8f8f
 8004b6c:	ffff80c0 	.word	0xffff80c0
 8004b70:	ffff8fbf 	.word	0xffff8fbf
 8004b74:	ffff8080 	.word	0xffff8080
 8004b78:	ffffc080 	.word	0xffffc080
 8004b7c:	ffffbf8f 	.word	0xffffbf8f

08004b80 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b80:	b5b0      	push	{r4, r5, r7, lr}
 8004b82:	b0ac      	sub	sp, #176	@ 0xb0
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <USB_EPStartXfer+0x16>
 8004b92:	f000 fd07 	bl	80055a4 <USB_EPStartXfer+0xa24>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d905      	bls.n	8004bae <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	22ac      	movs	r2, #172	@ 0xac
 8004ba8:	18ba      	adds	r2, r7, r2
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e004      	b.n	8004bb8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	22ac      	movs	r2, #172	@ 0xac
 8004bb4:	18ba      	adds	r2, r7, r2
 8004bb6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	7b1b      	ldrb	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d124      	bne.n	8004c0a <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6959      	ldr	r1, [r3, #20]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	88da      	ldrh	r2, [r3, #6]
 8004bc8:	24ac      	movs	r4, #172	@ 0xac
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fef5 	bl	80059c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2250      	movs	r2, #80	@ 0x50
 8004bde:	5a9b      	ldrh	r3, [r3, r2]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	001a      	movs	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	00da      	lsls	r2, r3, #3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	18d3      	adds	r3, r2, r3
 8004bf4:	4acf      	ldr	r2, [pc, #828]	@ (8004f34 <USB_EPStartXfer+0x3b4>)
 8004bf6:	4694      	mov	ip, r2
 8004bf8:	4463      	add	r3, ip
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	193b      	adds	r3, r7, r4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	f000 fca9 	bl	800555c <USB_EPStartXfer+0x9dc>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	78db      	ldrb	r3, [r3, #3]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d000      	beq.n	8004c14 <USB_EPStartXfer+0x94>
 8004c12:	e347      	b.n	80052a4 <USB_EPStartXfer+0x724>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d800      	bhi.n	8004c22 <USB_EPStartXfer+0xa2>
 8004c20:	e2f0      	b.n	8005204 <USB_EPStartXfer+0x684>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	18d3      	adds	r3, r2, r3
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	2056      	movs	r0, #86	@ 0x56
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	49c0      	ldr	r1, [pc, #768]	@ (8004f38 <USB_EPStartXfer+0x3b8>)
 8004c36:	400a      	ands	r2, r1
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	18d3      	adds	r3, r2, r3
 8004c44:	183a      	adds	r2, r7, r0
 8004c46:	8812      	ldrh	r2, [r2, #0]
 8004c48:	49bc      	ldr	r1, [pc, #752]	@ (8004f3c <USB_EPStartXfer+0x3bc>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	21ac      	movs	r1, #172	@ 0xac
 8004c56:	187b      	adds	r3, r7, r1
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	18d3      	adds	r3, r2, r3
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	001a      	movs	r2, r3
 8004c70:	2340      	movs	r3, #64	@ 0x40
 8004c72:	4013      	ands	r3, r2
 8004c74:	d100      	bne.n	8004c78 <USB_EPStartXfer+0xf8>
 8004c76:	e167      	b.n	8004f48 <USB_EPStartXfer+0x3c8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d16c      	bne.n	8004d5e <USB_EPStartXfer+0x1de>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2250      	movs	r2, #80	@ 0x50
 8004c8c:	5a9b      	ldrh	r3, [r3, r2]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	001a      	movs	r2, r3
 8004c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	00da      	lsls	r2, r3, #3
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	18d3      	adds	r3, r2, r3
 8004ca2:	4aa7      	ldr	r2, [pc, #668]	@ (8004f40 <USB_EPStartXfer+0x3c0>)
 8004ca4:	4694      	mov	ip, r2
 8004ca6:	4463      	add	r3, ip
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	059b      	lsls	r3, r3, #22
 8004cb2:	0d9b      	lsrs	r3, r3, #22
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <USB_EPStartXfer+0x154>
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	4a9e      	ldr	r2, [pc, #632]	@ (8004f44 <USB_EPStartXfer+0x3c4>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	e05f      	b.n	8004d94 <USB_EPStartXfer+0x214>
 8004cd4:	22ac      	movs	r2, #172	@ 0xac
 8004cd6:	18bb      	adds	r3, r7, r2
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cdc:	d81d      	bhi.n	8004d1a <USB_EPStartXfer+0x19a>
 8004cde:	18bb      	adds	r3, r7, r2
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	21a8      	movs	r1, #168	@ 0xa8
 8004ce6:	1878      	adds	r0, r7, r1
 8004ce8:	6003      	str	r3, [r0, #0]
 8004cea:	18bb      	adds	r3, r7, r2
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <USB_EPStartXfer+0x17e>
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	187a      	adds	r2, r7, r1
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	23a8      	movs	r3, #168	@ 0xa8
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	029b      	lsls	r3, r3, #10
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e03c      	b.n	8004d94 <USB_EPStartXfer+0x214>
 8004d1a:	22ac      	movs	r2, #172	@ 0xac
 8004d1c:	18bb      	adds	r3, r7, r2
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	21a8      	movs	r1, #168	@ 0xa8
 8004d24:	1878      	adds	r0, r7, r1
 8004d26:	6003      	str	r3, [r0, #0]
 8004d28:	18bb      	adds	r3, r7, r2
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	221f      	movs	r2, #31
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d104      	bne.n	8004d3c <USB_EPStartXfer+0x1bc>
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	187a      	adds	r2, r7, r1
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	23a8      	movs	r3, #168	@ 0xa8
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	029b      	lsls	r3, r3, #10
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4a7c      	ldr	r2, [pc, #496]	@ (8004f44 <USB_EPStartXfer+0x3c4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	e01a      	b.n	8004d94 <USB_EPStartXfer+0x214>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d116      	bne.n	8004d94 <USB_EPStartXfer+0x214>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2250      	movs	r2, #80	@ 0x50
 8004d6a:	5a9b      	ldrh	r3, [r3, r2]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	001a      	movs	r2, r3
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	00da      	lsls	r2, r3, #3
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	18d3      	adds	r3, r2, r3
 8004d80:	4a6f      	ldr	r2, [pc, #444]	@ (8004f40 <USB_EPStartXfer+0x3c0>)
 8004d82:	4694      	mov	ip, r2
 8004d84:	4463      	add	r3, ip
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d88:	23ac      	movs	r3, #172	@ 0xac
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d94:	2076      	movs	r0, #118	@ 0x76
 8004d96:	183b      	adds	r3, r7, r0
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	8952      	ldrh	r2, [r2, #10]
 8004d9c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6959      	ldr	r1, [r3, #20]
 8004da2:	25ac      	movs	r5, #172	@ 0xac
 8004da4:	197b      	adds	r3, r7, r5
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b29c      	uxth	r4, r3
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	0023      	movs	r3, r4
 8004db2:	f000 fe05 	bl	80059c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	18d2      	adds	r2, r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d907      	bls.n	8004de0 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	197b      	adds	r3, r7, r5
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	1ad2      	subs	r2, r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	621a      	str	r2, [r3, #32]
 8004dde:	e007      	b.n	8004df0 <USB_EPStartXfer+0x270>
            }
            else
            {
              len = ep->xfer_len_db;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	22ac      	movs	r2, #172	@ 0xac
 8004de6:	18ba      	adds	r2, r7, r2
 8004de8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2200      	movs	r2, #0
 8004dee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d16d      	bne.n	8004ed4 <USB_EPStartXfer+0x354>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2250      	movs	r2, #80	@ 0x50
 8004e00:	5a9b      	ldrh	r3, [r3, r2]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	001a      	movs	r2, r3
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	189b      	adds	r3, r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00da      	lsls	r2, r3, #3
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	18d3      	adds	r3, r2, r3
 8004e16:	4a47      	ldr	r2, [pc, #284]	@ (8004f34 <USB_EPStartXfer+0x3b4>)
 8004e18:	4694      	mov	ip, r2
 8004e1a:	4463      	add	r3, ip
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	059b      	lsls	r3, r3, #22
 8004e26:	0d9b      	lsrs	r3, r3, #22
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	23ac      	movs	r3, #172	@ 0xac
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d108      	bne.n	8004e4a <USB_EPStartXfer+0x2ca>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4a41      	ldr	r2, [pc, #260]	@ (8004f44 <USB_EPStartXfer+0x3c4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e061      	b.n	8004f0e <USB_EPStartXfer+0x38e>
 8004e4a:	22ac      	movs	r2, #172	@ 0xac
 8004e4c:	18bb      	adds	r3, r7, r2
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e52:	d81d      	bhi.n	8004e90 <USB_EPStartXfer+0x310>
 8004e54:	18bb      	adds	r3, r7, r2
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	21a4      	movs	r1, #164	@ 0xa4
 8004e5c:	1878      	adds	r0, r7, r1
 8004e5e:	6003      	str	r3, [r0, #0]
 8004e60:	18bb      	adds	r3, r7, r2
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2201      	movs	r2, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d004      	beq.n	8004e74 <USB_EPStartXfer+0x2f4>
 8004e6a:	187b      	adds	r3, r7, r1
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	187a      	adds	r2, r7, r1
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	23a4      	movs	r3, #164	@ 0xa4
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	029b      	lsls	r3, r3, #10
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	4313      	orrs	r3, r2
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	e03e      	b.n	8004f0e <USB_EPStartXfer+0x38e>
 8004e90:	22ac      	movs	r2, #172	@ 0xac
 8004e92:	18bb      	adds	r3, r7, r2
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	21a4      	movs	r1, #164	@ 0xa4
 8004e9a:	1878      	adds	r0, r7, r1
 8004e9c:	6003      	str	r3, [r0, #0]
 8004e9e:	18bb      	adds	r3, r7, r2
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	221f      	movs	r2, #31
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d104      	bne.n	8004eb2 <USB_EPStartXfer+0x332>
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	187a      	adds	r2, r7, r1
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	23a4      	movs	r3, #164	@ 0xa4
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	029b      	lsls	r3, r3, #10
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f44 <USB_EPStartXfer+0x3c4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	e01c      	b.n	8004f0e <USB_EPStartXfer+0x38e>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d118      	bne.n	8004f0e <USB_EPStartXfer+0x38e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2250      	movs	r2, #80	@ 0x50
 8004ee4:	5a9b      	ldrh	r3, [r3, r2]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	001a      	movs	r2, r3
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	189b      	adds	r3, r3, r2
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	00da      	lsls	r2, r3, #3
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	18d3      	adds	r3, r2, r3
 8004efa:	4a0e      	ldr	r2, [pc, #56]	@ (8004f34 <USB_EPStartXfer+0x3b4>)
 8004efc:	4694      	mov	ip, r2
 8004efe:	4463      	add	r3, ip
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	23ac      	movs	r3, #172	@ 0xac
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f0e:	2076      	movs	r0, #118	@ 0x76
 8004f10:	183b      	adds	r3, r7, r0
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	8912      	ldrh	r2, [r2, #8]
 8004f16:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6959      	ldr	r1, [r3, #20]
 8004f1c:	23ac      	movs	r3, #172	@ 0xac
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	b29c      	uxth	r4, r3
 8004f24:	183b      	adds	r3, r7, r0
 8004f26:	881a      	ldrh	r2, [r3, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	0023      	movs	r3, r4
 8004f2c:	f000 fd48 	bl	80059c0 <USB_WritePMA>
 8004f30:	e314      	b.n	800555c <USB_EPStartXfer+0x9dc>
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	00000402 	.word	0x00000402
 8004f38:	ffff8f8f 	.word	0xffff8f8f
 8004f3c:	ffff8180 	.word	0xffff8180
 8004f40:	00000406 	.word	0x00000406
 8004f44:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d16d      	bne.n	800502c <USB_EPStartXfer+0x4ac>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2250      	movs	r2, #80	@ 0x50
 8004f58:	5a9b      	ldrh	r3, [r3, r2]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f60:	189b      	adds	r3, r3, r2
 8004f62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	00da      	lsls	r2, r3, #3
 8004f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f6c:	18d3      	adds	r3, r2, r3
 8004f6e:	4ac8      	ldr	r2, [pc, #800]	@ (8005290 <USB_EPStartXfer+0x710>)
 8004f70:	4694      	mov	ip, r2
 8004f72:	4463      	add	r3, ip
 8004f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	059b      	lsls	r3, r3, #22
 8004f7e:	0d9b      	lsrs	r3, r3, #22
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	23ac      	movs	r3, #172	@ 0xac
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <USB_EPStartXfer+0x422>
 8004f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4abf      	ldr	r2, [pc, #764]	@ (8005294 <USB_EPStartXfer+0x714>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e061      	b.n	8005066 <USB_EPStartXfer+0x4e6>
 8004fa2:	22ac      	movs	r2, #172	@ 0xac
 8004fa4:	18bb      	adds	r3, r7, r2
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004faa:	d81d      	bhi.n	8004fe8 <USB_EPStartXfer+0x468>
 8004fac:	18bb      	adds	r3, r7, r2
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	21a0      	movs	r1, #160	@ 0xa0
 8004fb4:	1878      	adds	r0, r7, r1
 8004fb6:	6003      	str	r3, [r0, #0]
 8004fb8:	18bb      	adds	r3, r7, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <USB_EPStartXfer+0x44c>
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	187a      	adds	r2, r7, r1
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	23a0      	movs	r3, #160	@ 0xa0
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	e03e      	b.n	8005066 <USB_EPStartXfer+0x4e6>
 8004fe8:	22ac      	movs	r2, #172	@ 0xac
 8004fea:	18bb      	adds	r3, r7, r2
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	21a0      	movs	r1, #160	@ 0xa0
 8004ff2:	1878      	adds	r0, r7, r1
 8004ff4:	6003      	str	r3, [r0, #0]
 8004ff6:	18bb      	adds	r3, r7, r2
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	221f      	movs	r2, #31
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d104      	bne.n	800500a <USB_EPStartXfer+0x48a>
 8005000:	187b      	adds	r3, r7, r1
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	187a      	adds	r2, r7, r1
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29a      	uxth	r2, r3
 8005010:	23a0      	movs	r3, #160	@ 0xa0
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	029b      	lsls	r3, r3, #10
 800501a:	b29b      	uxth	r3, r3
 800501c:	4313      	orrs	r3, r2
 800501e:	b29b      	uxth	r3, r3
 8005020:	4a9c      	ldr	r2, [pc, #624]	@ (8005294 <USB_EPStartXfer+0x714>)
 8005022:	4313      	orrs	r3, r2
 8005024:	b29a      	uxth	r2, r3
 8005026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	e01c      	b.n	8005066 <USB_EPStartXfer+0x4e6>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d118      	bne.n	8005066 <USB_EPStartXfer+0x4e6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	653b      	str	r3, [r7, #80]	@ 0x50
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2250      	movs	r2, #80	@ 0x50
 800503c:	5a9b      	ldrh	r3, [r3, r2]
 800503e:	b29b      	uxth	r3, r3
 8005040:	001a      	movs	r2, r3
 8005042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005044:	189b      	adds	r3, r3, r2
 8005046:	653b      	str	r3, [r7, #80]	@ 0x50
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	00da      	lsls	r2, r3, #3
 800504e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	4a8f      	ldr	r2, [pc, #572]	@ (8005290 <USB_EPStartXfer+0x710>)
 8005054:	4694      	mov	ip, r2
 8005056:	4463      	add	r3, ip
 8005058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505a:	23ac      	movs	r3, #172	@ 0xac
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b29a      	uxth	r2, r3
 8005062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005064:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005066:	2076      	movs	r0, #118	@ 0x76
 8005068:	183b      	adds	r3, r7, r0
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	8912      	ldrh	r2, [r2, #8]
 800506e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6959      	ldr	r1, [r3, #20]
 8005074:	25ac      	movs	r5, #172	@ 0xac
 8005076:	197b      	adds	r3, r7, r5
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b29c      	uxth	r4, r3
 800507c:	183b      	adds	r3, r7, r0
 800507e:	881a      	ldrh	r2, [r3, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	0023      	movs	r3, r4
 8005084:	f000 fc9c 	bl	80059c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	197b      	adds	r3, r7, r5
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	18d2      	adds	r2, r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d907      	bls.n	80050b2 <USB_EPStartXfer+0x532>
            {
              ep->xfer_len_db -= len;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	197b      	adds	r3, r7, r5
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	1ad2      	subs	r2, r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	621a      	str	r2, [r3, #32]
 80050b0:	e007      	b.n	80050c2 <USB_EPStartXfer+0x542>
            }
            else
            {
              len = ep->xfer_len_db;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	22ac      	movs	r2, #172	@ 0xac
 80050b8:	18ba      	adds	r2, r7, r2
 80050ba:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d16d      	bne.n	80051aa <USB_EPStartXfer+0x62a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2250      	movs	r2, #80	@ 0x50
 80050d6:	5a9b      	ldrh	r3, [r3, r2]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	001a      	movs	r2, r3
 80050dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	18d3      	adds	r3, r2, r3
 80050ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005298 <USB_EPStartXfer+0x718>)
 80050ee:	4694      	mov	ip, r2
 80050f0:	4463      	add	r3, ip
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	059b      	lsls	r3, r3, #22
 80050fc:	0d9b      	lsrs	r3, r3, #22
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	23ac      	movs	r3, #172	@ 0xac
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d108      	bne.n	8005120 <USB_EPStartXfer+0x5a0>
 800510e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	4a5f      	ldr	r2, [pc, #380]	@ (8005294 <USB_EPStartXfer+0x714>)
 8005116:	4313      	orrs	r3, r2
 8005118:	b29a      	uxth	r2, r3
 800511a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	e05f      	b.n	80051e0 <USB_EPStartXfer+0x660>
 8005120:	22ac      	movs	r2, #172	@ 0xac
 8005122:	18bb      	adds	r3, r7, r2
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b3e      	cmp	r3, #62	@ 0x3e
 8005128:	d81d      	bhi.n	8005166 <USB_EPStartXfer+0x5e6>
 800512a:	18bb      	adds	r3, r7, r2
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	219c      	movs	r1, #156	@ 0x9c
 8005132:	1878      	adds	r0, r7, r1
 8005134:	6003      	str	r3, [r0, #0]
 8005136:	18bb      	adds	r3, r7, r2
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2201      	movs	r2, #1
 800513c:	4013      	ands	r3, r2
 800513e:	d004      	beq.n	800514a <USB_EPStartXfer+0x5ca>
 8005140:	187b      	adds	r3, r7, r1
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	187a      	adds	r2, r7, r1
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29a      	uxth	r2, r3
 8005150:	239c      	movs	r3, #156	@ 0x9c
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	b29b      	uxth	r3, r3
 800515c:	4313      	orrs	r3, r2
 800515e:	b29a      	uxth	r2, r3
 8005160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e03c      	b.n	80051e0 <USB_EPStartXfer+0x660>
 8005166:	22ac      	movs	r2, #172	@ 0xac
 8005168:	18bb      	adds	r3, r7, r2
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	219c      	movs	r1, #156	@ 0x9c
 8005170:	1878      	adds	r0, r7, r1
 8005172:	6003      	str	r3, [r0, #0]
 8005174:	18bb      	adds	r3, r7, r2
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	221f      	movs	r2, #31
 800517a:	4013      	ands	r3, r2
 800517c:	d104      	bne.n	8005188 <USB_EPStartXfer+0x608>
 800517e:	187b      	adds	r3, r7, r1
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	187a      	adds	r2, r7, r1
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29a      	uxth	r2, r3
 800518e:	239c      	movs	r3, #156	@ 0x9c
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	029b      	lsls	r3, r3, #10
 8005198:	b29b      	uxth	r3, r3
 800519a:	4313      	orrs	r3, r2
 800519c:	b29b      	uxth	r3, r3
 800519e:	4a3d      	ldr	r2, [pc, #244]	@ (8005294 <USB_EPStartXfer+0x714>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e01a      	b.n	80051e0 <USB_EPStartXfer+0x660>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d116      	bne.n	80051e0 <USB_EPStartXfer+0x660>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2250      	movs	r2, #80	@ 0x50
 80051b6:	5a9b      	ldrh	r3, [r3, r2]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	001a      	movs	r2, r3
 80051bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	00da      	lsls	r2, r3, #3
 80051c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ca:	18d3      	adds	r3, r2, r3
 80051cc:	4a32      	ldr	r2, [pc, #200]	@ (8005298 <USB_EPStartXfer+0x718>)
 80051ce:	4694      	mov	ip, r2
 80051d0:	4463      	add	r3, ip
 80051d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051d4:	23ac      	movs	r3, #172	@ 0xac
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051e0:	2076      	movs	r0, #118	@ 0x76
 80051e2:	183b      	adds	r3, r7, r0
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	8952      	ldrh	r2, [r2, #10]
 80051e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6959      	ldr	r1, [r3, #20]
 80051ee:	23ac      	movs	r3, #172	@ 0xac
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	b29c      	uxth	r4, r3
 80051f6:	183b      	adds	r3, r7, r0
 80051f8:	881a      	ldrh	r2, [r3, #0]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	0023      	movs	r3, r4
 80051fe:	f000 fbdf 	bl	80059c0 <USB_WritePMA>
 8005202:	e1ab      	b.n	800555c <USB_EPStartXfer+0x9dc>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	20ac      	movs	r0, #172	@ 0xac
 800520a:	183a      	adds	r2, r7, r0
 800520c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29a      	uxth	r2, r3
 800521c:	2462      	movs	r4, #98	@ 0x62
 800521e:	193b      	adds	r3, r7, r4
 8005220:	491e      	ldr	r1, [pc, #120]	@ (800529c <USB_EPStartXfer+0x71c>)
 8005222:	400a      	ands	r2, r1
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	18d3      	adds	r3, r2, r3
 8005230:	193a      	adds	r2, r7, r4
 8005232:	8812      	ldrh	r2, [r2, #0]
 8005234:	491a      	ldr	r1, [pc, #104]	@ (80052a0 <USB_EPStartXfer+0x720>)
 8005236:	430a      	orrs	r2, r1
 8005238:	b292      	uxth	r2, r2
 800523a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2250      	movs	r2, #80	@ 0x50
 8005244:	5a9b      	ldrh	r3, [r3, r2]
 8005246:	b29b      	uxth	r3, r3
 8005248:	001a      	movs	r2, r3
 800524a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800524c:	189b      	adds	r3, r3, r2
 800524e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	00da      	lsls	r2, r3, #3
 8005256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005258:	18d3      	adds	r3, r2, r3
 800525a:	4a0d      	ldr	r2, [pc, #52]	@ (8005290 <USB_EPStartXfer+0x710>)
 800525c:	4694      	mov	ip, r2
 800525e:	4463      	add	r3, ip
 8005260:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005262:	183b      	adds	r3, r7, r0
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800526a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800526c:	2576      	movs	r5, #118	@ 0x76
 800526e:	197b      	adds	r3, r7, r5
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	8912      	ldrh	r2, [r2, #8]
 8005274:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6959      	ldr	r1, [r3, #20]
 800527a:	183b      	adds	r3, r7, r0
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b29c      	uxth	r4, r3
 8005280:	197b      	adds	r3, r7, r5
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	0023      	movs	r3, r4
 8005288:	f000 fb9a 	bl	80059c0 <USB_WritePMA>
 800528c:	e166      	b.n	800555c <USB_EPStartXfer+0x9dc>
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	00000402 	.word	0x00000402
 8005294:	ffff8000 	.word	0xffff8000
 8005298:	00000406 	.word	0x00000406
 800529c:	ffff8e8f 	.word	0xffff8e8f
 80052a0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	21ac      	movs	r1, #172	@ 0xac
 80052aa:	187b      	adds	r3, r7, r1
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	001a      	movs	r2, r3
 80052c4:	2340      	movs	r3, #64	@ 0x40
 80052c6:	4013      	ands	r3, r2
 80052c8:	d100      	bne.n	80052cc <USB_EPStartXfer+0x74c>
 80052ca:	e09f      	b.n	800540c <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d16c      	bne.n	80053b2 <USB_EPStartXfer+0x832>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2250      	movs	r2, #80	@ 0x50
 80052e0:	5a9b      	ldrh	r3, [r3, r2]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	001a      	movs	r2, r3
 80052e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052e8:	189b      	adds	r3, r3, r2
 80052ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	00da      	lsls	r2, r3, #3
 80052f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052f4:	18d3      	adds	r3, r2, r3
 80052f6:	4ad2      	ldr	r2, [pc, #840]	@ (8005640 <USB_EPStartXfer+0xac0>)
 80052f8:	4694      	mov	ip, r2
 80052fa:	4463      	add	r3, ip
 80052fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80052fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	059b      	lsls	r3, r3, #22
 8005306:	0d9b      	lsrs	r3, r3, #22
 8005308:	b29a      	uxth	r2, r3
 800530a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	187b      	adds	r3, r7, r1
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <USB_EPStartXfer+0x7a8>
 8005316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4ac9      	ldr	r2, [pc, #804]	@ (8005644 <USB_EPStartXfer+0xac4>)
 800531e:	4313      	orrs	r3, r2
 8005320:	b29a      	uxth	r2, r3
 8005322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	e05f      	b.n	80053e8 <USB_EPStartXfer+0x868>
 8005328:	22ac      	movs	r2, #172	@ 0xac
 800532a:	18bb      	adds	r3, r7, r2
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005330:	d81d      	bhi.n	800536e <USB_EPStartXfer+0x7ee>
 8005332:	18bb      	adds	r3, r7, r2
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	2198      	movs	r1, #152	@ 0x98
 800533a:	1878      	adds	r0, r7, r1
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	18bb      	adds	r3, r7, r2
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2201      	movs	r2, #1
 8005344:	4013      	ands	r3, r2
 8005346:	d004      	beq.n	8005352 <USB_EPStartXfer+0x7d2>
 8005348:	187b      	adds	r3, r7, r1
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	187a      	adds	r2, r7, r1
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	2398      	movs	r3, #152	@ 0x98
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	029b      	lsls	r3, r3, #10
 8005362:	b29b      	uxth	r3, r3
 8005364:	4313      	orrs	r3, r2
 8005366:	b29a      	uxth	r2, r3
 8005368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e03c      	b.n	80053e8 <USB_EPStartXfer+0x868>
 800536e:	22ac      	movs	r2, #172	@ 0xac
 8005370:	18bb      	adds	r3, r7, r2
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2198      	movs	r1, #152	@ 0x98
 8005378:	1878      	adds	r0, r7, r1
 800537a:	6003      	str	r3, [r0, #0]
 800537c:	18bb      	adds	r3, r7, r2
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	221f      	movs	r2, #31
 8005382:	4013      	ands	r3, r2
 8005384:	d104      	bne.n	8005390 <USB_EPStartXfer+0x810>
 8005386:	187b      	adds	r3, r7, r1
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3b01      	subs	r3, #1
 800538c:	187a      	adds	r2, r7, r1
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29a      	uxth	r2, r3
 8005396:	2398      	movs	r3, #152	@ 0x98
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	4313      	orrs	r3, r2
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	4aa7      	ldr	r2, [pc, #668]	@ (8005644 <USB_EPStartXfer+0xac4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	e01a      	b.n	80053e8 <USB_EPStartXfer+0x868>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d116      	bne.n	80053e8 <USB_EPStartXfer+0x868>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2250      	movs	r2, #80	@ 0x50
 80053be:	5a9b      	ldrh	r3, [r3, r2]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	001a      	movs	r2, r3
 80053c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	00da      	lsls	r2, r3, #3
 80053d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053d2:	18d3      	adds	r3, r2, r3
 80053d4:	4a9a      	ldr	r2, [pc, #616]	@ (8005640 <USB_EPStartXfer+0xac0>)
 80053d6:	4694      	mov	ip, r2
 80053d8:	4463      	add	r3, ip
 80053da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053dc:	23ac      	movs	r3, #172	@ 0xac
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80053e8:	2076      	movs	r0, #118	@ 0x76
 80053ea:	183b      	adds	r3, r7, r0
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	8952      	ldrh	r2, [r2, #10]
 80053f0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6959      	ldr	r1, [r3, #20]
 80053f6:	23ac      	movs	r3, #172	@ 0xac
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	b29c      	uxth	r4, r3
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	881a      	ldrh	r2, [r3, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	0023      	movs	r3, r4
 8005406:	f000 fadb 	bl	80059c0 <USB_WritePMA>
 800540a:	e0a7      	b.n	800555c <USB_EPStartXfer+0x9dc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d16d      	bne.n	80054f0 <USB_EPStartXfer+0x970>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2250      	movs	r2, #80	@ 0x50
 800541c:	5a9b      	ldrh	r3, [r3, r2]
 800541e:	b29b      	uxth	r3, r3
 8005420:	001a      	movs	r2, r3
 8005422:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005424:	189b      	adds	r3, r3, r2
 8005426:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	00da      	lsls	r2, r3, #3
 800542e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005430:	18d3      	adds	r3, r2, r3
 8005432:	4a85      	ldr	r2, [pc, #532]	@ (8005648 <USB_EPStartXfer+0xac8>)
 8005434:	4694      	mov	ip, r2
 8005436:	4463      	add	r3, ip
 8005438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800543a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	059b      	lsls	r3, r3, #22
 8005442:	0d9b      	lsrs	r3, r3, #22
 8005444:	b29a      	uxth	r2, r3
 8005446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	23ac      	movs	r3, #172	@ 0xac
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d108      	bne.n	8005466 <USB_EPStartXfer+0x8e6>
 8005454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	4a7a      	ldr	r2, [pc, #488]	@ (8005644 <USB_EPStartXfer+0xac4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	b29a      	uxth	r2, r3
 8005460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	e069      	b.n	800553a <USB_EPStartXfer+0x9ba>
 8005466:	22ac      	movs	r2, #172	@ 0xac
 8005468:	18bb      	adds	r3, r7, r2
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b3e      	cmp	r3, #62	@ 0x3e
 800546e:	d81d      	bhi.n	80054ac <USB_EPStartXfer+0x92c>
 8005470:	18bb      	adds	r3, r7, r2
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	2194      	movs	r1, #148	@ 0x94
 8005478:	1878      	adds	r0, r7, r1
 800547a:	6003      	str	r3, [r0, #0]
 800547c:	18bb      	adds	r3, r7, r2
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	4013      	ands	r3, r2
 8005484:	d004      	beq.n	8005490 <USB_EPStartXfer+0x910>
 8005486:	187b      	adds	r3, r7, r1
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	187a      	adds	r2, r7, r1
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29a      	uxth	r2, r3
 8005496:	2394      	movs	r3, #148	@ 0x94
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	e046      	b.n	800553a <USB_EPStartXfer+0x9ba>
 80054ac:	22ac      	movs	r2, #172	@ 0xac
 80054ae:	18bb      	adds	r3, r7, r2
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2194      	movs	r1, #148	@ 0x94
 80054b6:	1878      	adds	r0, r7, r1
 80054b8:	6003      	str	r3, [r0, #0]
 80054ba:	18bb      	adds	r3, r7, r2
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	221f      	movs	r2, #31
 80054c0:	4013      	ands	r3, r2
 80054c2:	d104      	bne.n	80054ce <USB_EPStartXfer+0x94e>
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	187a      	adds	r2, r7, r1
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	2394      	movs	r3, #148	@ 0x94
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4313      	orrs	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4a57      	ldr	r2, [pc, #348]	@ (8005644 <USB_EPStartXfer+0xac4>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e024      	b.n	800553a <USB_EPStartXfer+0x9ba>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d120      	bne.n	800553a <USB_EPStartXfer+0x9ba>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2184      	movs	r1, #132	@ 0x84
 80054fc:	187a      	adds	r2, r7, r1
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2250      	movs	r2, #80	@ 0x50
 8005504:	5a9b      	ldrh	r3, [r3, r2]
 8005506:	b29b      	uxth	r3, r3
 8005508:	001a      	movs	r2, r3
 800550a:	187b      	adds	r3, r7, r1
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	189b      	adds	r3, r3, r2
 8005510:	187a      	adds	r2, r7, r1
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	00da      	lsls	r2, r3, #3
 800551a:	187b      	adds	r3, r7, r1
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	18d3      	adds	r3, r2, r3
 8005520:	4a49      	ldr	r2, [pc, #292]	@ (8005648 <USB_EPStartXfer+0xac8>)
 8005522:	4694      	mov	ip, r2
 8005524:	4463      	add	r3, ip
 8005526:	2180      	movs	r1, #128	@ 0x80
 8005528:	187a      	adds	r2, r7, r1
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	23ac      	movs	r3, #172	@ 0xac
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29a      	uxth	r2, r3
 8005534:	187b      	adds	r3, r7, r1
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800553a:	2076      	movs	r0, #118	@ 0x76
 800553c:	183b      	adds	r3, r7, r0
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	8912      	ldrh	r2, [r2, #8]
 8005542:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6959      	ldr	r1, [r3, #20]
 8005548:	23ac      	movs	r3, #172	@ 0xac
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	b29c      	uxth	r4, r3
 8005550:	183b      	adds	r3, r7, r0
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	0023      	movs	r3, r4
 8005558:	f000 fa32 	bl	80059c0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	18d3      	adds	r3, r2, r3
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29a      	uxth	r2, r3
 800556a:	200a      	movs	r0, #10
 800556c:	183b      	adds	r3, r7, r0
 800556e:	4937      	ldr	r1, [pc, #220]	@ (800564c <USB_EPStartXfer+0xacc>)
 8005570:	400a      	ands	r2, r1
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	183b      	adds	r3, r7, r0
 8005576:	183a      	adds	r2, r7, r0
 8005578:	8812      	ldrh	r2, [r2, #0]
 800557a:	2110      	movs	r1, #16
 800557c:	404a      	eors	r2, r1
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	183b      	adds	r3, r7, r0
 8005582:	183a      	adds	r2, r7, r0
 8005584:	8812      	ldrh	r2, [r2, #0]
 8005586:	2120      	movs	r1, #32
 8005588:	404a      	eors	r2, r1
 800558a:	801a      	strh	r2, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	18d3      	adds	r3, r2, r3
 8005596:	183a      	adds	r2, r7, r0
 8005598:	8812      	ldrh	r2, [r2, #0]
 800559a:	492d      	ldr	r1, [pc, #180]	@ (8005650 <USB_EPStartXfer+0xad0>)
 800559c:	430a      	orrs	r2, r1
 800559e:	b292      	uxth	r2, r2
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	e0cc      	b.n	800573e <USB_EPStartXfer+0xbbe>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	7b1b      	ldrb	r3, [r3, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d159      	bne.n	8005660 <USB_EPStartXfer+0xae0>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11b      	bne.n	80055ec <USB_EPStartXfer+0xa6c>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	78db      	ldrb	r3, [r3, #3]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d117      	bne.n	80055ec <USB_EPStartXfer+0xa6c>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	18d3      	adds	r3, r2, r3
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	208e      	movs	r0, #142	@ 0x8e
 80055cc:	183b      	adds	r3, r7, r0
 80055ce:	4921      	ldr	r1, [pc, #132]	@ (8005654 <USB_EPStartXfer+0xad4>)
 80055d0:	400a      	ands	r2, r1
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	183a      	adds	r2, r7, r0
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	491d      	ldr	r1, [pc, #116]	@ (8005658 <USB_EPStartXfer+0xad8>)
 80055e4:	430a      	orrs	r2, r1
 80055e6:	b292      	uxth	r2, r2
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e016      	b.n	800561a <USB_EPStartXfer+0xa9a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	18d3      	adds	r3, r2, r3
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	208c      	movs	r0, #140	@ 0x8c
 80055fc:	183b      	adds	r3, r7, r0
 80055fe:	4917      	ldr	r1, [pc, #92]	@ (800565c <USB_EPStartXfer+0xadc>)
 8005600:	400a      	ands	r2, r1
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	18d3      	adds	r3, r2, r3
 800560e:	183a      	adds	r2, r7, r0
 8005610:	8812      	ldrh	r2, [r2, #0]
 8005612:	490f      	ldr	r1, [pc, #60]	@ (8005650 <USB_EPStartXfer+0xad0>)
 8005614:	430a      	orrs	r2, r1
 8005616:	b292      	uxth	r2, r2
 8005618:	801a      	strh	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d907      	bls.n	8005636 <USB_EPStartXfer+0xab6>
      {
        ep->xfer_len -= ep->maxpacket;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	619a      	str	r2, [r3, #24]
 8005634:	e05e      	b.n	80056f4 <USB_EPStartXfer+0xb74>
      }
      else
      {
        ep->xfer_len = 0U;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	619a      	str	r2, [r3, #24]
 800563c:	e05a      	b.n	80056f4 <USB_EPStartXfer+0xb74>
 800563e:	46c0      	nop			@ (mov r8, r8)
 8005640:	00000406 	.word	0x00000406
 8005644:	ffff8000 	.word	0xffff8000
 8005648:	00000402 	.word	0x00000402
 800564c:	ffff8fbf 	.word	0xffff8fbf
 8005650:	ffff8080 	.word	0xffff8080
 8005654:	ffff8f8f 	.word	0xffff8f8f
 8005658:	ffff8180 	.word	0xffff8180
 800565c:	ffff8e8f 	.word	0xffff8e8f
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d13b      	bne.n	80056e0 <USB_EPStartXfer+0xb60>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d041      	beq.n	80056f4 <USB_EPStartXfer+0xb74>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	18d2      	adds	r2, r2, r3
 800567a:	2192      	movs	r1, #146	@ 0x92
 800567c:	187b      	adds	r3, r7, r1
 800567e:	8812      	ldrh	r2, [r2, #0]
 8005680:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005682:	187b      	adds	r3, r7, r1
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	01db      	lsls	r3, r3, #7
 800568a:	4013      	ands	r3, r2
 800568c:	d004      	beq.n	8005698 <USB_EPStartXfer+0xb18>
 800568e:	187b      	adds	r3, r7, r1
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	2240      	movs	r2, #64	@ 0x40
 8005694:	4013      	ands	r3, r2
 8005696:	d10b      	bne.n	80056b0 <USB_EPStartXfer+0xb30>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005698:	2192      	movs	r1, #146	@ 0x92
 800569a:	187b      	adds	r3, r7, r1
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	2380      	movs	r3, #128	@ 0x80
 80056a0:	01db      	lsls	r3, r3, #7
 80056a2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056a4:	d126      	bne.n	80056f4 <USB_EPStartXfer+0xb74>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056a6:	187b      	adds	r3, r7, r1
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	2240      	movs	r2, #64	@ 0x40
 80056ac:	4013      	ands	r3, r2
 80056ae:	d121      	bne.n	80056f4 <USB_EPStartXfer+0xb74>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	18d3      	adds	r3, r2, r3
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	2090      	movs	r0, #144	@ 0x90
 80056c0:	183b      	adds	r3, r7, r0
 80056c2:	4921      	ldr	r1, [pc, #132]	@ (8005748 <USB_EPStartXfer+0xbc8>)
 80056c4:	400a      	ands	r2, r1
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	18d3      	adds	r3, r2, r3
 80056d2:	183a      	adds	r2, r7, r0
 80056d4:	8812      	ldrh	r2, [r2, #0]
 80056d6:	491d      	ldr	r1, [pc, #116]	@ (800574c <USB_EPStartXfer+0xbcc>)
 80056d8:	430a      	orrs	r2, r1
 80056da:	b292      	uxth	r2, r2
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e009      	b.n	80056f4 <USB_EPStartXfer+0xb74>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d103      	bne.n	80056f0 <USB_EPStartXfer+0xb70>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]
 80056ee:	e001      	b.n	80056f4 <USB_EPStartXfer+0xb74>
      }
      else
      {
        return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e025      	b.n	8005740 <USB_EPStartXfer+0xbc0>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	18d3      	adds	r3, r2, r3
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29a      	uxth	r2, r3
 8005702:	208a      	movs	r0, #138	@ 0x8a
 8005704:	183b      	adds	r3, r7, r0
 8005706:	4912      	ldr	r1, [pc, #72]	@ (8005750 <USB_EPStartXfer+0xbd0>)
 8005708:	400a      	ands	r2, r1
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	183b      	adds	r3, r7, r0
 800570e:	183a      	adds	r2, r7, r0
 8005710:	8812      	ldrh	r2, [r2, #0]
 8005712:	2180      	movs	r1, #128	@ 0x80
 8005714:	0149      	lsls	r1, r1, #5
 8005716:	404a      	eors	r2, r1
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	183b      	adds	r3, r7, r0
 800571c:	183a      	adds	r2, r7, r0
 800571e:	8812      	ldrh	r2, [r2, #0]
 8005720:	2180      	movs	r1, #128	@ 0x80
 8005722:	0189      	lsls	r1, r1, #6
 8005724:	404a      	eors	r2, r1
 8005726:	801a      	strh	r2, [r3, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	18d3      	adds	r3, r2, r3
 8005732:	183a      	adds	r2, r7, r0
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	4907      	ldr	r1, [pc, #28]	@ (8005754 <USB_EPStartXfer+0xbd4>)
 8005738:	430a      	orrs	r2, r1
 800573a:	b292      	uxth	r2, r2
 800573c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	b02c      	add	sp, #176	@ 0xb0
 8005746:	bdb0      	pop	{r4, r5, r7, pc}
 8005748:	ffff8f8f 	.word	0xffff8f8f
 800574c:	ffff80c0 	.word	0xffff80c0
 8005750:	ffffbf8f 	.word	0xffffbf8f
 8005754:	ffff8080 	.word	0xffff8080

08005758 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01d      	beq.n	80057a6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	18d3      	adds	r3, r2, r3
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29a      	uxth	r2, r3
 8005778:	200c      	movs	r0, #12
 800577a:	183b      	adds	r3, r7, r0
 800577c:	491b      	ldr	r1, [pc, #108]	@ (80057ec <USB_EPSetStall+0x94>)
 800577e:	400a      	ands	r2, r1
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	183b      	adds	r3, r7, r0
 8005784:	183a      	adds	r2, r7, r0
 8005786:	8812      	ldrh	r2, [r2, #0]
 8005788:	2110      	movs	r1, #16
 800578a:	404a      	eors	r2, r1
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	18d3      	adds	r3, r2, r3
 8005798:	183a      	adds	r2, r7, r0
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	4914      	ldr	r1, [pc, #80]	@ (80057f0 <USB_EPSetStall+0x98>)
 800579e:	430a      	orrs	r2, r1
 80057a0:	b292      	uxth	r2, r2
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	e01d      	b.n	80057e2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	18d3      	adds	r3, r2, r3
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	200e      	movs	r0, #14
 80057b6:	183b      	adds	r3, r7, r0
 80057b8:	490e      	ldr	r1, [pc, #56]	@ (80057f4 <USB_EPSetStall+0x9c>)
 80057ba:	400a      	ands	r2, r1
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	183b      	adds	r3, r7, r0
 80057c0:	183a      	adds	r2, r7, r0
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	2180      	movs	r1, #128	@ 0x80
 80057c6:	0149      	lsls	r1, r1, #5
 80057c8:	404a      	eors	r2, r1
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	183a      	adds	r2, r7, r0
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	4905      	ldr	r1, [pc, #20]	@ (80057f0 <USB_EPSetStall+0x98>)
 80057dc:	430a      	orrs	r2, r1
 80057de:	b292      	uxth	r2, r2
 80057e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b004      	add	sp, #16
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	ffff8fbf 	.word	0xffff8fbf
 80057f0:	ffff8080 	.word	0xffff8080
 80057f4:	ffffbf8f 	.word	0xffffbf8f

080057f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d046      	beq.n	8005898 <USB_EPClearStall+0xa0>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	18d2      	adds	r2, r2, r3
 8005814:	2110      	movs	r1, #16
 8005816:	187b      	adds	r3, r7, r1
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	187b      	adds	r3, r7, r1
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	2240      	movs	r2, #64	@ 0x40
 8005822:	4013      	ands	r3, r2
 8005824:	d016      	beq.n	8005854 <USB_EPClearStall+0x5c>
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	18d3      	adds	r3, r2, r3
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29a      	uxth	r2, r3
 8005834:	200e      	movs	r0, #14
 8005836:	183b      	adds	r3, r7, r0
 8005838:	493f      	ldr	r1, [pc, #252]	@ (8005938 <USB_EPClearStall+0x140>)
 800583a:	400a      	ands	r2, r1
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	18d3      	adds	r3, r2, r3
 8005848:	183a      	adds	r2, r7, r0
 800584a:	8812      	ldrh	r2, [r2, #0]
 800584c:	493b      	ldr	r1, [pc, #236]	@ (800593c <USB_EPClearStall+0x144>)
 800584e:	430a      	orrs	r2, r1
 8005850:	b292      	uxth	r2, r2
 8005852:	801a      	strh	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	78db      	ldrb	r3, [r3, #3]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d068      	beq.n	800592e <USB_EPClearStall+0x136>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	18d3      	adds	r3, r2, r3
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29a      	uxth	r2, r3
 800586a:	200c      	movs	r0, #12
 800586c:	183b      	adds	r3, r7, r0
 800586e:	4934      	ldr	r1, [pc, #208]	@ (8005940 <USB_EPClearStall+0x148>)
 8005870:	400a      	ands	r2, r1
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	183b      	adds	r3, r7, r0
 8005876:	183a      	adds	r2, r7, r0
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	2120      	movs	r1, #32
 800587c:	404a      	eors	r2, r1
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	183a      	adds	r2, r7, r0
 800588c:	8812      	ldrh	r2, [r2, #0]
 800588e:	492d      	ldr	r1, [pc, #180]	@ (8005944 <USB_EPClearStall+0x14c>)
 8005890:	430a      	orrs	r2, r1
 8005892:	b292      	uxth	r2, r2
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	e04a      	b.n	800592e <USB_EPClearStall+0x136>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	18d2      	adds	r2, r2, r3
 80058a2:	2116      	movs	r1, #22
 80058a4:	187b      	adds	r3, r7, r1
 80058a6:	8812      	ldrh	r2, [r2, #0]
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	187b      	adds	r3, r7, r1
 80058ac:	881a      	ldrh	r2, [r3, #0]
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	01db      	lsls	r3, r3, #7
 80058b2:	4013      	ands	r3, r2
 80058b4:	d016      	beq.n	80058e4 <USB_EPClearStall+0xec>
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	18d3      	adds	r3, r2, r3
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	2014      	movs	r0, #20
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	491b      	ldr	r1, [pc, #108]	@ (8005938 <USB_EPClearStall+0x140>)
 80058ca:	400a      	ands	r2, r1
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	18d3      	adds	r3, r2, r3
 80058d8:	183a      	adds	r2, r7, r0
 80058da:	8812      	ldrh	r2, [r2, #0]
 80058dc:	491a      	ldr	r1, [pc, #104]	@ (8005948 <USB_EPClearStall+0x150>)
 80058de:	430a      	orrs	r2, r1
 80058e0:	b292      	uxth	r2, r2
 80058e2:	801a      	strh	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	2012      	movs	r0, #18
 80058f4:	183b      	adds	r3, r7, r0
 80058f6:	4915      	ldr	r1, [pc, #84]	@ (800594c <USB_EPClearStall+0x154>)
 80058f8:	400a      	ands	r2, r1
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	183b      	adds	r3, r7, r0
 80058fe:	183a      	adds	r2, r7, r0
 8005900:	8812      	ldrh	r2, [r2, #0]
 8005902:	2180      	movs	r1, #128	@ 0x80
 8005904:	0149      	lsls	r1, r1, #5
 8005906:	404a      	eors	r2, r1
 8005908:	801a      	strh	r2, [r3, #0]
 800590a:	183b      	adds	r3, r7, r0
 800590c:	183a      	adds	r2, r7, r0
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	2180      	movs	r1, #128	@ 0x80
 8005912:	0189      	lsls	r1, r1, #6
 8005914:	404a      	eors	r2, r1
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	18d3      	adds	r3, r2, r3
 8005922:	183a      	adds	r2, r7, r0
 8005924:	8812      	ldrh	r2, [r2, #0]
 8005926:	4907      	ldr	r1, [pc, #28]	@ (8005944 <USB_EPClearStall+0x14c>)
 8005928:	430a      	orrs	r2, r1
 800592a:	b292      	uxth	r2, r2
 800592c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b006      	add	sp, #24
 8005936:	bd80      	pop	{r7, pc}
 8005938:	ffff8f8f 	.word	0xffff8f8f
 800593c:	ffff80c0 	.word	0xffff80c0
 8005940:	ffff8fbf 	.word	0xffff8fbf
 8005944:	ffff8080 	.word	0xffff8080
 8005948:	ffffc080 	.word	0xffffc080
 800594c:	ffffbf8f 	.word	0xffffbf8f

08005950 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	000a      	movs	r2, r1
 800595a:	1cfb      	adds	r3, r7, #3
 800595c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800595e:	1cfb      	adds	r3, r7, #3
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	224c      	movs	r2, #76	@ 0x4c
 800596a:	2180      	movs	r1, #128	@ 0x80
 800596c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b002      	add	sp, #8
 8005976:	bd80      	pop	{r7, pc}

08005978 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2258      	movs	r2, #88	@ 0x58
 8005984:	5a9b      	ldrh	r3, [r3, r2]
 8005986:	b29b      	uxth	r3, r3
 8005988:	4a05      	ldr	r2, [pc, #20]	@ (80059a0 <USB_DevConnect+0x28>)
 800598a:	4313      	orrs	r3, r2
 800598c:	b299      	uxth	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2258      	movs	r2, #88	@ 0x58
 8005992:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	0018      	movs	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	b002      	add	sp, #8
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	ffff8000 	.word	0xffff8000

080059a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2244      	movs	r2, #68	@ 0x44
 80059b0:	5a9b      	ldrh	r3, [r3, r2]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80059b6:	68fb      	ldr	r3, [r7, #12]
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b004      	add	sp, #16
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	@ 0x28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	0019      	movs	r1, r3
 80059cc:	1dbb      	adds	r3, r7, #6
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	1c0a      	adds	r2, r1, #0
 80059d4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059e8:	1dbb      	adds	r3, r7, #6
 80059ea:	881a      	ldrh	r2, [r3, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	18d3      	adds	r3, r2, r3
 80059f0:	2280      	movs	r2, #128	@ 0x80
 80059f2:	00d2      	lsls	r2, r2, #3
 80059f4:	4694      	mov	ip, r2
 80059f6:	4463      	add	r3, ip
 80059f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fe:	e021      	b.n	8005a44 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	2112      	movs	r1, #18
 8005a06:	187b      	adds	r3, r7, r1
 8005a08:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b21b      	sxth	r3, r3
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	b21a      	sxth	r2, r3
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	2000      	movs	r0, #0
 8005a1a:	5e1b      	ldrsh	r3, [r3, r0]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	b21a      	sxth	r2, r3
 8005a20:	187b      	adds	r3, r7, r1
 8005a22:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	187a      	adds	r2, r7, r1
 8005a28:	8812      	ldrh	r2, [r2, #0]
 8005a2a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	3302      	adds	r3, #2
 8005a30:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	3b01      	subs	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1da      	bne.n	8005a00 <USB_WritePMA+0x40>
  }
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	46c0      	nop			@ (mov r8, r8)
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b00a      	add	sp, #40	@ 0x28
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	@ 0x28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	0019      	movs	r1, r3
 8005a60:	1dbb      	adds	r3, r7, #6
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	1c0a      	adds	r2, r1, #0
 8005a68:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a7c:	1dbb      	adds	r3, r7, #6
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	18d3      	adds	r3, r2, r3
 8005a84:	2280      	movs	r2, #128	@ 0x80
 8005a86:	00d2      	lsls	r2, r2, #3
 8005a88:	4694      	mov	ip, r2
 8005a8a:	4463      	add	r3, ip
 8005a8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a92:	e018      	b.n	8005ac6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e3      	bne.n	8005a94 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005acc:	1d3b      	adds	r3, r7, #4
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	701a      	strb	r2, [r3, #0]
  }
}
 8005aea:	46c0      	nop			@ (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b00a      	add	sp, #40	@ 0x28
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	000a      	movs	r2, r1
 8005afc:	1cfb      	adds	r3, r7, #3
 8005afe:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005b00:	230f      	movs	r3, #15
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7c1b      	ldrb	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d116      	bne.n	8005b3e <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b10:	2380      	movs	r3, #128	@ 0x80
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	2181      	movs	r1, #129	@ 0x81
 8005b1a:	f002 f81e 	bl	8007b5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b24:	2380      	movs	r3, #128	@ 0x80
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	f002 f814 	bl	8007b5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	23b6      	movs	r3, #182	@ 0xb6
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	2101      	movs	r1, #1
 8005b3a:	50d1      	str	r1, [r2, r3]
 8005b3c:	e013      	b.n	8005b66 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	2340      	movs	r3, #64	@ 0x40
 8005b42:	2202      	movs	r2, #2
 8005b44:	2181      	movs	r1, #129	@ 0x81
 8005b46:	f002 f808 	bl	8007b5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	2340      	movs	r3, #64	@ 0x40
 8005b54:	2202      	movs	r2, #2
 8005b56:	2101      	movs	r1, #1
 8005b58:	f001 ffff 	bl	8007b5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	23b6      	movs	r3, #182	@ 0xb6
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	2101      	movs	r1, #1
 8005b64:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	2308      	movs	r3, #8
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	2182      	movs	r1, #130	@ 0x82
 8005b6e:	f001 fff4 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b78:	2387      	movs	r3, #135	@ 0x87
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f002 f983 	bl	8007e88 <USBD_static_malloc>
 8005b82:	0001      	movs	r1, r0
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	23ae      	movs	r3, #174	@ 0xae
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	23ae      	movs	r3, #174	@ 0xae
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	58d3      	ldr	r3, [r2, r3]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005b98:	230f      	movs	r3, #15
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e02c      	b.n	8005bfc <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	23ae      	movs	r3, #174	@ 0xae
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	58d3      	ldr	r3, [r2, r3]
 8005baa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	23af      	movs	r3, #175	@ 0xaf
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	58d3      	ldr	r3, [r2, r3]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	2385      	movs	r3, #133	@ 0x85
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	2386      	movs	r3, #134	@ 0x86
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	2100      	movs	r1, #0
 8005bca:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	7c1b      	ldrb	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	2381      	movs	r3, #129	@ 0x81
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	58d2      	ldr	r2, [r2, r3]
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	2101      	movs	r1, #1
 8005be4:	f002 f903 	bl	8007dee <USBD_LL_PrepareReceive>
 8005be8:	e008      	b.n	8005bfc <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	2381      	movs	r3, #129	@ 0x81
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	58d2      	ldr	r2, [r2, r3]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	2340      	movs	r3, #64	@ 0x40
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	f002 f8f9 	bl	8007dee <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005bfc:	230f      	movs	r3, #15
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	781b      	ldrb	r3, [r3, #0]
}
 8005c02:	0018      	movs	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b004      	add	sp, #16
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	000a      	movs	r2, r1
 8005c14:	1cfb      	adds	r3, r7, #3
 8005c16:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005c18:	230f      	movs	r3, #15
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2181      	movs	r1, #129	@ 0x81
 8005c24:	0018      	movs	r0, r3
 8005c26:	f001 ffcf 	bl	8007bc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2101      	movs	r1, #1
 8005c34:	0018      	movs	r0, r3
 8005c36:	f001 ffc7 	bl	8007bc8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	23b6      	movs	r3, #182	@ 0xb6
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	2100      	movs	r1, #0
 8005c42:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2182      	movs	r1, #130	@ 0x82
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f001 ffbd 	bl	8007bc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	23ae      	movs	r3, #174	@ 0xae
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	58d3      	ldr	r3, [r2, r3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d011      	beq.n	8005c84 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	23af      	movs	r3, #175	@ 0xaf
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	58d3      	ldr	r3, [r2, r3]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	23ae      	movs	r3, #174	@ 0xae
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	58d3      	ldr	r3, [r2, r3]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f002 f913 	bl	8007ea0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	23ae      	movs	r3, #174	@ 0xae
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	2100      	movs	r1, #0
 8005c82:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005c84:	230f      	movs	r3, #15
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	781b      	ldrb	r3, [r3, #0]
}
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b004      	add	sp, #16
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	23ae      	movs	r3, #174	@ 0xae
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	58d3      	ldr	r3, [r2, r3]
 8005ca6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005ca8:	230f      	movs	r3, #15
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005cb8:	2317      	movs	r3, #23
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	2360      	movs	r3, #96	@ 0x60
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d03d      	beq.n	8005d48 <USBD_CDC_Setup+0xb4>
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d000      	beq.n	8005cd2 <USBD_CDC_Setup+0x3e>
 8005cd0:	e094      	b.n	8005dfc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	88db      	ldrh	r3, [r3, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d02b      	beq.n	8005d32 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b25b      	sxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	da12      	bge.n	8005d0a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	23af      	movs	r3, #175	@ 0xaf
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	58d3      	ldr	r3, [r2, r3]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005cf2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	88d2      	ldrh	r2, [r2, #6]
 8005cf8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005cfa:	6939      	ldr	r1, [r7, #16]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	88da      	ldrh	r2, [r3, #6]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	0018      	movs	r0, r3
 8005d04:	f001 fb79 	bl	80073fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005d08:	e083      	b.n	8005e12 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	7859      	ldrb	r1, [r3, #1]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	2380      	movs	r3, #128	@ 0x80
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	88db      	ldrh	r3, [r3, #6]
 8005d1a:	b2d9      	uxtb	r1, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4a40      	ldr	r2, [pc, #256]	@ (8005e20 <USBD_CDC_Setup+0x18c>)
 8005d20:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005d22:	6939      	ldr	r1, [r7, #16]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	88da      	ldrh	r2, [r3, #6]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f001 fb98 	bl	8007460 <USBD_CtlPrepareRx>
      break;
 8005d30:	e06f      	b.n	8005e12 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	23af      	movs	r3, #175	@ 0xaf
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	58d3      	ldr	r3, [r2, r3]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	7850      	ldrb	r0, [r2, #1]
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	4798      	blx	r3
      break;
 8005d46:	e064      	b.n	8005e12 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b0b      	cmp	r3, #11
 8005d4e:	d037      	beq.n	8005dc0 <USBD_CDC_Setup+0x12c>
 8005d50:	dc47      	bgt.n	8005de2 <USBD_CDC_Setup+0x14e>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <USBD_CDC_Setup+0xc8>
 8005d56:	2b0a      	cmp	r3, #10
 8005d58:	d019      	beq.n	8005d8e <USBD_CDC_Setup+0xfa>
 8005d5a:	e042      	b.n	8005de2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	23a7      	movs	r3, #167	@ 0xa7
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	5cd3      	ldrb	r3, [r2, r3]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d107      	bne.n	8005d78 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005d68:	230c      	movs	r3, #12
 8005d6a:	18f9      	adds	r1, r7, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	0018      	movs	r0, r3
 8005d72:	f001 fb42 	bl	80073fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d76:	e040      	b.n	8005dfa <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	0011      	movs	r1, r2
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f001 fabd 	bl	80072fe <USBD_CtlError>
            ret = USBD_FAIL;
 8005d84:	2317      	movs	r3, #23
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	2202      	movs	r2, #2
 8005d8a:	701a      	strb	r2, [r3, #0]
          break;
 8005d8c:	e035      	b.n	8005dfa <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	23a7      	movs	r3, #167	@ 0xa7
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	5cd3      	ldrb	r3, [r2, r3]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d107      	bne.n	8005daa <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d9a:	230f      	movs	r3, #15
 8005d9c:	18f9      	adds	r1, r7, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	0018      	movs	r0, r3
 8005da4:	f001 fb29 	bl	80073fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005da8:	e027      	b.n	8005dfa <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	0011      	movs	r1, r2
 8005db0:	0018      	movs	r0, r3
 8005db2:	f001 faa4 	bl	80072fe <USBD_CtlError>
            ret = USBD_FAIL;
 8005db6:	2317      	movs	r3, #23
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	2202      	movs	r2, #2
 8005dbc:	701a      	strb	r2, [r3, #0]
          break;
 8005dbe:	e01c      	b.n	8005dfa <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	23a7      	movs	r3, #167	@ 0xa7
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d015      	beq.n	8005df8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0011      	movs	r1, r2
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f001 fa93 	bl	80072fe <USBD_CtlError>
            ret = USBD_FAIL;
 8005dd8:	2317      	movs	r3, #23
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	2202      	movs	r2, #2
 8005dde:	701a      	strb	r2, [r3, #0]
          }
          break;
 8005de0:	e00a      	b.n	8005df8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	0011      	movs	r1, r2
 8005de8:	0018      	movs	r0, r3
 8005dea:	f001 fa88 	bl	80072fe <USBD_CtlError>
          ret = USBD_FAIL;
 8005dee:	2317      	movs	r3, #23
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	2202      	movs	r2, #2
 8005df4:	701a      	strb	r2, [r3, #0]
          break;
 8005df6:	e000      	b.n	8005dfa <USBD_CDC_Setup+0x166>
          break;
 8005df8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005dfa:	e00a      	b.n	8005e12 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0011      	movs	r1, r2
 8005e02:	0018      	movs	r0, r3
 8005e04:	f001 fa7b 	bl	80072fe <USBD_CtlError>
      ret = USBD_FAIL;
 8005e08:	2317      	movs	r3, #23
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	701a      	strb	r2, [r3, #0]
      break;
 8005e10:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005e12:	2317      	movs	r3, #23
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	781b      	ldrb	r3, [r3, #0]
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b006      	add	sp, #24
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	00000201 	.word	0x00000201

08005e24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	000a      	movs	r2, r1
 8005e2e:	1cfb      	adds	r3, r7, #3
 8005e30:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	23ae      	movs	r3, #174	@ 0xae
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	58d3      	ldr	r3, [r2, r3]
 8005e3a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	23b0      	movs	r3, #176	@ 0xb0
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	58d3      	ldr	r3, [r2, r3]
 8005e44:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	23ae      	movs	r3, #174	@ 0xae
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	58d3      	ldr	r3, [r2, r3]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d03e      	beq.n	8005ed0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e52:	1cfb      	adds	r3, r7, #3
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	0013      	movs	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	189b      	adds	r3, r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	18cb      	adds	r3, r1, r3
 8005e62:	331c      	adds	r3, #28
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02b      	beq.n	8005ec2 <USBD_CDC_DataIn+0x9e>
 8005e6a:	1cfb      	adds	r3, r7, #3
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	0013      	movs	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	18cb      	adds	r3, r1, r3
 8005e7a:	331c      	adds	r3, #28
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	1cfb      	adds	r3, r7, #3
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	0013      	movs	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	189b      	adds	r3, r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	18cb      	adds	r3, r1, r3
 8005e8e:	3320      	adds	r3, #32
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	0019      	movs	r1, r3
 8005e94:	f7fa f9be 	bl	8000214 <__aeabi_uidivmod>
 8005e98:	1e0b      	subs	r3, r1, #0
 8005e9a:	d112      	bne.n	8005ec2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005e9c:	1cfb      	adds	r3, r7, #3
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	0013      	movs	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	189b      	adds	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	18cb      	adds	r3, r1, r3
 8005eac:	331c      	adds	r3, #28
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005eb2:	1cfb      	adds	r3, r7, #3
 8005eb4:	7819      	ldrb	r1, [r3, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f001 ff60 	bl	8007d80 <USBD_LL_Transmit>
 8005ec0:	e004      	b.n	8005ecc <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	2385      	movs	r3, #133	@ 0x85
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	2100      	movs	r1, #0
 8005eca:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e000      	b.n	8005ed2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005ed0:	2302      	movs	r3, #2
  }
}
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b004      	add	sp, #16
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	000a      	movs	r2, r1
 8005ee4:	1cfb      	adds	r3, r7, #3
 8005ee6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	23ae      	movs	r3, #174	@ 0xae
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	58d3      	ldr	r3, [r2, r3]
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ef2:	1cfb      	adds	r3, r7, #3
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0011      	movs	r1, r2
 8005efa:	0018      	movs	r0, r3
 8005efc:	f001 ffae 	bl	8007e5c <USBD_LL_GetRxDataSize>
 8005f00:	0001      	movs	r1, r0
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	2383      	movs	r3, #131	@ 0x83
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	23ae      	movs	r3, #174	@ 0xae
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	58d3      	ldr	r3, [r2, r3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d011      	beq.n	8005f3a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	23af      	movs	r3, #175	@ 0xaf
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	58d3      	ldr	r3, [r2, r3]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	2381      	movs	r3, #129	@ 0x81
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	58c8      	ldr	r0, [r1, r3]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2183      	movs	r1, #131	@ 0x83
 8005f2c:	0089      	lsls	r1, r1, #2
 8005f2e:	468c      	mov	ip, r1
 8005f30:	4463      	add	r3, ip
 8005f32:	0019      	movs	r1, r3
 8005f34:	4790      	blx	r2

    return USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e000      	b.n	8005f3c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005f3a:	2302      	movs	r3, #2
  }
}
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b004      	add	sp, #16
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	23ae      	movs	r3, #174	@ 0xae
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	58d3      	ldr	r3, [r2, r3]
 8005f54:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	23af      	movs	r3, #175	@ 0xaf
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	58d3      	ldr	r3, [r2, r3]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <USBD_CDC_EP0_RxReady+0x50>
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	2380      	movs	r3, #128	@ 0x80
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	5cd3      	ldrb	r3, [r2, r3]
 8005f6a:	2bff      	cmp	r3, #255	@ 0xff
 8005f6c:	d012      	beq.n	8005f94 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	23af      	movs	r3, #175	@ 0xaf
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	58d3      	ldr	r3, [r2, r3]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	68f9      	ldr	r1, [r7, #12]
 8005f7a:	2280      	movs	r2, #128	@ 0x80
 8005f7c:	0092      	lsls	r2, r2, #2
 8005f7e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8005f80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4c06      	ldr	r4, [pc, #24]	@ (8005fa0 <USBD_CDC_EP0_RxReady+0x5c>)
 8005f86:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	2380      	movs	r3, #128	@ 0x80
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	21ff      	movs	r1, #255	@ 0xff
 8005f92:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b005      	add	sp, #20
 8005f9c:	bd90      	pop	{r4, r7, pc}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	00000201 	.word	0x00000201

08005fa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2243      	movs	r2, #67	@ 0x43
 8005fb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005fb2:	4b02      	ldr	r3, [pc, #8]	@ (8005fbc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000094 	.word	0x20000094

08005fc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2243      	movs	r2, #67	@ 0x43
 8005fcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005fce:	4b02      	ldr	r3, [pc, #8]	@ (8005fd8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b002      	add	sp, #8
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000050 	.word	0x20000050

08005fdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2243      	movs	r2, #67	@ 0x43
 8005fe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005fea:	4b02      	ldr	r3, [pc, #8]	@ (8005ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b002      	add	sp, #8
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	200000d8 	.word	0x200000d8

08005ff8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	220a      	movs	r2, #10
 8006004:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006006:	4b02      	ldr	r3, [pc, #8]	@ (8006010 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8006008:	0018      	movs	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}
 8006010:	2000000c 	.word	0x2000000c

08006014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800601e:	200f      	movs	r0, #15
 8006020:	183b      	adds	r3, r7, r0
 8006022:	2202      	movs	r2, #2
 8006024:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	23af      	movs	r3, #175	@ 0xaf
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8006036:	183b      	adds	r3, r7, r0
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800603c:	230f      	movs	r3, #15
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	781b      	ldrb	r3, [r3, #0]
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b004      	add	sp, #16
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	1dbb      	adds	r3, r7, #6
 8006056:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	23ae      	movs	r3, #174	@ 0xae
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	58d3      	ldr	r3, [r2, r3]
 8006060:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	2382      	movs	r3, #130	@ 0x82
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800606c:	1dbb      	adds	r3, r7, #6
 800606e:	8819      	ldrh	r1, [r3, #0]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	2384      	movs	r3, #132	@ 0x84
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b006      	add	sp, #24
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	23ae      	movs	r3, #174	@ 0xae
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	58d3      	ldr	r3, [r2, r3]
 8006094:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	2381      	movs	r3, #129	@ 0x81
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	0018      	movs	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b004      	add	sp, #16
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	23ae      	movs	r3, #174	@ 0xae
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	58d3      	ldr	r3, [r2, r3]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	23ae      	movs	r3, #174	@ 0xae
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	58d3      	ldr	r3, [r2, r3]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d019      	beq.n	80060fc <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	7c1b      	ldrb	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	2381      	movs	r3, #129	@ 0x81
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	58d2      	ldr	r2, [r2, r3]
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	2101      	movs	r1, #1
 80060e0:	f001 fe85 	bl	8007dee <USBD_LL_PrepareReceive>
 80060e4:	e008      	b.n	80060f8 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	2381      	movs	r3, #129	@ 0x81
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	58d2      	ldr	r2, [r2, r3]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	2340      	movs	r3, #64	@ 0x40
 80060f2:	2101      	movs	r1, #1
 80060f4:	f001 fe7b 	bl	8007dee <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	e000      	b.n	80060fe <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80060fc:	2302      	movs	r3, #2
  }
}
 80060fe:	0018      	movs	r0, r3
 8006100:	46bd      	mov	sp, r7
 8006102:	b004      	add	sp, #16
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800611a:	2302      	movs	r3, #2
 800611c:	e020      	b.n	8006160 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	23ad      	movs	r3, #173	@ 0xad
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	58d3      	ldr	r3, [r2, r3]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	23ad      	movs	r3, #173	@ 0xad
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	2100      	movs	r1, #0
 8006132:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	23ac      	movs	r3, #172	@ 0xac
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	23a7      	movs	r3, #167	@ 0xa7
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	2101      	movs	r1, #1
 800614c:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1dfa      	adds	r2, r7, #7
 8006152:	7812      	ldrb	r2, [r2, #0]
 8006154:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	0018      	movs	r0, r3
 800615a:	f001 fc75 	bl	8007a48 <USBD_LL_Init>

  return USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	0018      	movs	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	b004      	add	sp, #16
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006172:	200f      	movs	r0, #15
 8006174:	183b      	adds	r3, r7, r0
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	23ad      	movs	r3, #173	@ 0xad
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800618a:	183b      	adds	r3, r7, r0
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e003      	b.n	800619a <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006192:	230f      	movs	r3, #15
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	2202      	movs	r2, #2
 8006198:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800619a:	230f      	movs	r3, #15
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	781b      	ldrb	r3, [r3, #0]
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b004      	add	sp, #16
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f001 fcac 	bl	8007b10 <USBD_LL_Start>

  return USBD_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	0018      	movs	r0, r3
 80061bc:	46bd      	mov	sp, r7
 80061be:	b002      	add	sp, #8
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	0018      	movs	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	000a      	movs	r2, r1
 80061de:	1cfb      	adds	r3, r7, #3
 80061e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061e2:	240f      	movs	r4, #15
 80061e4:	193b      	adds	r3, r7, r4
 80061e6:	2202      	movs	r2, #2
 80061e8:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	23ad      	movs	r3, #173	@ 0xad
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	58d3      	ldr	r3, [r2, r3]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00e      	beq.n	8006214 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	23ad      	movs	r3, #173	@ 0xad
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	58d3      	ldr	r3, [r2, r3]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	1cfa      	adds	r2, r7, #3
 8006202:	7811      	ldrb	r1, [r2, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	0010      	movs	r0, r2
 8006208:	4798      	blx	r3
 800620a:	1e03      	subs	r3, r0, #0
 800620c:	d102      	bne.n	8006214 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800620e:	193b      	adds	r3, r7, r4
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006214:	230f      	movs	r3, #15
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	781b      	ldrb	r3, [r3, #0]
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b005      	add	sp, #20
 8006220:	bd90      	pop	{r4, r7, pc}

08006222 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	000a      	movs	r2, r1
 800622c:	1cfb      	adds	r3, r7, #3
 800622e:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	23ad      	movs	r3, #173	@ 0xad
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	58d3      	ldr	r3, [r2, r3]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	1cfa      	adds	r2, r7, #3
 800623c:	7811      	ldrb	r1, [r2, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	0010      	movs	r0, r2
 8006242:	4798      	blx	r3

  return USBD_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b002      	add	sp, #8
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	22aa      	movs	r2, #170	@ 0xaa
 800625e:	0092      	lsls	r2, r2, #2
 8006260:	4694      	mov	ip, r2
 8006262:	4463      	add	r3, ip
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	0011      	movs	r1, r2
 8006268:	0018      	movs	r0, r3
 800626a:	f001 f810 	bl	800728e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	23a5      	movs	r3, #165	@ 0xa5
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	2101      	movs	r1, #1
 8006276:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a23      	ldr	r2, [pc, #140]	@ (8006308 <USBD_LL_SetupStage+0xb8>)
 800627c:	5a9b      	ldrh	r3, [r3, r2]
 800627e:	0019      	movs	r1, r3
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	23a6      	movs	r3, #166	@ 0xa6
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	23aa      	movs	r3, #170	@ 0xaa
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	5cd3      	ldrb	r3, [r2, r3]
 8006290:	001a      	movs	r2, r3
 8006292:	231f      	movs	r3, #31
 8006294:	4013      	ands	r3, r2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d019      	beq.n	80062ce <USBD_LL_SetupStage+0x7e>
 800629a:	d822      	bhi.n	80062e2 <USBD_LL_SetupStage+0x92>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <USBD_LL_SetupStage+0x56>
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d00a      	beq.n	80062ba <USBD_LL_SetupStage+0x6a>
 80062a4:	e01d      	b.n	80062e2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	22aa      	movs	r2, #170	@ 0xaa
 80062aa:	0092      	lsls	r2, r2, #2
 80062ac:	189a      	adds	r2, r3, r2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	0011      	movs	r1, r2
 80062b2:	0018      	movs	r0, r3
 80062b4:	f000 fa10 	bl	80066d8 <USBD_StdDevReq>
      break;
 80062b8:	e020      	b.n	80062fc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	22aa      	movs	r2, #170	@ 0xaa
 80062be:	0092      	lsls	r2, r2, #2
 80062c0:	189a      	adds	r2, r3, r2
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0011      	movs	r1, r2
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 fa78 	bl	80067bc <USBD_StdItfReq>
      break;
 80062cc:	e016      	b.n	80062fc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	22aa      	movs	r2, #170	@ 0xaa
 80062d2:	0092      	lsls	r2, r2, #2
 80062d4:	189a      	adds	r2, r3, r2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0011      	movs	r1, r2
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 fac5 	bl	800686a <USBD_StdEPReq>
      break;
 80062e0:	e00c      	b.n	80062fc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	23aa      	movs	r3, #170	@ 0xaa
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	5cd3      	ldrb	r3, [r2, r3]
 80062ea:	227f      	movs	r2, #127	@ 0x7f
 80062ec:	4393      	bics	r3, r2
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	0011      	movs	r1, r2
 80062f4:	0018      	movs	r0, r3
 80062f6:	f001 fc92 	bl	8007c1e <USBD_LL_StallEP>
      break;
 80062fa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	0018      	movs	r0, r3
 8006300:	46bd      	mov	sp, r7
 8006302:	b002      	add	sp, #8
 8006304:	bd80      	pop	{r7, pc}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	000002ae 	.word	0x000002ae

0800630c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	200b      	movs	r0, #11
 8006318:	183b      	adds	r3, r7, r0
 800631a:	1c0a      	adds	r2, r1, #0
 800631c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800631e:	183b      	adds	r3, r7, r0
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d154      	bne.n	80063d0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3355      	adds	r3, #85	@ 0x55
 800632a:	33ff      	adds	r3, #255	@ 0xff
 800632c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	23a5      	movs	r3, #165	@ 0xa5
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	58d3      	ldr	r3, [r2, r3]
 8006336:	2b03      	cmp	r3, #3
 8006338:	d139      	bne.n	80063ae <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	d919      	bls.n	800637a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800635c:	429a      	cmp	r2, r3
 800635e:	d203      	bcs.n	8006368 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006364:	b29b      	uxth	r3, r3
 8006366:	e002      	b.n	800636e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800636c:	b29b      	uxth	r3, r3
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	001a      	movs	r2, r3
 8006374:	f001 f898 	bl	80074a8 <USBD_CtlContinueRx>
 8006378:	e045      	b.n	8006406 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	23ad      	movs	r3, #173	@ 0xad
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	58d3      	ldr	r3, [r2, r3]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00d      	beq.n	80063a4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	23a7      	movs	r3, #167	@ 0xa7
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006390:	2b03      	cmp	r3, #3
 8006392:	d107      	bne.n	80063a4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	23ad      	movs	r3, #173	@ 0xad
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	58d3      	ldr	r3, [r2, r3]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	0010      	movs	r0, r2
 80063a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	0018      	movs	r0, r3
 80063a8:	f001 f891 	bl	80074ce <USBD_CtlSendStatus>
 80063ac:	e02b      	b.n	8006406 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	23a5      	movs	r3, #165	@ 0xa5
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	58d3      	ldr	r3, [r2, r3]
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d125      	bne.n	8006406 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	23a5      	movs	r3, #165	@ 0xa5
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	2100      	movs	r1, #0
 80063c2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2100      	movs	r1, #0
 80063c8:	0018      	movs	r0, r3
 80063ca:	f001 fc28 	bl	8007c1e <USBD_LL_StallEP>
 80063ce:	e01a      	b.n	8006406 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	23ad      	movs	r3, #173	@ 0xad
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	58d3      	ldr	r3, [r2, r3]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d011      	beq.n	8006402 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	23a7      	movs	r3, #167	@ 0xa7
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d10b      	bne.n	8006402 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	23ad      	movs	r3, #173	@ 0xad
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	58d3      	ldr	r3, [r2, r3]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	220b      	movs	r2, #11
 80063f6:	18ba      	adds	r2, r7, r2
 80063f8:	7811      	ldrb	r1, [r2, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	0010      	movs	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	e001      	b.n	8006406 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006402:	2302      	movs	r3, #2
 8006404:	e000      	b.n	8006408 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	0018      	movs	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	b006      	add	sp, #24
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	200b      	movs	r0, #11
 800641c:	183b      	adds	r3, r7, r0
 800641e:	1c0a      	adds	r2, r1, #0
 8006420:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006422:	183b      	adds	r3, r7, r0
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d000      	beq.n	800642c <USBD_LL_DataInStage+0x1c>
 800642a:	e08e      	b.n	800654a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3314      	adds	r3, #20
 8006430:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	23a5      	movs	r3, #165	@ 0xa5
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	58d3      	ldr	r3, [r2, r3]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d164      	bne.n	8006508 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	429a      	cmp	r2, r3
 8006448:	d915      	bls.n	8006476 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	b29a      	uxth	r2, r3
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	0018      	movs	r0, r3
 8006464:	f000 ffe9 	bl	800743a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	f001 fcbd 	bl	8007dee <USBD_LL_PrepareReceive>
 8006474:	e059      	b.n	800652a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	0019      	movs	r1, r3
 8006480:	0010      	movs	r0, r2
 8006482:	f7f9 fec7 	bl	8000214 <__aeabi_uidivmod>
 8006486:	1e0b      	subs	r3, r1, #0
 8006488:	d11f      	bne.n	80064ca <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006492:	429a      	cmp	r2, r3
 8006494:	d319      	bcc.n	80064ca <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	23a6      	movs	r3, #166	@ 0xa6
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d211      	bcs.n	80064ca <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	2100      	movs	r1, #0
 80064ac:	0018      	movs	r0, r3
 80064ae:	f000 ffc4 	bl	800743a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	23a6      	movs	r3, #166	@ 0xa6
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	2100      	movs	r1, #0
 80064ba:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	2300      	movs	r3, #0
 80064c0:	2200      	movs	r2, #0
 80064c2:	2100      	movs	r1, #0
 80064c4:	f001 fc93 	bl	8007dee <USBD_LL_PrepareReceive>
 80064c8:	e02f      	b.n	800652a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	23ad      	movs	r3, #173	@ 0xad
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	58d3      	ldr	r3, [r2, r3]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	23a7      	movs	r3, #167	@ 0xa7
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d107      	bne.n	80064f4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	23ad      	movs	r3, #173	@ 0xad
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	58d3      	ldr	r3, [r2, r3]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	0010      	movs	r0, r2
 80064f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2180      	movs	r1, #128	@ 0x80
 80064f8:	0018      	movs	r0, r3
 80064fa:	f001 fb90 	bl	8007c1e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	0018      	movs	r0, r3
 8006502:	f000 fff8 	bl	80074f6 <USBD_CtlReceiveStatus>
 8006506:	e010      	b.n	800652a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	23a5      	movs	r3, #165	@ 0xa5
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	58d3      	ldr	r3, [r2, r3]
 8006510:	2b04      	cmp	r3, #4
 8006512:	d005      	beq.n	8006520 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	23a5      	movs	r3, #165	@ 0xa5
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2180      	movs	r1, #128	@ 0x80
 8006524:	0018      	movs	r0, r3
 8006526:	f001 fb7a 	bl	8007c1e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	23a8      	movs	r3, #168	@ 0xa8
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	5cd3      	ldrb	r3, [r2, r3]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d124      	bne.n	8006580 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	0018      	movs	r0, r3
 800653a:	f7ff fe42 	bl	80061c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	23a8      	movs	r3, #168	@ 0xa8
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	2100      	movs	r1, #0
 8006546:	54d1      	strb	r1, [r2, r3]
 8006548:	e01a      	b.n	8006580 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	23ad      	movs	r3, #173	@ 0xad
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	58d3      	ldr	r3, [r2, r3]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d011      	beq.n	800657c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	23a7      	movs	r3, #167	@ 0xa7
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006560:	2b03      	cmp	r3, #3
 8006562:	d10b      	bne.n	800657c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	23ad      	movs	r3, #173	@ 0xad
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	58d3      	ldr	r3, [r2, r3]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	220b      	movs	r2, #11
 8006570:	18ba      	adds	r2, r7, r2
 8006572:	7811      	ldrb	r1, [r2, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	0010      	movs	r0, r2
 8006578:	4798      	blx	r3
 800657a:	e001      	b.n	8006580 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800657c:	2302      	movs	r3, #2
 800657e:	e000      	b.n	8006582 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	0018      	movs	r0, r3
 8006584:	46bd      	mov	sp, r7
 8006586:	b006      	add	sp, #24
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	2340      	movs	r3, #64	@ 0x40
 8006596:	2200      	movs	r2, #0
 8006598:	2100      	movs	r1, #0
 800659a:	f001 fade 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	23ac      	movs	r3, #172	@ 0xac
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	2101      	movs	r1, #1
 80065a6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	23b2      	movs	r3, #178	@ 0xb2
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	2140      	movs	r1, #64	@ 0x40
 80065b0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	2340      	movs	r3, #64	@ 0x40
 80065b6:	2200      	movs	r2, #0
 80065b8:	2180      	movs	r1, #128	@ 0x80
 80065ba:	f001 face 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2240      	movs	r2, #64	@ 0x40
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	23a7      	movs	r3, #167	@ 0xa7
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	2101      	movs	r1, #1
 80065d2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	23a5      	movs	r3, #165	@ 0xa5
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	2100      	movs	r1, #0
 80065dc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	23a9      	movs	r3, #169	@ 0xa9
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	2100      	movs	r1, #0
 80065ec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	23ae      	movs	r3, #174	@ 0xae
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	58d3      	ldr	r3, [r2, r3]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	23ad      	movs	r3, #173	@ 0xad
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	58d3      	ldr	r3, [r2, r3]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	b2d9      	uxtb	r1, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0018      	movs	r0, r3
 800660e:	4790      	blx	r2
  }

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	0018      	movs	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	b002      	add	sp, #8
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	000a      	movs	r2, r1
 8006624:	1cfb      	adds	r3, r7, #3
 8006626:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	1cfa      	adds	r2, r7, #3
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b002      	add	sp, #8
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	23a7      	movs	r3, #167	@ 0xa7
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	5cd1      	ldrb	r1, [r2, r3]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a06      	ldr	r2, [pc, #24]	@ (8006668 <USBD_LL_Suspend+0x2c>)
 8006650:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	23a7      	movs	r3, #167	@ 0xa7
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	2104      	movs	r1, #4
 800665a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b002      	add	sp, #8
 8006664:	bd80      	pop	{r7, pc}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	0000029d 	.word	0x0000029d

0800666c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	23a7      	movs	r3, #167	@ 0xa7
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	5cd3      	ldrb	r3, [r2, r3]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d106      	bne.n	800668e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a05      	ldr	r2, [pc, #20]	@ (8006698 <USBD_LL_Resume+0x2c>)
 8006684:	5c99      	ldrb	r1, [r3, r2]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	23a7      	movs	r3, #167	@ 0xa7
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	0018      	movs	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	b002      	add	sp, #8
 8006696:	bd80      	pop	{r7, pc}
 8006698:	0000029d 	.word	0x0000029d

0800669c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	23a7      	movs	r3, #167	@ 0xa7
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	5cd3      	ldrb	r3, [r2, r3]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d10e      	bne.n	80066ce <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	23ad      	movs	r3, #173	@ 0xad
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	58d3      	ldr	r3, [r2, r3]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	23ad      	movs	r3, #173	@ 0xad
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	58d3      	ldr	r3, [r2, r3]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	0010      	movs	r0, r2
 80066cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b002      	add	sp, #8
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066e2:	230f      	movs	r3, #15
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	2200      	movs	r2, #0
 80066e8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	001a      	movs	r2, r3
 80066f0:	2360      	movs	r3, #96	@ 0x60
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b40      	cmp	r3, #64	@ 0x40
 80066f6:	d004      	beq.n	8006702 <USBD_StdDevReq+0x2a>
 80066f8:	d84f      	bhi.n	800679a <USBD_StdDevReq+0xc2>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <USBD_StdDevReq+0x3e>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d14b      	bne.n	800679a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	23ad      	movs	r3, #173	@ 0xad
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	58d3      	ldr	r3, [r2, r3]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	0010      	movs	r0, r2
 8006712:	4798      	blx	r3
      break;
 8006714:	e048      	b.n	80067a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b09      	cmp	r3, #9
 800671c:	d835      	bhi.n	800678a <USBD_StdDevReq+0xb2>
 800671e:	009a      	lsls	r2, r3, #2
 8006720:	4b25      	ldr	r3, [pc, #148]	@ (80067b8 <USBD_StdDevReq+0xe0>)
 8006722:	18d3      	adds	r3, r2, r3
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f000 fa52 	bl	8006bd8 <USBD_GetDescriptor>
          break;
 8006734:	e030      	b.n	8006798 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	0011      	movs	r1, r2
 800673c:	0018      	movs	r0, r3
 800673e:	f000 fbfd 	bl	8006f3c <USBD_SetAddress>
          break;
 8006742:	e029      	b.n	8006798 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	0011      	movs	r1, r2
 800674a:	0018      	movs	r0, r3
 800674c:	f000 fc4a 	bl	8006fe4 <USBD_SetConfig>
          break;
 8006750:	e022      	b.n	8006798 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	0011      	movs	r1, r2
 8006758:	0018      	movs	r0, r3
 800675a:	f000 fce7 	bl	800712c <USBD_GetConfig>
          break;
 800675e:	e01b      	b.n	8006798 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	0011      	movs	r1, r2
 8006766:	0018      	movs	r0, r3
 8006768:	f000 fd1b 	bl	80071a2 <USBD_GetStatus>
          break;
 800676c:	e014      	b.n	8006798 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0011      	movs	r1, r2
 8006774:	0018      	movs	r0, r3
 8006776:	f000 fd4e 	bl	8007216 <USBD_SetFeature>
          break;
 800677a:	e00d      	b.n	8006798 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	0011      	movs	r1, r2
 8006782:	0018      	movs	r0, r3
 8006784:	f000 fd5d 	bl	8007242 <USBD_ClrFeature>
          break;
 8006788:	e006      	b.n	8006798 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	0011      	movs	r1, r2
 8006790:	0018      	movs	r0, r3
 8006792:	f000 fdb4 	bl	80072fe <USBD_CtlError>
          break;
 8006796:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006798:	e006      	b.n	80067a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	0011      	movs	r1, r2
 80067a0:	0018      	movs	r0, r3
 80067a2:	f000 fdac 	bl	80072fe <USBD_CtlError>
      break;
 80067a6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80067a8:	230f      	movs	r3, #15
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	781b      	ldrb	r3, [r3, #0]
}
 80067ae:	0018      	movs	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b004      	add	sp, #16
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	08008000 	.word	0x08008000

080067bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80067bc:	b5b0      	push	{r4, r5, r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c6:	230f      	movs	r3, #15
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	001a      	movs	r2, r3
 80067d4:	2360      	movs	r3, #96	@ 0x60
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b40      	cmp	r3, #64	@ 0x40
 80067da:	d004      	beq.n	80067e6 <USBD_StdItfReq+0x2a>
 80067dc:	d839      	bhi.n	8006852 <USBD_StdItfReq+0x96>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <USBD_StdItfReq+0x2a>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d135      	bne.n	8006852 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	23a7      	movs	r3, #167	@ 0xa7
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	5cd3      	ldrb	r3, [r2, r3]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d825      	bhi.n	8006840 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	889b      	ldrh	r3, [r3, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d819      	bhi.n	8006832 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	23ad      	movs	r3, #173	@ 0xad
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	58d3      	ldr	r3, [r2, r3]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	250f      	movs	r5, #15
 800680a:	197c      	adds	r4, r7, r5
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	0010      	movs	r0, r2
 8006812:	4798      	blx	r3
 8006814:	0003      	movs	r3, r0
 8006816:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	88db      	ldrh	r3, [r3, #6]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d116      	bne.n	800684e <USBD_StdItfReq+0x92>
 8006820:	197b      	adds	r3, r7, r5
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d112      	bne.n	800684e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0018      	movs	r0, r3
 800682c:	f000 fe4f 	bl	80074ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006830:	e00d      	b.n	800684e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	0011      	movs	r1, r2
 8006838:	0018      	movs	r0, r3
 800683a:	f000 fd60 	bl	80072fe <USBD_CtlError>
          break;
 800683e:	e006      	b.n	800684e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	0011      	movs	r1, r2
 8006846:	0018      	movs	r0, r3
 8006848:	f000 fd59 	bl	80072fe <USBD_CtlError>
          break;
 800684c:	e000      	b.n	8006850 <USBD_StdItfReq+0x94>
          break;
 800684e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006850:	e006      	b.n	8006860 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	0011      	movs	r1, r2
 8006858:	0018      	movs	r0, r3
 800685a:	f000 fd50 	bl	80072fe <USBD_CtlError>
      break;
 800685e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	0018      	movs	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	b004      	add	sp, #16
 8006868:	bdb0      	pop	{r4, r5, r7, pc}

0800686a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800686a:	b5b0      	push	{r4, r5, r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006874:	230f      	movs	r3, #15
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	889a      	ldrh	r2, [r3, #4]
 8006880:	230e      	movs	r3, #14
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	001a      	movs	r2, r3
 800688c:	2360      	movs	r3, #96	@ 0x60
 800688e:	4013      	ands	r3, r2
 8006890:	2b40      	cmp	r3, #64	@ 0x40
 8006892:	d006      	beq.n	80068a2 <USBD_StdEPReq+0x38>
 8006894:	d900      	bls.n	8006898 <USBD_StdEPReq+0x2e>
 8006896:	e190      	b.n	8006bba <USBD_StdEPReq+0x350>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00c      	beq.n	80068b6 <USBD_StdEPReq+0x4c>
 800689c:	2b20      	cmp	r3, #32
 800689e:	d000      	beq.n	80068a2 <USBD_StdEPReq+0x38>
 80068a0:	e18b      	b.n	8006bba <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	23ad      	movs	r3, #173	@ 0xad
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	58d3      	ldr	r3, [r2, r3]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	0010      	movs	r0, r2
 80068b2:	4798      	blx	r3
      break;
 80068b4:	e188      	b.n	8006bc8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	001a      	movs	r2, r3
 80068bc:	2360      	movs	r3, #96	@ 0x60
 80068be:	4013      	ands	r3, r2
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d10f      	bne.n	80068e4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	23ad      	movs	r3, #173	@ 0xad
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	58d3      	ldr	r3, [r2, r3]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	250f      	movs	r5, #15
 80068d0:	197c      	adds	r4, r7, r5
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	0010      	movs	r0, r2
 80068d8:	4798      	blx	r3
 80068da:	0003      	movs	r3, r0
 80068dc:	7023      	strb	r3, [r4, #0]

        return ret;
 80068de:	197b      	adds	r3, r7, r5
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	e174      	b.n	8006bce <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d007      	beq.n	80068fc <USBD_StdEPReq+0x92>
 80068ec:	dd00      	ble.n	80068f0 <USBD_StdEPReq+0x86>
 80068ee:	e15c      	b.n	8006baa <USBD_StdEPReq+0x340>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d100      	bne.n	80068f6 <USBD_StdEPReq+0x8c>
 80068f4:	e092      	b.n	8006a1c <USBD_StdEPReq+0x1b2>
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d04b      	beq.n	8006992 <USBD_StdEPReq+0x128>
 80068fa:	e156      	b.n	8006baa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	23a7      	movs	r3, #167	@ 0xa7
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	5cd3      	ldrb	r3, [r2, r3]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d002      	beq.n	800690e <USBD_StdEPReq+0xa4>
 8006908:	2b03      	cmp	r3, #3
 800690a:	d01d      	beq.n	8006948 <USBD_StdEPReq+0xde>
 800690c:	e039      	b.n	8006982 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800690e:	220e      	movs	r2, #14
 8006910:	18bb      	adds	r3, r7, r2
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d010      	beq.n	800693a <USBD_StdEPReq+0xd0>
 8006918:	18bb      	adds	r3, r7, r2
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b80      	cmp	r3, #128	@ 0x80
 800691e:	d00c      	beq.n	800693a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006920:	18bb      	adds	r3, r7, r2
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0011      	movs	r1, r2
 8006928:	0018      	movs	r0, r3
 800692a:	f001 f978 	bl	8007c1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2180      	movs	r1, #128	@ 0x80
 8006932:	0018      	movs	r0, r3
 8006934:	f001 f973 	bl	8007c1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006938:	e02a      	b.n	8006990 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	0011      	movs	r1, r2
 8006940:	0018      	movs	r0, r3
 8006942:	f000 fcdc 	bl	80072fe <USBD_CtlError>
              break;
 8006946:	e023      	b.n	8006990 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	885b      	ldrh	r3, [r3, #2]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d113      	bne.n	8006978 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006950:	220e      	movs	r2, #14
 8006952:	18bb      	adds	r3, r7, r2
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <USBD_StdEPReq+0x10e>
 800695a:	18bb      	adds	r3, r7, r2
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b80      	cmp	r3, #128	@ 0x80
 8006960:	d00a      	beq.n	8006978 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800696a:	18bb      	adds	r3, r7, r2
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	0011      	movs	r1, r2
 8006972:	0018      	movs	r0, r3
 8006974:	f001 f953 	bl	8007c1e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	0018      	movs	r0, r3
 800697c:	f000 fda7 	bl	80074ce <USBD_CtlSendStatus>

              break;
 8006980:	e006      	b.n	8006990 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f000 fcb8 	bl	80072fe <USBD_CtlError>
              break;
 800698e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006990:	e112      	b.n	8006bb8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	23a7      	movs	r3, #167	@ 0xa7
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	5cd3      	ldrb	r3, [r2, r3]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d002      	beq.n	80069a4 <USBD_StdEPReq+0x13a>
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d01d      	beq.n	80069de <USBD_StdEPReq+0x174>
 80069a2:	e032      	b.n	8006a0a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069a4:	220e      	movs	r2, #14
 80069a6:	18bb      	adds	r3, r7, r2
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d010      	beq.n	80069d0 <USBD_StdEPReq+0x166>
 80069ae:	18bb      	adds	r3, r7, r2
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b80      	cmp	r3, #128	@ 0x80
 80069b4:	d00c      	beq.n	80069d0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069b6:	18bb      	adds	r3, r7, r2
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0011      	movs	r1, r2
 80069be:	0018      	movs	r0, r3
 80069c0:	f001 f92d 	bl	8007c1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2180      	movs	r1, #128	@ 0x80
 80069c8:	0018      	movs	r0, r3
 80069ca:	f001 f928 	bl	8007c1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069ce:	e024      	b.n	8006a1a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	0011      	movs	r1, r2
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 fc91 	bl	80072fe <USBD_CtlError>
              break;
 80069dc:	e01d      	b.n	8006a1a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	885b      	ldrh	r3, [r3, #2]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d118      	bne.n	8006a18 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069e6:	210e      	movs	r1, #14
 80069e8:	187b      	adds	r3, r7, r1
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	227f      	movs	r2, #127	@ 0x7f
 80069ee:	4013      	ands	r3, r2
 80069f0:	d006      	beq.n	8006a00 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80069f2:	187b      	adds	r3, r7, r1
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	0011      	movs	r1, r2
 80069fa:	0018      	movs	r0, r3
 80069fc:	f001 f93a 	bl	8007c74 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f000 fd63 	bl	80074ce <USBD_CtlSendStatus>
              }
              break;
 8006a08:	e006      	b.n	8006a18 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	0011      	movs	r1, r2
 8006a10:	0018      	movs	r0, r3
 8006a12:	f000 fc74 	bl	80072fe <USBD_CtlError>
              break;
 8006a16:	e000      	b.n	8006a1a <USBD_StdEPReq+0x1b0>
              break;
 8006a18:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006a1a:	e0cd      	b.n	8006bb8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	23a7      	movs	r3, #167	@ 0xa7
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	5cd3      	ldrb	r3, [r2, r3]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d002      	beq.n	8006a2e <USBD_StdEPReq+0x1c4>
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d03c      	beq.n	8006aa6 <USBD_StdEPReq+0x23c>
 8006a2c:	e0b5      	b.n	8006b9a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a2e:	220e      	movs	r2, #14
 8006a30:	18bb      	adds	r3, r7, r2
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <USBD_StdEPReq+0x1e4>
 8006a38:	18bb      	adds	r3, r7, r2
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b80      	cmp	r3, #128	@ 0x80
 8006a3e:	d006      	beq.n	8006a4e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	0011      	movs	r1, r2
 8006a46:	0018      	movs	r0, r3
 8006a48:	f000 fc59 	bl	80072fe <USBD_CtlError>
                break;
 8006a4c:	e0ac      	b.n	8006ba8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a4e:	220e      	movs	r2, #14
 8006a50:	18bb      	adds	r3, r7, r2
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da0c      	bge.n	8006a74 <USBD_StdEPReq+0x20a>
 8006a5a:	18bb      	adds	r3, r7, r2
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	227f      	movs	r2, #127	@ 0x7f
 8006a60:	401a      	ands	r2, r3
 8006a62:	0013      	movs	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	189b      	adds	r3, r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	3310      	adds	r3, #16
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	18d3      	adds	r3, r2, r3
 8006a70:	3304      	adds	r3, #4
 8006a72:	e00d      	b.n	8006a90 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a74:	230e      	movs	r3, #14
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	227f      	movs	r2, #127	@ 0x7f
 8006a7c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a7e:	0013      	movs	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	3351      	adds	r3, #81	@ 0x51
 8006a88:	33ff      	adds	r3, #255	@ 0xff
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	18d3      	adds	r3, r2, r3
 8006a8e:	3304      	adds	r3, #4
 8006a90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 fcab 	bl	80073fa <USBD_CtlSendData>
              break;
 8006aa4:	e080      	b.n	8006ba8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006aa6:	220e      	movs	r2, #14
 8006aa8:	18bb      	adds	r3, r7, r2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da14      	bge.n	8006adc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ab2:	18bb      	adds	r3, r7, r2
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	220f      	movs	r2, #15
 8006ab8:	401a      	ands	r2, r3
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	0013      	movs	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	189b      	adds	r3, r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	18cb      	adds	r3, r1, r3
 8006ac6:	3318      	adds	r3, #24
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d11e      	bne.n	8006b0c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	0011      	movs	r1, r2
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 fc12 	bl	80072fe <USBD_CtlError>
                  break;
 8006ada:	e065      	b.n	8006ba8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006adc:	230e      	movs	r3, #14
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	220f      	movs	r2, #15
 8006ae4:	401a      	ands	r2, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	23ac      	movs	r3, #172	@ 0xac
 8006aea:	0059      	lsls	r1, r3, #1
 8006aec:	0013      	movs	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	18c3      	adds	r3, r0, r3
 8006af6:	185b      	adds	r3, r3, r1
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	0011      	movs	r1, r2
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 fbfa 	bl	80072fe <USBD_CtlError>
                  break;
 8006b0a:	e04d      	b.n	8006ba8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b0c:	220e      	movs	r2, #14
 8006b0e:	18bb      	adds	r3, r7, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da0c      	bge.n	8006b32 <USBD_StdEPReq+0x2c8>
 8006b18:	18bb      	adds	r3, r7, r2
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	227f      	movs	r2, #127	@ 0x7f
 8006b1e:	401a      	ands	r2, r3
 8006b20:	0013      	movs	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	189b      	adds	r3, r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	3310      	adds	r3, #16
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	18d3      	adds	r3, r2, r3
 8006b2e:	3304      	adds	r3, #4
 8006b30:	e00d      	b.n	8006b4e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b32:	230e      	movs	r3, #14
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	227f      	movs	r2, #127	@ 0x7f
 8006b3a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b3c:	0013      	movs	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	189b      	adds	r3, r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	3351      	adds	r3, #81	@ 0x51
 8006b46:	33ff      	adds	r3, #255	@ 0xff
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	18d3      	adds	r3, r2, r3
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b50:	220e      	movs	r2, #14
 8006b52:	18bb      	adds	r3, r7, r2
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <USBD_StdEPReq+0x2f8>
 8006b5a:	18bb      	adds	r3, r7, r2
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b80      	cmp	r3, #128	@ 0x80
 8006b60:	d103      	bne.n	8006b6a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e010      	b.n	8006b8c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b6a:	230e      	movs	r3, #14
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0011      	movs	r1, r2
 8006b74:	0018      	movs	r0, r3
 8006b76:	f001 f8a8 	bl	8007cca <USBD_LL_IsStallEP>
 8006b7a:	1e03      	subs	r3, r0, #0
 8006b7c:	d003      	beq.n	8006b86 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2201      	movs	r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e002      	b.n	8006b8c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	0018      	movs	r0, r3
 8006b94:	f000 fc31 	bl	80073fa <USBD_CtlSendData>
              break;
 8006b98:	e006      	b.n	8006ba8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0011      	movs	r1, r2
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f000 fbac 	bl	80072fe <USBD_CtlError>
              break;
 8006ba6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006ba8:	e006      	b.n	8006bb8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	0011      	movs	r1, r2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 fba4 	bl	80072fe <USBD_CtlError>
          break;
 8006bb6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006bb8:	e006      	b.n	8006bc8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	0011      	movs	r1, r2
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 fb9c 	bl	80072fe <USBD_CtlError>
      break;
 8006bc6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006bc8:	230f      	movs	r3, #15
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	781b      	ldrb	r3, [r3, #0]
}
 8006bce:	0018      	movs	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b004      	add	sp, #16
 8006bd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006bd8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006be2:	2308      	movs	r3, #8
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	2200      	movs	r2, #0
 8006be8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bee:	230b      	movs	r3, #11
 8006bf0:	18fb      	adds	r3, r7, r3
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	885b      	ldrh	r3, [r3, #2]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b07      	cmp	r3, #7
 8006c00:	d900      	bls.n	8006c04 <USBD_GetDescriptor+0x2c>
 8006c02:	e159      	b.n	8006eb8 <USBD_GetDescriptor+0x2e0>
 8006c04:	009a      	lsls	r2, r3, #2
 8006c06:	4bcb      	ldr	r3, [pc, #812]	@ (8006f34 <USBD_GetDescriptor+0x35c>)
 8006c08:	18d3      	adds	r3, r2, r3
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	23ac      	movs	r3, #172	@ 0xac
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	58d3      	ldr	r3, [r2, r3]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7c12      	ldrb	r2, [r2, #16]
 8006c1c:	2108      	movs	r1, #8
 8006c1e:	1879      	adds	r1, r7, r1
 8006c20:	0010      	movs	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	0003      	movs	r3, r0
 8006c26:	60fb      	str	r3, [r7, #12]
      break;
 8006c28:	e153      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	7c1b      	ldrb	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10f      	bne.n	8006c52 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	23ad      	movs	r3, #173	@ 0xad
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	58d3      	ldr	r3, [r2, r3]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	18ba      	adds	r2, r7, r2
 8006c40:	0010      	movs	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	0003      	movs	r3, r0
 8006c46:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c50:	e13f      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	23ad      	movs	r3, #173	@ 0xad
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	58d3      	ldr	r3, [r2, r3]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	18ba      	adds	r2, r7, r2
 8006c60:	0010      	movs	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	0003      	movs	r3, r0
 8006c66:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	701a      	strb	r2, [r3, #0]
      break;
 8006c70:	e12f      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	885b      	ldrh	r3, [r3, #2]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d900      	bls.n	8006c7e <USBD_GetDescriptor+0xa6>
 8006c7c:	e0d0      	b.n	8006e20 <USBD_GetDescriptor+0x248>
 8006c7e:	009a      	lsls	r2, r3, #2
 8006c80:	4bad      	ldr	r3, [pc, #692]	@ (8006f38 <USBD_GetDescriptor+0x360>)
 8006c82:	18d3      	adds	r3, r2, r3
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	23ac      	movs	r3, #172	@ 0xac
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	58d3      	ldr	r3, [r2, r3]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	23ac      	movs	r3, #172	@ 0xac
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	58d3      	ldr	r3, [r2, r3]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	2108      	movs	r1, #8
 8006ca6:	1879      	adds	r1, r7, r1
 8006ca8:	0010      	movs	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	0003      	movs	r3, r0
 8006cae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb0:	e0c3      	b.n	8006e3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	0011      	movs	r1, r2
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f000 fb20 	bl	80072fe <USBD_CtlError>
            err++;
 8006cbe:	210b      	movs	r1, #11
 8006cc0:	187b      	adds	r3, r7, r1
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	3201      	adds	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
          break;
 8006cca:	e0b6      	b.n	8006e3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	23ac      	movs	r3, #172	@ 0xac
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	58d3      	ldr	r3, [r2, r3]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00d      	beq.n	8006cf6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	23ac      	movs	r3, #172	@ 0xac
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	58d3      	ldr	r3, [r2, r3]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	7c12      	ldrb	r2, [r2, #16]
 8006ce8:	2108      	movs	r1, #8
 8006cea:	1879      	adds	r1, r7, r1
 8006cec:	0010      	movs	r0, r2
 8006cee:	4798      	blx	r3
 8006cf0:	0003      	movs	r3, r0
 8006cf2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf4:	e0a1      	b.n	8006e3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 fafe 	bl	80072fe <USBD_CtlError>
            err++;
 8006d02:	210b      	movs	r1, #11
 8006d04:	187b      	adds	r3, r7, r1
 8006d06:	781a      	ldrb	r2, [r3, #0]
 8006d08:	187b      	adds	r3, r7, r1
 8006d0a:	3201      	adds	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
          break;
 8006d0e:	e094      	b.n	8006e3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	23ac      	movs	r3, #172	@ 0xac
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	58d3      	ldr	r3, [r2, r3]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	23ac      	movs	r3, #172	@ 0xac
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	58d3      	ldr	r3, [r2, r3]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	7c12      	ldrb	r2, [r2, #16]
 8006d2c:	2108      	movs	r1, #8
 8006d2e:	1879      	adds	r1, r7, r1
 8006d30:	0010      	movs	r0, r2
 8006d32:	4798      	blx	r3
 8006d34:	0003      	movs	r3, r0
 8006d36:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d38:	e07f      	b.n	8006e3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0011      	movs	r1, r2
 8006d40:	0018      	movs	r0, r3
 8006d42:	f000 fadc 	bl	80072fe <USBD_CtlError>
            err++;
 8006d46:	210b      	movs	r1, #11
 8006d48:	187b      	adds	r3, r7, r1
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	187b      	adds	r3, r7, r1
 8006d4e:	3201      	adds	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]
          break;
 8006d52:	e072      	b.n	8006e3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	23ac      	movs	r3, #172	@ 0xac
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	58d3      	ldr	r3, [r2, r3]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00d      	beq.n	8006d7e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	23ac      	movs	r3, #172	@ 0xac
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	58d3      	ldr	r3, [r2, r3]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	7c12      	ldrb	r2, [r2, #16]
 8006d70:	2108      	movs	r1, #8
 8006d72:	1879      	adds	r1, r7, r1
 8006d74:	0010      	movs	r0, r2
 8006d76:	4798      	blx	r3
 8006d78:	0003      	movs	r3, r0
 8006d7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d7c:	e05d      	b.n	8006e3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	0011      	movs	r1, r2
 8006d84:	0018      	movs	r0, r3
 8006d86:	f000 faba 	bl	80072fe <USBD_CtlError>
            err++;
 8006d8a:	210b      	movs	r1, #11
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	187b      	adds	r3, r7, r1
 8006d92:	3201      	adds	r2, #1
 8006d94:	701a      	strb	r2, [r3, #0]
          break;
 8006d96:	e050      	b.n	8006e3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	23ac      	movs	r3, #172	@ 0xac
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	58d3      	ldr	r3, [r2, r3]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00d      	beq.n	8006dc2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	23ac      	movs	r3, #172	@ 0xac
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	58d3      	ldr	r3, [r2, r3]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	7c12      	ldrb	r2, [r2, #16]
 8006db4:	2108      	movs	r1, #8
 8006db6:	1879      	adds	r1, r7, r1
 8006db8:	0010      	movs	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	0003      	movs	r3, r0
 8006dbe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc0:	e03b      	b.n	8006e3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	0011      	movs	r1, r2
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f000 fa98 	bl	80072fe <USBD_CtlError>
            err++;
 8006dce:	210b      	movs	r1, #11
 8006dd0:	187b      	adds	r3, r7, r1
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	187b      	adds	r3, r7, r1
 8006dd6:	3201      	adds	r2, #1
 8006dd8:	701a      	strb	r2, [r3, #0]
          break;
 8006dda:	e02e      	b.n	8006e3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	23ac      	movs	r3, #172	@ 0xac
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	58d3      	ldr	r3, [r2, r3]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	23ac      	movs	r3, #172	@ 0xac
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	58d3      	ldr	r3, [r2, r3]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	7c12      	ldrb	r2, [r2, #16]
 8006df8:	2108      	movs	r1, #8
 8006dfa:	1879      	adds	r1, r7, r1
 8006dfc:	0010      	movs	r0, r2
 8006dfe:	4798      	blx	r3
 8006e00:	0003      	movs	r3, r0
 8006e02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e04:	e019      	b.n	8006e3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0011      	movs	r1, r2
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f000 fa76 	bl	80072fe <USBD_CtlError>
            err++;
 8006e12:	210b      	movs	r1, #11
 8006e14:	187b      	adds	r3, r7, r1
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	187b      	adds	r3, r7, r1
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	701a      	strb	r2, [r3, #0]
          break;
 8006e1e:	e00c      	b.n	8006e3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0011      	movs	r1, r2
 8006e26:	0018      	movs	r0, r3
 8006e28:	f000 fa69 	bl	80072fe <USBD_CtlError>
          err++;
 8006e2c:	210b      	movs	r1, #11
 8006e2e:	187b      	adds	r3, r7, r1
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	187b      	adds	r3, r7, r1
 8006e34:	3201      	adds	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006e38:	e04b      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>
 8006e3a:	e04a      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7c1b      	ldrb	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	23ad      	movs	r3, #173	@ 0xad
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	58d3      	ldr	r3, [r2, r3]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	2208      	movs	r2, #8
 8006e50:	18ba      	adds	r2, r7, r2
 8006e52:	0010      	movs	r0, r2
 8006e54:	4798      	blx	r3
 8006e56:	0003      	movs	r3, r0
 8006e58:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e5a:	e03a      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0011      	movs	r1, r2
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fa4b 	bl	80072fe <USBD_CtlError>
        err++;
 8006e68:	210b      	movs	r1, #11
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	781a      	ldrb	r2, [r3, #0]
 8006e6e:	187b      	adds	r3, r7, r1
 8006e70:	3201      	adds	r2, #1
 8006e72:	701a      	strb	r2, [r3, #0]
      break;
 8006e74:	e02d      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	7c1b      	ldrb	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10f      	bne.n	8006e9e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	23ad      	movs	r3, #173	@ 0xad
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	58d3      	ldr	r3, [r2, r3]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e88:	2208      	movs	r2, #8
 8006e8a:	18ba      	adds	r2, r7, r2
 8006e8c:	0010      	movs	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	0003      	movs	r3, r0
 8006e92:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	2207      	movs	r2, #7
 8006e9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e9c:	e019      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	0011      	movs	r1, r2
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f000 fa2a 	bl	80072fe <USBD_CtlError>
        err++;
 8006eaa:	210b      	movs	r1, #11
 8006eac:	187b      	adds	r3, r7, r1
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	187b      	adds	r3, r7, r1
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	701a      	strb	r2, [r3, #0]
      break;
 8006eb6:	e00c      	b.n	8006ed2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0011      	movs	r1, r2
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f000 fa1d 	bl	80072fe <USBD_CtlError>
      err++;
 8006ec4:	210b      	movs	r1, #11
 8006ec6:	187b      	adds	r3, r7, r1
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	187b      	adds	r3, r7, r1
 8006ecc:	3201      	adds	r2, #1
 8006ece:	701a      	strb	r2, [r3, #0]
      break;
 8006ed0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8006ed2:	230b      	movs	r3, #11
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d127      	bne.n	8006f2c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006edc:	2108      	movs	r1, #8
 8006ede:	187b      	adds	r3, r7, r1
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d019      	beq.n	8006f1a <USBD_GetDescriptor+0x342>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	88db      	ldrh	r3, [r3, #6]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d015      	beq.n	8006f1a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	88da      	ldrh	r2, [r3, #6]
 8006ef2:	187b      	adds	r3, r7, r1
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	1c18      	adds	r0, r3, #0
 8006ef8:	1c11      	adds	r1, r2, #0
 8006efa:	b28a      	uxth	r2, r1
 8006efc:	b283      	uxth	r3, r0
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d900      	bls.n	8006f04 <USBD_GetDescriptor+0x32c>
 8006f02:	1c01      	adds	r1, r0, #0
 8006f04:	b28a      	uxth	r2, r1
 8006f06:	2108      	movs	r1, #8
 8006f08:	187b      	adds	r3, r7, r1
 8006f0a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f000 fa70 	bl	80073fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	88db      	ldrh	r3, [r3, #6]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d105      	bne.n	8006f2e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	0018      	movs	r0, r3
 8006f26:	f000 fad2 	bl	80074ce <USBD_CtlSendStatus>
 8006f2a:	e000      	b.n	8006f2e <USBD_GetDescriptor+0x356>
    return;
 8006f2c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b004      	add	sp, #16
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	08008028 	.word	0x08008028
 8006f38:	08008048 	.word	0x08008048

08006f3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f3c:	b590      	push	{r4, r7, lr}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d13d      	bne.n	8006fca <USBD_SetAddress+0x8e>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88db      	ldrh	r3, [r3, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d139      	bne.n	8006fca <USBD_SetAddress+0x8e>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f5c:	d835      	bhi.n	8006fca <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	230f      	movs	r3, #15
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	217f      	movs	r1, #127	@ 0x7f
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	23a7      	movs	r3, #167	@ 0xa7
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	5cd3      	ldrb	r3, [r2, r3]
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d106      	bne.n	8006f88 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0011      	movs	r1, r2
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 f9bc 	bl	80072fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f86:	e027      	b.n	8006fd8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	240f      	movs	r4, #15
 8006f8c:	193a      	adds	r2, r7, r4
 8006f8e:	4914      	ldr	r1, [pc, #80]	@ (8006fe0 <USBD_SetAddress+0xa4>)
 8006f90:	7812      	ldrb	r2, [r2, #0]
 8006f92:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f94:	193b      	adds	r3, r7, r4
 8006f96:	781a      	ldrb	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	0011      	movs	r1, r2
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f000 fec4 	bl	8007d2a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f000 fa92 	bl	80074ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	23a7      	movs	r3, #167	@ 0xa7
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	2102      	movs	r1, #2
 8006fba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbc:	e00c      	b.n	8006fd8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	23a7      	movs	r3, #167	@ 0xa7
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc8:	e006      	b.n	8006fd8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	0011      	movs	r1, r2
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f000 f994 	bl	80072fe <USBD_CtlError>
  }
}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	46c0      	nop			@ (mov r8, r8)
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b005      	add	sp, #20
 8006fde:	bd90      	pop	{r4, r7, pc}
 8006fe0:	0000029e 	.word	0x0000029e

08006fe4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8007128 <USBD_SetConfig+0x144>)
 8006ff6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8007128 <USBD_SetConfig+0x144>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d906      	bls.n	800700e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	0011      	movs	r1, r2
 8007006:	0018      	movs	r0, r3
 8007008:	f000 f979 	bl	80072fe <USBD_CtlError>
 800700c:	e088      	b.n	8007120 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	23a7      	movs	r3, #167	@ 0xa7
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	5cd3      	ldrb	r3, [r2, r3]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d002      	beq.n	8007020 <USBD_SetConfig+0x3c>
 800701a:	2b03      	cmp	r3, #3
 800701c:	d029      	beq.n	8007072 <USBD_SetConfig+0x8e>
 800701e:	e071      	b.n	8007104 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007020:	4b41      	ldr	r3, [pc, #260]	@ (8007128 <USBD_SetConfig+0x144>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01f      	beq.n	8007068 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007028:	4b3f      	ldr	r3, [pc, #252]	@ (8007128 <USBD_SetConfig+0x144>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	001a      	movs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	23a7      	movs	r3, #167	@ 0xa7
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	2103      	movs	r1, #3
 800703a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800703c:	4b3a      	ldr	r3, [pc, #232]	@ (8007128 <USBD_SetConfig+0x144>)
 800703e:	781a      	ldrb	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0011      	movs	r1, r2
 8007044:	0018      	movs	r0, r3
 8007046:	f7ff f8c5 	bl	80061d4 <USBD_SetClassConfig>
 800704a:	0003      	movs	r3, r0
 800704c:	2b02      	cmp	r3, #2
 800704e:	d106      	bne.n	800705e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	0011      	movs	r1, r2
 8007056:	0018      	movs	r0, r3
 8007058:	f000 f951 	bl	80072fe <USBD_CtlError>
            return;
 800705c:	e060      	b.n	8007120 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	0018      	movs	r0, r3
 8007062:	f000 fa34 	bl	80074ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007066:	e05b      	b.n	8007120 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	0018      	movs	r0, r3
 800706c:	f000 fa2f 	bl	80074ce <USBD_CtlSendStatus>
        break;
 8007070:	e056      	b.n	8007120 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007072:	4b2d      	ldr	r3, [pc, #180]	@ (8007128 <USBD_SetConfig+0x144>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d115      	bne.n	80070a6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	23a7      	movs	r3, #167	@ 0xa7
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	2102      	movs	r1, #2
 8007082:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007084:	4b28      	ldr	r3, [pc, #160]	@ (8007128 <USBD_SetConfig+0x144>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	001a      	movs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800708e:	4b26      	ldr	r3, [pc, #152]	@ (8007128 <USBD_SetConfig+0x144>)
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	0011      	movs	r1, r2
 8007096:	0018      	movs	r0, r3
 8007098:	f7ff f8c3 	bl	8006222 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	0018      	movs	r0, r3
 80070a0:	f000 fa15 	bl	80074ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070a4:	e03c      	b.n	8007120 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80070a6:	4b20      	ldr	r3, [pc, #128]	@ (8007128 <USBD_SetConfig+0x144>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	001a      	movs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d022      	beq.n	80070fa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	0011      	movs	r1, r2
 80070be:	0018      	movs	r0, r3
 80070c0:	f7ff f8af 	bl	8006222 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80070c4:	4b18      	ldr	r3, [pc, #96]	@ (8007128 <USBD_SetConfig+0x144>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	001a      	movs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070ce:	4b16      	ldr	r3, [pc, #88]	@ (8007128 <USBD_SetConfig+0x144>)
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	0011      	movs	r1, r2
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7ff f87c 	bl	80061d4 <USBD_SetClassConfig>
 80070dc:	0003      	movs	r3, r0
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d106      	bne.n	80070f0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	0011      	movs	r1, r2
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 f908 	bl	80072fe <USBD_CtlError>
            return;
 80070ee:	e017      	b.n	8007120 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 f9eb 	bl	80074ce <USBD_CtlSendStatus>
        break;
 80070f8:	e012      	b.n	8007120 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f000 f9e6 	bl	80074ce <USBD_CtlSendStatus>
        break;
 8007102:	e00d      	b.n	8007120 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	0011      	movs	r1, r2
 800710a:	0018      	movs	r0, r3
 800710c:	f000 f8f7 	bl	80072fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007110:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <USBD_SetConfig+0x144>)
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f7ff f882 	bl	8006222 <USBD_ClrClassConfig>
        break;
 800711e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8007120:	46bd      	mov	sp, r7
 8007122:	b002      	add	sp, #8
 8007124:	bd80      	pop	{r7, pc}
 8007126:	46c0      	nop			@ (mov r8, r8)
 8007128:	200001f4 	.word	0x200001f4

0800712c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	88db      	ldrh	r3, [r3, #6]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d006      	beq.n	800714c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	0011      	movs	r1, r2
 8007144:	0018      	movs	r0, r3
 8007146:	f000 f8da 	bl	80072fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800714a:	e026      	b.n	800719a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	23a7      	movs	r3, #167	@ 0xa7
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	5cd3      	ldrb	r3, [r2, r3]
 8007154:	2b02      	cmp	r3, #2
 8007156:	dc02      	bgt.n	800715e <USBD_GetConfig+0x32>
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc03      	bgt.n	8007164 <USBD_GetConfig+0x38>
 800715c:	e016      	b.n	800718c <USBD_GetConfig+0x60>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d00c      	beq.n	800717c <USBD_GetConfig+0x50>
 8007162:	e013      	b.n	800718c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3308      	adds	r3, #8
 800716e:	0019      	movs	r1, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	0018      	movs	r0, r3
 8007176:	f000 f940 	bl	80073fa <USBD_CtlSendData>
        break;
 800717a:	e00e      	b.n	800719a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1d19      	adds	r1, r3, #4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	0018      	movs	r0, r3
 8007186:	f000 f938 	bl	80073fa <USBD_CtlSendData>
        break;
 800718a:	e006      	b.n	800719a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	0011      	movs	r1, r2
 8007192:	0018      	movs	r0, r3
 8007194:	f000 f8b3 	bl	80072fe <USBD_CtlError>
        break;
 8007198:	46c0      	nop			@ (mov r8, r8)
}
 800719a:	46c0      	nop			@ (mov r8, r8)
 800719c:	46bd      	mov	sp, r7
 800719e:	b002      	add	sp, #8
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	23a7      	movs	r3, #167	@ 0xa7
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	5cd3      	ldrb	r3, [r2, r3]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d822      	bhi.n	8007200 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	88db      	ldrh	r3, [r3, #6]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d006      	beq.n	80071d0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	0011      	movs	r1, r2
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 f898 	bl	80072fe <USBD_CtlError>
        break;
 80071ce:	e01e      	b.n	800720e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	23a9      	movs	r3, #169	@ 0xa9
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	58d3      	ldr	r3, [r2, r3]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	2202      	movs	r2, #2
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	330c      	adds	r3, #12
 80071f2:	0019      	movs	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	0018      	movs	r0, r3
 80071fa:	f000 f8fe 	bl	80073fa <USBD_CtlSendData>
      break;
 80071fe:	e006      	b.n	800720e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	0011      	movs	r1, r2
 8007206:	0018      	movs	r0, r3
 8007208:	f000 f879 	bl	80072fe <USBD_CtlError>
      break;
 800720c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800720e:	46c0      	nop			@ (mov r8, r8)
 8007210:	46bd      	mov	sp, r7
 8007212:	b002      	add	sp, #8
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	885b      	ldrh	r3, [r3, #2]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d108      	bne.n	800723a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	23a9      	movs	r3, #169	@ 0xa9
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	2101      	movs	r1, #1
 8007230:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	0018      	movs	r0, r3
 8007236:	f000 f94a 	bl	80074ce <USBD_CtlSendStatus>
  }
}
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	b002      	add	sp, #8
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	23a7      	movs	r3, #167	@ 0xa7
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	5cd3      	ldrb	r3, [r2, r3]
 8007254:	3b01      	subs	r3, #1
 8007256:	2b02      	cmp	r3, #2
 8007258:	d80d      	bhi.n	8007276 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	885b      	ldrh	r3, [r3, #2]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d110      	bne.n	8007284 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	23a9      	movs	r3, #169	@ 0xa9
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	2100      	movs	r1, #0
 800726a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	0018      	movs	r0, r3
 8007270:	f000 f92d 	bl	80074ce <USBD_CtlSendStatus>
      }
      break;
 8007274:	e006      	b.n	8007284 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	0011      	movs	r1, r2
 800727c:	0018      	movs	r0, r3
 800727e:	f000 f83e 	bl	80072fe <USBD_CtlError>
      break;
 8007282:	e000      	b.n	8007286 <USBD_ClrFeature+0x44>
      break;
 8007284:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b002      	add	sp, #8
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	785a      	ldrb	r2, [r3, #1]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	3302      	adds	r3, #2
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	001a      	movs	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	3303      	adds	r3, #3
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	18d3      	adds	r3, r2, r3
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	3304      	adds	r3, #4
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	001a      	movs	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	3305      	adds	r3, #5
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	18d3      	adds	r3, r2, r3
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	3306      	adds	r3, #6
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	001a      	movs	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	3307      	adds	r3, #7
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	18d3      	adds	r3, r2, r3
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	80da      	strh	r2, [r3, #6]

}
 80072f6:	46c0      	nop			@ (mov r8, r8)
 80072f8:	46bd      	mov	sp, r7
 80072fa:	b002      	add	sp, #8
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2180      	movs	r1, #128	@ 0x80
 800730c:	0018      	movs	r0, r3
 800730e:	f000 fc86 	bl	8007c1e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2100      	movs	r1, #0
 8007316:	0018      	movs	r0, r3
 8007318:	f000 fc81 	bl	8007c1e <USBD_LL_StallEP>
}
 800731c:	46c0      	nop			@ (mov r8, r8)
 800731e:	46bd      	mov	sp, r7
 8007320:	b002      	add	sp, #8
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007330:	2417      	movs	r4, #23
 8007332:	193b      	adds	r3, r7, r4
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d03c      	beq.n	80073b8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	0018      	movs	r0, r3
 8007342:	f000 f83d 	bl	80073c0 <USBD_GetLen>
 8007346:	0003      	movs	r3, r0
 8007348:	3301      	adds	r3, #1
 800734a:	b29b      	uxth	r3, r3
 800734c:	18db      	adds	r3, r3, r3
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007354:	193b      	adds	r3, r7, r4
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	193a      	adds	r2, r7, r4
 800735a:	1c59      	adds	r1, r3, #1
 800735c:	7011      	strb	r1, [r2, #0]
 800735e:	001a      	movs	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	189b      	adds	r3, r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800736a:	193b      	adds	r3, r7, r4
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	193a      	adds	r2, r7, r4
 8007370:	1c59      	adds	r1, r3, #1
 8007372:	7011      	strb	r1, [r2, #0]
 8007374:	001a      	movs	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	189b      	adds	r3, r3, r2
 800737a:	2203      	movs	r2, #3
 800737c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800737e:	e017      	b.n	80073b0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	60fa      	str	r2, [r7, #12]
 8007386:	2417      	movs	r4, #23
 8007388:	193a      	adds	r2, r7, r4
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	1939      	adds	r1, r7, r4
 800738e:	1c50      	adds	r0, r2, #1
 8007390:	7008      	strb	r0, [r1, #0]
 8007392:	0011      	movs	r1, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	1852      	adds	r2, r2, r1
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800739c:	193b      	adds	r3, r7, r4
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	193a      	adds	r2, r7, r4
 80073a2:	1c59      	adds	r1, r3, #1
 80073a4:	7011      	strb	r1, [r2, #0]
 80073a6:	001a      	movs	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e3      	bne.n	8007380 <USBD_GetString+0x5c>
    }
  }
}
 80073b8:	46c0      	nop			@ (mov r8, r8)
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b007      	add	sp, #28
 80073be:	bd90      	pop	{r4, r7, pc}

080073c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073c8:	230f      	movs	r3, #15
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80073d0:	e008      	b.n	80073e4 <USBD_GetLen+0x24>
  {
    len++;
 80073d2:	210f      	movs	r1, #15
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	781a      	ldrb	r2, [r3, #0]
 80073d8:	187b      	adds	r3, r7, r1
 80073da:	3201      	adds	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
    buf++;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3301      	adds	r3, #1
 80073e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f2      	bne.n	80073d2 <USBD_GetLen+0x12>
  }

  return len;
 80073ec:	230f      	movs	r3, #15
 80073ee:	18fb      	adds	r3, r7, r3
 80073f0:	781b      	ldrb	r3, [r3, #0]
}
 80073f2:	0018      	movs	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b004      	add	sp, #16
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	1dbb      	adds	r3, r7, #6
 8007406:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	23a5      	movs	r3, #165	@ 0xa5
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	2102      	movs	r1, #2
 8007410:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007412:	1dbb      	adds	r3, r7, #6
 8007414:	881a      	ldrh	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800741a:	1dbb      	adds	r3, r7, #6
 800741c:	881a      	ldrh	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007422:	1dbb      	adds	r3, r7, #6
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	2100      	movs	r1, #0
 800742c:	f000 fca8 	bl	8007d80 <USBD_LL_Transmit>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	0018      	movs	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	b004      	add	sp, #16
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	1dbb      	adds	r3, r7, #6
 8007446:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007448:	1dbb      	adds	r3, r7, #6
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	2100      	movs	r1, #0
 8007452:	f000 fc95 	bl	8007d80 <USBD_LL_Transmit>

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	0018      	movs	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	b004      	add	sp, #16
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	1dbb      	adds	r3, r7, #6
 800746c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	23a5      	movs	r3, #165	@ 0xa5
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	2103      	movs	r1, #3
 8007476:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007478:	1dbb      	adds	r3, r7, #6
 800747a:	8819      	ldrh	r1, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	23ae      	movs	r3, #174	@ 0xae
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8007484:	1dbb      	adds	r3, r7, #6
 8007486:	8819      	ldrh	r1, [r3, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	23b0      	movs	r3, #176	@ 0xb0
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007490:	1dbb      	adds	r3, r7, #6
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	2100      	movs	r1, #0
 800749a:	f000 fca8 	bl	8007dee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	0018      	movs	r0, r3
 80074a2:	46bd      	mov	sp, r7
 80074a4:	b004      	add	sp, #16
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	1dbb      	adds	r3, r7, #6
 80074b4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074b6:	1dbb      	adds	r3, r7, #6
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	2100      	movs	r1, #0
 80074c0:	f000 fc95 	bl	8007dee <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	0018      	movs	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	b004      	add	sp, #16
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	23a5      	movs	r3, #165	@ 0xa5
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	2104      	movs	r1, #4
 80074de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	2300      	movs	r3, #0
 80074e4:	2200      	movs	r2, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	f000 fc4a 	bl	8007d80 <USBD_LL_Transmit>

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	0018      	movs	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b002      	add	sp, #8
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	23a5      	movs	r3, #165	@ 0xa5
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	2105      	movs	r1, #5
 8007506:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	2300      	movs	r3, #0
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	f000 fc6d 	bl	8007dee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	0018      	movs	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	b002      	add	sp, #8
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007524:	4914      	ldr	r1, [pc, #80]	@ (8007578 <MX_USB_DEVICE_Init+0x58>)
 8007526:	4b15      	ldr	r3, [pc, #84]	@ (800757c <MX_USB_DEVICE_Init+0x5c>)
 8007528:	2200      	movs	r2, #0
 800752a:	0018      	movs	r0, r3
 800752c:	f7fe fdeb 	bl	8006106 <USBD_Init>
 8007530:	1e03      	subs	r3, r0, #0
 8007532:	d001      	beq.n	8007538 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007534:	f7f9 f822 	bl	800057c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007538:	4a11      	ldr	r2, [pc, #68]	@ (8007580 <MX_USB_DEVICE_Init+0x60>)
 800753a:	4b10      	ldr	r3, [pc, #64]	@ (800757c <MX_USB_DEVICE_Init+0x5c>)
 800753c:	0011      	movs	r1, r2
 800753e:	0018      	movs	r0, r3
 8007540:	f7fe fe12 	bl	8006168 <USBD_RegisterClass>
 8007544:	1e03      	subs	r3, r0, #0
 8007546:	d001      	beq.n	800754c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007548:	f7f9 f818 	bl	800057c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800754c:	4a0d      	ldr	r2, [pc, #52]	@ (8007584 <MX_USB_DEVICE_Init+0x64>)
 800754e:	4b0b      	ldr	r3, [pc, #44]	@ (800757c <MX_USB_DEVICE_Init+0x5c>)
 8007550:	0011      	movs	r1, r2
 8007552:	0018      	movs	r0, r3
 8007554:	f7fe fd5e 	bl	8006014 <USBD_CDC_RegisterInterface>
 8007558:	1e03      	subs	r3, r0, #0
 800755a:	d001      	beq.n	8007560 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800755c:	f7f9 f80e 	bl	800057c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <MX_USB_DEVICE_Init+0x5c>)
 8007562:	0018      	movs	r0, r3
 8007564:	f7fe fe20 	bl	80061a8 <USBD_Start>
 8007568:	1e03      	subs	r3, r0, #0
 800756a:	d001      	beq.n	8007570 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800756c:	f7f9 f806 	bl	800057c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007570:	46c0      	nop			@ (mov r8, r8)
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	2000012c 	.word	0x2000012c
 800757c:	200001f8 	.word	0x200001f8
 8007580:	20000018 	.word	0x20000018
 8007584:	2000011c 	.word	0x2000011c

08007588 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800758c:	4907      	ldr	r1, [pc, #28]	@ (80075ac <CDC_Init_FS+0x24>)
 800758e:	4b08      	ldr	r3, [pc, #32]	@ (80075b0 <CDC_Init_FS+0x28>)
 8007590:	2200      	movs	r2, #0
 8007592:	0018      	movs	r0, r3
 8007594:	f7fe fd59 	bl	800604a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007598:	4a06      	ldr	r2, [pc, #24]	@ (80075b4 <CDC_Init_FS+0x2c>)
 800759a:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <CDC_Init_FS+0x28>)
 800759c:	0011      	movs	r1, r2
 800759e:	0018      	movs	r0, r3
 80075a0:	f7fe fd6f 	bl	8006082 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075a4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075a6:	0018      	movs	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	200008bc 	.word	0x200008bc
 80075b0:	200001f8 	.word	0x200001f8
 80075b4:	200004bc 	.word	0x200004bc

080075b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075be:	0018      	movs	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6039      	str	r1, [r7, #0]
 80075cc:	0011      	movs	r1, r2
 80075ce:	1dfb      	adds	r3, r7, #7
 80075d0:	1c02      	adds	r2, r0, #0
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	1d3b      	adds	r3, r7, #4
 80075d6:	1c0a      	adds	r2, r1, #0
 80075d8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075da:	1dfb      	adds	r3, r7, #7
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b23      	cmp	r3, #35	@ 0x23
 80075e0:	d804      	bhi.n	80075ec <CDC_Control_FS+0x28>
 80075e2:	009a      	lsls	r2, r3, #2
 80075e4:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <CDC_Control_FS+0x34>)
 80075e6:	18d3      	adds	r3, r2, r3
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075ec:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80075ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b002      	add	sp, #8
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08008060 	.word	0x08008060

080075fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <CDC_Receive_FS+0x28>)
 800760a:	0011      	movs	r1, r2
 800760c:	0018      	movs	r0, r3
 800760e:	f7fe fd38 	bl	8006082 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007612:	4b04      	ldr	r3, [pc, #16]	@ (8007624 <CDC_Receive_FS+0x28>)
 8007614:	0018      	movs	r0, r3
 8007616:	f7fe fd48 	bl	80060aa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800761a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	b002      	add	sp, #8
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200001f8 	.word	0x200001f8

08007628 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	0002      	movs	r2, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	1dfb      	adds	r3, r7, #7
 8007634:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2212      	movs	r2, #18
 800763a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800763c:	4b02      	ldr	r3, [pc, #8]	@ (8007648 <USBD_FS_DeviceDescriptor+0x20>)
}
 800763e:	0018      	movs	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	b002      	add	sp, #8
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	20000148 	.word	0x20000148

0800764c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	0002      	movs	r2, r0
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	1dfb      	adds	r3, r7, #7
 8007658:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2204      	movs	r2, #4
 800765e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007660:	4b02      	ldr	r3, [pc, #8]	@ (800766c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007662:	0018      	movs	r0, r3
 8007664:	46bd      	mov	sp, r7
 8007666:	b002      	add	sp, #8
 8007668:	bd80      	pop	{r7, pc}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	2000015c 	.word	0x2000015c

08007670 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	0002      	movs	r2, r0
 8007678:	6039      	str	r1, [r7, #0]
 800767a:	1dfb      	adds	r3, r7, #7
 800767c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800767e:	1dfb      	adds	r3, r7, #7
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4908      	ldr	r1, [pc, #32]	@ (80076ac <USBD_FS_ProductStrDescriptor+0x3c>)
 800768a:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <USBD_FS_ProductStrDescriptor+0x40>)
 800768c:	0018      	movs	r0, r3
 800768e:	f7ff fe49 	bl	8007324 <USBD_GetString>
 8007692:	e005      	b.n	80076a0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	4905      	ldr	r1, [pc, #20]	@ (80076ac <USBD_FS_ProductStrDescriptor+0x3c>)
 8007698:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <USBD_FS_ProductStrDescriptor+0x40>)
 800769a:	0018      	movs	r0, r3
 800769c:	f7ff fe42 	bl	8007324 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076a0:	4b02      	ldr	r3, [pc, #8]	@ (80076ac <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80076a2:	0018      	movs	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b002      	add	sp, #8
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	46c0      	nop			@ (mov r8, r8)
 80076ac:	20000cbc 	.word	0x20000cbc
 80076b0:	08007f9c 	.word	0x08007f9c

080076b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	0002      	movs	r2, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	1dfb      	adds	r3, r7, #7
 80076c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	4904      	ldr	r1, [pc, #16]	@ (80076d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076c6:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7ff fe2b 	bl	8007324 <USBD_GetString>
  return USBD_StrDesc;
 80076ce:	4b02      	ldr	r3, [pc, #8]	@ (80076d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000cbc 	.word	0x20000cbc
 80076dc:	08007fb4 	.word	0x08007fb4

080076e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	0002      	movs	r2, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	1dfb      	adds	r3, r7, #7
 80076ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	221a      	movs	r2, #26
 80076f2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076f4:	f000 f84c 	bl	8007790 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076f8:	4b02      	ldr	r3, [pc, #8]	@ (8007704 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80076fa:	0018      	movs	r0, r3
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b002      	add	sp, #8
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	20000160 	.word	0x20000160

08007708 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	0002      	movs	r2, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	1dfb      	adds	r3, r7, #7
 8007714:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007716:	1dfb      	adds	r3, r7, #7
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4908      	ldr	r1, [pc, #32]	@ (8007744 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007722:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007724:	0018      	movs	r0, r3
 8007726:	f7ff fdfd 	bl	8007324 <USBD_GetString>
 800772a:	e005      	b.n	8007738 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	4905      	ldr	r1, [pc, #20]	@ (8007744 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007732:	0018      	movs	r0, r3
 8007734:	f7ff fdf6 	bl	8007324 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007738:	4b02      	ldr	r3, [pc, #8]	@ (8007744 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800773a:	0018      	movs	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	b002      	add	sp, #8
 8007740:	bd80      	pop	{r7, pc}
 8007742:	46c0      	nop			@ (mov r8, r8)
 8007744:	20000cbc 	.word	0x20000cbc
 8007748:	08007fc8 	.word	0x08007fc8

0800774c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	0002      	movs	r2, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	1dfb      	adds	r3, r7, #7
 8007758:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800775a:	1dfb      	adds	r3, r7, #7
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	4908      	ldr	r1, [pc, #32]	@ (8007788 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007766:	4b09      	ldr	r3, [pc, #36]	@ (800778c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007768:	0018      	movs	r0, r3
 800776a:	f7ff fddb 	bl	8007324 <USBD_GetString>
 800776e:	e005      	b.n	800777c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	4905      	ldr	r1, [pc, #20]	@ (8007788 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007774:	4b05      	ldr	r3, [pc, #20]	@ (800778c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007776:	0018      	movs	r0, r3
 8007778:	f7ff fdd4 	bl	8007324 <USBD_GetString>
  }
  return USBD_StrDesc;
 800777c:	4b02      	ldr	r3, [pc, #8]	@ (8007788 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800777e:	0018      	movs	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	b002      	add	sp, #8
 8007784:	bd80      	pop	{r7, pc}
 8007786:	46c0      	nop			@ (mov r8, r8)
 8007788:	20000cbc 	.word	0x20000cbc
 800778c:	08007fd4 	.word	0x08007fd4

08007790 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <Get_SerialNum+0x48>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800779c:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <Get_SerialNum+0x4c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077a2:	4b0f      	ldr	r3, [pc, #60]	@ (80077e0 <Get_SerialNum+0x50>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	18d3      	adds	r3, r2, r3
 80077ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077b6:	490b      	ldr	r1, [pc, #44]	@ (80077e4 <Get_SerialNum+0x54>)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2208      	movs	r2, #8
 80077bc:	0018      	movs	r0, r3
 80077be:	f000 f815 	bl	80077ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077c2:	4909      	ldr	r1, [pc, #36]	@ (80077e8 <Get_SerialNum+0x58>)
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2204      	movs	r2, #4
 80077c8:	0018      	movs	r0, r3
 80077ca:	f000 f80f 	bl	80077ec <IntToUnicode>
  }
}
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b004      	add	sp, #16
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	46c0      	nop			@ (mov r8, r8)
 80077d8:	1ff80050 	.word	0x1ff80050
 80077dc:	1ff80054 	.word	0x1ff80054
 80077e0:	1ff80058 	.word	0x1ff80058
 80077e4:	20000162 	.word	0x20000162
 80077e8:	20000172 	.word	0x20000172

080077ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	1dfb      	adds	r3, r7, #7
 80077f8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80077fa:	2117      	movs	r1, #23
 80077fc:	187b      	adds	r3, r7, r1
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007802:	187b      	adds	r3, r7, r1
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	e02f      	b.n	800786a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	0f1b      	lsrs	r3, r3, #28
 800780e:	2b09      	cmp	r3, #9
 8007810:	d80d      	bhi.n	800782e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	0f1b      	lsrs	r3, r3, #28
 8007816:	b2da      	uxtb	r2, r3
 8007818:	2317      	movs	r3, #23
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	0019      	movs	r1, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	185b      	adds	r3, r3, r1
 8007826:	3230      	adds	r2, #48	@ 0x30
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e00c      	b.n	8007848 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	0f1b      	lsrs	r3, r3, #28
 8007832:	b2da      	uxtb	r2, r3
 8007834:	2317      	movs	r3, #23
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	0019      	movs	r1, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	185b      	adds	r3, r3, r1
 8007842:	3237      	adds	r2, #55	@ 0x37
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800784e:	2117      	movs	r1, #23
 8007850:	187b      	adds	r3, r7, r1
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	3301      	adds	r3, #1
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	18d3      	adds	r3, r2, r3
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007860:	187b      	adds	r3, r7, r1
 8007862:	781a      	ldrb	r2, [r3, #0]
 8007864:	187b      	adds	r3, r7, r1
 8007866:	3201      	adds	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	2317      	movs	r3, #23
 800786c:	18fa      	adds	r2, r7, r3
 800786e:	1dfb      	adds	r3, r7, #7
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d3c8      	bcc.n	800780a <IntToUnicode+0x1e>
  }
}
 8007878:	46c0      	nop			@ (mov r8, r8)
 800787a:	46c0      	nop			@ (mov r8, r8)
 800787c:	46bd      	mov	sp, r7
 800787e:	b006      	add	sp, #24
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0a      	ldr	r2, [pc, #40]	@ (80078bc <HAL_PCD_MspInit+0x38>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d10e      	bne.n	80078b4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007896:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <HAL_PCD_MspInit+0x3c>)
 8007898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800789a:	4b09      	ldr	r3, [pc, #36]	@ (80078c0 <HAL_PCD_MspInit+0x3c>)
 800789c:	2180      	movs	r1, #128	@ 0x80
 800789e:	0409      	lsls	r1, r1, #16
 80078a0:	430a      	orrs	r2, r1
 80078a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	201f      	movs	r0, #31
 80078aa:	f7f9 f837 	bl	800091c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80078ae:	201f      	movs	r0, #31
 80078b0:	f7f9 f849 	bl	8000946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80078b4:	46c0      	nop			@ (mov r8, r8)
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b002      	add	sp, #8
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	40005c00 	.word	0x40005c00
 80078c0:	40021000 	.word	0x40021000

080078c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	23b6      	movs	r3, #182	@ 0xb6
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	58d2      	ldr	r2, [r2, r3]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	21a6      	movs	r1, #166	@ 0xa6
 80078d8:	0089      	lsls	r1, r1, #2
 80078da:	468c      	mov	ip, r1
 80078dc:	4463      	add	r3, ip
 80078de:	0019      	movs	r1, r3
 80078e0:	0010      	movs	r0, r2
 80078e2:	f7fe fcb5 	bl	8006250 <USBD_LL_SetupStage>
}
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	46bd      	mov	sp, r7
 80078ea:	b002      	add	sp, #8
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ee:	b590      	push	{r4, r7, lr}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	000a      	movs	r2, r1
 80078f8:	1cfb      	adds	r3, r7, #3
 80078fa:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	23b6      	movs	r3, #182	@ 0xb6
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	58d4      	ldr	r4, [r2, r3]
 8007904:	1cfb      	adds	r3, r7, #3
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	23b2      	movs	r3, #178	@ 0xb2
 800790c:	0059      	lsls	r1, r3, #1
 800790e:	0013      	movs	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	189b      	adds	r3, r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	18c3      	adds	r3, r0, r3
 8007918:	185b      	adds	r3, r3, r1
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	1cfb      	adds	r3, r7, #3
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	0019      	movs	r1, r3
 8007922:	0020      	movs	r0, r4
 8007924:	f7fe fcf2 	bl	800630c <USBD_LL_DataOutStage>
}
 8007928:	46c0      	nop			@ (mov r8, r8)
 800792a:	46bd      	mov	sp, r7
 800792c:	b003      	add	sp, #12
 800792e:	bd90      	pop	{r4, r7, pc}

08007930 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	000a      	movs	r2, r1
 800793a:	1cfb      	adds	r3, r7, #3
 800793c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	23b6      	movs	r3, #182	@ 0xb6
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	58d0      	ldr	r0, [r2, r3]
 8007946:	1cfb      	adds	r3, r7, #3
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	0013      	movs	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	189b      	adds	r3, r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	18cb      	adds	r3, r1, r3
 8007956:	3324      	adds	r3, #36	@ 0x24
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	1cfb      	adds	r3, r7, #3
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	0019      	movs	r1, r3
 8007960:	f7fe fd56 	bl	8006410 <USBD_LL_DataInStage>
}
 8007964:	46c0      	nop			@ (mov r8, r8)
 8007966:	46bd      	mov	sp, r7
 8007968:	b002      	add	sp, #8
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	23b6      	movs	r3, #182	@ 0xb6
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	58d3      	ldr	r3, [r2, r3]
 800797c:	0018      	movs	r0, r3
 800797e:	f7fe fe8d 	bl	800669c <USBD_LL_SOF>
}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	46bd      	mov	sp, r7
 8007986:	b002      	add	sp, #8
 8007988:	bd80      	pop	{r7, pc}

0800798a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007992:	230f      	movs	r3, #15
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	2201      	movs	r2, #1
 8007998:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	795b      	ldrb	r3, [r3, #5]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d001      	beq.n	80079a6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80079a2:	f7f8 fdeb 	bl	800057c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	23b6      	movs	r3, #182	@ 0xb6
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	58d2      	ldr	r2, [r2, r3]
 80079ae:	230f      	movs	r3, #15
 80079b0:	18fb      	adds	r3, r7, r3
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	0019      	movs	r1, r3
 80079b6:	0010      	movs	r0, r2
 80079b8:	f7fe fe2f 	bl	800661a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	23b6      	movs	r3, #182	@ 0xb6
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	58d3      	ldr	r3, [r2, r3]
 80079c4:	0018      	movs	r0, r3
 80079c6:	f7fe fde0 	bl	800658a <USBD_LL_Reset>
}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	46bd      	mov	sp, r7
 80079ce:	b004      	add	sp, #16
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	23b6      	movs	r3, #182	@ 0xb6
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	58d3      	ldr	r3, [r2, r3]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7fe fe29 	bl	800663c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7a5b      	ldrb	r3, [r3, #9]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079f2:	4b05      	ldr	r3, [pc, #20]	@ (8007a08 <HAL_PCD_SuspendCallback+0x34>)
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	4b04      	ldr	r3, [pc, #16]	@ (8007a08 <HAL_PCD_SuspendCallback+0x34>)
 80079f8:	2106      	movs	r1, #6
 80079fa:	430a      	orrs	r2, r1
 80079fc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80079fe:	46c0      	nop			@ (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b002      	add	sp, #8
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	e000ed00 	.word	0xe000ed00

08007a0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	7a5b      	ldrb	r3, [r3, #9]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a1c:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <HAL_PCD_ResumeCallback+0x38>)
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	4b08      	ldr	r3, [pc, #32]	@ (8007a44 <HAL_PCD_ResumeCallback+0x38>)
 8007a22:	2106      	movs	r1, #6
 8007a24:	438a      	bics	r2, r1
 8007a26:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007a28:	f000 fa42 	bl	8007eb0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	23b6      	movs	r3, #182	@ 0xb6
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	58d3      	ldr	r3, [r2, r3]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7fe fe19 	bl	800666c <USBD_LL_Resume>
}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b002      	add	sp, #8
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	46c0      	nop			@ (mov r8, r8)
 8007a44:	e000ed00 	.word	0xe000ed00

08007a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a50:	4a2d      	ldr	r2, [pc, #180]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a52:	23b6      	movs	r3, #182	@ 0xb6
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	23b0      	movs	r3, #176	@ 0xb0
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4929      	ldr	r1, [pc, #164]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a62:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007a64:	4b28      	ldr	r3, [pc, #160]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a66:	4a29      	ldr	r2, [pc, #164]	@ (8007b0c <USBD_LL_Init+0xc4>)
 8007a68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a6a:	4b27      	ldr	r3, [pc, #156]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a6c:	2208      	movs	r2, #8
 8007a6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a70:	4b25      	ldr	r3, [pc, #148]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a72:	2202      	movs	r2, #2
 8007a74:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a76:	4b24      	ldr	r3, [pc, #144]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a78:	2202      	movs	r2, #2
 8007a7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a7c:	4b22      	ldr	r3, [pc, #136]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a82:	4b21      	ldr	r3, [pc, #132]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a88:	4b1f      	ldr	r3, [pc, #124]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b08 <USBD_LL_Init+0xc0>)
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7f9 f911 	bl	8000cb8 <HAL_PCD_Init>
 8007a96:	1e03      	subs	r3, r0, #0
 8007a98:	d001      	beq.n	8007a9e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007a9a:	f7f8 fd6f 	bl	800057c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	23b0      	movs	r3, #176	@ 0xb0
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	58d0      	ldr	r0, [r2, r3]
 8007aa6:	2318      	movs	r3, #24
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	f7fa fecc 	bl	8002848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	23b0      	movs	r3, #176	@ 0xb0
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	58d0      	ldr	r0, [r2, r3]
 8007ab8:	2358      	movs	r3, #88	@ 0x58
 8007aba:	2200      	movs	r2, #0
 8007abc:	2180      	movs	r1, #128	@ 0x80
 8007abe:	f7fa fec3 	bl	8002848 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	23b0      	movs	r3, #176	@ 0xb0
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	58d0      	ldr	r0, [r2, r3]
 8007aca:	23c0      	movs	r3, #192	@ 0xc0
 8007acc:	2200      	movs	r2, #0
 8007ace:	2181      	movs	r1, #129	@ 0x81
 8007ad0:	f7fa feba 	bl	8002848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	23b0      	movs	r3, #176	@ 0xb0
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	58d0      	ldr	r0, [r2, r3]
 8007adc:	2388      	movs	r3, #136	@ 0x88
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	f7fa feb0 	bl	8002848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	23b0      	movs	r3, #176	@ 0xb0
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	58d0      	ldr	r0, [r2, r3]
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	2200      	movs	r2, #0
 8007af6:	2182      	movs	r1, #130	@ 0x82
 8007af8:	f7fa fea6 	bl	8002848 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	0018      	movs	r0, r3
 8007b00:	46bd      	mov	sp, r7
 8007b02:	b002      	add	sp, #8
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	46c0      	nop			@ (mov r8, r8)
 8007b08:	20000ebc 	.word	0x20000ebc
 8007b0c:	40005c00 	.word	0x40005c00

08007b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b18:	210f      	movs	r1, #15
 8007b1a:	187b      	adds	r3, r7, r1
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b20:	260e      	movs	r6, #14
 8007b22:	19bb      	adds	r3, r7, r6
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	23b0      	movs	r3, #176	@ 0xb0
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	58d3      	ldr	r3, [r2, r3]
 8007b30:	000d      	movs	r5, r1
 8007b32:	187c      	adds	r4, r7, r1
 8007b34:	0018      	movs	r0, r3
 8007b36:	f7f9 f9b3 	bl	8000ea0 <HAL_PCD_Start>
 8007b3a:	0003      	movs	r3, r0
 8007b3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b3e:	19bc      	adds	r4, r7, r6
 8007b40:	197b      	adds	r3, r7, r5
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f000 f9ba 	bl	8007ebe <USBD_Get_USB_Status>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007b4e:	19bb      	adds	r3, r7, r6
 8007b50:	781b      	ldrb	r3, [r3, #0]
}
 8007b52:	0018      	movs	r0, r3
 8007b54:	46bd      	mov	sp, r7
 8007b56:	b005      	add	sp, #20
 8007b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	000c      	movs	r4, r1
 8007b64:	0010      	movs	r0, r2
 8007b66:	0019      	movs	r1, r3
 8007b68:	1cfb      	adds	r3, r7, #3
 8007b6a:	1c22      	adds	r2, r4, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	1cbb      	adds	r3, r7, #2
 8007b70:	1c02      	adds	r2, r0, #0
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	003b      	movs	r3, r7
 8007b76:	1c0a      	adds	r2, r1, #0
 8007b78:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7a:	260f      	movs	r6, #15
 8007b7c:	19bb      	adds	r3, r7, r6
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b82:	250e      	movs	r5, #14
 8007b84:	197b      	adds	r3, r7, r5
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	23b0      	movs	r3, #176	@ 0xb0
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	58d0      	ldr	r0, [r2, r3]
 8007b92:	19bc      	adds	r4, r7, r6
 8007b94:	1cbb      	adds	r3, r7, #2
 8007b96:	781d      	ldrb	r5, [r3, #0]
 8007b98:	003b      	movs	r3, r7
 8007b9a:	881a      	ldrh	r2, [r3, #0]
 8007b9c:	1cfb      	adds	r3, r7, #3
 8007b9e:	7819      	ldrb	r1, [r3, #0]
 8007ba0:	002b      	movs	r3, r5
 8007ba2:	f7f9 fb11 	bl	80011c8 <HAL_PCD_EP_Open>
 8007ba6:	0003      	movs	r3, r0
 8007ba8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007baa:	250e      	movs	r5, #14
 8007bac:	197c      	adds	r4, r7, r5
 8007bae:	19bb      	adds	r3, r7, r6
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f000 f983 	bl	8007ebe <USBD_Get_USB_Status>
 8007bb8:	0003      	movs	r3, r0
 8007bba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007bbc:	197b      	adds	r3, r7, r5
 8007bbe:	781b      	ldrb	r3, [r3, #0]
}
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	b005      	add	sp, #20
 8007bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bc8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	000a      	movs	r2, r1
 8007bd2:	1cfb      	adds	r3, r7, #3
 8007bd4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd6:	210f      	movs	r1, #15
 8007bd8:	187b      	adds	r3, r7, r1
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bde:	260e      	movs	r6, #14
 8007be0:	19bb      	adds	r3, r7, r6
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	23b0      	movs	r3, #176	@ 0xb0
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	58d2      	ldr	r2, [r2, r3]
 8007bee:	000d      	movs	r5, r1
 8007bf0:	187c      	adds	r4, r7, r1
 8007bf2:	1cfb      	adds	r3, r7, #3
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	0019      	movs	r1, r3
 8007bf8:	0010      	movs	r0, r2
 8007bfa:	f7f9 fb56 	bl	80012aa <HAL_PCD_EP_Close>
 8007bfe:	0003      	movs	r3, r0
 8007c00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c02:	19bc      	adds	r4, r7, r6
 8007c04:	197b      	adds	r3, r7, r5
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	0018      	movs	r0, r3
 8007c0a:	f000 f958 	bl	8007ebe <USBD_Get_USB_Status>
 8007c0e:	0003      	movs	r3, r0
 8007c10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c12:	19bb      	adds	r3, r7, r6
 8007c14:	781b      	ldrb	r3, [r3, #0]
}
 8007c16:	0018      	movs	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b005      	add	sp, #20
 8007c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c1e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	000a      	movs	r2, r1
 8007c28:	1cfb      	adds	r3, r7, #3
 8007c2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2c:	210f      	movs	r1, #15
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c34:	260e      	movs	r6, #14
 8007c36:	19bb      	adds	r3, r7, r6
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	23b0      	movs	r3, #176	@ 0xb0
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	58d2      	ldr	r2, [r2, r3]
 8007c44:	000d      	movs	r5, r1
 8007c46:	187c      	adds	r4, r7, r1
 8007c48:	1cfb      	adds	r3, r7, #3
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	0019      	movs	r1, r3
 8007c4e:	0010      	movs	r0, r2
 8007c50:	f7f9 fc08 	bl	8001464 <HAL_PCD_EP_SetStall>
 8007c54:	0003      	movs	r3, r0
 8007c56:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c58:	19bc      	adds	r4, r7, r6
 8007c5a:	197b      	adds	r3, r7, r5
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f000 f92d 	bl	8007ebe <USBD_Get_USB_Status>
 8007c64:	0003      	movs	r3, r0
 8007c66:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c68:	19bb      	adds	r3, r7, r6
 8007c6a:	781b      	ldrb	r3, [r3, #0]
}
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b005      	add	sp, #20
 8007c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c74 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	000a      	movs	r2, r1
 8007c7e:	1cfb      	adds	r3, r7, #3
 8007c80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c82:	210f      	movs	r1, #15
 8007c84:	187b      	adds	r3, r7, r1
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8a:	260e      	movs	r6, #14
 8007c8c:	19bb      	adds	r3, r7, r6
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	23b0      	movs	r3, #176	@ 0xb0
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	58d2      	ldr	r2, [r2, r3]
 8007c9a:	000d      	movs	r5, r1
 8007c9c:	187c      	adds	r4, r7, r1
 8007c9e:	1cfb      	adds	r3, r7, #3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	0010      	movs	r0, r2
 8007ca6:	f7f9 fc39 	bl	800151c <HAL_PCD_EP_ClrStall>
 8007caa:	0003      	movs	r3, r0
 8007cac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cae:	19bc      	adds	r4, r7, r6
 8007cb0:	197b      	adds	r3, r7, r5
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f000 f902 	bl	8007ebe <USBD_Get_USB_Status>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007cbe:	19bb      	adds	r3, r7, r6
 8007cc0:	781b      	ldrb	r3, [r3, #0]
}
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	b005      	add	sp, #20
 8007cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	000a      	movs	r2, r1
 8007cd4:	1cfb      	adds	r3, r7, #3
 8007cd6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	23b0      	movs	r3, #176	@ 0xb0
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	58d3      	ldr	r3, [r2, r3]
 8007ce0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ce2:	1cfb      	adds	r3, r7, #3
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b25b      	sxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da0c      	bge.n	8007d06 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cec:	1cfb      	adds	r3, r7, #3
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	227f      	movs	r2, #127	@ 0x7f
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	68f9      	ldr	r1, [r7, #12]
 8007cf6:	0013      	movs	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	189b      	adds	r3, r3, r2
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	18cb      	adds	r3, r1, r3
 8007d00:	3312      	adds	r3, #18
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	e00d      	b.n	8007d22 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d06:	1cfb      	adds	r3, r7, #3
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	227f      	movs	r2, #127	@ 0x7f
 8007d0c:	401a      	ands	r2, r3
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	23a9      	movs	r3, #169	@ 0xa9
 8007d12:	0059      	lsls	r1, r3, #1
 8007d14:	0013      	movs	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	189b      	adds	r3, r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	18c3      	adds	r3, r0, r3
 8007d1e:	185b      	adds	r3, r3, r1
 8007d20:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d22:	0018      	movs	r0, r3
 8007d24:	46bd      	mov	sp, r7
 8007d26:	b004      	add	sp, #16
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	000a      	movs	r2, r1
 8007d34:	1cfb      	adds	r3, r7, #3
 8007d36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d38:	210f      	movs	r1, #15
 8007d3a:	187b      	adds	r3, r7, r1
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d40:	260e      	movs	r6, #14
 8007d42:	19bb      	adds	r3, r7, r6
 8007d44:	2200      	movs	r2, #0
 8007d46:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	23b0      	movs	r3, #176	@ 0xb0
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	58d2      	ldr	r2, [r2, r3]
 8007d50:	000d      	movs	r5, r1
 8007d52:	187c      	adds	r4, r7, r1
 8007d54:	1cfb      	adds	r3, r7, #3
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	0019      	movs	r1, r3
 8007d5a:	0010      	movs	r0, r2
 8007d5c:	f7f9 fa0a 	bl	8001174 <HAL_PCD_SetAddress>
 8007d60:	0003      	movs	r3, r0
 8007d62:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d64:	19bc      	adds	r4, r7, r6
 8007d66:	197b      	adds	r3, r7, r5
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f000 f8a7 	bl	8007ebe <USBD_Get_USB_Status>
 8007d70:	0003      	movs	r3, r0
 8007d72:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007d74:	19bb      	adds	r3, r7, r6
 8007d76:	781b      	ldrb	r3, [r3, #0]
}
 8007d78:	0018      	movs	r0, r3
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	b005      	add	sp, #20
 8007d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	0008      	movs	r0, r1
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	0019      	movs	r1, r3
 8007d8e:	230b      	movs	r3, #11
 8007d90:	18fb      	adds	r3, r7, r3
 8007d92:	1c02      	adds	r2, r0, #0
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	2408      	movs	r4, #8
 8007d98:	193b      	adds	r3, r7, r4
 8007d9a:	1c0a      	adds	r2, r1, #0
 8007d9c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9e:	2117      	movs	r1, #23
 8007da0:	187b      	adds	r3, r7, r1
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da6:	2516      	movs	r5, #22
 8007da8:	197b      	adds	r3, r7, r5
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	23b0      	movs	r3, #176	@ 0xb0
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	58d0      	ldr	r0, [r2, r3]
 8007db6:	193b      	adds	r3, r7, r4
 8007db8:	881d      	ldrh	r5, [r3, #0]
 8007dba:	000e      	movs	r6, r1
 8007dbc:	187c      	adds	r4, r7, r1
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	230b      	movs	r3, #11
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	7819      	ldrb	r1, [r3, #0]
 8007dc6:	002b      	movs	r3, r5
 8007dc8:	f7f9 fb10 	bl	80013ec <HAL_PCD_EP_Transmit>
 8007dcc:	0003      	movs	r3, r0
 8007dce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd0:	2516      	movs	r5, #22
 8007dd2:	197c      	adds	r4, r7, r5
 8007dd4:	19bb      	adds	r3, r7, r6
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f000 f870 	bl	8007ebe <USBD_Get_USB_Status>
 8007dde:	0003      	movs	r3, r0
 8007de0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007de2:	197b      	adds	r3, r7, r5
 8007de4:	781b      	ldrb	r3, [r3, #0]
}
 8007de6:	0018      	movs	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	b007      	add	sp, #28
 8007dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df0:	b087      	sub	sp, #28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	0008      	movs	r0, r1
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	0019      	movs	r1, r3
 8007dfc:	230b      	movs	r3, #11
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	1c02      	adds	r2, r0, #0
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	2408      	movs	r4, #8
 8007e06:	193b      	adds	r3, r7, r4
 8007e08:	1c0a      	adds	r2, r1, #0
 8007e0a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e0c:	2117      	movs	r1, #23
 8007e0e:	187b      	adds	r3, r7, r1
 8007e10:	2200      	movs	r2, #0
 8007e12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e14:	2516      	movs	r5, #22
 8007e16:	197b      	adds	r3, r7, r5
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	23b0      	movs	r3, #176	@ 0xb0
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	58d0      	ldr	r0, [r2, r3]
 8007e24:	193b      	adds	r3, r7, r4
 8007e26:	881d      	ldrh	r5, [r3, #0]
 8007e28:	000e      	movs	r6, r1
 8007e2a:	187c      	adds	r4, r7, r1
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	230b      	movs	r3, #11
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	7819      	ldrb	r1, [r3, #0]
 8007e34:	002b      	movs	r3, r5
 8007e36:	f7f9 fa89 	bl	800134c <HAL_PCD_EP_Receive>
 8007e3a:	0003      	movs	r3, r0
 8007e3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e3e:	2516      	movs	r5, #22
 8007e40:	197c      	adds	r4, r7, r5
 8007e42:	19bb      	adds	r3, r7, r6
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	0018      	movs	r0, r3
 8007e48:	f000 f839 	bl	8007ebe <USBD_Get_USB_Status>
 8007e4c:	0003      	movs	r3, r0
 8007e4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e50:	197b      	adds	r3, r7, r5
 8007e52:	781b      	ldrb	r3, [r3, #0]
}
 8007e54:	0018      	movs	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	b007      	add	sp, #28
 8007e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e5c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	000a      	movs	r2, r1
 8007e66:	1cfb      	adds	r3, r7, #3
 8007e68:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	23b0      	movs	r3, #176	@ 0xb0
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	58d2      	ldr	r2, [r2, r3]
 8007e72:	1cfb      	adds	r3, r7, #3
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	0019      	movs	r1, r3
 8007e78:	0010      	movs	r0, r2
 8007e7a:	f7f9 fa9e 	bl	80013ba <HAL_PCD_EP_GetRxCount>
 8007e7e:	0003      	movs	r3, r0
}
 8007e80:	0018      	movs	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	b002      	add	sp, #8
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e90:	4b02      	ldr	r3, [pc, #8]	@ (8007e9c <USBD_static_malloc+0x14>)
}
 8007e92:	0018      	movs	r0, r3
 8007e94:	46bd      	mov	sp, r7
 8007e96:	b002      	add	sp, #8
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	46c0      	nop			@ (mov r8, r8)
 8007e9c:	20001198 	.word	0x20001198

08007ea0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

}
 8007ea8:	46c0      	nop			@ (mov r8, r8)
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b002      	add	sp, #8
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007eb4:	f7f8 fa32 	bl	800031c <SystemClock_Config>
}
 8007eb8:	46c0      	nop			@ (mov r8, r8)
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	1dfb      	adds	r3, r7, #7
 8007ec8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eca:	230f      	movs	r3, #15
 8007ecc:	18fb      	adds	r3, r7, r3
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007ed2:	1dfb      	adds	r3, r7, #7
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d017      	beq.n	8007f0a <USBD_Get_USB_Status+0x4c>
 8007eda:	dc1b      	bgt.n	8007f14 <USBD_Get_USB_Status+0x56>
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d00f      	beq.n	8007f00 <USBD_Get_USB_Status+0x42>
 8007ee0:	dc18      	bgt.n	8007f14 <USBD_Get_USB_Status+0x56>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <USBD_Get_USB_Status+0x2e>
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d005      	beq.n	8007ef6 <USBD_Get_USB_Status+0x38>
 8007eea:	e013      	b.n	8007f14 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007eec:	230f      	movs	r3, #15
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
    break;
 8007ef4:	e013      	b.n	8007f1e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ef6:	230f      	movs	r3, #15
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	2202      	movs	r2, #2
 8007efc:	701a      	strb	r2, [r3, #0]
    break;
 8007efe:	e00e      	b.n	8007f1e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f00:	230f      	movs	r3, #15
 8007f02:	18fb      	adds	r3, r7, r3
 8007f04:	2201      	movs	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]
    break;
 8007f08:	e009      	b.n	8007f1e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f0a:	230f      	movs	r3, #15
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	2202      	movs	r2, #2
 8007f10:	701a      	strb	r2, [r3, #0]
    break;
 8007f12:	e004      	b.n	8007f1e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007f14:	230f      	movs	r3, #15
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	2202      	movs	r2, #2
 8007f1a:	701a      	strb	r2, [r3, #0]
    break;
 8007f1c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8007f1e:	230f      	movs	r3, #15
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	781b      	ldrb	r3, [r3, #0]
}
 8007f24:	0018      	movs	r0, r3
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b004      	add	sp, #16
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <memset>:
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	1882      	adds	r2, r0, r2
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d100      	bne.n	8007f36 <memset+0xa>
 8007f34:	4770      	bx	lr
 8007f36:	7019      	strb	r1, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	e7f9      	b.n	8007f30 <memset+0x4>

08007f3c <__libc_init_array>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	2600      	movs	r6, #0
 8007f40:	4c0c      	ldr	r4, [pc, #48]	@ (8007f74 <__libc_init_array+0x38>)
 8007f42:	4d0d      	ldr	r5, [pc, #52]	@ (8007f78 <__libc_init_array+0x3c>)
 8007f44:	1b64      	subs	r4, r4, r5
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	42a6      	cmp	r6, r4
 8007f4a:	d109      	bne.n	8007f60 <__libc_init_array+0x24>
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	f000 f819 	bl	8007f84 <_init>
 8007f52:	4c0a      	ldr	r4, [pc, #40]	@ (8007f7c <__libc_init_array+0x40>)
 8007f54:	4d0a      	ldr	r5, [pc, #40]	@ (8007f80 <__libc_init_array+0x44>)
 8007f56:	1b64      	subs	r4, r4, r5
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	42a6      	cmp	r6, r4
 8007f5c:	d105      	bne.n	8007f6a <__libc_init_array+0x2e>
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	00b3      	lsls	r3, r6, #2
 8007f62:	58eb      	ldr	r3, [r5, r3]
 8007f64:	4798      	blx	r3
 8007f66:	3601      	adds	r6, #1
 8007f68:	e7ee      	b.n	8007f48 <__libc_init_array+0xc>
 8007f6a:	00b3      	lsls	r3, r6, #2
 8007f6c:	58eb      	ldr	r3, [r5, r3]
 8007f6e:	4798      	blx	r3
 8007f70:	3601      	adds	r6, #1
 8007f72:	e7f2      	b.n	8007f5a <__libc_init_array+0x1e>
 8007f74:	080080f0 	.word	0x080080f0
 8007f78:	080080f0 	.word	0x080080f0
 8007f7c:	080080f4 	.word	0x080080f4
 8007f80:	080080f0 	.word	0x080080f0

08007f84 <_init>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	46c0      	nop			@ (mov r8, r8)
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr

08007f90 <_fini>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	46c0      	nop			@ (mov r8, r8)
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr
