
FCS - Summer Project Code and Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008040  08008040  00009040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008194  08008194  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008194  08008194  0000a17c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008194  08008194  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00009194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008198  08008198  00009198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800819c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  2000017c  08008318  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013bc  08008318  0000a3bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e577  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e97  00000000  00000000  0001871b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0001b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097b  00000000  00000000  0001c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001638a  00000000  00000000  0001cbfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e15  00000000  00000000  00032f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c881  00000000  00000000  00043d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c061b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bbc  00000000  00000000  000c0660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c321c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000017c 	.word	0x2000017c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008028 	.word	0x08008028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000180 	.word	0x20000180
 8000104:	08008028 	.word	0x08008028

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <Imu_Start_Transmission>:
 *
 * Takes: void
 * Returns: void
 */
void Imu_Start_Transmission(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_RESET);
 8000224:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <Imu_Start_Transmission+0x18>)
 8000226:	2200      	movs	r2, #0
 8000228:	2101      	movs	r1, #1
 800022a:	0018      	movs	r0, r3
 800022c:	f000 fd78 	bl	8000d20 <HAL_GPIO_WritePin>
}
 8000230:	46c0      	nop			@ (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)
 8000238:	50000400 	.word	0x50000400

0800023c <Imu_Stop_Transmission>:
 *
 * Takes: void
 * Returns: void
 */
void Imu_Stop_Transmission(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <Imu_Stop_Transmission+0x18>)
 8000242:	2201      	movs	r2, #1
 8000244:	2101      	movs	r1, #1
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fd6a 	bl	8000d20 <HAL_GPIO_WritePin>
}
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	50000400 	.word	0x50000400

08000258 <Imu_Reg16_Read>:
 *
 * Takes: uint8_t address and 2 pointers
 * Returns: uint8_t status
 */
uint8_t Imu_Reg16_Read(uint8_t addr, uint8_t *low_byte, uint8_t *high_byte)
{
 8000258:	b5b0      	push	{r4, r5, r7, lr}
 800025a:	b08a      	sub	sp, #40	@ 0x28
 800025c:	af02      	add	r7, sp, #8
 800025e:	60b9      	str	r1, [r7, #8]
 8000260:	607a      	str	r2, [r7, #4]
 8000262:	210f      	movs	r1, #15
 8000264:	187b      	adds	r3, r7, r1
 8000266:	1c02      	adds	r2, r0, #0
 8000268:	701a      	strb	r2, [r3, #0]
    /*
     * Create a transmit array that will set the transmit data to READ
     * Will have 4 bytes [(read set + addr), 0x00, 0x00, 0x00]
     */
    uint8_t tx_buf[4] = { ((addr & 0x7F) | 0x80), 0x00, 0x00, 0x00 };
 800026a:	187b      	adds	r3, r7, r1
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2280      	movs	r2, #128	@ 0x80
 8000270:	4252      	negs	r2, r2
 8000272:	4313      	orrs	r3, r2
 8000274:	b2da      	uxtb	r2, r3
 8000276:	2418      	movs	r4, #24
 8000278:	193b      	adds	r3, r7, r4
 800027a:	701a      	strb	r2, [r3, #0]
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2200      	movs	r2, #0
 8000280:	705a      	strb	r2, [r3, #1]
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2200      	movs	r2, #0
 8000286:	709a      	strb	r2, [r3, #2]
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2200      	movs	r2, #0
 800028c:	70da      	strb	r2, [r3, #3]
    uint8_t rx_buf[4] = { 0 };
 800028e:	2514      	movs	r5, #20
 8000290:	197b      	adds	r3, r7, r5
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]

    Imu_Start_Transmission();
 8000296:	f7ff ffc3 	bl	8000220 <Imu_Start_Transmission>

    // Send and get data while seeing if out status is ok
    uint8_t status = (HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 4,
 800029a:	197a      	adds	r2, r7, r5
 800029c:	1939      	adds	r1, r7, r4
 800029e:	480f      	ldr	r0, [pc, #60]	@ (80002dc <Imu_Reg16_Read+0x84>)
 80002a0:	2301      	movs	r3, #1
 80002a2:	425b      	negs	r3, r3
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2304      	movs	r3, #4
 80002a8:	f003 fb34 	bl	8003914 <HAL_SPI_TransmitReceive>
 80002ac:	0003      	movs	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 80002ae:	425a      	negs	r2, r3
 80002b0:	4153      	adcs	r3, r2
 80002b2:	b2da      	uxtb	r2, r3
    uint8_t status = (HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 4,
 80002b4:	241f      	movs	r4, #31
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	701a      	strb	r2, [r3, #0]

    Imu_Stop_Transmission();
 80002ba:	f7ff ffbf 	bl	800023c <Imu_Stop_Transmission>

    *low_byte = rx_buf[2];
 80002be:	197b      	adds	r3, r7, r5
 80002c0:	789a      	ldrb	r2, [r3, #2]
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	701a      	strb	r2, [r3, #0]
    *high_byte = rx_buf[3];
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	78da      	ldrb	r2, [r3, #3]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	701a      	strb	r2, [r3, #0]
    return status;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	781b      	ldrb	r3, [r3, #0]
}
 80002d2:	0018      	movs	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b008      	add	sp, #32
 80002d8:	bdb0      	pop	{r4, r5, r7, pc}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	20000198 	.word	0x20000198

080002e0 <Imu_SetUp>:
 * Take: Void
 * Return: Void
 *
 */
void Imu_SetUp(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
    // Set the data bytes
    uint8_t low_byte = 0x00;
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]
    uint8_t high_byte = 0x00;
 80002ec:	1dbb      	adds	r3, r7, #6
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]

    // Initialize SPI
    Imu_Reg16_Read(IMU_REG_CHIP_ADDR, 0x00, 0x00);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	2000      	movs	r0, #0
 80002f8:	f7ff ffae 	bl	8000258 <Imu_Reg16_Read>

    // Check chip_id
    Imu_Reg16_Read(IMU_REG_CHIP_ADDR, &low_byte, &high_byte);
 80002fc:	1dba      	adds	r2, r7, #6
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	0019      	movs	r1, r3
 8000302:	2000      	movs	r0, #0
 8000304:	f7ff ffa8 	bl	8000258 <Imu_Reg16_Read>
    if (low_byte == IMU_REG_CHIP_ID)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b43      	cmp	r3, #67	@ 0x43
 800030e:	d105      	bne.n	800031c <Imu_SetUp+0x3c>
    {
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000310:	4b16      	ldr	r3, [pc, #88]	@ (800036c <Imu_SetUp+0x8c>)
 8000312:	2201      	movs	r2, #1
 8000314:	2140      	movs	r1, #64	@ 0x40
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fd02 	bl	8000d20 <HAL_GPIO_WritePin>
    }

    // Check if power is ok
    Imu_Reg16_Read(IMU_ERR_ADDR, &low_byte, &high_byte);
 800031c:	1dba      	adds	r2, r7, #6
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	0019      	movs	r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ff98 	bl	8000258 <Imu_Reg16_Read>
    if ((low_byte & 0x01) == 0x00) // Bitmask on low_byte to make sure only comparing LSB
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	001a      	movs	r2, r3
 800032e:	2301      	movs	r3, #1
 8000330:	4013      	ands	r3, r2
 8000332:	d105      	bne.n	8000340 <Imu_SetUp+0x60>
    {
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <Imu_SetUp+0x8c>)
 8000336:	2201      	movs	r2, #1
 8000338:	2120      	movs	r1, #32
 800033a:	0018      	movs	r0, r3
 800033c:	f000 fcf0 	bl	8000d20 <HAL_GPIO_WritePin>
    // Check if sensor status is ok
    /*
     * NOTE: Sometimes this needs a hard reset (removing power)
     *         since the register is instantly reset after 1 read
     */
    Imu_Reg16_Read(IMU_STATUS_ADDR, &low_byte, &high_byte);
 8000340:	1dba      	adds	r2, r7, #6
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	0019      	movs	r1, r3
 8000346:	2002      	movs	r0, #2
 8000348:	f7ff ff86 	bl	8000258 <Imu_Reg16_Read>
    if ((low_byte & 0x01) == 0x01)
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	001a      	movs	r2, r3
 8000352:	2301      	movs	r3, #1
 8000354:	4013      	ands	r3, r2
 8000356:	d005      	beq.n	8000364 <Imu_SetUp+0x84>
    {
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <Imu_SetUp+0x8c>)
 800035a:	2200      	movs	r2, #0
 800035c:	2120      	movs	r1, #32
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fcde 	bl	8000d20 <HAL_GPIO_WritePin>
    }
    // Excelente! Successful init!

} /* END of Imu_Setup */
 8000364:	46c0      	nop			@ (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b002      	add	sp, #8
 800036a:	bd80      	pop	{r7, pc}
 800036c:	50000400 	.word	0x50000400

08000370 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000376:	f000 fa07 	bl	8000788 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800037a:	f000 f821 	bl	80003c0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800037e:	f000 f8c9 	bl	8000514 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000382:	f000 f88f 	bl	80004a4 <MX_SPI1_Init>
    MX_USB_DEVICE_Init();
 8000386:	f007 f91d 	bl	80075c4 <MX_USB_DEVICE_Init>
    // Create rx array to store read information
    while (1)
    {

        /* START of uncommented code for while loop*/
        if (!imu_first_time)
 800038a:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <main+0x4c>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	4053      	eors	r3, r2
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d004      	beq.n	80003a2 <main+0x32>
        {
            Imu_SetUp();
 8000398:	f7ff ffa2 	bl	80002e0 <Imu_SetUp>
            imu_first_time = true;
 800039c:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <main+0x4c>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
        }
        // Set the data bytes
        uint8_t data_low_byte = 0x00;
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
        uint8_t data_high_byte = 0x00;
 80003a8:	1dbb      	adds	r3, r7, #6
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]

        Imu_Reg16_Read(0x06, &data_low_byte, &data_high_byte);
 80003ae:	1dba      	adds	r2, r7, #6
 80003b0:	1dfb      	adds	r3, r7, #7
 80003b2:	0019      	movs	r1, r3
 80003b4:	2006      	movs	r0, #6
 80003b6:	f7ff ff4f 	bl	8000258 <Imu_Reg16_Read>
    {
 80003ba:	e7e6      	b.n	800038a <main+0x1a>
 80003bc:	200001f0 	.word	0x200001f0

080003c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b09d      	sub	sp, #116	@ 0x74
 80003c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003c6:	2438      	movs	r4, #56	@ 0x38
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	0018      	movs	r0, r3
 80003cc:	2338      	movs	r3, #56	@ 0x38
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f007 fdfd 	bl	8007fd0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003d6:	2324      	movs	r3, #36	@ 0x24
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	0018      	movs	r0, r3
 80003dc:	2314      	movs	r3, #20
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f007 fdf5 	bl	8007fd0 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80003e6:	003b      	movs	r3, r7
 80003e8:	0018      	movs	r0, r3
 80003ea:	2324      	movs	r3, #36	@ 0x24
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f007 fdee 	bl	8007fd0 <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003f4:	4b29      	ldr	r3, [pc, #164]	@ (800049c <SystemClock_Config+0xdc>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a29      	ldr	r2, [pc, #164]	@ (80004a0 <SystemClock_Config+0xe0>)
 80003fa:	401a      	ands	r2, r3
 80003fc:	4b27      	ldr	r3, [pc, #156]	@ (800049c <SystemClock_Config+0xdc>)
 80003fe:	2180      	movs	r1, #128	@ 0x80
 8000400:	0109      	lsls	r1, r1, #4
 8000402:	430a      	orrs	r2, r1
 8000404:	601a      	str	r2, [r3, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	0021      	movs	r1, r4
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2201      	movs	r2, #1
 800040c:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2280      	movs	r2, #128	@ 0x80
 8000412:	0252      	lsls	r2, r2, #9
 8000414:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2202      	movs	r2, #2
 800041a:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2280      	movs	r2, #128	@ 0x80
 8000420:	0252      	lsls	r2, r2, #9
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2280      	movs	r2, #128	@ 0x80
 8000428:	0312      	lsls	r2, r2, #12
 800042a:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2280      	movs	r2, #128	@ 0x80
 8000430:	0412      	lsls	r2, r2, #16
 8000432:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	187b      	adds	r3, r7, r1
 8000436:	0018      	movs	r0, r3
 8000438:	f002 fadc 	bl	80029f4 <HAL_RCC_OscConfig>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x84>
    {
        Error_Handler();
 8000440:	f000 f8ee 	bl	8000620 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000444:	2124      	movs	r1, #36	@ 0x24
 8000446:	187b      	adds	r3, r7, r1
 8000448:	220f      	movs	r2, #15
 800044a:	601a      	str	r2, [r3, #0]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2202      	movs	r2, #2
 8000450:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2100      	movs	r1, #0
 8000468:	0018      	movs	r0, r3
 800046a:	f002 fe97 	bl	800319c <HAL_RCC_ClockConfig>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0xb6>
    {
        Error_Handler();
 8000472:	f000 f8d5 	bl	8000620 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000476:	003b      	movs	r3, r7
 8000478:	2240      	movs	r2, #64	@ 0x40
 800047a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800047c:	003b      	movs	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	003b      	movs	r3, r7
 8000484:	0018      	movs	r0, r3
 8000486:	f003 f855 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0xd2>
    {
        Error_Handler();
 800048e:	f000 f8c7 	bl	8000620 <Error_Handler>
    }
}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b01d      	add	sp, #116	@ 0x74
 8000498:	bd90      	pop	{r4, r7, pc}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	40007000 	.word	0x40007000
 80004a0:	ffffe7ff 	.word	0xffffe7ff

080004a4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_SPI1_Init+0x68>)
 80004aa:	4a19      	ldr	r2, [pc, #100]	@ (8000510 <MX_SPI1_Init+0x6c>)
 80004ac:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <MX_SPI1_Init+0x68>)
 80004b0:	2282      	movs	r2, #130	@ 0x82
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <MX_SPI1_Init+0x68>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004bc:	4b13      	ldr	r3, [pc, #76]	@ (800050c <MX_SPI1_Init+0x68>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c2:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_SPI1_Init+0x68>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <MX_SPI1_Init+0x68>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_SPI1_Init+0x68>)
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <MX_SPI1_Init+0x68>)
 80004d8:	2208      	movs	r2, #8
 80004da:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004dc:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <MX_SPI1_Init+0x68>)
 80004de:	2200      	movs	r2, #0
 80004e0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e2:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <MX_SPI1_Init+0x68>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <MX_SPI1_Init+0x68>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 7;
 80004ee:	4b07      	ldr	r3, [pc, #28]	@ (800050c <MX_SPI1_Init+0x68>)
 80004f0:	2207      	movs	r2, #7
 80004f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <MX_SPI1_Init+0x68>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f003 f978 	bl	80037ec <HAL_SPI_Init>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8000500:	f000 f88e 	bl	8000620 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	20000198 	.word	0x20000198
 8000510:	40013000 	.word	0x40013000

08000514 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b08b      	sub	sp, #44	@ 0x2c
 8000518:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800051a:	2414      	movs	r4, #20
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f007 fd53 	bl	8007fd0 <memset>
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b3b      	ldr	r3, [pc, #236]	@ (8000618 <MX_GPIO_Init+0x104>)
 800052c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800052e:	4b3a      	ldr	r3, [pc, #232]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000530:	2104      	movs	r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000536:	4b38      	ldr	r3, [pc, #224]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800053a:	2204      	movs	r2, #4
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000542:	4b35      	ldr	r3, [pc, #212]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000546:	4b34      	ldr	r3, [pc, #208]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	430a      	orrs	r2, r1
 800054c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800054e:	4b32      	ldr	r3, [pc, #200]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b2f      	ldr	r3, [pc, #188]	@ (8000618 <MX_GPIO_Init+0x104>)
 800055c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800055e:	4b2e      	ldr	r3, [pc, #184]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000566:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000576:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000578:	2102      	movs	r1, #2
 800057a:	430a      	orrs	r2, r1
 800057c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800057e:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <MX_GPIO_Init+0x104>)
 8000580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000582:	2202      	movs	r2, #2
 8000584:	4013      	ands	r3, r2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, FLASH_CS_Pin | FLASH_HOLD_RST_Pin | FLASH_WP_Pin,
 800058a:	23a0      	movs	r3, #160	@ 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2200      	movs	r2, #0
 8000590:	2107      	movs	r1, #7
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fbc4 	bl	8000d20 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, IMU_NCS_Pin | LED_YELLOW_Pin | LED_GREEN_Pin,
 8000598:	4b20      	ldr	r3, [pc, #128]	@ (800061c <MX_GPIO_Init+0x108>)
 800059a:	2200      	movs	r2, #0
 800059c:	2161      	movs	r1, #97	@ 0x61
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fbbe 	bl	8000d20 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pins : FLASH_CS_Pin FLASH_HOLD_RST_Pin FLASH_WP_Pin */
    GPIO_InitStruct.Pin = FLASH_CS_Pin | FLASH_HOLD_RST_Pin | FLASH_WP_Pin;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	2207      	movs	r2, #7
 80005a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2201      	movs	r2, #1
 80005ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	193a      	adds	r2, r7, r4
 80005be:	23a0      	movs	r3, #160	@ 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fa2d 	bl	8000a24 <HAL_GPIO_Init>

    /*Configure GPIO pins : IMU_NCS_Pin LED_YELLOW_Pin LED_GREEN_Pin */
    GPIO_InitStruct.Pin = IMU_NCS_Pin | LED_YELLOW_Pin | LED_GREEN_Pin;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2261      	movs	r2, #97	@ 0x61
 80005ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2201      	movs	r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <MX_GPIO_Init+0x108>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f000 fa1b 	bl	8000a24 <HAL_GPIO_Init>

    /*Configure GPIO pin : IMU_INT1_Pin */
    GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2202      	movs	r2, #2
 80005f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2288      	movs	r2, #136	@ 0x88
 80005fa:	0352      	lsls	r2, r2, #13
 80005fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8000604:	187b      	adds	r3, r7, r1
 8000606:	4a05      	ldr	r2, [pc, #20]	@ (800061c <MX_GPIO_Init+0x108>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f000 fa0a 	bl	8000a24 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b00b      	add	sp, #44	@ 0x2c
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	50000400 	.word	0x50000400

08000620 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <HAL_MspInit+0x24>)
 8000632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_MspInit+0x24>)
 8000636:	2101      	movs	r1, #1
 8000638:	430a      	orrs	r2, r1
 800063a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <HAL_MspInit+0x24>)
 800063e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <HAL_MspInit+0x24>)
 8000642:	2180      	movs	r1, #128	@ 0x80
 8000644:	0549      	lsls	r1, r1, #21
 8000646:	430a      	orrs	r2, r1
 8000648:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	@ 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	240c      	movs	r4, #12
 800065e:	193b      	adds	r3, r7, r4
 8000660:	0018      	movs	r0, r3
 8000662:	2314      	movs	r3, #20
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f007 fcb2 	bl	8007fd0 <memset>
  if(hspi->Instance==SPI1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a18      	ldr	r2, [pc, #96]	@ (80006d4 <HAL_SPI_MspInit+0x80>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d129      	bne.n	80006ca <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <HAL_SPI_MspInit+0x84>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <HAL_SPI_MspInit+0x84>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	0149      	lsls	r1, r1, #5
 8000680:	430a      	orrs	r2, r1
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <HAL_SPI_MspInit+0x84>)
 8000686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <HAL_SPI_MspInit+0x84>)
 800068a:	2101      	movs	r1, #1
 800068c:	430a      	orrs	r2, r1
 800068e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <HAL_SPI_MspInit+0x84>)
 8000692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000694:	2201      	movs	r2, #1
 8000696:	4013      	ands	r3, r2
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800069c:	0021      	movs	r1, r4
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	22e0      	movs	r2, #224	@ 0xe0
 80006a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2202      	movs	r2, #2
 80006a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2203      	movs	r2, #3
 80006b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	187a      	adds	r2, r7, r1
 80006be:	23a0      	movs	r3, #160	@ 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 f9ad 	bl	8000a24 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b009      	add	sp, #36	@ 0x24
 80006d0:	bd90      	pop	{r4, r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	40013000 	.word	0x40013000
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	e7fd      	b.n	80006e0 <NMI_Handler+0x4>

080006e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	e7fd      	b.n	80006e8 <HardFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f894 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000714:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <USB_IRQHandler+0x14>)
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fc3a 	bl	8000f90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	20000ec0 	.word	0x20000ec0

08000728 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000734:	480d      	ldr	r0, [pc, #52]	@ (800076c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000736:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000738:	f7ff fff6 	bl	8000728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	@ (8000770 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	@ (8000774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	@ (8000780 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f007 fc3d 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000766:	f7ff fe03 	bl	8000370 <main>

0800076a <LoopForever>:

LoopForever:
    b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
   ldr   r0, =_estack
 800076c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000778:	0800819c 	.word	0x0800819c
  ldr r2, =_sbss
 800077c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000780:	200013bc 	.word	0x200013bc

08000784 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_COMP_IRQHandler>
	...

08000788 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <HAL_Init+0x3c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <HAL_Init+0x3c>)
 800079a:	2140      	movs	r1, #64	@ 0x40
 800079c:	430a      	orrs	r2, r1
 800079e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f811 	bl	80007c8 <HAL_InitTick>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d003      	beq.n	80007b2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e001      	b.n	80007b6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b2:	f7ff ff3b 	bl	800062c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <HAL_InitTick+0x5c>)
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <HAL_InitTick+0x60>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	0019      	movs	r1, r3
 80007da:	23fa      	movs	r3, #250	@ 0xfa
 80007dc:	0098      	lsls	r0, r3, #2
 80007de:	f7ff fc93 	bl	8000108 <__udivsi3>
 80007e2:	0003      	movs	r3, r0
 80007e4:	0019      	movs	r1, r3
 80007e6:	0020      	movs	r0, r4
 80007e8:	f7ff fc8e 	bl	8000108 <__udivsi3>
 80007ec:	0003      	movs	r3, r0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 f90b 	bl	8000a0a <HAL_SYSTICK_Config>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e00f      	b.n	800081c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d80b      	bhi.n	800081a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	2301      	movs	r3, #1
 8000806:	425b      	negs	r3, r3
 8000808:	2200      	movs	r2, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f000 f8d8 	bl	80009c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_InitTick+0x64>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	b003      	add	sp, #12
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	001a      	movs	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	18d2      	adds	r2, r2, r3
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <HAL_IncTick+0x20>)
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	20000008 	.word	0x20000008
 8000850:	200001f4 	.word	0x200001f4

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	200001f4 	.word	0x200001f4

08000868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	0002      	movs	r2, r0
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b7f      	cmp	r3, #127	@ 0x7f
 800087a:	d809      	bhi.n	8000890 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	001a      	movs	r2, r3
 8000882:	231f      	movs	r3, #31
 8000884:	401a      	ands	r2, r3
 8000886:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <__NVIC_EnableIRQ+0x30>)
 8000888:	2101      	movs	r1, #1
 800088a:	4091      	lsls	r1, r2
 800088c:	000a      	movs	r2, r1
 800088e:	601a      	str	r2, [r3, #0]
  }
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bd80      	pop	{r7, pc}
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	0002      	movs	r2, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80008b0:	d828      	bhi.n	8000904 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000970 <__NVIC_SetPriority+0xd4>)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	33c0      	adds	r3, #192	@ 0xc0
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	589b      	ldr	r3, [r3, r2]
 80008c2:	1dfa      	adds	r2, r7, #7
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	0011      	movs	r1, r2
 80008c8:	2203      	movs	r2, #3
 80008ca:	400a      	ands	r2, r1
 80008cc:	00d2      	lsls	r2, r2, #3
 80008ce:	21ff      	movs	r1, #255	@ 0xff
 80008d0:	4091      	lsls	r1, r2
 80008d2:	000a      	movs	r2, r1
 80008d4:	43d2      	mvns	r2, r2
 80008d6:	401a      	ands	r2, r3
 80008d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	22ff      	movs	r2, #255	@ 0xff
 80008e0:	401a      	ands	r2, r3
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0018      	movs	r0, r3
 80008e8:	2303      	movs	r3, #3
 80008ea:	4003      	ands	r3, r0
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f0:	481f      	ldr	r0, [pc, #124]	@ (8000970 <__NVIC_SetPriority+0xd4>)
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	089b      	lsrs	r3, r3, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	33c0      	adds	r3, #192	@ 0xc0
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000902:	e031      	b.n	8000968 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <__NVIC_SetPriority+0xd8>)
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	0019      	movs	r1, r3
 800090c:	230f      	movs	r3, #15
 800090e:	400b      	ands	r3, r1
 8000910:	3b08      	subs	r3, #8
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	3306      	adds	r3, #6
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	18d3      	adds	r3, r2, r3
 800091a:	3304      	adds	r3, #4
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1dfa      	adds	r2, r7, #7
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	0011      	movs	r1, r2
 8000924:	2203      	movs	r2, #3
 8000926:	400a      	ands	r2, r1
 8000928:	00d2      	lsls	r2, r2, #3
 800092a:	21ff      	movs	r1, #255	@ 0xff
 800092c:	4091      	lsls	r1, r2
 800092e:	000a      	movs	r2, r1
 8000930:	43d2      	mvns	r2, r2
 8000932:	401a      	ands	r2, r3
 8000934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	019b      	lsls	r3, r3, #6
 800093a:	22ff      	movs	r2, #255	@ 0xff
 800093c:	401a      	ands	r2, r3
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	0018      	movs	r0, r3
 8000944:	2303      	movs	r3, #3
 8000946:	4003      	ands	r3, r0
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094c:	4809      	ldr	r0, [pc, #36]	@ (8000974 <__NVIC_SetPriority+0xd8>)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	001c      	movs	r4, r3
 8000954:	230f      	movs	r3, #15
 8000956:	4023      	ands	r3, r4
 8000958:	3b08      	subs	r3, #8
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	430a      	orrs	r2, r1
 800095e:	3306      	adds	r3, #6
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	18c3      	adds	r3, r0, r3
 8000964:	3304      	adds	r3, #4
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b003      	add	sp, #12
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	2380      	movs	r3, #128	@ 0x80
 8000986:	045b      	lsls	r3, r3, #17
 8000988:	429a      	cmp	r2, r3
 800098a:	d301      	bcc.n	8000990 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098c:	2301      	movs	r3, #1
 800098e:	e010      	b.n	80009b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <SysTick_Config+0x44>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	3a01      	subs	r2, #1
 8000996:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000998:	2301      	movs	r3, #1
 800099a:	425b      	negs	r3, r3
 800099c:	2103      	movs	r1, #3
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff ff7c 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <SysTick_Config+0x44>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <SysTick_Config+0x44>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	210f      	movs	r1, #15
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	1c02      	adds	r2, r0, #0
 80009d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b25b      	sxtb	r3, r3
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff ff5d 	bl	800089c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b004      	add	sp, #16
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	0002      	movs	r2, r0
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ff33 	bl	8000868 <__NVIC_EnableIRQ>
}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ffaf 	bl	8000978 <SysTick_Config>
 8000a1a:	0003      	movs	r3, r0
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a3a:	e155      	b.n	8000ce8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d100      	bne.n	8000a54 <HAL_GPIO_Init+0x30>
 8000a52:	e146      	b.n	8000ce2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2203      	movs	r2, #3
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d005      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2203      	movs	r2, #3
 8000a66:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	2201      	movs	r2, #1
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d017      	beq.n	8000b0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2203      	movs	r2, #3
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d123      	bne.n	8000b5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	58d3      	ldr	r3, [r2, r3]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	2207      	movs	r2, #7
 8000b28:	4013      	ands	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2107      	movs	r1, #7
 8000b42:	400b      	ands	r3, r1
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	6939      	ldr	r1, [r7, #16]
 8000b5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	23c0      	movs	r3, #192	@ 0xc0
 8000b98:	029b      	lsls	r3, r3, #10
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <HAL_GPIO_Init+0x17c>
 8000b9e:	e0a0      	b.n	8000ce2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	4b57      	ldr	r3, [pc, #348]	@ (8000d00 <HAL_GPIO_Init+0x2dc>)
 8000ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ba4:	4b56      	ldr	r3, [pc, #344]	@ (8000d00 <HAL_GPIO_Init+0x2dc>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bac:	4a55      	ldr	r2, [pc, #340]	@ (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	589b      	ldr	r3, [r3, r2]
 8000bb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	43da      	mvns	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	23a0      	movs	r3, #160	@ 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d01f      	beq.n	8000c1a <HAL_GPIO_Init+0x1f6>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8000d08 <HAL_GPIO_Init+0x2e4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d019      	beq.n	8000c16 <HAL_GPIO_Init+0x1f2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a49      	ldr	r2, [pc, #292]	@ (8000d0c <HAL_GPIO_Init+0x2e8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a48      	ldr	r2, [pc, #288]	@ (8000d10 <HAL_GPIO_Init+0x2ec>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d00d      	beq.n	8000c0e <HAL_GPIO_Init+0x1ea>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a47      	ldr	r2, [pc, #284]	@ (8000d14 <HAL_GPIO_Init+0x2f0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d007      	beq.n	8000c0a <HAL_GPIO_Init+0x1e6>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a46      	ldr	r2, [pc, #280]	@ (8000d18 <HAL_GPIO_Init+0x2f4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_GPIO_Init+0x1e2>
 8000c02:	2305      	movs	r3, #5
 8000c04:	e00a      	b.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000c06:	2306      	movs	r3, #6
 8000c08:	e008      	b.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e004      	b.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e002      	b.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	2103      	movs	r1, #3
 8000c20:	400a      	ands	r2, r1
 8000c22:	0092      	lsls	r2, r2, #2
 8000c24:	4093      	lsls	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c2c:	4935      	ldr	r1, [pc, #212]	@ (8000d04 <HAL_GPIO_Init+0x2e0>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c3a:	4b38      	ldr	r3, [pc, #224]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43da      	mvns	r2, r3
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	035b      	lsls	r3, r3, #13
 8000c52:	4013      	ands	r3, r2
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c64:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43da      	mvns	r2, r3
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	2380      	movs	r3, #128	@ 0x80
 8000c7a:	039b      	lsls	r3, r3, #14
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000c8e:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43da      	mvns	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	029b      	lsls	r3, r3, #10
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43da      	mvns	r2, r3
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	2380      	movs	r3, #128	@ 0x80
 8000cce:	025b      	lsls	r3, r3, #9
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	40da      	lsrs	r2, r3
 8000cf0:	1e13      	subs	r3, r2, #0
 8000cf2:	d000      	beq.n	8000cf6 <HAL_GPIO_Init+0x2d2>
 8000cf4:	e6a2      	b.n	8000a3c <HAL_GPIO_Init+0x18>
  }
}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b006      	add	sp, #24
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000
 8000d08:	50000400 	.word	0x50000400
 8000d0c:	50000800 	.word	0x50000800
 8000d10:	50000c00 	.word	0x50000c00
 8000d14:	50001000 	.word	0x50001000
 8000d18:	50001c00 	.word	0x50001c00
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	0008      	movs	r0, r1
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	1c02      	adds	r2, r0, #0
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	1c7b      	adds	r3, r7, #1
 8000d34:	1c0a      	adds	r2, r1, #0
 8000d36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	1c7b      	adds	r3, r7, #1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d48:	e003      	b.n	8000d52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000d4a:	1cbb      	adds	r3, r7, #2
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e0e4      	b.n	8000f38 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a73      	ldr	r2, [pc, #460]	@ (8000f40 <HAL_PCD_Init+0x1e4>)
 8000d72:	5c9b      	ldrb	r3, [r3, r2]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d108      	bne.n	8000d8c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	23a4      	movs	r3, #164	@ 0xa4
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	2100      	movs	r1, #0
 8000d82:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	0018      	movs	r0, r3
 8000d88:	f006 fdce 	bl	8007928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8000f40 <HAL_PCD_Init+0x1e4>)
 8000d90:	2103      	movs	r1, #3
 8000d92:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f003 f879 	bl	8003e90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e047      	b.n	8000e38 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000da8:	200f      	movs	r0, #15
 8000daa:	183b      	adds	r3, r7, r0
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	0013      	movs	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	189b      	adds	r3, r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	18cb      	adds	r3, r1, r3
 8000dba:	3311      	adds	r3, #17
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000dc0:	183b      	adds	r3, r7, r0
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	189b      	adds	r3, r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	18cb      	adds	r3, r1, r3
 8000dd0:	3310      	adds	r3, #16
 8000dd2:	183a      	adds	r2, r7, r0
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dd8:	183b      	adds	r3, r7, r0
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	0013      	movs	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	189b      	adds	r3, r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	18cb      	adds	r3, r1, r3
 8000de8:	3313      	adds	r3, #19
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000dee:	183b      	adds	r3, r7, r0
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	0013      	movs	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	189b      	adds	r3, r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	18cb      	adds	r3, r1, r3
 8000dfe:	3320      	adds	r3, #32
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e04:	183b      	adds	r3, r7, r0
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	18cb      	adds	r3, r1, r3
 8000e14:	3324      	adds	r3, #36	@ 0x24
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e1a:	183b      	adds	r3, r7, r0
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	0013      	movs	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	189b      	adds	r3, r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	183b      	adds	r3, r7, r0
 8000e34:	3201      	adds	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	187a      	adds	r2, r7, r1
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3b0      	bcc.n	8000da8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e056      	b.n	8000efc <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e4e:	240f      	movs	r4, #15
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	2352      	movs	r3, #82	@ 0x52
 8000e58:	33ff      	adds	r3, #255	@ 0xff
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	189b      	adds	r3, r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	18c3      	adds	r3, r0, r3
 8000e66:	185b      	adds	r3, r3, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	23a8      	movs	r3, #168	@ 0xa8
 8000e74:	0059      	lsls	r1, r3, #1
 8000e76:	0013      	movs	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	189b      	adds	r3, r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	18c3      	adds	r3, r0, r3
 8000e80:	185b      	adds	r3, r3, r1
 8000e82:	193a      	adds	r2, r7, r4
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	2354      	movs	r3, #84	@ 0x54
 8000e90:	33ff      	adds	r3, #255	@ 0xff
 8000e92:	0019      	movs	r1, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	189b      	adds	r3, r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	18c3      	adds	r3, r0, r3
 8000e9e:	185b      	adds	r3, r3, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	23b0      	movs	r3, #176	@ 0xb0
 8000eac:	0059      	lsls	r1, r3, #1
 8000eae:	0013      	movs	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	189b      	adds	r3, r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	18c3      	adds	r3, r0, r3
 8000eb8:	185b      	adds	r3, r3, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	23b2      	movs	r3, #178	@ 0xb2
 8000ec6:	0059      	lsls	r1, r3, #1
 8000ec8:	0013      	movs	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	189b      	adds	r3, r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	18c3      	adds	r3, r0, r3
 8000ed2:	185b      	adds	r3, r3, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	23b4      	movs	r3, #180	@ 0xb4
 8000ee0:	0059      	lsls	r1, r3, #1
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	189b      	adds	r3, r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	18c3      	adds	r3, r0, r3
 8000eec:	185b      	adds	r3, r3, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	3201      	adds	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	791b      	ldrb	r3, [r3, #4]
 8000f00:	220f      	movs	r2, #15
 8000f02:	18ba      	adds	r2, r7, r2
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3a1      	bcc.n	8000e4e <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	f002 ffd6 	bl	8003ec4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_PCD_Init+0x1e4>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a9b      	ldrb	r3, [r3, #10]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d103      	bne.n	8000f36 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	0018      	movs	r0, r3
 8000f32:	f001 fd29 	bl	8002988 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b005      	add	sp, #20
 8000f3e:	bd90      	pop	{r4, r7, pc}
 8000f40:	00000291 	.word	0x00000291

08000f44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	23a4      	movs	r3, #164	@ 0xa4
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_PCD_Start+0x18>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e014      	b.n	8000f86 <HAL_PCD_Start+0x42>
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	23a4      	movs	r3, #164	@ 0xa4
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	2101      	movs	r1, #1
 8000f64:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f002 ff7a 	bl	8003e64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0018      	movs	r0, r3
 8000f76:	f004 fd51 	bl	8005a1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	23a4      	movs	r3, #164	@ 0xa4
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	2100      	movs	r1, #0
 8000f82:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f004 fd53 	bl	8005a48 <USB_ReadInterrupts>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	4013      	ands	r3, r2
 8000fae:	d004      	beq.n	8000fba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fb62 	bl	800167c <PCD_EP_ISR_Handler>

    return;
 8000fb8:	e11d      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d015      	beq.n	8000ff0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2244      	movs	r2, #68	@ 0x44
 8000fca:	5a9b      	ldrh	r3, [r3, r2]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	498a      	ldr	r1, [pc, #552]	@ (80011fc <HAL_PCD_IRQHandler+0x26c>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	b291      	uxth	r1, r2
 8000fd8:	2244      	movs	r2, #68	@ 0x44
 8000fda:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f006 fd25 	bl	8007a2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f000 f915 	bl	8001218 <HAL_PCD_SetAddress>

    return;
 8000fee:	e102      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	2380      	movs	r3, #128	@ 0x80
 8000ff4:	01db      	lsls	r3, r3, #7
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d00c      	beq.n	8001014 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2244      	movs	r2, #68	@ 0x44
 8001000:	5a9b      	ldrh	r3, [r3, r2]
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	497d      	ldr	r1, [pc, #500]	@ (8001200 <HAL_PCD_IRQHandler+0x270>)
 800100a:	400a      	ands	r2, r1
 800100c:	b291      	uxth	r1, r2
 800100e:	2244      	movs	r2, #68	@ 0x44
 8001010:	5299      	strh	r1, [r3, r2]

    return;
 8001012:	e0f0      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	4013      	ands	r3, r2
 800101c:	d00c      	beq.n	8001038 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2244      	movs	r2, #68	@ 0x44
 8001024:	5a9b      	ldrh	r3, [r3, r2]
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4975      	ldr	r1, [pc, #468]	@ (8001204 <HAL_PCD_IRQHandler+0x274>)
 800102e:	400a      	ands	r2, r1
 8001030:	b291      	uxth	r1, r2
 8001032:	2244      	movs	r2, #68	@ 0x44
 8001034:	5299      	strh	r1, [r3, r2]

    return;
 8001036:	e0de      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	015b      	lsls	r3, r3, #5
 800103e:	4013      	ands	r3, r2
 8001040:	d038      	beq.n	80010b4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2240      	movs	r2, #64	@ 0x40
 8001048:	5a9b      	ldrh	r3, [r3, r2]
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2104      	movs	r1, #4
 8001052:	438a      	bics	r2, r1
 8001054:	b291      	uxth	r1, r2
 8001056:	2240      	movs	r2, #64	@ 0x40
 8001058:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2240      	movs	r2, #64	@ 0x40
 8001060:	5a9b      	ldrh	r3, [r3, r2]
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2108      	movs	r1, #8
 800106a:	438a      	bics	r2, r1
 800106c:	b291      	uxth	r1, r2
 800106e:	2240      	movs	r2, #64	@ 0x40
 8001070:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	23b2      	movs	r3, #178	@ 0xb2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	5cd3      	ldrb	r3, [r2, r3]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d109      	bne.n	8001092 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	23b2      	movs	r3, #178	@ 0xb2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	2100      	movs	r1, #0
 8001086:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2100      	movs	r1, #0
 800108c:	0018      	movs	r0, r3
 800108e:	f001 fca5 	bl	80029dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	0018      	movs	r0, r3
 8001096:	f006 fd0b 	bl	8007ab0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2244      	movs	r2, #68	@ 0x44
 80010a0:	5a9b      	ldrh	r3, [r3, r2]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4957      	ldr	r1, [pc, #348]	@ (8001208 <HAL_PCD_IRQHandler+0x278>)
 80010aa:	400a      	ands	r2, r1
 80010ac:	b291      	uxth	r1, r2
 80010ae:	2244      	movs	r2, #68	@ 0x44
 80010b0:	5299      	strh	r1, [r3, r2]

    return;
 80010b2:	e0a0      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4013      	ands	r3, r2
 80010bc:	d028      	beq.n	8001110 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2240      	movs	r2, #64	@ 0x40
 80010c4:	5a9b      	ldrh	r3, [r3, r2]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2108      	movs	r1, #8
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b291      	uxth	r1, r2
 80010d2:	2240      	movs	r2, #64	@ 0x40
 80010d4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2244      	movs	r2, #68	@ 0x44
 80010dc:	5a9b      	ldrh	r3, [r3, r2]
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4949      	ldr	r1, [pc, #292]	@ (800120c <HAL_PCD_IRQHandler+0x27c>)
 80010e6:	400a      	ands	r2, r1
 80010e8:	b291      	uxth	r1, r2
 80010ea:	2244      	movs	r2, #68	@ 0x44
 80010ec:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	5a9b      	ldrh	r3, [r3, r2]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2104      	movs	r1, #4
 80010fe:	430a      	orrs	r2, r1
 8001100:	b291      	uxth	r1, r2
 8001102:	2240      	movs	r2, #64	@ 0x40
 8001104:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0018      	movs	r0, r3
 800110a:	f006 fcb5 	bl	8007a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800110e:	e072      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	4013      	ands	r3, r2
 8001116:	d046      	beq.n	80011a6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2244      	movs	r2, #68	@ 0x44
 800111e:	5a9b      	ldrh	r3, [r3, r2]
 8001120:	b29a      	uxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	438a      	bics	r2, r1
 800112a:	b291      	uxth	r1, r2
 800112c:	2244      	movs	r2, #68	@ 0x44
 800112e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	23b2      	movs	r3, #178	@ 0xb2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	5cd3      	ldrb	r3, [r2, r3]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d12f      	bne.n	800119c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2240      	movs	r2, #64	@ 0x40
 8001142:	5a9b      	ldrh	r3, [r3, r2]
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2104      	movs	r1, #4
 800114c:	430a      	orrs	r2, r1
 800114e:	b291      	uxth	r1, r2
 8001150:	2240      	movs	r2, #64	@ 0x40
 8001152:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2240      	movs	r2, #64	@ 0x40
 800115a:	5a9b      	ldrh	r3, [r3, r2]
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2108      	movs	r1, #8
 8001164:	430a      	orrs	r2, r1
 8001166:	b291      	uxth	r1, r2
 8001168:	2240      	movs	r2, #64	@ 0x40
 800116a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	23b2      	movs	r3, #178	@ 0xb2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	2101      	movs	r1, #1
 8001174:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2254      	movs	r2, #84	@ 0x54
 800117c:	5a9b      	ldrh	r3, [r3, r2]
 800117e:	b29b      	uxth	r3, r3
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	223c      	movs	r2, #60	@ 0x3c
 8001184:	4013      	ands	r3, r2
 8001186:	0019      	movs	r1, r3
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	23b3      	movs	r3, #179	@ 0xb3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2101      	movs	r1, #1
 8001194:	0018      	movs	r0, r3
 8001196:	f001 fc21 	bl	80029dc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800119a:	e02c      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	0018      	movs	r0, r3
 80011a0:	f006 fc6a 	bl	8007a78 <HAL_PCD_SuspendCallback>
    return;
 80011a4:	e027      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4013      	ands	r3, r2
 80011ae:	d010      	beq.n	80011d2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2244      	movs	r2, #68	@ 0x44
 80011b6:	5a9b      	ldrh	r3, [r3, r2]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4914      	ldr	r1, [pc, #80]	@ (8001210 <HAL_PCD_IRQHandler+0x280>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	b291      	uxth	r1, r2
 80011c4:	2244      	movs	r2, #68	@ 0x44
 80011c6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f006 fc20 	bl	8007a10 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011d0:	e011      	b.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4013      	ands	r3, r2
 80011da:	d00c      	beq.n	80011f6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2244      	movs	r2, #68	@ 0x44
 80011e2:	5a9b      	ldrh	r3, [r3, r2]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	490a      	ldr	r1, [pc, #40]	@ (8001214 <HAL_PCD_IRQHandler+0x284>)
 80011ec:	400a      	ands	r2, r1
 80011ee:	b291      	uxth	r1, r2
 80011f0:	2244      	movs	r2, #68	@ 0x44
 80011f2:	5299      	strh	r1, [r3, r2]

    return;
 80011f4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b004      	add	sp, #16
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	fffffbff 	.word	0xfffffbff
 8001200:	ffffbfff 	.word	0xffffbfff
 8001204:	ffffdfff 	.word	0xffffdfff
 8001208:	ffffefff 	.word	0xffffefff
 800120c:	fffff7ff 	.word	0xfffff7ff
 8001210:	fffffdff 	.word	0xfffffdff
 8001214:	fffffeff 	.word	0xfffffeff

08001218 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	000a      	movs	r2, r1
 8001222:	1cfb      	adds	r3, r7, #3
 8001224:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	23a4      	movs	r3, #164	@ 0xa4
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_PCD_SetAddress+0x1e>
 8001232:	2302      	movs	r3, #2
 8001234:	e016      	b.n	8001264 <HAL_PCD_SetAddress+0x4c>
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	23a4      	movs	r3, #164	@ 0xa4
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	2101      	movs	r1, #1
 800123e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	1cfa      	adds	r2, r7, #3
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	1cfb      	adds	r3, r7, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	0019      	movs	r1, r3
 8001252:	0010      	movs	r0, r2
 8001254:	f004 fbce 	bl	80059f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	23a4      	movs	r3, #164	@ 0xa4
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	2100      	movs	r1, #0
 8001260:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	000c      	movs	r4, r1
 8001276:	0010      	movs	r0, r2
 8001278:	0019      	movs	r1, r3
 800127a:	1cfb      	adds	r3, r7, #3
 800127c:	1c22      	adds	r2, r4, #0
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	003b      	movs	r3, r7
 8001282:	1c02      	adds	r2, r0, #0
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	1c0a      	adds	r2, r1, #0
 800128a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800128c:	230b      	movs	r3, #11
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001294:	1cfb      	adds	r3, r7, #3
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b25b      	sxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	da0f      	bge.n	80012be <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800129e:	1cfb      	adds	r3, r7, #3
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2207      	movs	r2, #7
 80012a4:	401a      	ands	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	3310      	adds	r3, #16
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	18d3      	adds	r3, r2, r3
 80012b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2201      	movs	r2, #1
 80012ba:	705a      	strb	r2, [r3, #1]
 80012bc:	e00f      	b.n	80012de <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012be:	1cfb      	adds	r3, r7, #3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2207      	movs	r2, #7
 80012c4:	401a      	ands	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	189b      	adds	r3, r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	3351      	adds	r3, #81	@ 0x51
 80012d0:	33ff      	adds	r3, #255	@ 0xff
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	18d3      	adds	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012de:	1cfb      	adds	r3, r7, #3
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2207      	movs	r2, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80012ec:	003b      	movs	r3, r7
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	055b      	lsls	r3, r3, #21
 80012f2:	0d5a      	lsrs	r2, r3, #21
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1cba      	adds	r2, r7, #2
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001300:	1cbb      	adds	r3, r7, #2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d102      	bne.n	800130e <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	23a4      	movs	r3, #164	@ 0xa4
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	5cd3      	ldrb	r3, [r2, r3]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_PCD_EP_Open+0xb2>
 800131a:	2302      	movs	r3, #2
 800131c:	e013      	b.n	8001346 <HAL_PCD_EP_Open+0xda>
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	23a4      	movs	r3, #164	@ 0xa4
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	2101      	movs	r1, #1
 8001326:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f002 fde3 	bl	8003efc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	23a4      	movs	r3, #164	@ 0xa4
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	2100      	movs	r1, #0
 800133e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001340:	230b      	movs	r3, #11
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	781b      	ldrb	r3, [r3, #0]
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b005      	add	sp, #20
 800134c:	bd90      	pop	{r4, r7, pc}

0800134e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	000a      	movs	r2, r1
 8001358:	1cfb      	adds	r3, r7, #3
 800135a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800135c:	1cfb      	adds	r3, r7, #3
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da0f      	bge.n	8001386 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001366:	1cfb      	adds	r3, r7, #3
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2207      	movs	r2, #7
 800136c:	401a      	ands	r2, r3
 800136e:	0013      	movs	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	189b      	adds	r3, r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	3310      	adds	r3, #16
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2201      	movs	r2, #1
 8001382:	705a      	strb	r2, [r3, #1]
 8001384:	e00f      	b.n	80013a6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001386:	1cfb      	adds	r3, r7, #3
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2207      	movs	r2, #7
 800138c:	401a      	ands	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	189b      	adds	r3, r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	3351      	adds	r3, #81	@ 0x51
 8001398:	33ff      	adds	r3, #255	@ 0xff
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	18d3      	adds	r3, r2, r3
 800139e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013a6:	1cfb      	adds	r3, r7, #3
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2207      	movs	r2, #7
 80013ac:	4013      	ands	r3, r2
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	23a4      	movs	r3, #164	@ 0xa4
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_PCD_EP_Close+0x76>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e011      	b.n	80013e8 <HAL_PCD_EP_Close+0x9a>
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	23a4      	movs	r3, #164	@ 0xa4
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	2101      	movs	r1, #1
 80013cc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f003 fa64 	bl	80048a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	23a4      	movs	r3, #164	@ 0xa4
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	2100      	movs	r1, #0
 80013e4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b004      	add	sp, #16
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	200b      	movs	r0, #11
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	1c0a      	adds	r2, r1, #0
 8001402:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001404:	0001      	movs	r1, r0
 8001406:	187b      	adds	r3, r7, r1
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2207      	movs	r2, #7
 800140c:	401a      	ands	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	189b      	adds	r3, r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	3351      	adds	r3, #81	@ 0x51
 8001418:	33ff      	adds	r3, #255	@ 0xff
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2200      	movs	r2, #0
 8001436:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2207      	movs	r2, #7
 800143e:	4013      	ands	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f003 fbe8 	bl	8004c24 <USB_EPStartXfer>

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	b006      	add	sp, #24
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	000a      	movs	r2, r1
 8001468:	1cfb      	adds	r3, r7, #3
 800146a:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800146c:	1cfb      	adds	r3, r7, #3
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2207      	movs	r2, #7
 8001472:	401a      	ands	r2, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	23b6      	movs	r3, #182	@ 0xb6
 8001478:	0059      	lsls	r1, r3, #1
 800147a:	0013      	movs	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	189b      	adds	r3, r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	18c3      	adds	r3, r0, r3
 8001484:	185b      	adds	r3, r3, r1
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	200b      	movs	r0, #11
 800149e:	183b      	adds	r3, r7, r0
 80014a0:	1c0a      	adds	r2, r1, #0
 80014a2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a4:	183b      	adds	r3, r7, r0
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2207      	movs	r2, #7
 80014aa:	401a      	ands	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	189b      	adds	r3, r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	3310      	adds	r3, #16
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	18d3      	adds	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2224      	movs	r2, #36	@ 0x24
 80014cc:	2101      	movs	r1, #1
 80014ce:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2201      	movs	r2, #1
 80014e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e2:	183b      	adds	r3, r7, r0
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2207      	movs	r2, #7
 80014e8:	4013      	ands	r3, r2
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	0011      	movs	r1, r2
 80014f8:	0018      	movs	r0, r3
 80014fa:	f003 fb93 	bl	8004c24 <USB_EPStartXfer>

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b006      	add	sp, #24
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	000a      	movs	r2, r1
 8001512:	1cfb      	adds	r3, r7, #3
 8001514:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001516:	1cfb      	adds	r3, r7, #3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2207      	movs	r2, #7
 800151c:	4013      	ands	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	7912      	ldrb	r2, [r2, #4]
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e046      	b.n	80015b8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800152a:	1cfb      	adds	r3, r7, #3
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	da0f      	bge.n	8001554 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001534:	1cfb      	adds	r3, r7, #3
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2207      	movs	r2, #7
 800153a:	401a      	ands	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	189b      	adds	r3, r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	3310      	adds	r3, #16
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	18d3      	adds	r3, r2, r3
 800154a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	705a      	strb	r2, [r3, #1]
 8001552:	e00d      	b.n	8001570 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001554:	1cfb      	adds	r3, r7, #3
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	0013      	movs	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	189b      	adds	r3, r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	3351      	adds	r3, #81	@ 0x51
 8001562:	33ff      	adds	r3, #255	@ 0xff
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	18d3      	adds	r3, r2, r3
 8001568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001576:	1cfb      	adds	r3, r7, #3
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2207      	movs	r2, #7
 800157c:	4013      	ands	r3, r2
 800157e:	b2da      	uxtb	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	23a4      	movs	r3, #164	@ 0xa4
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_PCD_EP_SetStall+0x8c>
 8001590:	2302      	movs	r3, #2
 8001592:	e011      	b.n	80015b8 <HAL_PCD_EP_SetStall+0xb0>
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	23a4      	movs	r3, #164	@ 0xa4
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	2101      	movs	r1, #1
 800159c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	0011      	movs	r1, r2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f004 f928 	bl	80057fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	23a4      	movs	r3, #164	@ 0xa4
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	2100      	movs	r1, #0
 80015b4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b004      	add	sp, #16
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	000a      	movs	r2, r1
 80015ca:	1cfb      	adds	r3, r7, #3
 80015cc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015ce:	1cfb      	adds	r3, r7, #3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	220f      	movs	r2, #15
 80015d4:	4013      	ands	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	7912      	ldrb	r2, [r2, #4]
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e048      	b.n	8001674 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015e2:	1cfb      	adds	r3, r7, #3
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da0f      	bge.n	800160c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ec:	1cfb      	adds	r3, r7, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2207      	movs	r2, #7
 80015f2:	401a      	ands	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	189b      	adds	r3, r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	3310      	adds	r3, #16
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	705a      	strb	r2, [r3, #1]
 800160a:	e00f      	b.n	800162c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800160c:	1cfb      	adds	r3, r7, #3
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2207      	movs	r2, #7
 8001612:	401a      	ands	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	189b      	adds	r3, r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	3351      	adds	r3, #81	@ 0x51
 800161e:	33ff      	adds	r3, #255	@ 0xff
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	18d3      	adds	r3, r2, r3
 8001624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001632:	1cfb      	adds	r3, r7, #3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2207      	movs	r2, #7
 8001638:	4013      	ands	r3, r2
 800163a:	b2da      	uxtb	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	23a4      	movs	r3, #164	@ 0xa4
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_PCD_EP_ClrStall+0x90>
 800164c:	2302      	movs	r3, #2
 800164e:	e011      	b.n	8001674 <HAL_PCD_EP_ClrStall+0xb4>
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	23a4      	movs	r3, #164	@ 0xa4
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	2101      	movs	r1, #1
 8001658:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	0011      	movs	r1, r2
 8001662:	0018      	movs	r0, r3
 8001664:	f004 f91a 	bl	800589c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	23a4      	movs	r3, #164	@ 0xa4
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	2100      	movs	r1, #0
 8001670:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}

0800167c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b094      	sub	sp, #80	@ 0x50
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001684:	f000 fbbf 	bl	8001e06 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2042      	movs	r0, #66	@ 0x42
 800168e:	183b      	adds	r3, r7, r0
 8001690:	2144      	movs	r1, #68	@ 0x44
 8001692:	5a52      	ldrh	r2, [r2, r1]
 8001694:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001696:	183b      	adds	r3, r7, r0
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	2441      	movs	r4, #65	@ 0x41
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	210f      	movs	r1, #15
 80016a2:	400a      	ands	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d000      	beq.n	80016b0 <PCD_EP_ISR_Handler+0x34>
 80016ae:	e151      	b.n	8001954 <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	4013      	ands	r3, r2
 80016b8:	d14f      	bne.n	800175a <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	200a      	movs	r0, #10
 80016c4:	183b      	adds	r3, r7, r0
 80016c6:	49dd      	ldr	r1, [pc, #884]	@ (8001a3c <PCD_EP_ISR_Handler+0x3c0>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	801a      	strh	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	183a      	adds	r2, r7, r0
 80016d2:	8812      	ldrh	r2, [r2, #0]
 80016d4:	49da      	ldr	r1, [pc, #872]	@ (8001a40 <PCD_EP_ISR_Handler+0x3c4>)
 80016d6:	430a      	orrs	r2, r1
 80016d8:	b292      	uxth	r2, r2
 80016da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3310      	adds	r3, #16
 80016e0:	64bb      	str	r3, [r7, #72]	@ 0x48

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2250      	movs	r2, #80	@ 0x50
 80016e8:	5a9b      	ldrh	r3, [r3, r2]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	001a      	movs	r2, r3
 80016ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	18d2      	adds	r2, r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	18d3      	adds	r3, r2, r3
 80016fc:	4ad1      	ldr	r2, [pc, #836]	@ (8001a44 <PCD_EP_ISR_Handler+0x3c8>)
 80016fe:	4694      	mov	ip, r2
 8001700:	4463      	add	r3, ip
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	059b      	lsls	r3, r3, #22
 8001706:	0d9a      	lsrs	r2, r3, #22
 8001708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800170a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800170c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	18d2      	adds	r2, r2, r3
 8001716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001718:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2100      	movs	r1, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f006 f958 	bl	80079d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7b1b      	ldrb	r3, [r3, #12]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <PCD_EP_ISR_Handler+0xb4>
 800172e:	e36a      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
 8001730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d000      	beq.n	800173a <PCD_EP_ISR_Handler+0xbe>
 8001738:	e365      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7b1b      	ldrb	r3, [r3, #12]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	4252      	negs	r2, r2
 8001744:	4313      	orrs	r3, r2
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0011      	movs	r1, r2
 800174e:	224c      	movs	r2, #76	@ 0x4c
 8001750:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	731a      	strb	r2, [r3, #12]
 8001758:	e355      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3351      	adds	r3, #81	@ 0x51
 800175e:	33ff      	adds	r3, #255	@ 0xff
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	213e      	movs	r1, #62	@ 0x3e
 8001768:	187b      	adds	r3, r7, r1
 800176a:	8812      	ldrh	r2, [r2, #0]
 800176c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800176e:	187b      	adds	r3, r7, r1
 8001770:	881a      	ldrh	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4013      	ands	r3, r2
 8001778:	d100      	bne.n	800177c <PCD_EP_ISR_Handler+0x100>
 800177a:	e07d      	b.n	8001878 <PCD_EP_ISR_Handler+0x1fc>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2250      	movs	r2, #80	@ 0x50
 8001782:	5a9b      	ldrh	r3, [r3, r2]
 8001784:	b29b      	uxth	r3, r3
 8001786:	001a      	movs	r2, r3
 8001788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	18d2      	adds	r2, r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	4aac      	ldr	r2, [pc, #688]	@ (8001a48 <PCD_EP_ISR_Handler+0x3cc>)
 8001798:	4694      	mov	ip, r2
 800179a:	4463      	add	r3, ip
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	059b      	lsls	r3, r3, #22
 80017a0:	0d9a      	lsrs	r2, r3, #22
 80017a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a4:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 8U)
 80017a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d041      	beq.n	8001832 <PCD_EP_ISR_Handler+0x1b6>
          {
            /* Set Stall condition for EP0 IN/OUT */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	2010      	movs	r0, #16
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	49a4      	ldr	r1, [pc, #656]	@ (8001a4c <PCD_EP_ISR_Handler+0x3d0>)
 80017bc:	400a      	ands	r2, r1
 80017be:	801a      	strh	r2, [r3, #0]
 80017c0:	183b      	adds	r3, r7, r0
 80017c2:	183a      	adds	r2, r7, r0
 80017c4:	8812      	ldrh	r2, [r2, #0]
 80017c6:	2180      	movs	r1, #128	@ 0x80
 80017c8:	0149      	lsls	r1, r1, #5
 80017ca:	404a      	eors	r2, r1
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	183a      	adds	r2, r7, r0
 80017d4:	8812      	ldrh	r2, [r2, #0]
 80017d6:	499e      	ldr	r1, [pc, #632]	@ (8001a50 <PCD_EP_ISR_Handler+0x3d4>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	b292      	uxth	r2, r2
 80017dc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	200e      	movs	r0, #14
 80017e8:	183b      	adds	r3, r7, r0
 80017ea:	499a      	ldr	r1, [pc, #616]	@ (8001a54 <PCD_EP_ISR_Handler+0x3d8>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	801a      	strh	r2, [r3, #0]
 80017f0:	183b      	adds	r3, r7, r0
 80017f2:	183a      	adds	r2, r7, r0
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	2110      	movs	r1, #16
 80017f8:	404a      	eors	r2, r1
 80017fa:	801a      	strh	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	183a      	adds	r2, r7, r0
 8001802:	8812      	ldrh	r2, [r2, #0]
 8001804:	4992      	ldr	r1, [pc, #584]	@ (8001a50 <PCD_EP_ISR_Handler+0x3d4>)
 8001806:	430a      	orrs	r2, r1
 8001808:	b292      	uxth	r2, r2
 800180a:	801a      	strh	r2, [r3, #0]

            /* SETUP bit kept frozen while CTR_RX = 1 */
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b29a      	uxth	r2, r3
 8001814:	200c      	movs	r0, #12
 8001816:	183b      	adds	r3, r7, r0
 8001818:	498f      	ldr	r1, [pc, #572]	@ (8001a58 <PCD_EP_ISR_Handler+0x3dc>)
 800181a:	400a      	ands	r2, r1
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	183a      	adds	r2, r7, r0
 8001824:	8812      	ldrh	r2, [r2, #0]
 8001826:	2180      	movs	r1, #128	@ 0x80
 8001828:	430a      	orrs	r2, r1
 800182a:	b292      	uxth	r2, r2
 800182c:	801a      	strh	r2, [r3, #0]

            return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e2f4      	b.n	8001e1c <PCD_EP_ISR_Handler+0x7a0>
          }

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	22a6      	movs	r2, #166	@ 0xa6
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	1899      	adds	r1, r3, r2
 800183e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001840:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001844:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001846:	b29b      	uxth	r3, r3
 8001848:	f004 f956 	bl	8005af8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29a      	uxth	r2, r3
 8001854:	2012      	movs	r0, #18
 8001856:	183b      	adds	r3, r7, r0
 8001858:	497f      	ldr	r1, [pc, #508]	@ (8001a58 <PCD_EP_ISR_Handler+0x3dc>)
 800185a:	400a      	ands	r2, r1
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	183a      	adds	r2, r7, r0
 8001864:	8812      	ldrh	r2, [r2, #0]
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	430a      	orrs	r2, r1
 800186a:	b292      	uxth	r2, r2
 800186c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f006 f879 	bl	8007968 <HAL_PCD_SetupStageCallback>
 8001876:	e2c6      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001878:	233e      	movs	r3, #62	@ 0x3e
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2200      	movs	r2, #0
 800187e:	5e9b      	ldrsh	r3, [r3, r2]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db00      	blt.n	8001886 <PCD_EP_ISR_Handler+0x20a>
 8001884:	e2bf      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	2016      	movs	r0, #22
 8001890:	183b      	adds	r3, r7, r0
 8001892:	4971      	ldr	r1, [pc, #452]	@ (8001a58 <PCD_EP_ISR_Handler+0x3dc>)
 8001894:	400a      	ands	r2, r1
 8001896:	801a      	strh	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	183a      	adds	r2, r7, r0
 800189e:	8812      	ldrh	r2, [r2, #0]
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	430a      	orrs	r2, r1
 80018a4:	b292      	uxth	r2, r2
 80018a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2250      	movs	r2, #80	@ 0x50
 80018ae:	5a9b      	ldrh	r3, [r3, r2]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	001a      	movs	r2, r3
 80018b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	18d2      	adds	r2, r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	18d3      	adds	r3, r2, r3
 80018c2:	4a61      	ldr	r2, [pc, #388]	@ (8001a48 <PCD_EP_ISR_Handler+0x3cc>)
 80018c4:	4694      	mov	ip, r2
 80018c6:	4463      	add	r3, ip
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	059b      	lsls	r3, r3, #22
 80018cc:	0d9a      	lsrs	r2, r3, #22
 80018ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018d0:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count == 0U)
 80018d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d11f      	bne.n	800191a <PCD_EP_ISR_Handler+0x29e>
          {
            /* Status phase re-arm for next setup */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	2014      	movs	r0, #20
 80018e4:	183b      	adds	r3, r7, r0
 80018e6:	4959      	ldr	r1, [pc, #356]	@ (8001a4c <PCD_EP_ISR_Handler+0x3d0>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	801a      	strh	r2, [r3, #0]
 80018ec:	183b      	adds	r3, r7, r0
 80018ee:	183a      	adds	r2, r7, r0
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	2180      	movs	r1, #128	@ 0x80
 80018f4:	0149      	lsls	r1, r1, #5
 80018f6:	404a      	eors	r2, r1
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	183a      	adds	r2, r7, r0
 80018fe:	8812      	ldrh	r2, [r2, #0]
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	0189      	lsls	r1, r1, #6
 8001904:	404a      	eors	r2, r1
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	183a      	adds	r2, r7, r0
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	494f      	ldr	r1, [pc, #316]	@ (8001a50 <PCD_EP_ISR_Handler+0x3d4>)
 8001912:	430a      	orrs	r2, r1
 8001914:	b292      	uxth	r2, r2
 8001916:	801a      	strh	r2, [r3, #0]
 8001918:	e275      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
          }
          else
          {
            if (ep->xfer_buff != 0U)
 800191a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <PCD_EP_ISR_Handler+0x2a8>
 8001922:	e270      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800192a:	6959      	ldr	r1, [r3, #20]
 800192c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800192e:	88da      	ldrh	r2, [r3, #6]
                          ep->pmaadress, (uint16_t)ep->xfer_count);  /* max 64bytes */
 8001930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001932:	69db      	ldr	r3, [r3, #28]
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001934:	b29b      	uxth	r3, r3
 8001936:	f004 f8df 	bl	8005af8 <USB_ReadPMA>

              ep->xfer_buff += ep->xfer_count;
 800193a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	18d2      	adds	r2, r2, r3
 8001944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001946:	615a      	str	r2, [r3, #20]

              /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataOutStageCallback(hpcd, 0U);
#else
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2100      	movs	r1, #0
 800194c:	0018      	movs	r0, r3
 800194e:	f006 f820 	bl	8007992 <HAL_PCD_DataOutStageCallback>
 8001952:	e258      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	001a      	movs	r2, r3
 800195a:	2041      	movs	r0, #65	@ 0x41
 800195c:	183b      	adds	r3, r7, r0
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	18d2      	adds	r2, r2, r3
 8001964:	213e      	movs	r1, #62	@ 0x3e
 8001966:	187b      	adds	r3, r7, r1
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2200      	movs	r2, #0
 8001970:	5e9b      	ldrsh	r3, [r3, r2]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db00      	blt.n	8001978 <PCD_EP_ISR_Handler+0x2fc>
 8001976:	e10c      	b.n	8001b92 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	001a      	movs	r2, r3
 800197e:	183b      	adds	r3, r7, r0
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2446      	movs	r4, #70	@ 0x46
 800198c:	193b      	adds	r3, r7, r4
 800198e:	4932      	ldr	r1, [pc, #200]	@ (8001a58 <PCD_EP_ISR_Handler+0x3dc>)
 8001990:	400a      	ands	r2, r1
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	001a      	movs	r2, r3
 800199a:	183b      	adds	r3, r7, r0
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	193a      	adds	r2, r7, r4
 80019a4:	8812      	ldrh	r2, [r2, #0]
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	430a      	orrs	r2, r1
 80019aa:	b292      	uxth	r2, r2
 80019ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	0013      	movs	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	3351      	adds	r3, #81	@ 0x51
 80019bc:	33ff      	adds	r3, #255	@ 0xff
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d125      	bne.n	8001a18 <PCD_EP_ISR_Handler+0x39c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2250      	movs	r2, #80	@ 0x50
 80019d2:	5a9b      	ldrh	r3, [r3, r2]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	001a      	movs	r2, r3
 80019d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	18d2      	adds	r2, r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	18d3      	adds	r3, r2, r3
 80019e6:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <PCD_EP_ISR_Handler+0x3cc>)
 80019e8:	4694      	mov	ip, r2
 80019ea:	4463      	add	r3, ip
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	244e      	movs	r4, #78	@ 0x4e
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	0592      	lsls	r2, r2, #22
 80019f4:	0d92      	lsrs	r2, r2, #22
 80019f6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <PCD_EP_ISR_Handler+0x386>
 8001a00:	e09e      	b.n	8001b40 <PCD_EP_ISR_Handler+0x4c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a08:	6959      	ldr	r1, [r3, #20]
 8001a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a0c:	88da      	ldrh	r2, [r3, #6]
 8001a0e:	193b      	adds	r3, r7, r4
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	f004 f871 	bl	8005af8 <USB_ReadPMA>
 8001a16:	e093      	b.n	8001b40 <PCD_EP_ISR_Handler+0x4c4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a1a:	78db      	ldrb	r3, [r3, #3]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d11d      	bne.n	8001a5c <PCD_EP_ISR_Handler+0x3e0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a20:	234e      	movs	r3, #78	@ 0x4e
 8001a22:	18fc      	adds	r4, r7, r3
 8001a24:	233e      	movs	r3, #62	@ 0x3e
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	881a      	ldrh	r2, [r3, #0]
 8001a2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 f9f8 	bl	8001e24 <HAL_PCD_EP_DB_Receive>
 8001a34:	0003      	movs	r3, r0
 8001a36:	8023      	strh	r3, [r4, #0]
 8001a38:	e082      	b.n	8001b40 <PCD_EP_ISR_Handler+0x4c4>
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	ffff8f0f 	.word	0xffff8f0f
 8001a40:	ffff8000 	.word	0xffff8000
 8001a44:	00000402 	.word	0x00000402
 8001a48:	00000406 	.word	0x00000406
 8001a4c:	ffffbf8f 	.word	0xffffbf8f
 8001a50:	ffff8080 	.word	0xffff8080
 8001a54:	ffff8fbf 	.word	0xffff8fbf
 8001a58:	00000f8f 	.word	0x00000f8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	001a      	movs	r2, r3
 8001a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	18d3      	adds	r3, r2, r3
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	2044      	movs	r0, #68	@ 0x44
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	49cf      	ldr	r1, [pc, #828]	@ (8001db0 <PCD_EP_ISR_Handler+0x734>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	183a      	adds	r2, r7, r0
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	49ca      	ldr	r1, [pc, #808]	@ (8001db4 <PCD_EP_ISR_Handler+0x738>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	001a      	movs	r2, r3
 8001a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	18d3      	adds	r3, r2, r3
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	2380      	movs	r3, #128	@ 0x80
 8001aa8:	01db      	lsls	r3, r3, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d024      	beq.n	8001af8 <PCD_EP_ISR_Handler+0x47c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2250      	movs	r2, #80	@ 0x50
 8001ab4:	5a9b      	ldrh	r3, [r3, r2]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	001a      	movs	r2, r3
 8001aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	18d2      	adds	r2, r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	18d3      	adds	r3, r2, r3
 8001ac8:	4abb      	ldr	r2, [pc, #748]	@ (8001db8 <PCD_EP_ISR_Handler+0x73c>)
 8001aca:	4694      	mov	ip, r2
 8001acc:	4463      	add	r3, ip
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	244e      	movs	r4, #78	@ 0x4e
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	0592      	lsls	r2, r2, #22
 8001ad6:	0d92      	lsrs	r2, r2, #22
 8001ad8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d02e      	beq.n	8001b40 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ae8:	6959      	ldr	r1, [r3, #20]
 8001aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001aec:	891a      	ldrh	r2, [r3, #8]
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f004 f801 	bl	8005af8 <USB_ReadPMA>
 8001af6:	e023      	b.n	8001b40 <PCD_EP_ISR_Handler+0x4c4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2250      	movs	r2, #80	@ 0x50
 8001afe:	5a9b      	ldrh	r3, [r3, r2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	18d2      	adds	r2, r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	18d3      	adds	r3, r2, r3
 8001b12:	4aaa      	ldr	r2, [pc, #680]	@ (8001dbc <PCD_EP_ISR_Handler+0x740>)
 8001b14:	4694      	mov	ip, r2
 8001b16:	4463      	add	r3, ip
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	244e      	movs	r4, #78	@ 0x4e
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	0592      	lsls	r2, r2, #22
 8001b20:	0d92      	lsrs	r2, r2, #22
 8001b22:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001b24:	193b      	adds	r3, r7, r4
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b32:	6959      	ldr	r1, [r3, #20]
 8001b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b36:	895a      	ldrh	r2, [r3, #10]
 8001b38:	193b      	adds	r3, r7, r4
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	f003 ffdc 	bl	8005af8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	214e      	movs	r1, #78	@ 0x4e
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	18d2      	adds	r2, r2, r3
 8001b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b4e:	61da      	str	r2, [r3, #28]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <PCD_EP_ISR_Handler+0x4e8>
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	881a      	ldrh	r2, [r3, #0]
 8001b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <PCD_EP_ISR_Handler+0x4f8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f005 ff10 	bl	8007992 <HAL_PCD_DataOutStageCallback>
 8001b72:	e00e      	b.n	8001b92 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
           ep->xfer_buff += count;
 8001b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	234e      	movs	r3, #78	@ 0x4e
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	18d2      	adds	r2, r2, r3
 8001b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b82:	615a      	str	r2, [r3, #20]
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f003 f849 	bl	8004c24 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b92:	243e      	movs	r4, #62	@ 0x3e
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	2280      	movs	r2, #128	@ 0x80
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d100      	bne.n	8001ba0 <PCD_EP_ISR_Handler+0x524>
 8001b9e:	e132      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ba0:	2041      	movs	r0, #65	@ 0x41
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	189b      	adds	r3, r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	3310      	adds	r3, #16
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	18d3      	adds	r3, r2, r3
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	001a      	movs	r2, r3
 8001bbc:	183b      	adds	r3, r7, r0
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	18d3      	adds	r3, r2, r3
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	253c      	movs	r5, #60	@ 0x3c
 8001bca:	197b      	adds	r3, r7, r5
 8001bcc:	497c      	ldr	r1, [pc, #496]	@ (8001dc0 <PCD_EP_ISR_Handler+0x744>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	18d3      	adds	r3, r2, r3
 8001be0:	197a      	adds	r2, r7, r5
 8001be2:	8812      	ldrh	r2, [r2, #0]
 8001be4:	4977      	ldr	r1, [pc, #476]	@ (8001dc4 <PCD_EP_ISR_Handler+0x748>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	b292      	uxth	r2, r2
 8001bea:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bee:	78db      	ldrb	r3, [r3, #3]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d000      	beq.n	8001bf6 <PCD_EP_ISR_Handler+0x57a>
 8001bf4:	e0a1      	b.n	8001d3a <PCD_EP_ISR_Handler+0x6be>
        {
          ep->xfer_len = 0U;
 8001bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bfe:	7b1b      	ldrb	r3, [r3, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d100      	bne.n	8001c06 <PCD_EP_ISR_Handler+0x58a>
 8001c04:	e091      	b.n	8001d2a <PCD_EP_ISR_Handler+0x6ae>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2240      	movs	r2, #64	@ 0x40
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d046      	beq.n	8001c9e <PCD_EP_ISR_Handler+0x622>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d125      	bne.n	8001c64 <PCD_EP_ISR_Handler+0x5e8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2250      	movs	r2, #80	@ 0x50
 8001c24:	5a9b      	ldrh	r3, [r3, r2]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	001a      	movs	r2, r3
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	189b      	adds	r3, r3, r2
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	00da      	lsls	r2, r3, #3
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	4a5f      	ldr	r2, [pc, #380]	@ (8001db8 <PCD_EP_ISR_Handler+0x73c>)
 8001c3c:	4694      	mov	ip, r2
 8001c3e:	4463      	add	r3, ip
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	059b      	lsls	r3, r3, #22
 8001c4a:	0d9b      	lsrs	r3, r3, #22
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc4 <PCD_EP_ISR_Handler+0x748>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	e062      	b.n	8001d2a <PCD_EP_ISR_Handler+0x6ae>
 8001c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d15e      	bne.n	8001d2a <PCD_EP_ISR_Handler+0x6ae>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2250      	movs	r2, #80	@ 0x50
 8001c78:	5a9b      	ldrh	r3, [r3, r2]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	189b      	adds	r3, r3, r2
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	00da      	lsls	r2, r3, #3
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001db8 <PCD_EP_ISR_Handler+0x73c>)
 8001c90:	4694      	mov	ip, r2
 8001c92:	4463      	add	r3, ip
 8001c94:	623b      	str	r3, [r7, #32]
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	e045      	b.n	8001d2a <PCD_EP_ISR_Handler+0x6ae>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d125      	bne.n	8001cf8 <PCD_EP_ISR_Handler+0x67c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2250      	movs	r2, #80	@ 0x50
 8001cb8:	5a9b      	ldrh	r3, [r3, r2]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc0:	189b      	adds	r3, r3, r2
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	00da      	lsls	r2, r3, #3
 8001cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ccc:	18d3      	adds	r3, r2, r3
 8001cce:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <PCD_EP_ISR_Handler+0x740>)
 8001cd0:	4694      	mov	ip, r2
 8001cd2:	4463      	add	r3, ip
 8001cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	059b      	lsls	r3, r3, #22
 8001cde:	0d9b      	lsrs	r3, r3, #22
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4a35      	ldr	r2, [pc, #212]	@ (8001dc4 <PCD_EP_ISR_Handler+0x748>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	e018      	b.n	8001d2a <PCD_EP_ISR_Handler+0x6ae>
 8001cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d114      	bne.n	8001d2a <PCD_EP_ISR_Handler+0x6ae>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2250      	movs	r2, #80	@ 0x50
 8001d06:	5a9b      	ldrh	r3, [r3, r2]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d0e:	189b      	adds	r3, r3, r2
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	00da      	lsls	r2, r3, #3
 8001d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1a:	18d3      	adds	r3, r2, r3
 8001d1c:	4a27      	ldr	r2, [pc, #156]	@ (8001dbc <PCD_EP_ISR_Handler+0x740>)
 8001d1e:	4694      	mov	ip, r2
 8001d20:	4463      	add	r3, ip
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d26:	2200      	movs	r2, #0
 8001d28:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0011      	movs	r1, r2
 8001d32:	0018      	movs	r0, r3
 8001d34:	f005 fe4e 	bl	80079d4 <HAL_PCD_DataInStageCallback>
 8001d38:	e065      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d3a:	233e      	movs	r3, #62	@ 0x3e
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	d156      	bne.n	8001df6 <PCD_EP_ISR_Handler+0x77a>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2250      	movs	r2, #80	@ 0x50
 8001d4e:	5a9b      	ldrh	r3, [r3, r2]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	001a      	movs	r2, r3
 8001d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	18d2      	adds	r2, r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <PCD_EP_ISR_Handler+0x73c>)
 8001d64:	4694      	mov	ip, r2
 8001d66:	4463      	add	r3, ip
 8001d68:	881a      	ldrh	r2, [r3, #0]
 8001d6a:	213a      	movs	r1, #58	@ 0x3a
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	0592      	lsls	r2, r2, #22
 8001d70:	0d92      	lsrs	r2, r2, #22
 8001d72:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d907      	bls.n	8001d90 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	1ad2      	subs	r2, r2, r3
 8001d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d8c:	619a      	str	r2, [r3, #24]
 8001d8e:	e002      	b.n	8001d96 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d114      	bne.n	8001dc8 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0011      	movs	r1, r2
 8001da6:	0018      	movs	r0, r3
 8001da8:	f005 fe14 	bl	80079d4 <HAL_PCD_DataInStageCallback>
 8001dac:	e02b      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	ffff8f8f 	.word	0xffff8f8f
 8001db4:	ffff80c0 	.word	0xffff80c0
 8001db8:	00000402 	.word	0x00000402
 8001dbc:	00000406 	.word	0x00000406
 8001dc0:	ffff8f0f 	.word	0xffff8f0f
 8001dc4:	ffff8000 	.word	0xffff8000
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	213a      	movs	r1, #58	@ 0x3a
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	18d2      	adds	r2, r2, r3
 8001dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dd6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	18d2      	adds	r2, r2, r3
 8001de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001de4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dec:	0011      	movs	r1, r2
 8001dee:	0018      	movs	r0, r3
 8001df0:	f002 ff18 	bl	8004c24 <USB_EPStartXfer>
 8001df4:	e007      	b.n	8001e06 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001df6:	233e      	movs	r3, #62	@ 0x3e
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	881a      	ldrh	r2, [r3, #0]
 8001dfc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 f92b 	bl	800205c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2244      	movs	r2, #68	@ 0x44
 8001e0c:	5a9b      	ldrh	r3, [r3, r2]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da01      	bge.n	8001e1a <PCD_EP_ISR_Handler+0x79e>
 8001e16:	f7ff fc37 	bl	8001688 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b014      	add	sp, #80	@ 0x50
 8001e22:	bdb0      	pop	{r4, r5, r7, pc}

08001e24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	1dbb      	adds	r3, r7, #6
 8001e30:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e32:	1dbb      	adds	r3, r7, #6
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	@ 0x80
 8001e38:	01db      	lsls	r3, r3, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d100      	bne.n	8001e40 <HAL_PCD_EP_DB_Receive+0x1c>
 8001e3e:	e07d      	b.n	8001f3c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2250      	movs	r2, #80	@ 0x50
 8001e46:	5a9b      	ldrh	r3, [r3, r2]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	18d2      	adds	r2, r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	18d3      	adds	r3, r2, r3
 8001e5a:	4a7a      	ldr	r2, [pc, #488]	@ (8002044 <HAL_PCD_EP_DB_Receive+0x220>)
 8001e5c:	4694      	mov	ip, r2
 8001e5e:	4463      	add	r3, ip
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	211a      	movs	r1, #26
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	0592      	lsls	r2, r2, #22
 8001e68:	0d92      	lsrs	r2, r2, #22
 8001e6a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d307      	bcc.n	8001e88 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	1ad2      	subs	r2, r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	619a      	str	r2, [r3, #24]
 8001e86:	e002      	b.n	8001e8e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d121      	bne.n	8001eda <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	18d3      	adds	r3, r2, r3
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2018      	movs	r0, #24
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	4966      	ldr	r1, [pc, #408]	@ (8002048 <HAL_PCD_EP_DB_Receive+0x224>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	183b      	adds	r3, r7, r0
 8001eb4:	183a      	adds	r2, r7, r0
 8001eb6:	8812      	ldrh	r2, [r2, #0]
 8001eb8:	2180      	movs	r1, #128	@ 0x80
 8001eba:	0189      	lsls	r1, r1, #6
 8001ebc:	404a      	eors	r2, r1
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	18d3      	adds	r3, r2, r3
 8001ece:	183a      	adds	r2, r7, r0
 8001ed0:	8812      	ldrh	r2, [r2, #0]
 8001ed2:	495e      	ldr	r1, [pc, #376]	@ (800204c <HAL_PCD_EP_DB_Receive+0x228>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	2240      	movs	r2, #64	@ 0x40
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d01a      	beq.n	8001f1a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	001a      	movs	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	18d3      	adds	r3, r2, r3
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	2016      	movs	r0, #22
 8001ef8:	183b      	adds	r3, r7, r0
 8001efa:	4955      	ldr	r1, [pc, #340]	@ (8002050 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001efc:	400a      	ands	r2, r1
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	18d3      	adds	r3, r2, r3
 8001f0e:	183a      	adds	r2, r7, r0
 8001f10:	8812      	ldrh	r2, [r2, #0]
 8001f12:	4950      	ldr	r1, [pc, #320]	@ (8002054 <HAL_PCD_EP_DB_Receive+0x230>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	b292      	uxth	r2, r2
 8001f18:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001f1a:	241a      	movs	r4, #26
 8001f1c:	193b      	adds	r3, r7, r4
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d100      	bne.n	8001f26 <HAL_PCD_EP_DB_Receive+0x102>
 8001f24:	e086      	b.n	8002034 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	6959      	ldr	r1, [r3, #20]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	891a      	ldrh	r2, [r3, #8]
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	f003 fddf 	bl	8005af8 <USB_ReadPMA>
 8001f3a:	e07b      	b.n	8002034 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2250      	movs	r2, #80	@ 0x50
 8001f42:	5a9b      	ldrh	r3, [r3, r2]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	001a      	movs	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	18d2      	adds	r2, r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	4a40      	ldr	r2, [pc, #256]	@ (8002058 <HAL_PCD_EP_DB_Receive+0x234>)
 8001f58:	4694      	mov	ip, r2
 8001f5a:	4463      	add	r3, ip
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	211a      	movs	r1, #26
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	0592      	lsls	r2, r2, #22
 8001f64:	0d92      	lsrs	r2, r2, #22
 8001f66:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d307      	bcc.n	8001f84 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	1ad2      	subs	r2, r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	619a      	str	r2, [r3, #24]
 8001f82:	e002      	b.n	8001f8a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d121      	bne.n	8001fd6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	001a      	movs	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	201e      	movs	r0, #30
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	4927      	ldr	r1, [pc, #156]	@ (8002048 <HAL_PCD_EP_DB_Receive+0x224>)
 8001faa:	400a      	ands	r2, r1
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	183b      	adds	r3, r7, r0
 8001fb0:	183a      	adds	r2, r7, r0
 8001fb2:	8812      	ldrh	r2, [r2, #0]
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	0189      	lsls	r1, r1, #6
 8001fb8:	404a      	eors	r2, r1
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	18d3      	adds	r3, r2, r3
 8001fca:	183a      	adds	r2, r7, r0
 8001fcc:	8812      	ldrh	r2, [r2, #0]
 8001fce:	491f      	ldr	r1, [pc, #124]	@ (800204c <HAL_PCD_EP_DB_Receive+0x228>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	801a      	strh	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fd6:	1dbb      	adds	r3, r7, #6
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d11a      	bne.n	8002016 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	201c      	movs	r0, #28
 8001ff4:	183b      	adds	r3, r7, r0
 8001ff6:	4916      	ldr	r1, [pc, #88]	@ (8002050 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	001a      	movs	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	183a      	adds	r2, r7, r0
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	4911      	ldr	r1, [pc, #68]	@ (8002054 <HAL_PCD_EP_DB_Receive+0x230>)
 8002010:	430a      	orrs	r2, r1
 8002012:	b292      	uxth	r2, r2
 8002014:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002016:	241a      	movs	r4, #26
 8002018:	193b      	adds	r3, r7, r4
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	6959      	ldr	r1, [r3, #20]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	895a      	ldrh	r2, [r3, #10]
 800202c:	193b      	adds	r3, r7, r4
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	f003 fd62 	bl	8005af8 <USB_ReadPMA>
    }
  }

  return count;
 8002034:	231a      	movs	r3, #26
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	881b      	ldrh	r3, [r3, #0]
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b009      	add	sp, #36	@ 0x24
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	00000402 	.word	0x00000402
 8002048:	ffffbf8f 	.word	0xffffbf8f
 800204c:	ffff8080 	.word	0xffff8080
 8002050:	ffff8f8f 	.word	0xffff8f8f
 8002054:	ffff80c0 	.word	0xffff80c0
 8002058:	00000406 	.word	0x00000406

0800205c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0a6      	sub	sp, #152	@ 0x98
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	1dbb      	adds	r3, r7, #6
 8002068:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800206a:	1dbb      	adds	r3, r7, #6
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	4013      	ands	r3, r2
 8002072:	d100      	bne.n	8002076 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002074:	e1f9      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x40e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2250      	movs	r2, #80	@ 0x50
 800207c:	5a9b      	ldrh	r3, [r3, r2]
 800207e:	b29b      	uxth	r3, r3
 8002080:	001a      	movs	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	18d2      	adds	r2, r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	18d3      	adds	r3, r2, r3
 8002090:	4ace      	ldr	r2, [pc, #824]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x370>)
 8002092:	4694      	mov	ip, r2
 8002094:	4463      	add	r3, ip
 8002096:	881a      	ldrh	r2, [r3, #0]
 8002098:	2196      	movs	r1, #150	@ 0x96
 800209a:	187b      	adds	r3, r7, r1
 800209c:	0592      	lsls	r2, r2, #22
 800209e:	0d92      	lsrs	r2, r2, #22
 80020a0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d907      	bls.n	80020be <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	619a      	str	r2, [r3, #24]
 80020bc:	e002      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d000      	beq.n	80020ce <HAL_PCD_EP_DB_Transmit+0x72>
 80020cc:	e0da      	b.n	8002284 <HAL_PCD_EP_DB_Transmit+0x228>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d125      	bne.n	8002122 <HAL_PCD_EP_DB_Transmit+0xc6>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2250      	movs	r2, #80	@ 0x50
 80020e2:	5a9b      	ldrh	r3, [r3, r2]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	001a      	movs	r2, r3
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	189b      	adds	r3, r3, r2
 80020ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	00da      	lsls	r2, r3, #3
 80020f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	4ab4      	ldr	r2, [pc, #720]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x370>)
 80020fa:	4694      	mov	ip, r2
 80020fc:	4463      	add	r3, ip
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	059b      	lsls	r3, r3, #22
 8002108:	0d9b      	lsrs	r3, r3, #22
 800210a:	b29a      	uxth	r2, r3
 800210c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210e:	801a      	strh	r2, [r3, #0]
 8002110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4aae      	ldr	r2, [pc, #696]	@ (80023d0 <HAL_PCD_EP_DB_Transmit+0x374>)
 8002118:	4313      	orrs	r3, r2
 800211a:	b29a      	uxth	r2, r3
 800211c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211e:	801a      	strh	r2, [r3, #0]
 8002120:	e01b      	b.n	800215a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d117      	bne.n	800215a <HAL_PCD_EP_DB_Transmit+0xfe>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2250      	movs	r2, #80	@ 0x50
 8002136:	5a9b      	ldrh	r3, [r3, r2]
 8002138:	b29b      	uxth	r3, r3
 800213a:	001a      	movs	r2, r3
 800213c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800213e:	189b      	adds	r3, r3, r2
 8002140:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	00da      	lsls	r2, r3, #3
 8002148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800214a:	18d3      	adds	r3, r2, r3
 800214c:	4a9f      	ldr	r2, [pc, #636]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x370>)
 800214e:	4694      	mov	ip, r2
 8002150:	4463      	add	r3, ip
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
 8002154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002156:	2200      	movs	r2, #0
 8002158:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d125      	bne.n	80021b4 <HAL_PCD_EP_DB_Transmit+0x158>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2250      	movs	r2, #80	@ 0x50
 8002174:	5a9b      	ldrh	r3, [r3, r2]
 8002176:	b29b      	uxth	r3, r3
 8002178:	001a      	movs	r2, r3
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	189b      	adds	r3, r3, r2
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	00da      	lsls	r2, r3, #3
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	4a92      	ldr	r2, [pc, #584]	@ (80023d4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800218c:	4694      	mov	ip, r2
 800218e:	4463      	add	r3, ip
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	059b      	lsls	r3, r3, #22
 800219a:	0d9b      	lsrs	r3, r3, #22
 800219c:	b29a      	uxth	r2, r3
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4a89      	ldr	r2, [pc, #548]	@ (80023d0 <HAL_PCD_EP_DB_Transmit+0x374>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	801a      	strh	r2, [r3, #0]
 80021b2:	e018      	b.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d114      	bne.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2250      	movs	r2, #80	@ 0x50
 80021c2:	5a9b      	ldrh	r3, [r3, r2]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	001a      	movs	r2, r3
 80021c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	00da      	lsls	r2, r3, #3
 80021d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d6:	18d3      	adds	r3, r2, r3
 80021d8:	4a7e      	ldr	r2, [pc, #504]	@ (80023d4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80021da:	4694      	mov	ip, r2
 80021dc:	4463      	add	r3, ip
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	2200      	movs	r2, #0
 80021e4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	78db      	ldrb	r3, [r3, #3]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d120      	bne.n	8002230 <HAL_PCD_EP_DB_Transmit+0x1d4>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	001a      	movs	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	18d3      	adds	r3, r2, r3
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	201a      	movs	r0, #26
 8002202:	183b      	adds	r3, r7, r0
 8002204:	4974      	ldr	r1, [pc, #464]	@ (80023d8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002206:	400a      	ands	r2, r1
 8002208:	801a      	strh	r2, [r3, #0]
 800220a:	183b      	adds	r3, r7, r0
 800220c:	183a      	adds	r2, r7, r0
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	2120      	movs	r1, #32
 8002212:	404a      	eors	r2, r1
 8002214:	801a      	strh	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	001a      	movs	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	18d3      	adds	r3, r2, r3
 8002224:	183a      	adds	r2, r7, r0
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	496c      	ldr	r1, [pc, #432]	@ (80023dc <HAL_PCD_EP_DB_Transmit+0x380>)
 800222a:	430a      	orrs	r2, r1
 800222c:	b292      	uxth	r2, r2
 800222e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f005 fbcb 	bl	80079d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800223e:	1dbb      	adds	r3, r7, #6
 8002240:	881a      	ldrh	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	01db      	lsls	r3, r3, #7
 8002246:	4013      	ands	r3, r2
 8002248:	d01a      	beq.n	8002280 <HAL_PCD_EP_DB_Transmit+0x224>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	001a      	movs	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	18d3      	adds	r3, r2, r3
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	2018      	movs	r0, #24
 800225e:	183b      	adds	r3, r7, r0
 8002260:	495f      	ldr	r1, [pc, #380]	@ (80023e0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8002262:	400a      	ands	r2, r1
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	001a      	movs	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	18d3      	adds	r3, r2, r3
 8002274:	183a      	adds	r2, r7, r0
 8002276:	8812      	ldrh	r2, [r2, #0]
 8002278:	495a      	ldr	r1, [pc, #360]	@ (80023e4 <HAL_PCD_EP_DB_Transmit+0x388>)
 800227a:	430a      	orrs	r2, r1
 800227c:	b292      	uxth	r2, r2
 800227e:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e327      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002284:	1dbb      	adds	r3, r7, #6
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	01db      	lsls	r3, r3, #7
 800228c:	4013      	ands	r3, r2
 800228e:	d01a      	beq.n	80022c6 <HAL_PCD_EP_DB_Transmit+0x26a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	001a      	movs	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	204e      	movs	r0, #78	@ 0x4e
 80022a4:	183b      	adds	r3, r7, r0
 80022a6:	494e      	ldr	r1, [pc, #312]	@ (80023e0 <HAL_PCD_EP_DB_Transmit+0x384>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	801a      	strh	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	001a      	movs	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	183a      	adds	r2, r7, r0
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	4949      	ldr	r1, [pc, #292]	@ (80023e4 <HAL_PCD_EP_DB_Transmit+0x388>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	b292      	uxth	r2, r2
 80022c4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2224      	movs	r2, #36	@ 0x24
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d000      	beq.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x276>
 80022d0:	e2d8      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	2196      	movs	r1, #150	@ 0x96
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	18d2      	adds	r2, r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	18d2      	adds	r2, r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d309      	bcc.n	8002310 <HAL_PCD_EP_DB_Transmit+0x2b4>
        {
          len = ep->maxpacket;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	621a      	str	r2, [r3, #32]
 800230e:	e016      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else if (ep->xfer_len_db == 0U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <HAL_PCD_EP_DB_Transmit+0x2ce>
        {
          len = TxPctSize;
 8002318:	2396      	movs	r3, #150	@ 0x96
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2224      	movs	r2, #36	@ 0x24
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]
 8002328:	e009      	b.n	800233e <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2224      	movs	r2, #36	@ 0x24
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d169      	bne.n	800241a <HAL_PCD_EP_DB_Transmit+0x3be>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2250      	movs	r2, #80	@ 0x50
 8002352:	5a9b      	ldrh	r3, [r3, r2]
 8002354:	b29b      	uxth	r3, r3
 8002356:	001a      	movs	r2, r3
 8002358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235a:	189b      	adds	r3, r3, r2
 800235c:	643b      	str	r3, [r7, #64]	@ 0x40
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00da      	lsls	r2, r3, #3
 8002364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002366:	18d3      	adds	r3, r2, r3
 8002368:	4a18      	ldr	r2, [pc, #96]	@ (80023cc <HAL_PCD_EP_DB_Transmit+0x370>)
 800236a:	4694      	mov	ip, r2
 800236c:	4463      	add	r3, ip
 800236e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	059b      	lsls	r3, r3, #22
 8002378:	0d9b      	lsrs	r3, r3, #22
 800237a:	b29a      	uxth	r2, r3
 800237c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <HAL_PCD_EP_DB_Transmit+0x33c>
 8002386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <HAL_PCD_EP_DB_Transmit+0x374>)
 800238e:	4313      	orrs	r3, r2
 8002390:	b29a      	uxth	r2, r3
 8002392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	e05d      	b.n	8002454 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002398:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800239a:	2b3e      	cmp	r3, #62	@ 0x3e
 800239c:	d824      	bhi.n	80023e8 <HAL_PCD_EP_DB_Transmit+0x38c>
 800239e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80023a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d002      	beq.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x356>
 80023ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ae:	3301      	adds	r3, #1
 80023b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80023b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	e044      	b.n	8002454 <HAL_PCD_EP_DB_Transmit+0x3f8>
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	00000402 	.word	0x00000402
 80023d0:	ffff8000 	.word	0xffff8000
 80023d4:	00000406 	.word	0x00000406
 80023d8:	ffff8fbf 	.word	0xffff8fbf
 80023dc:	ffff8080 	.word	0xffff8080
 80023e0:	ffff8f8f 	.word	0xffff8f8f
 80023e4:	ffffc080 	.word	0xffffc080
 80023e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80023ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f0:	221f      	movs	r2, #31
 80023f2:	4013      	ands	r3, r2
 80023f4:	d102      	bne.n	80023fc <HAL_PCD_EP_DB_Transmit+0x3a0>
 80023f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023f8:	3b01      	subs	r3, #1
 80023fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29a      	uxth	r2, r3
 8002402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002404:	b29b      	uxth	r3, r3
 8002406:	029b      	lsls	r3, r3, #10
 8002408:	b29b      	uxth	r3, r3
 800240a:	4313      	orrs	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	4ace      	ldr	r2, [pc, #824]	@ (8002748 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8002410:	4313      	orrs	r3, r2
 8002412:	b29a      	uxth	r2, r3
 8002414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002416:	801a      	strh	r2, [r3, #0]
 8002418:	e01c      	b.n	8002454 <HAL_PCD_EP_DB_Transmit+0x3f8>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d118      	bne.n	8002454 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2250      	movs	r2, #80	@ 0x50
 800242e:	5a9b      	ldrh	r3, [r3, r2]
 8002430:	b29b      	uxth	r3, r3
 8002432:	001a      	movs	r2, r3
 8002434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002436:	189b      	adds	r3, r3, r2
 8002438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	00da      	lsls	r2, r3, #3
 8002440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002442:	18d3      	adds	r3, r2, r3
 8002444:	4ac1      	ldr	r2, [pc, #772]	@ (800274c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002446:	4694      	mov	ip, r2
 8002448:	4463      	add	r3, ip
 800244a:	647b      	str	r3, [r7, #68]	@ 0x44
 800244c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244e:	b29a      	uxth	r2, r3
 8002450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002452:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6959      	ldr	r1, [r3, #20]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	891a      	ldrh	r2, [r3, #8]
 8002460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002462:	b29b      	uxth	r3, r3
 8002464:	f003 fafe 	bl	8005a64 <USB_WritePMA>
 8002468:	e20c      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x828>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2250      	movs	r2, #80	@ 0x50
 8002470:	5a9b      	ldrh	r3, [r3, r2]
 8002472:	b29b      	uxth	r3, r3
 8002474:	001a      	movs	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	18d2      	adds	r2, r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	18d3      	adds	r3, r2, r3
 8002484:	4ab2      	ldr	r2, [pc, #712]	@ (8002750 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002486:	4694      	mov	ip, r2
 8002488:	4463      	add	r3, ip
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	2196      	movs	r1, #150	@ 0x96
 800248e:	187b      	adds	r3, r7, r1
 8002490:	0592      	lsls	r2, r2, #22
 8002492:	0d92      	lsrs	r2, r2, #22
 8002494:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	187b      	adds	r3, r7, r1
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d307      	bcc.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x456>
    {
      ep->xfer_len -= TxPctSize;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	1ad2      	subs	r2, r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	619a      	str	r2, [r3, #24]
 80024b0:	e002      	b.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x45c>
    }
    else
    {
      ep->xfer_len = 0U;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d000      	beq.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x466>
 80024c0:	e0ee      	b.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x644>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	785b      	ldrb	r3, [r3, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d125      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x4ba>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2250      	movs	r2, #80	@ 0x50
 80024d6:	5a9b      	ldrh	r3, [r3, r2]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	001a      	movs	r2, r3
 80024dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024de:	189b      	adds	r3, r3, r2
 80024e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ea:	18d3      	adds	r3, r2, r3
 80024ec:	4a97      	ldr	r2, [pc, #604]	@ (800274c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80024ee:	4694      	mov	ip, r2
 80024f0:	4463      	add	r3, ip
 80024f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80024f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	059b      	lsls	r3, r3, #22
 80024fc:	0d9b      	lsrs	r3, r3, #22
 80024fe:	b29a      	uxth	r2, r3
 8002500:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4a8f      	ldr	r2, [pc, #572]	@ (8002748 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 800250c:	4313      	orrs	r3, r2
 800250e:	b29a      	uxth	r2, r3
 8002510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	e01b      	b.n	800254e <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d117      	bne.n	800254e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2250      	movs	r2, #80	@ 0x50
 800252a:	5a9b      	ldrh	r3, [r3, r2]
 800252c:	b29b      	uxth	r3, r3
 800252e:	001a      	movs	r2, r3
 8002530:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002532:	189b      	adds	r3, r3, r2
 8002534:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00da      	lsls	r2, r3, #3
 800253c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800253e:	18d3      	adds	r3, r2, r3
 8002540:	4a82      	ldr	r2, [pc, #520]	@ (800274c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002542:	4694      	mov	ip, r2
 8002544:	4463      	add	r3, ip
 8002546:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002548:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800254a:	2200      	movs	r2, #0
 800254c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2284      	movs	r2, #132	@ 0x84
 8002554:	18ba      	adds	r2, r7, r2
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d130      	bne.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x566>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	218c      	movs	r1, #140	@ 0x8c
 8002566:	187a      	adds	r2, r7, r1
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2250      	movs	r2, #80	@ 0x50
 8002570:	5a9b      	ldrh	r3, [r3, r2]
 8002572:	b29b      	uxth	r3, r3
 8002574:	001a      	movs	r2, r3
 8002576:	187b      	adds	r3, r7, r1
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	189b      	adds	r3, r3, r2
 800257c:	187a      	adds	r2, r7, r1
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	00da      	lsls	r2, r3, #3
 8002586:	187b      	adds	r3, r7, r1
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	18d3      	adds	r3, r2, r3
 800258c:	4a70      	ldr	r2, [pc, #448]	@ (8002750 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	2188      	movs	r1, #136	@ 0x88
 8002594:	187a      	adds	r2, r7, r1
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	187b      	adds	r3, r7, r1
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	059b      	lsls	r3, r3, #22
 80025a2:	0d9b      	lsrs	r3, r3, #22
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4a64      	ldr	r2, [pc, #400]	@ (8002748 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	e01f      	b.n	8002602 <HAL_PCD_EP_DB_Transmit+0x5a6>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d11b      	bne.n	8002602 <HAL_PCD_EP_DB_Transmit+0x5a6>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2250      	movs	r2, #80	@ 0x50
 80025d0:	5a9b      	ldrh	r3, [r3, r2]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	001a      	movs	r2, r3
 80025d6:	2184      	movs	r1, #132	@ 0x84
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	187a      	adds	r2, r7, r1
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	00da      	lsls	r2, r3, #3
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	18d3      	adds	r3, r2, r3
 80025ee:	4a58      	ldr	r2, [pc, #352]	@ (8002750 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80025f0:	4694      	mov	ip, r2
 80025f2:	4463      	add	r3, ip
 80025f4:	2280      	movs	r2, #128	@ 0x80
 80025f6:	18b9      	adds	r1, r7, r2
 80025f8:	600b      	str	r3, [r1, #0]
 80025fa:	18bb      	adds	r3, r7, r2
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	78db      	ldrb	r3, [r3, #3]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d120      	bne.n	800264c <HAL_PCD_EP_DB_Transmit+0x5f0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	001a      	movs	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	18d3      	adds	r3, r2, r3
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29a      	uxth	r2, r3
 800261c:	2094      	movs	r0, #148	@ 0x94
 800261e:	183b      	adds	r3, r7, r0
 8002620:	494c      	ldr	r1, [pc, #304]	@ (8002754 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002622:	400a      	ands	r2, r1
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	183b      	adds	r3, r7, r0
 8002628:	183a      	adds	r2, r7, r0
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	2120      	movs	r1, #32
 800262e:	404a      	eors	r2, r1
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	001a      	movs	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	18d3      	adds	r3, r2, r3
 8002640:	183a      	adds	r2, r7, r0
 8002642:	8812      	ldrh	r2, [r2, #0]
 8002644:	4944      	ldr	r1, [pc, #272]	@ (8002758 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002646:	430a      	orrs	r2, r1
 8002648:	b292      	uxth	r2, r2
 800264a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f005 f9bd 	bl	80079d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800265a:	1dbb      	adds	r3, r7, #6
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	01db      	lsls	r3, r3, #7
 8002662:	4013      	ands	r3, r2
 8002664:	d11a      	bne.n	800269c <HAL_PCD_EP_DB_Transmit+0x640>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	001a      	movs	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	18d3      	adds	r3, r2, r3
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29a      	uxth	r2, r3
 8002678:	2092      	movs	r0, #146	@ 0x92
 800267a:	183b      	adds	r3, r7, r0
 800267c:	4937      	ldr	r1, [pc, #220]	@ (800275c <HAL_PCD_EP_DB_Transmit+0x700>)
 800267e:	400a      	ands	r2, r1
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	001a      	movs	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	18d3      	adds	r3, r2, r3
 8002690:	183a      	adds	r2, r7, r0
 8002692:	8812      	ldrh	r2, [r2, #0]
 8002694:	4932      	ldr	r1, [pc, #200]	@ (8002760 <HAL_PCD_EP_DB_Transmit+0x704>)
 8002696:	430a      	orrs	r2, r1
 8002698:	b292      	uxth	r2, r2
 800269a:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e119      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026a0:	1dbb      	adds	r3, r7, #6
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	01db      	lsls	r3, r3, #7
 80026a8:	4013      	ands	r3, r2
 80026aa:	d11a      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x686>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	001a      	movs	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	2056      	movs	r0, #86	@ 0x56
 80026c0:	183b      	adds	r3, r7, r0
 80026c2:	4926      	ldr	r1, [pc, #152]	@ (800275c <HAL_PCD_EP_DB_Transmit+0x700>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	001a      	movs	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	18d3      	adds	r3, r2, r3
 80026d6:	183a      	adds	r2, r7, r0
 80026d8:	8812      	ldrh	r2, [r2, #0]
 80026da:	4921      	ldr	r1, [pc, #132]	@ (8002760 <HAL_PCD_EP_DB_Transmit+0x704>)
 80026dc:	430a      	orrs	r2, r1
 80026de:	b292      	uxth	r2, r2
 80026e0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2224      	movs	r2, #36	@ 0x24
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d000      	beq.n	80026ee <HAL_PCD_EP_DB_Transmit+0x692>
 80026ec:	e0ca      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	2196      	movs	r1, #150	@ 0x96
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	18d2      	adds	r2, r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	187b      	adds	r3, r7, r1
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	18d2      	adds	r2, r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d309      	bcc.n	800272c <HAL_PCD_EP_DB_Transmit+0x6d0>
        {
          len = ep->maxpacket;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6a1a      	ldr	r2, [r3, #32]
 8002722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002724:	1ad2      	subs	r2, r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	621a      	str	r2, [r3, #32]
 800272a:	e025      	b.n	8002778 <HAL_PCD_EP_DB_Transmit+0x71c>
        }
        else if (ep->xfer_len_db == 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d117      	bne.n	8002764 <HAL_PCD_EP_DB_Transmit+0x708>
        {
          len = TxPctSize;
 8002734:	2396      	movs	r3, #150	@ 0x96
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2224      	movs	r2, #36	@ 0x24
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]
 8002744:	e018      	b.n	8002778 <HAL_PCD_EP_DB_Transmit+0x71c>
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	ffff8000 	.word	0xffff8000
 800274c:	00000402 	.word	0x00000402
 8002750:	00000406 	.word	0x00000406
 8002754:	ffff8fbf 	.word	0xffff8fbf
 8002758:	ffff8080 	.word	0xffff8080
 800275c:	ffff8f8f 	.word	0xffff8f8f
 8002760:	ffffc080 	.word	0xffffc080
        }
        else
        {
          len = ep->xfer_len_db;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2224      	movs	r2, #36	@ 0x24
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	785b      	ldrb	r3, [r3, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d15a      	bne.n	800283c <HAL_PCD_EP_DB_Transmit+0x7e0>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2250      	movs	r2, #80	@ 0x50
 8002792:	5a9b      	ldrh	r3, [r3, r2]
 8002794:	b29b      	uxth	r3, r3
 8002796:	001a      	movs	r2, r3
 8002798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279a:	189b      	adds	r3, r3, r2
 800279c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	00da      	lsls	r2, r3, #3
 80027a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a6:	18d3      	adds	r3, r2, r3
 80027a8:	4a4c      	ldr	r2, [pc, #304]	@ (80028dc <HAL_PCD_EP_DB_Transmit+0x880>)
 80027aa:	4694      	mov	ip, r2
 80027ac:	4463      	add	r3, ip
 80027ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80027b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	059b      	lsls	r3, r3, #22
 80027b8:	0d9b      	lsrs	r3, r3, #22
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4a44      	ldr	r2, [pc, #272]	@ (80028e0 <HAL_PCD_EP_DB_Transmit+0x884>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	e04b      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x814>
 80027d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027da:	2b3e      	cmp	r3, #62	@ 0x3e
 80027dc:	d815      	bhi.n	800280a <HAL_PCD_EP_DB_Transmit+0x7ae>
 80027de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027e6:	2201      	movs	r2, #1
 80027e8:	4013      	ands	r3, r2
 80027ea:	d002      	beq.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x796>
 80027ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ee:	3301      	adds	r3, #1
 80027f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80027f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	029b      	lsls	r3, r3, #10
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	b29a      	uxth	r2, r3
 8002804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	e032      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x814>
 800280a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002812:	221f      	movs	r2, #31
 8002814:	4013      	ands	r3, r2
 8002816:	d102      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x7c2>
 8002818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800281a:	3b01      	subs	r3, #1
 800281c:	663b      	str	r3, [r7, #96]	@ 0x60
 800281e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29a      	uxth	r2, r3
 8002824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002826:	b29b      	uxth	r3, r3
 8002828:	029b      	lsls	r3, r3, #10
 800282a:	b29b      	uxth	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	4a2b      	ldr	r2, [pc, #172]	@ (80028e0 <HAL_PCD_EP_DB_Transmit+0x884>)
 8002832:	4313      	orrs	r3, r2
 8002834:	b29a      	uxth	r2, r3
 8002836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	e019      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x814>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	785b      	ldrb	r3, [r3, #1]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d115      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x814>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2250      	movs	r2, #80	@ 0x50
 800284a:	5a9b      	ldrh	r3, [r3, r2]
 800284c:	b29b      	uxth	r3, r3
 800284e:	001a      	movs	r2, r3
 8002850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002852:	189b      	adds	r3, r3, r2
 8002854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	00da      	lsls	r2, r3, #3
 800285c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800285e:	18d3      	adds	r3, r2, r3
 8002860:	4a1e      	ldr	r2, [pc, #120]	@ (80028dc <HAL_PCD_EP_DB_Transmit+0x880>)
 8002862:	4694      	mov	ip, r2
 8002864:	4463      	add	r3, ip
 8002866:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286a:	b29a      	uxth	r2, r3
 800286c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800286e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6959      	ldr	r1, [r3, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	895a      	ldrh	r2, [r3, #10]
 800287c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800287e:	b29b      	uxth	r3, r3
 8002880:	f003 f8f0 	bl	8005a64 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	001a      	movs	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2016      	movs	r0, #22
 8002898:	183b      	adds	r3, r7, r0
 800289a:	4912      	ldr	r1, [pc, #72]	@ (80028e4 <HAL_PCD_EP_DB_Transmit+0x888>)
 800289c:	400a      	ands	r2, r1
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	183a      	adds	r2, r7, r0
 80028a4:	8812      	ldrh	r2, [r2, #0]
 80028a6:	2110      	movs	r1, #16
 80028a8:	404a      	eors	r2, r1
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	183a      	adds	r2, r7, r0
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	2120      	movs	r1, #32
 80028b4:	404a      	eors	r2, r1
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	001a      	movs	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	183a      	adds	r2, r7, r0
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	4907      	ldr	r1, [pc, #28]	@ (80028e8 <HAL_PCD_EP_DB_Transmit+0x88c>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	b292      	uxth	r2, r2
 80028d0:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b026      	add	sp, #152	@ 0x98
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00000406 	.word	0x00000406
 80028e0:	ffff8000 	.word	0xffff8000
 80028e4:	ffff8fbf 	.word	0xffff8fbf
 80028e8:	ffff8080 	.word	0xffff8080

080028ec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	0008      	movs	r0, r1
 80028f6:	0011      	movs	r1, r2
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	240a      	movs	r4, #10
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	1c02      	adds	r2, r0, #0
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	2308      	movs	r3, #8
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	1c0a      	adds	r2, r1, #0
 8002908:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800290a:	0021      	movs	r1, r4
 800290c:	187b      	adds	r3, r7, r1
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	4013      	ands	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291a:	187b      	adds	r3, r7, r1
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	2207      	movs	r2, #7
 8002920:	401a      	ands	r2, r3
 8002922:	0013      	movs	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	189b      	adds	r3, r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	3310      	adds	r3, #16
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	18d3      	adds	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	e00b      	b.n	800294c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002934:	230a      	movs	r3, #10
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	0013      	movs	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	189b      	adds	r3, r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	3351      	adds	r3, #81	@ 0x51
 8002944:	33ff      	adds	r3, #255	@ 0xff
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	18d3      	adds	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800294c:	2308      	movs	r3, #8
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	b29a      	uxth	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	80da      	strh	r2, [r3, #6]
 8002964:	e00b      	b.n	800297e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2201      	movs	r2, #1
 800296a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	b29a      	uxth	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b007      	add	sp, #28
 8002986:	bd90      	pop	{r4, r7, pc}

08002988 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	23b4      	movs	r3, #180	@ 0xb4
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	2101      	movs	r1, #1
 800299e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	23b2      	movs	r3, #178	@ 0xb2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	2100      	movs	r1, #0
 80029a8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2254      	movs	r2, #84	@ 0x54
 80029ae:	5a9b      	ldrh	r3, [r3, r2]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2201      	movs	r2, #1
 80029b4:	4313      	orrs	r3, r2
 80029b6:	b299      	uxth	r1, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2254      	movs	r2, #84	@ 0x54
 80029bc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2254      	movs	r2, #84	@ 0x54
 80029c2:	5a9b      	ldrh	r3, [r3, r2]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2202      	movs	r2, #2
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b299      	uxth	r1, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2254      	movs	r2, #84	@ 0x54
 80029d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b004      	add	sp, #16
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	000a      	movs	r2, r1
 80029e6:	1cfb      	adds	r3, r7, #3
 80029e8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f000 fbbf 	bl	8003186 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a08:	4bc9      	ldr	r3, [pc, #804]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	220c      	movs	r2, #12
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a12:	4bc7      	ldr	r3, [pc, #796]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2201      	movs	r2, #1
 8002a24:	4013      	ands	r3, r2
 8002a26:	d100      	bne.n	8002a2a <HAL_RCC_OscConfig+0x36>
 8002a28:	e07e      	b.n	8002b28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d007      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d112      	bne.n	8002a5c <HAL_RCC_OscConfig+0x68>
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	025b      	lsls	r3, r3, #9
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	4bbb      	ldr	r3, [pc, #748]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5a>
 8002a4c:	e06b      	b.n	8002b26 <HAL_RCC_OscConfig+0x132>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d167      	bne.n	8002b26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f000 fb95 	bl	8003186 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	025b      	lsls	r3, r3, #9
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x84>
 8002a68:	4bb1      	ldr	r3, [pc, #708]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4bb0      	ldr	r3, [pc, #704]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a6e:	2180      	movs	r1, #128	@ 0x80
 8002a70:	0249      	lsls	r1, r1, #9
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e027      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd4>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	23a0      	movs	r3, #160	@ 0xa0
 8002a7e:	02db      	lsls	r3, r3, #11
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10e      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xae>
 8002a84:	4baa      	ldr	r3, [pc, #680]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4ba9      	ldr	r3, [pc, #676]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a8a:	2180      	movs	r1, #128	@ 0x80
 8002a8c:	02c9      	lsls	r1, r1, #11
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	4ba7      	ldr	r3, [pc, #668]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4ba6      	ldr	r3, [pc, #664]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	0249      	lsls	r1, r1, #9
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e012      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd4>
 8002aa2:	4ba3      	ldr	r3, [pc, #652]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4ba2      	ldr	r3, [pc, #648]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002aa8:	49a2      	ldr	r1, [pc, #648]	@ (8002d34 <HAL_RCC_OscConfig+0x340>)
 8002aaa:	400a      	ands	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4ba0      	ldr	r3, [pc, #640]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002ac2:	499d      	ldr	r1, [pc, #628]	@ (8002d38 <HAL_RCC_OscConfig+0x344>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fd fec0 	bl	8000854 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad8:	e009      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ada:	f7fd febb 	bl	8000854 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b64      	cmp	r3, #100	@ 0x64
 8002ae6:	d902      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	f000 fb4c 	bl	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aee:	4b90      	ldr	r3, [pc, #576]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0ef      	beq.n	8002ada <HAL_RCC_OscConfig+0xe6>
 8002afa:	e015      	b.n	8002b28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fd feaa 	bl	8000854 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b06:	f7fd fea5 	bl	8000854 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	@ 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e336      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b18:	4b85      	ldr	r3, [pc, #532]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x112>
 8002b24:	e000      	b.n	8002b28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d100      	bne.n	8002b34 <HAL_RCC_OscConfig+0x140>
 8002b32:	e099      	b.n	8002c68 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b42:	4b7b      	ldr	r3, [pc, #492]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b7a      	ldr	r3, [pc, #488]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b48:	2120      	movs	r1, #32
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	2220      	movs	r2, #32
 8002b52:	4393      	bics	r3, r2
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d13e      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1ec>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d13b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b68:	4b71      	ldr	r3, [pc, #452]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_RCC_OscConfig+0x188>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e304      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a6e      	ldr	r2, [pc, #440]	@ (8002d3c <HAL_RCC_OscConfig+0x348>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	4b68      	ldr	r3, [pc, #416]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b92:	4b67      	ldr	r3, [pc, #412]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2209      	movs	r2, #9
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	4b64      	ldr	r3, [pc, #400]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba4:	f000 fc42 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8002ba8:	0001      	movs	r1, r0
 8002baa:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	4a62      	ldr	r2, [pc, #392]	@ (8002d40 <HAL_RCC_OscConfig+0x34c>)
 8002bb6:	5cd3      	ldrb	r3, [r2, r3]
 8002bb8:	000a      	movs	r2, r1
 8002bba:	40da      	lsrs	r2, r3
 8002bbc:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <HAL_RCC_OscConfig+0x350>)
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002bc0:	4b61      	ldr	r3, [pc, #388]	@ (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2513      	movs	r5, #19
 8002bc6:	197c      	adds	r4, r7, r5
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fd fdfd 	bl	80007c8 <HAL_InitTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002bd2:	197b      	adds	r3, r7, r5
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d046      	beq.n	8002c68 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002bda:	197b      	adds	r3, r7, r5
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	e2d2      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d027      	beq.n	8002c36 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002be6:	4b52      	ldr	r3, [pc, #328]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2209      	movs	r2, #9
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fd fe2c 	bl	8000854 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fd fe27 	bl	8000854 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e2b8      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c14:	4b46      	ldr	r3, [pc, #280]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d0f1      	beq.n	8002c02 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b44      	ldr	r3, [pc, #272]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a46      	ldr	r2, [pc, #280]	@ (8002d3c <HAL_RCC_OscConfig+0x348>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	021a      	lsls	r2, r3, #8
 8002c2e:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	e018      	b.n	8002c68 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b3e      	ldr	r3, [pc, #248]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	438a      	bics	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fd fe07 	bl	8000854 <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fd fe02 	bl	8000854 <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e293      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c5e:	4b34      	ldr	r3, [pc, #208]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2204      	movs	r2, #4
 8002c64:	4013      	ands	r3, r2
 8002c66:	d1f1      	bne.n	8002c4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d100      	bne.n	8002c74 <HAL_RCC_OscConfig+0x280>
 8002c72:	e0a2      	b.n	8002dba <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d140      	bne.n	8002cfc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x29e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e279      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c92:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <HAL_RCC_OscConfig+0x358>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca0:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	0a19      	lsrs	r1, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	061a      	lsls	r2, r3, #24
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	0b5b      	lsrs	r3, r3, #13
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	2280      	movs	r2, #128	@ 0x80
 8002cc4:	0212      	lsls	r2, r2, #8
 8002cc6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cc8:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	210f      	movs	r1, #15
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	491b      	ldr	r1, [pc, #108]	@ (8002d40 <HAL_RCC_OscConfig+0x34c>)
 8002cd4:	5ccb      	ldrb	r3, [r1, r3]
 8002cd6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_OscConfig+0x350>)
 8002cda:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_RCC_OscConfig+0x354>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2513      	movs	r5, #19
 8002ce2:	197c      	adds	r4, r7, r5
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fd fd6f 	bl	80007c8 <HAL_InitTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002cee:	197b      	adds	r3, r7, r5
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d061      	beq.n	8002dba <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002cf6:	197b      	adds	r3, r7, r5
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	e244      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d040      	beq.n	8002d86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d04:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <HAL_RCC_OscConfig+0x33c>)
 8002d0a:	2180      	movs	r1, #128	@ 0x80
 8002d0c:	0049      	lsls	r1, r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fd fd9f 	bl	8000854 <HAL_GetTick>
 8002d16:	0003      	movs	r3, r0
 8002d18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d1a:	e019      	b.n	8002d50 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1c:	f7fd fd9a 	bl	8000854 <HAL_GetTick>
 8002d20:	0002      	movs	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d912      	bls.n	8002d50 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e22b      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	40021000 	.word	0x40021000
 8002d34:	fffeffff 	.word	0xfffeffff
 8002d38:	fffbffff 	.word	0xfffbffff
 8002d3c:	ffffe0ff 	.word	0xffffe0ff
 8002d40:	08008088 	.word	0x08008088
 8002d44:	20000000 	.word	0x20000000
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d50:	4bca      	ldr	r3, [pc, #808]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d0df      	beq.n	8002d1c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5c:	4bc7      	ldr	r3, [pc, #796]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4ac7      	ldr	r2, [pc, #796]	@ (8003080 <HAL_RCC_OscConfig+0x68c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d6a:	4bc4      	ldr	r3, [pc, #784]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d70:	4bc2      	ldr	r3, [pc, #776]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	0a19      	lsrs	r1, r3, #8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	061a      	lsls	r2, r3, #24
 8002d7e:	4bbf      	ldr	r3, [pc, #764]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	e019      	b.n	8002dba <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d86:	4bbd      	ldr	r3, [pc, #756]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4bbc      	ldr	r3, [pc, #752]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002d8c:	49bd      	ldr	r1, [pc, #756]	@ (8003084 <HAL_RCC_OscConfig+0x690>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fd fd5f 	bl	8000854 <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d9c:	f7fd fd5a 	bl	8000854 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1eb      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dae:	4bb3      	ldr	r3, [pc, #716]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d036      	beq.n	8002e32 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d019      	beq.n	8002e00 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	4bab      	ldr	r3, [pc, #684]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002dce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dd0:	4baa      	ldr	r3, [pc, #680]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7fd fd3c 	bl	8000854 <HAL_GetTick>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fd fd37 	bl	8000854 <HAL_GetTick>
 8002de6:	0002      	movs	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e1c8      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002df4:	4ba1      	ldr	r3, [pc, #644]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d0f1      	beq.n	8002de2 <HAL_RCC_OscConfig+0x3ee>
 8002dfe:	e018      	b.n	8002e32 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b9e      	ldr	r3, [pc, #632]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002e02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e04:	4b9d      	ldr	r3, [pc, #628]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	438a      	bics	r2, r1
 8002e0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0c:	f7fd fd22 	bl	8000854 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fd fd1d 	bl	8000854 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1ae      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e28:	4b94      	ldr	r3, [pc, #592]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1f1      	bne.n	8002e16 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2204      	movs	r2, #4
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <HAL_RCC_OscConfig+0x44a>
 8002e3c:	e0ae      	b.n	8002f9c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2023      	movs	r0, #35	@ 0x23
 8002e40:	183b      	adds	r3, r7, r0
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b8d      	ldr	r3, [pc, #564]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	055b      	lsls	r3, r3, #21
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b8a      	ldr	r3, [pc, #552]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e56:	4b89      	ldr	r3, [pc, #548]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	0549      	lsls	r1, r1, #21
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002e60:	183b      	adds	r3, r7, r0
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x694>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	2380      	movs	r3, #128	@ 0x80
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d11a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b85      	ldr	r3, [pc, #532]	@ (8003088 <HAL_RCC_OscConfig+0x694>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b84      	ldr	r3, [pc, #528]	@ (8003088 <HAL_RCC_OscConfig+0x694>)
 8002e78:	2180      	movs	r1, #128	@ 0x80
 8002e7a:	0049      	lsls	r1, r1, #1
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e80:	f7fd fce8 	bl	8000854 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fd fce3 	bl	8000854 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	@ 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e174      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b7a      	ldr	r3, [pc, #488]	@ (8003088 <HAL_RCC_OscConfig+0x694>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4d0>
 8002eb4:	4b71      	ldr	r3, [pc, #452]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eb8:	4b70      	ldr	r3, [pc, #448]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002eba:	2180      	movs	r1, #128	@ 0x80
 8002ebc:	0049      	lsls	r1, r1, #1
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ec2:	e031      	b.n	8002f28 <HAL_RCC_OscConfig+0x534>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x4f2>
 8002ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002ece:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002ed2:	496c      	ldr	r1, [pc, #432]	@ (8003084 <HAL_RCC_OscConfig+0x690>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ed8:	4b68      	ldr	r3, [pc, #416]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002eda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002edc:	4b67      	ldr	r3, [pc, #412]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002ede:	496b      	ldr	r1, [pc, #428]	@ (800308c <HAL_RCC_OscConfig+0x698>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ee4:	e020      	b.n	8002f28 <HAL_RCC_OscConfig+0x534>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	23a0      	movs	r3, #160	@ 0xa0
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d10e      	bne.n	8002f10 <HAL_RCC_OscConfig+0x51c>
 8002ef2:	4b62      	ldr	r3, [pc, #392]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002ef4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ef6:	4b61      	ldr	r3, [pc, #388]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	00c9      	lsls	r1, r1, #3
 8002efc:	430a      	orrs	r2, r1
 8002efe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f00:	4b5e      	ldr	r3, [pc, #376]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f04:	4b5d      	ldr	r3, [pc, #372]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f06:	2180      	movs	r1, #128	@ 0x80
 8002f08:	0049      	lsls	r1, r1, #1
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0x534>
 8002f10:	4b5a      	ldr	r3, [pc, #360]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f14:	4b59      	ldr	r3, [pc, #356]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f16:	495b      	ldr	r1, [pc, #364]	@ (8003084 <HAL_RCC_OscConfig+0x690>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f1c:	4b57      	ldr	r3, [pc, #348]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f20:	4b56      	ldr	r3, [pc, #344]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f22:	495a      	ldr	r1, [pc, #360]	@ (800308c <HAL_RCC_OscConfig+0x698>)
 8002f24:	400a      	ands	r2, r1
 8002f26:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fd fc90 	bl	8000854 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f38:	e009      	b.n	8002f4e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fd fc8b 	bl	8000854 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	4a52      	ldr	r2, [pc, #328]	@ (8003090 <HAL_RCC_OscConfig+0x69c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e11b      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4013      	ands	r3, r2
 8002f58:	d0ef      	beq.n	8002f3a <HAL_RCC_OscConfig+0x546>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fd fc7a 	bl	8000854 <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f64:	e009      	b.n	8002f7a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fd fc75 	bl	8000854 <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	4a47      	ldr	r2, [pc, #284]	@ (8003090 <HAL_RCC_OscConfig+0x69c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e105      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f7a:	4b40      	ldr	r3, [pc, #256]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4013      	ands	r3, r2
 8002f84:	d1ef      	bne.n	8002f66 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f86:	2323      	movs	r3, #35	@ 0x23
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b3a      	ldr	r3, [pc, #232]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f94:	4b39      	ldr	r3, [pc, #228]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002f96:	493f      	ldr	r1, [pc, #252]	@ (8003094 <HAL_RCC_OscConfig+0x6a0>)
 8002f98:	400a      	ands	r2, r1
 8002f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d049      	beq.n	800303a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d026      	beq.n	8002ffc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002fae:	4b33      	ldr	r3, [pc, #204]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	4b32      	ldr	r3, [pc, #200]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	4b30      	ldr	r3, [pc, #192]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fc6:	4b34      	ldr	r3, [pc, #208]	@ (8003098 <HAL_RCC_OscConfig+0x6a4>)
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	4b33      	ldr	r3, [pc, #204]	@ (8003098 <HAL_RCC_OscConfig+0x6a4>)
 8002fcc:	2180      	movs	r1, #128	@ 0x80
 8002fce:	0189      	lsls	r1, r1, #6
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd fc3e 	bl	8000854 <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fde:	f7fd fc39 	bl	8000854 <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0ca      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ff0:	4b22      	ldr	r3, [pc, #136]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d0f1      	beq.n	8002fde <HAL_RCC_OscConfig+0x5ea>
 8002ffa:	e01e      	b.n	800303a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	4b1e      	ldr	r3, [pc, #120]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8003002:	2101      	movs	r1, #1
 8003004:	438a      	bics	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	4b23      	ldr	r3, [pc, #140]	@ (8003098 <HAL_RCC_OscConfig+0x6a4>)
 800300a:	6a1a      	ldr	r2, [r3, #32]
 800300c:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_RCC_OscConfig+0x6a4>)
 800300e:	4923      	ldr	r1, [pc, #140]	@ (800309c <HAL_RCC_OscConfig+0x6a8>)
 8003010:	400a      	ands	r2, r1
 8003012:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fd fc1e 	bl	8000854 <HAL_GetTick>
 8003018:	0003      	movs	r3, r0
 800301a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800301e:	f7fd fc19 	bl	8000854 <HAL_GetTick>
 8003022:	0002      	movs	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e0aa      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003030:	4b12      	ldr	r3, [pc, #72]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2202      	movs	r2, #2
 8003036:	4013      	ands	r3, r2
 8003038:	d1f1      	bne.n	800301e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d100      	bne.n	8003044 <HAL_RCC_OscConfig+0x650>
 8003042:	e09f      	b.n	8003184 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d100      	bne.n	800304c <HAL_RCC_OscConfig+0x658>
 800304a:	e078      	b.n	800313e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	2b02      	cmp	r3, #2
 8003052:	d159      	bne.n	8003108 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b08      	ldr	r3, [pc, #32]	@ (800307c <HAL_RCC_OscConfig+0x688>)
 800305a:	4911      	ldr	r1, [pc, #68]	@ (80030a0 <HAL_RCC_OscConfig+0x6ac>)
 800305c:	400a      	ands	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd fbf8 	bl	8000854 <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003068:	e01c      	b.n	80030a4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306a:	f7fd fbf3 	bl	8000854 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d915      	bls.n	80030a4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e084      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
 800307c:	40021000 	.word	0x40021000
 8003080:	ffff1fff 	.word	0xffff1fff
 8003084:	fffffeff 	.word	0xfffffeff
 8003088:	40007000 	.word	0x40007000
 800308c:	fffffbff 	.word	0xfffffbff
 8003090:	00001388 	.word	0x00001388
 8003094:	efffffff 	.word	0xefffffff
 8003098:	40010000 	.word	0x40010000
 800309c:	ffffdfff 	.word	0xffffdfff
 80030a0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	@ 0x80
 80030aa:	049b      	lsls	r3, r3, #18
 80030ac:	4013      	ands	r3, r2
 80030ae:	d1dc      	bne.n	800306a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b0:	4b37      	ldr	r3, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a37      	ldr	r2, [pc, #220]	@ (8003194 <HAL_RCC_OscConfig+0x7a0>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c8:	431a      	orrs	r2, r3
 80030ca:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 80030d6:	2180      	movs	r1, #128	@ 0x80
 80030d8:	0449      	lsls	r1, r1, #17
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fd fbb9 	bl	8000854 <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd fbb4 	bl	8000854 <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e045      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030fa:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	049b      	lsls	r3, r3, #18
 8003102:	4013      	ands	r3, r2
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x6f4>
 8003106:	e03d      	b.n	8003184 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b21      	ldr	r3, [pc, #132]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 800310e:	4922      	ldr	r1, [pc, #136]	@ (8003198 <HAL_RCC_OscConfig+0x7a4>)
 8003110:	400a      	ands	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd fb9e 	bl	8000854 <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fd fb99 	bl	8000854 <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e02a      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003130:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	049b      	lsls	r3, r3, #18
 8003138:	4013      	ands	r3, r2
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x72a>
 800313c:	e022      	b.n	8003184 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e01d      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800314a:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <HAL_RCC_OscConfig+0x79c>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	025b      	lsls	r3, r3, #9
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	429a      	cmp	r2, r3
 800315e:	d10f      	bne.n	8003180 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	23f0      	movs	r3, #240	@ 0xf0
 8003164:	039b      	lsls	r3, r3, #14
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	23c0      	movs	r3, #192	@ 0xc0
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b00a      	add	sp, #40	@ 0x28
 800318c:	bdb0      	pop	{r4, r5, r7, pc}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	40021000 	.word	0x40021000
 8003194:	ff02ffff 	.word	0xff02ffff
 8003198:	feffffff 	.word	0xfeffffff

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e128      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b96      	ldr	r3, [pc, #600]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d91e      	bls.n	80031fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b93      	ldr	r3, [pc, #588]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4393      	bics	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	4b90      	ldr	r3, [pc, #576]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031d0:	f7fd fb40 	bl	8000854 <HAL_GetTick>
 80031d4:	0003      	movs	r3, r0
 80031d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d8:	e009      	b.n	80031ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031da:	f7fd fb3b 	bl	8000854 <HAL_GetTick>
 80031de:	0002      	movs	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	4a8a      	ldr	r2, [pc, #552]	@ (8003410 <HAL_RCC_ClockConfig+0x274>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e109      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b87      	ldr	r3, [pc, #540]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d1ee      	bne.n	80031da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2202      	movs	r2, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003206:	4b83      	ldr	r3, [pc, #524]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	22f0      	movs	r2, #240	@ 0xf0
 800320c:	4393      	bics	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b7f      	ldr	r3, [pc, #508]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003216:	430a      	orrs	r2, r1
 8003218:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	4013      	ands	r3, r2
 8003222:	d100      	bne.n	8003226 <HAL_RCC_ClockConfig+0x8a>
 8003224:	e089      	b.n	800333a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800322e:	4b79      	ldr	r3, [pc, #484]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	029b      	lsls	r3, r3, #10
 8003236:	4013      	ands	r3, r2
 8003238:	d120      	bne.n	800327c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0e1      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003246:	4b73      	ldr	r3, [pc, #460]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	049b      	lsls	r3, r3, #18
 800324e:	4013      	ands	r3, r2
 8003250:	d114      	bne.n	800327c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0d5      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d106      	bne.n	800326c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325e:	4b6d      	ldr	r3, [pc, #436]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d109      	bne.n	800327c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0ca      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800326c:	4b69      	ldr	r3, [pc, #420]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	@ 0x80
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0c2      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327c:	4b65      	ldr	r3, [pc, #404]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2203      	movs	r2, #3
 8003282:	4393      	bics	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4b62      	ldr	r3, [pc, #392]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 800328c:	430a      	orrs	r2, r1
 800328e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003290:	f7fd fae0 	bl	8000854 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d111      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a0:	e009      	b.n	80032b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a2:	f7fd fad7 	bl	8000854 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	4a58      	ldr	r2, [pc, #352]	@ (8003410 <HAL_RCC_ClockConfig+0x274>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0a5      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b6:	4b57      	ldr	r3, [pc, #348]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	220c      	movs	r2, #12
 80032bc:	4013      	ands	r3, r2
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d1ef      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x106>
 80032c2:	e03a      	b.n	800333a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d111      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032cc:	e009      	b.n	80032e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ce:	f7fd fac1 	bl	8000854 <HAL_GetTick>
 80032d2:	0002      	movs	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003410 <HAL_RCC_ClockConfig+0x274>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e08f      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	220c      	movs	r2, #12
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d1ef      	bne.n	80032ce <HAL_RCC_ClockConfig+0x132>
 80032ee:	e024      	b.n	800333a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d11b      	bne.n	8003330 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f8:	e009      	b.n	800330e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fa:	f7fd faab 	bl	8000854 <HAL_GetTick>
 80032fe:	0002      	movs	r2, r0
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	4a42      	ldr	r2, [pc, #264]	@ (8003410 <HAL_RCC_ClockConfig+0x274>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e079      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800330e:	4b41      	ldr	r3, [pc, #260]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	220c      	movs	r2, #12
 8003314:	4013      	ands	r3, r2
 8003316:	2b04      	cmp	r3, #4
 8003318:	d1ef      	bne.n	80032fa <HAL_RCC_ClockConfig+0x15e>
 800331a:	e00e      	b.n	800333a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fd fa9a 	bl	8000854 <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	4a3a      	ldr	r2, [pc, #232]	@ (8003410 <HAL_RCC_ClockConfig+0x274>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e068      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003330:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	220c      	movs	r2, #12
 8003336:	4013      	ands	r3, r2
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333a:	4b34      	ldr	r3, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2201      	movs	r2, #1
 8003340:	4013      	ands	r3, r2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d21e      	bcs.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003348:	4b30      	ldr	r3, [pc, #192]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	4393      	bics	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	4b2e      	ldr	r3, [pc, #184]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800335a:	f7fd fa7b 	bl	8000854 <HAL_GetTick>
 800335e:	0003      	movs	r3, r0
 8003360:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	e009      	b.n	8003378 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003364:	f7fd fa76 	bl	8000854 <HAL_GetTick>
 8003368:	0002      	movs	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	4a28      	ldr	r2, [pc, #160]	@ (8003410 <HAL_RCC_ClockConfig+0x274>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e044      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003378:	4b24      	ldr	r3, [pc, #144]	@ (800340c <HAL_RCC_ClockConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	4013      	ands	r3, r2
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d1ee      	bne.n	8003364 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2204      	movs	r2, #4
 800338c:	4013      	ands	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a20      	ldr	r2, [pc, #128]	@ (8003418 <HAL_RCC_ClockConfig+0x27c>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2208      	movs	r2, #8
 80033aa:	4013      	ands	r3, r2
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ae:	4b19      	ldr	r3, [pc, #100]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	@ (800341c <HAL_RCC_ClockConfig+0x280>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00da      	lsls	r2, r3, #3
 80033be:	4b15      	ldr	r3, [pc, #84]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c4:	f000 f832 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033c8:	0001      	movs	r1, r0
 80033ca:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <HAL_RCC_ClockConfig+0x278>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	220f      	movs	r2, #15
 80033d2:	4013      	ands	r3, r2
 80033d4:	4a12      	ldr	r2, [pc, #72]	@ (8003420 <HAL_RCC_ClockConfig+0x284>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	000a      	movs	r2, r1
 80033da:	40da      	lsrs	r2, r3
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <HAL_RCC_ClockConfig+0x288>)
 80033de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_RCC_ClockConfig+0x28c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	250b      	movs	r5, #11
 80033e6:	197c      	adds	r4, r7, r5
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fd f9ed 	bl	80007c8 <HAL_InitTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80033f2:	197b      	adds	r3, r7, r5
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80033fa:	197b      	adds	r3, r7, r5
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	e000      	b.n	8003402 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b004      	add	sp, #16
 8003408:	bdb0      	pop	{r4, r5, r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	40022000 	.word	0x40022000
 8003410:	00001388 	.word	0x00001388
 8003414:	40021000 	.word	0x40021000
 8003418:	fffff8ff 	.word	0xfffff8ff
 800341c:	ffffc7ff 	.word	0xffffc7ff
 8003420:	08008088 	.word	0x08008088
 8003424:	20000000 	.word	0x20000000
 8003428:	20000004 	.word	0x20000004

0800342c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003432:	4b3c      	ldr	r3, [pc, #240]	@ (8003524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	220c      	movs	r2, #12
 800343c:	4013      	ands	r3, r2
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d013      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x3e>
 8003442:	d85c      	bhi.n	80034fe <HAL_RCC_GetSysClockFreq+0xd2>
 8003444:	2b04      	cmp	r3, #4
 8003446:	d002      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x22>
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00b      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x38>
 800344c:	e057      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800344e:	4b35      	ldr	r3, [pc, #212]	@ (8003524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2210      	movs	r2, #16
 8003454:	4013      	ands	r3, r2
 8003456:	d002      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003458:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xfc>)
 800345a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800345c:	e05d      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800345e:	4b33      	ldr	r3, [pc, #204]	@ (800352c <HAL_RCC_GetSysClockFreq+0x100>)
 8003460:	613b      	str	r3, [r7, #16]
      break;
 8003462:	e05a      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003464:	4b31      	ldr	r3, [pc, #196]	@ (800352c <HAL_RCC_GetSysClockFreq+0x100>)
 8003466:	613b      	str	r3, [r7, #16]
      break;
 8003468:	e057      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	0c9b      	lsrs	r3, r3, #18
 800346e:	220f      	movs	r2, #15
 8003470:	4013      	ands	r3, r2
 8003472:	4a2f      	ldr	r2, [pc, #188]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x104>)
 8003474:	5cd3      	ldrb	r3, [r2, r3]
 8003476:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	0d9b      	lsrs	r3, r3, #22
 800347c:	2203      	movs	r2, #3
 800347e:	4013      	ands	r3, r2
 8003480:	3301      	adds	r3, #1
 8003482:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003484:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	2380      	movs	r3, #128	@ 0x80
 800348a:	025b      	lsls	r3, r3, #9
 800348c:	4013      	ands	r3, r2
 800348e:	d00f      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	000a      	movs	r2, r1
 8003494:	0152      	lsls	r2, r2, #5
 8003496:	1a52      	subs	r2, r2, r1
 8003498:	0193      	lsls	r3, r2, #6
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	185b      	adds	r3, r3, r1
 80034a0:	029b      	lsls	r3, r3, #10
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7fc fe2f 	bl	8000108 <__udivsi3>
 80034aa:	0003      	movs	r3, r0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e023      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2210      	movs	r2, #16
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00f      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	000a      	movs	r2, r1
 80034be:	0152      	lsls	r2, r2, #5
 80034c0:	1a52      	subs	r2, r2, r1
 80034c2:	0193      	lsls	r3, r2, #6
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	185b      	adds	r3, r3, r1
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7fc fe1a 	bl	8000108 <__udivsi3>
 80034d4:	0003      	movs	r3, r0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e00e      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	000a      	movs	r2, r1
 80034de:	0152      	lsls	r2, r2, #5
 80034e0:	1a52      	subs	r2, r2, r1
 80034e2:	0193      	lsls	r3, r2, #6
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	185b      	adds	r3, r3, r1
 80034ea:	029b      	lsls	r3, r3, #10
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7fc fe0a 	bl	8000108 <__udivsi3>
 80034f4:	0003      	movs	r3, r0
 80034f6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	613b      	str	r3, [r7, #16]
      break;
 80034fc:	e00d      	b.n	800351a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034fe:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	2207      	movs	r2, #7
 8003506:	4013      	ands	r3, r2
 8003508:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	0212      	lsls	r2, r2, #8
 8003512:	409a      	lsls	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
      break;
 8003518:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800351a:	693b      	ldr	r3, [r7, #16]
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b006      	add	sp, #24
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	003d0900 	.word	0x003d0900
 800352c:	00f42400 	.word	0x00f42400
 8003530:	08008098 	.word	0x08008098

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800353c:	2017      	movs	r0, #23
 800353e:	183b      	adds	r3, r7, r0
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	4013      	ands	r3, r2
 800354c:	d100      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800354e:	e0c7      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003550:	4b9b      	ldr	r3, [pc, #620]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003554:	2380      	movs	r3, #128	@ 0x80
 8003556:	055b      	lsls	r3, r3, #21
 8003558:	4013      	ands	r3, r2
 800355a:	d109      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355c:	4b98      	ldr	r3, [pc, #608]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800355e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003560:	4b97      	ldr	r3, [pc, #604]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003562:	2180      	movs	r1, #128	@ 0x80
 8003564:	0549      	lsls	r1, r1, #21
 8003566:	430a      	orrs	r2, r1
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800356a:	183b      	adds	r3, r7, r0
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	4b94      	ldr	r3, [pc, #592]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4013      	ands	r3, r2
 800357a:	d11a      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357c:	4b91      	ldr	r3, [pc, #580]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b90      	ldr	r3, [pc, #576]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003582:	2180      	movs	r1, #128	@ 0x80
 8003584:	0049      	lsls	r1, r1, #1
 8003586:	430a      	orrs	r2, r1
 8003588:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358a:	f7fd f963 	bl	8000854 <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	e008      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7fd f95e 	bl	8000854 <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e107      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b87      	ldr	r3, [pc, #540]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80035b2:	4b83      	ldr	r3, [pc, #524]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	23c0      	movs	r3, #192	@ 0xc0
 80035b8:	039b      	lsls	r3, r3, #14
 80035ba:	4013      	ands	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	23c0      	movs	r3, #192	@ 0xc0
 80035c4:	039b      	lsls	r3, r3, #14
 80035c6:	4013      	ands	r3, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d013      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	23c0      	movs	r3, #192	@ 0xc0
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	401a      	ands	r2, r3
 80035d8:	23c0      	movs	r3, #192	@ 0xc0
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10a      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035e0:	4b77      	ldr	r3, [pc, #476]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	029b      	lsls	r3, r3, #10
 80035e8:	401a      	ands	r2, r3
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	029b      	lsls	r3, r3, #10
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d101      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0df      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035f6:	4b72      	ldr	r3, [pc, #456]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035fa:	23c0      	movs	r3, #192	@ 0xc0
 80035fc:	029b      	lsls	r3, r3, #10
 80035fe:	4013      	ands	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03b      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	23c0      	movs	r3, #192	@ 0xc0
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	4013      	ands	r3, r2
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d033      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2220      	movs	r2, #32
 800361e:	4013      	ands	r3, r2
 8003620:	d02e      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003622:	4b67      	ldr	r3, [pc, #412]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003626:	4a68      	ldr	r2, [pc, #416]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362c:	4b64      	ldr	r3, [pc, #400]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800362e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003630:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003632:	2180      	movs	r1, #128	@ 0x80
 8003634:	0309      	lsls	r1, r1, #12
 8003636:	430a      	orrs	r2, r1
 8003638:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363a:	4b61      	ldr	r3, [pc, #388]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800363c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800363e:	4b60      	ldr	r3, [pc, #384]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003640:	4962      	ldr	r1, [pc, #392]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003642:	400a      	ands	r2, r1
 8003644:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003646:	4b5e      	ldr	r3, [pc, #376]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d014      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fd f8fd 	bl	8000854 <HAL_GetTick>
 800365a:	0003      	movs	r3, r0
 800365c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800365e:	e009      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fd f8f8 	bl	8000854 <HAL_GetTick>
 8003664:	0002      	movs	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4a59      	ldr	r2, [pc, #356]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0a0      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003674:	4b52      	ldr	r3, [pc, #328]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003676:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4013      	ands	r3, r2
 800367e:	d0ef      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2220      	movs	r2, #32
 8003686:	4013      	ands	r3, r2
 8003688:	d01f      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	23c0      	movs	r3, #192	@ 0xc0
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	401a      	ands	r2, r3
 8003694:	23c0      	movs	r3, #192	@ 0xc0
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	429a      	cmp	r2, r3
 800369a:	d10c      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800369c:	4b48      	ldr	r3, [pc, #288]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4c      	ldr	r2, [pc, #304]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	23c0      	movs	r3, #192	@ 0xc0
 80036ac:	039b      	lsls	r3, r3, #14
 80036ae:	401a      	ands	r2, r3
 80036b0:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036b2:	430a      	orrs	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	23c0      	movs	r3, #192	@ 0xc0
 80036c0:	029b      	lsls	r3, r3, #10
 80036c2:	401a      	ands	r2, r3
 80036c4:	4b3e      	ldr	r3, [pc, #248]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ca:	2317      	movs	r3, #23
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d8:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036da:	493f      	ldr	r1, [pc, #252]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80036dc:	400a      	ands	r2, r1
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	4013      	ands	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ea:	4b35      	ldr	r3, [pc, #212]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ee:	2203      	movs	r2, #3
 80036f0:	4393      	bics	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036fa:	430a      	orrs	r2, r1
 80036fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2202      	movs	r2, #2
 8003704:	4013      	ands	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800370a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370c:	220c      	movs	r2, #12
 800370e:	4393      	bics	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003718:	430a      	orrs	r2, r1
 800371a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2204      	movs	r2, #4
 8003722:	4013      	ands	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003726:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	4a2c      	ldr	r2, [pc, #176]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800372c:	4013      	ands	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003736:	430a      	orrs	r2, r1
 8003738:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2208      	movs	r2, #8
 8003740:	4013      	ands	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003744:	4b1e      	ldr	r3, [pc, #120]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003748:	4a25      	ldr	r2, [pc, #148]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800374a:	4013      	ands	r3, r2
 800374c:	0019      	movs	r1, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003754:	430a      	orrs	r2, r1
 8003756:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4013      	ands	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003764:	4b16      	ldr	r3, [pc, #88]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003768:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003774:	430a      	orrs	r2, r1
 8003776:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2240      	movs	r2, #64	@ 0x40
 800377e:	4013      	ands	r3, r2
 8003780:	d009      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003786:	4a17      	ldr	r2, [pc, #92]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003788:	4013      	ands	r3, r2
 800378a:	0019      	movs	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003792:	430a      	orrs	r2, r1
 8003794:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	4013      	ands	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80037a0:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	4a10      	ldr	r2, [pc, #64]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	0018      	movs	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b006      	add	sp, #24
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
 80037c8:	fffcffff 	.word	0xfffcffff
 80037cc:	fff7ffff 	.word	0xfff7ffff
 80037d0:	00001388 	.word	0x00001388
 80037d4:	ffcfffff 	.word	0xffcfffff
 80037d8:	efffffff 	.word	0xefffffff
 80037dc:	fffff3ff 	.word	0xfffff3ff
 80037e0:	ffffcfff 	.word	0xffffcfff
 80037e4:	fbffffff 	.word	0xfbffffff
 80037e8:	fff3ffff 	.word	0xfff3ffff

080037ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e083      	b.n	8003906 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	2382      	movs	r3, #130	@ 0x82
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	429a      	cmp	r2, r3
 8003810:	d009      	beq.n	8003826 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	61da      	str	r2, [r3, #28]
 8003818:	e005      	b.n	8003826 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2251      	movs	r2, #81	@ 0x51
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2250      	movs	r2, #80	@ 0x50
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f7fc ff06 	bl	8000654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2251      	movs	r2, #81	@ 0x51
 800384c:	2102      	movs	r1, #2
 800384e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2140      	movs	r1, #64	@ 0x40
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	2382      	movs	r3, #130	@ 0x82
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	401a      	ands	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6899      	ldr	r1, [r3, #8]
 800386e:	2384      	movs	r3, #132	@ 0x84
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	400b      	ands	r3, r1
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	400b      	ands	r3, r1
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2102      	movs	r1, #2
 8003888:	400b      	ands	r3, r1
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	2101      	movs	r1, #1
 8003892:	400b      	ands	r3, r1
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	400b      	ands	r3, r1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2138      	movs	r1, #56	@ 0x38
 80038a8:	400b      	ands	r3, r1
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	2180      	movs	r1, #128	@ 0x80
 80038b2:	400b      	ands	r3, r1
 80038b4:	431a      	orrs	r2, r3
 80038b6:	0011      	movs	r1, r2
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038bc:	2380      	movs	r3, #128	@ 0x80
 80038be:	019b      	lsls	r3, r3, #6
 80038c0:	401a      	ands	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	2210      	movs	r2, #16
 80038dc:	401a      	ands	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4907      	ldr	r1, [pc, #28]	@ (8003910 <HAL_SPI_Init+0x124>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2251      	movs	r2, #81	@ 0x51
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	fffff7ff 	.word	0xfffff7ff

08003914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	@ 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	001a      	movs	r2, r3
 8003922:	1cbb      	adds	r3, r7, #2
 8003924:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003926:	2301      	movs	r3, #1
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800392a:	f7fc ff93 	bl	8000854 <HAL_GetTick>
 800392e:	0003      	movs	r3, r0
 8003930:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003932:	201f      	movs	r0, #31
 8003934:	183b      	adds	r3, r7, r0
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	2151      	movs	r1, #81	@ 0x51
 800393a:	5c52      	ldrb	r2, [r2, r1]
 800393c:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003944:	2316      	movs	r3, #22
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	1cba      	adds	r2, r7, #2
 800394a:	8812      	ldrh	r2, [r2, #0]
 800394c:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800394e:	183b      	adds	r3, r7, r0
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d00e      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x60>
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	2382      	movs	r3, #130	@ 0x82
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	429a      	cmp	r2, r3
 800395e:	d107      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x5c>
 8003968:	183b      	adds	r3, r7, r0
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d001      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
 8003972:	e18a      	b.n	8003c8a <HAL_SPI_TransmitReceive+0x376>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x74>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x74>
 8003980:	1cbb      	adds	r3, r7, #2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_SPI_TransmitReceive+0x78>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e17e      	b.n	8003c8a <HAL_SPI_TransmitReceive+0x376>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2250      	movs	r2, #80	@ 0x50
 8003990:	5c9b      	ldrb	r3, [r3, r2]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_SPI_TransmitReceive+0x86>
 8003996:	2302      	movs	r3, #2
 8003998:	e177      	b.n	8003c8a <HAL_SPI_TransmitReceive+0x376>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2250      	movs	r2, #80	@ 0x50
 800399e:	2101      	movs	r1, #1
 80039a0:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2251      	movs	r2, #81	@ 0x51
 80039a6:	5c9b      	ldrb	r3, [r3, r2]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d003      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2251      	movs	r2, #81	@ 0x51
 80039b2:	2105      	movs	r1, #5
 80039b4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1cba      	adds	r2, r7, #2
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1cba      	adds	r2, r7, #2
 80039ce:	8812      	ldrh	r2, [r2, #0]
 80039d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1cba      	adds	r2, r7, #2
 80039dc:	8812      	ldrh	r2, [r2, #0]
 80039de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1cba      	adds	r2, r7, #2
 80039e4:	8812      	ldrh	r2, [r2, #0]
 80039e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2240      	movs	r2, #64	@ 0x40
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d007      	beq.n	8003a12 <HAL_SPI_TransmitReceive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2140      	movs	r1, #64	@ 0x40
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d000      	beq.n	8003a20 <HAL_SPI_TransmitReceive+0x10c>
 8003a1e:	e080      	b.n	8003b22 <HAL_SPI_TransmitReceive+0x20e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x120>
 8003a28:	2316      	movs	r3, #22
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d000      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x120>
 8003a32:	e06b      	b.n	8003b0c <HAL_SPI_TransmitReceive+0x1f8>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	881a      	ldrh	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a58:	e058      	b.n	8003b0c <HAL_SPI_TransmitReceive+0x1f8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2202      	movs	r2, #2
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d11b      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x18c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d016      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x18c>
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d113      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x18c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d119      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x1ce>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d014      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x1ce>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	b292      	uxth	r2, r2
 8003ac4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	1c9a      	adds	r2, r3, #2
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ae2:	f7fc feb7 	bl	8000854 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d80c      	bhi.n	8003b0c <HAL_SPI_TransmitReceive+0x1f8>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	3301      	adds	r3, #1
 8003af6:	d009      	beq.n	8003b0c <HAL_SPI_TransmitReceive+0x1f8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2251      	movs	r2, #81	@ 0x51
 8003afc:	2101      	movs	r1, #1
 8003afe:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2250      	movs	r2, #80	@ 0x50
 8003b04:	2100      	movs	r1, #0
 8003b06:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0be      	b.n	8003c8a <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1a1      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x146>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d19c      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x146>
 8003b20:	e084      	b.n	8003c2c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_SPI_TransmitReceive+0x222>
 8003b2a:	2316      	movs	r3, #22
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d000      	beq.n	8003b36 <HAL_SPI_TransmitReceive+0x222>
 8003b34:	e070      	b.n	8003c18 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	7812      	ldrb	r2, [r2, #0]
 8003b42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5c:	e05c      	b.n	8003c18 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2202      	movs	r2, #2
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d11c      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x292>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d017      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x292>
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d114      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x292>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2201      	movs	r2, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d119      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x2d4>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d014      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be4:	2301      	movs	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003be8:	f7fc fe34 	bl	8000854 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <HAL_SPI_TransmitReceive+0x2ea>
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x2f0>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x304>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2251      	movs	r2, #81	@ 0x51
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2250      	movs	r2, #80	@ 0x50
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e038      	b.n	8003c8a <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d19d      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x24a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d198      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x24a>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 f8bc 	bl	8003db0 <SPI_EndRxTxTransaction>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_SPI_TransmitReceive+0x33a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2250      	movs	r2, #80	@ 0x50
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e01d      	b.n	8003c8a <HAL_SPI_TransmitReceive+0x376>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2251      	movs	r2, #81	@ 0x51
 8003c70:	2101      	movs	r1, #1
 8003c72:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2250      	movs	r2, #80	@ 0x50
 8003c78:	2100      	movs	r1, #0
 8003c7a:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x374>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_SPI_TransmitReceive+0x376>
  }
  else
  {
    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
  }
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b00a      	add	sp, #40	@ 0x28
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	1dfb      	adds	r3, r7, #7
 8003ca2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ca4:	f7fc fdd6 	bl	8000854 <HAL_GetTick>
 8003ca8:	0002      	movs	r2, r0
 8003caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cb4:	f7fc fdce 	bl	8000854 <HAL_GetTick>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003da8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	015b      	lsls	r3, r3, #5
 8003cc2:	0d1b      	lsrs	r3, r3, #20
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	4353      	muls	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cca:	e059      	b.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	d056      	beq.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cd2:	f7fc fdbf 	bl	8000854 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d902      	bls.n	8003ce8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d142      	bne.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	21e0      	movs	r1, #224	@ 0xe0
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	2382      	movs	r3, #130	@ 0x82
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d113      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	2380      	movs	r3, #128	@ 0x80
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d005      	beq.n	8003d1c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d107      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2140      	movs	r1, #64	@ 0x40
 8003d28:	438a      	bics	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	019b      	lsls	r3, r3, #6
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d110      	bne.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	491a      	ldr	r1, [pc, #104]	@ (8003dac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003d44:	400a      	ands	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2180      	movs	r1, #128	@ 0x80
 8003d54:	0189      	lsls	r1, r1, #6
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2251      	movs	r2, #81	@ 0x51
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2250      	movs	r2, #80	@ 0x50
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e018      	b.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e002      	b.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	425a      	negs	r2, r3
 8003d90:	4153      	adcs	r3, r2
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	001a      	movs	r2, r3
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d196      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b008      	add	sp, #32
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000000 	.word	0x20000000
 8003dac:	ffffdfff 	.word	0xffffdfff

08003db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	0013      	movs	r3, r2
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	2102      	movs	r1, #2
 8003dca:	f7ff ff63 	bl	8003c94 <SPI_WaitFlagStateUntilTimeout>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d007      	beq.n	8003de2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e037      	b.n	8003e52 <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003de2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <SPI_EndRxTxTransaction+0xac>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	491e      	ldr	r1, [pc, #120]	@ (8003e60 <SPI_EndRxTxTransaction+0xb0>)
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fc f98d 	bl	8000108 <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	001a      	movs	r2, r3
 8003df2:	0013      	movs	r3, r2
 8003df4:	015b      	lsls	r3, r3, #5
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	2382      	movs	r3, #130	@ 0x82
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d112      	bne.n	8003e32 <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	0013      	movs	r3, r2
 8003e16:	2200      	movs	r2, #0
 8003e18:	2180      	movs	r1, #128	@ 0x80
 8003e1a:	f7ff ff3b 	bl	8003c94 <SPI_WaitFlagStateUntilTimeout>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d016      	beq.n	8003e50 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	2220      	movs	r2, #32
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e00f      	b.n	8003e52 <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2280      	movs	r2, #128	@ 0x80
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b80      	cmp	r3, #128	@ 0x80
 8003e4a:	d0f2      	beq.n	8003e32 <SPI_EndRxTxTransaction+0x82>
 8003e4c:	e000      	b.n	8003e50 <SPI_EndRxTxTransaction+0xa0>
        break;
 8003e4e:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b006      	add	sp, #24
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	016e3600 	.word	0x016e3600

08003e64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2244      	movs	r2, #68	@ 0x44
 8003e70:	2100      	movs	r1, #0
 8003e72:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <USB_EnableGlobalInt+0x28>)
 8003e76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	b299      	uxth	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2240      	movs	r2, #64	@ 0x40
 8003e80:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	0018      	movs	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b004      	add	sp, #16
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	0000bf80 	.word	0x0000bf80

08003e90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e98:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <USB_DisableGlobalInt+0x30>)
 8003e9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2240      	movs	r2, #64	@ 0x40
 8003ea0:	5a9b      	ldrh	r3, [r3, r2]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	43d2      	mvns	r2, r2
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	4013      	ands	r3, r2
 8003eae:	b299      	uxth	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2240      	movs	r2, #64	@ 0x40
 8003eb4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b004      	add	sp, #16
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	0000bf80 	.word	0x0000bf80

08003ec4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	6019      	str	r1, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2240      	movs	r2, #64	@ 0x40
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2240      	movs	r2, #64	@ 0x40
 8003ede:	2100      	movs	r1, #0
 8003ee0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2244      	movs	r2, #68	@ 0x44
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2250      	movs	r2, #80	@ 0x50
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}

08003efc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b0a6      	sub	sp, #152	@ 0x98
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f06:	2397      	movs	r3, #151	@ 0x97
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	18d3      	adds	r3, r2, r3
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	2394      	movs	r3, #148	@ 0x94
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	49a5      	ldr	r1, [pc, #660]	@ (80041b8 <USB_ActivateEndpoint+0x2bc>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	78db      	ldrb	r3, [r3, #3]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d017      	beq.n	8003f5e <USB_ActivateEndpoint+0x62>
 8003f2e:	dc28      	bgt.n	8003f82 <USB_ActivateEndpoint+0x86>
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d00e      	beq.n	8003f52 <USB_ActivateEndpoint+0x56>
 8003f34:	dc25      	bgt.n	8003f82 <USB_ActivateEndpoint+0x86>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <USB_ActivateEndpoint+0x44>
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d018      	beq.n	8003f70 <USB_ActivateEndpoint+0x74>
 8003f3e:	e020      	b.n	8003f82 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f40:	2294      	movs	r2, #148	@ 0x94
 8003f42:	18bb      	adds	r3, r7, r2
 8003f44:	18ba      	adds	r2, r7, r2
 8003f46:	8812      	ldrh	r2, [r2, #0]
 8003f48:	2180      	movs	r1, #128	@ 0x80
 8003f4a:	0089      	lsls	r1, r1, #2
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	801a      	strh	r2, [r3, #0]
      break;
 8003f50:	e01c      	b.n	8003f8c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003f52:	2294      	movs	r2, #148	@ 0x94
 8003f54:	18bb      	adds	r3, r7, r2
 8003f56:	18ba      	adds	r2, r7, r2
 8003f58:	8812      	ldrh	r2, [r2, #0]
 8003f5a:	801a      	strh	r2, [r3, #0]
      break;
 8003f5c:	e016      	b.n	8003f8c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f5e:	2294      	movs	r2, #148	@ 0x94
 8003f60:	18bb      	adds	r3, r7, r2
 8003f62:	18ba      	adds	r2, r7, r2
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	21c0      	movs	r1, #192	@ 0xc0
 8003f68:	00c9      	lsls	r1, r1, #3
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	801a      	strh	r2, [r3, #0]
      break;
 8003f6e:	e00d      	b.n	8003f8c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f70:	2294      	movs	r2, #148	@ 0x94
 8003f72:	18bb      	adds	r3, r7, r2
 8003f74:	18ba      	adds	r2, r7, r2
 8003f76:	8812      	ldrh	r2, [r2, #0]
 8003f78:	2180      	movs	r1, #128	@ 0x80
 8003f7a:	00c9      	lsls	r1, r1, #3
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	801a      	strh	r2, [r3, #0]
      break;
 8003f80:	e004      	b.n	8003f8c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003f82:	2397      	movs	r3, #151	@ 0x97
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
      break;
 8003f8a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	18d3      	adds	r3, r2, r3
 8003f96:	2294      	movs	r2, #148	@ 0x94
 8003f98:	18ba      	adds	r2, r7, r2
 8003f9a:	8812      	ldrh	r2, [r2, #0]
 8003f9c:	4987      	ldr	r1, [pc, #540]	@ (80041bc <USB_ActivateEndpoint+0x2c0>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	b292      	uxth	r2, r2
 8003fa2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	4a82      	ldr	r2, [pc, #520]	@ (80041c0 <USB_ActivateEndpoint+0x2c4>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b21b      	sxth	r3, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b21a      	sxth	r2, r3
 8003fc4:	2186      	movs	r1, #134	@ 0x86
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	187a      	adds	r2, r7, r1
 8003fd6:	8812      	ldrh	r2, [r2, #0]
 8003fd8:	4978      	ldr	r1, [pc, #480]	@ (80041bc <USB_ActivateEndpoint+0x2c0>)
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	7b1b      	ldrb	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d000      	beq.n	8003fea <USB_ActivateEndpoint+0xee>
 8003fe8:	e185      	b.n	80042f6 <USB_ActivateEndpoint+0x3fa>
  {
    if (ep->is_in != 0U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d100      	bne.n	8003ff4 <USB_ActivateEndpoint+0xf8>
 8003ff2:	e07c      	b.n	80040ee <USB_ActivateEndpoint+0x1f2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2250      	movs	r2, #80	@ 0x50
 8003ffc:	5a9b      	ldrh	r3, [r3, r2]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	001a      	movs	r2, r3
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	189b      	adds	r3, r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	00da      	lsls	r2, r3, #3
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	2280      	movs	r2, #128	@ 0x80
 8004014:	00d2      	lsls	r2, r2, #3
 8004016:	4694      	mov	ip, r2
 8004018:	4463      	add	r3, ip
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	88db      	ldrh	r3, [r3, #6]
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	b29b      	uxth	r3, r3
 8004024:	18db      	adds	r3, r3, r3
 8004026:	b29a      	uxth	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	18d2      	adds	r2, r2, r3
 8004036:	2112      	movs	r1, #18
 8004038:	187b      	adds	r3, r7, r1
 800403a:	8812      	ldrh	r2, [r2, #0]
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	187b      	adds	r3, r7, r1
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	2240      	movs	r2, #64	@ 0x40
 8004044:	4013      	ands	r3, r2
 8004046:	d016      	beq.n	8004076 <USB_ActivateEndpoint+0x17a>
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	18d3      	adds	r3, r2, r3
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	2010      	movs	r0, #16
 8004058:	183b      	adds	r3, r7, r0
 800405a:	4959      	ldr	r1, [pc, #356]	@ (80041c0 <USB_ActivateEndpoint+0x2c4>)
 800405c:	400a      	ands	r2, r1
 800405e:	801a      	strh	r2, [r3, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	183a      	adds	r2, r7, r0
 800406c:	8812      	ldrh	r2, [r2, #0]
 800406e:	4955      	ldr	r1, [pc, #340]	@ (80041c4 <USB_ActivateEndpoint+0x2c8>)
 8004070:	430a      	orrs	r2, r1
 8004072:	b292      	uxth	r2, r2
 8004074:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	78db      	ldrb	r3, [r3, #3]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d01e      	beq.n	80040bc <USB_ActivateEndpoint+0x1c0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	18d3      	adds	r3, r2, r3
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29a      	uxth	r2, r3
 800408c:	200c      	movs	r0, #12
 800408e:	183b      	adds	r3, r7, r0
 8004090:	494d      	ldr	r1, [pc, #308]	@ (80041c8 <USB_ActivateEndpoint+0x2cc>)
 8004092:	400a      	ands	r2, r1
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	183b      	adds	r3, r7, r0
 8004098:	183a      	adds	r2, r7, r0
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	2120      	movs	r1, #32
 800409e:	404a      	eors	r2, r1
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	18d3      	adds	r3, r2, r3
 80040ac:	183a      	adds	r2, r7, r0
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	4942      	ldr	r1, [pc, #264]	@ (80041bc <USB_ActivateEndpoint+0x2c0>)
 80040b2:	430a      	orrs	r2, r1
 80040b4:	b292      	uxth	r2, r2
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	f000 fbdb 	bl	8004872 <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	200e      	movs	r0, #14
 80040cc:	183b      	adds	r3, r7, r0
 80040ce:	493e      	ldr	r1, [pc, #248]	@ (80041c8 <USB_ActivateEndpoint+0x2cc>)
 80040d0:	400a      	ands	r2, r1
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	183a      	adds	r2, r7, r0
 80040e0:	8812      	ldrh	r2, [r2, #0]
 80040e2:	4936      	ldr	r1, [pc, #216]	@ (80041bc <USB_ActivateEndpoint+0x2c0>)
 80040e4:	430a      	orrs	r2, r1
 80040e6:	b292      	uxth	r2, r2
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	f000 fbc2 	bl	8004872 <USB_ActivateEndpoint+0x976>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2250      	movs	r2, #80	@ 0x50
 80040f6:	5a9b      	ldrh	r3, [r3, r2]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	001a      	movs	r2, r3
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	633b      	str	r3, [r7, #48]	@ 0x30
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	00da      	lsls	r2, r3, #3
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	18d3      	adds	r3, r2, r3
 800410c:	4a2f      	ldr	r2, [pc, #188]	@ (80041cc <USB_ActivateEndpoint+0x2d0>)
 800410e:	4694      	mov	ip, r2
 8004110:	4463      	add	r3, ip
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	88db      	ldrh	r3, [r3, #6]
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	b29b      	uxth	r3, r3
 800411c:	18db      	adds	r3, r3, r3
 800411e:	b29a      	uxth	r2, r3
 8004120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004122:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2250      	movs	r2, #80	@ 0x50
 800412c:	5a9b      	ldrh	r3, [r3, r2]
 800412e:	b29b      	uxth	r3, r3
 8004130:	001a      	movs	r2, r3
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	189b      	adds	r3, r3, r2
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	00da      	lsls	r2, r3, #3
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	4a23      	ldr	r2, [pc, #140]	@ (80041d0 <USB_ActivateEndpoint+0x2d4>)
 8004144:	4694      	mov	ip, r2
 8004146:	4463      	add	r3, ip
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	059b      	lsls	r3, r3, #22
 8004152:	0d9b      	lsrs	r3, r3, #22
 8004154:	b29a      	uxth	r2, r3
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <USB_ActivateEndpoint+0x278>
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4a1a      	ldr	r2, [pc, #104]	@ (80041d4 <USB_ActivateEndpoint+0x2d8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	b29a      	uxth	r2, r3
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	e051      	b.n	8004218 <USB_ActivateEndpoint+0x31c>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b3e      	cmp	r3, #62	@ 0x3e
 800417a:	d82d      	bhi.n	80041d8 <USB_ActivateEndpoint+0x2dc>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	2190      	movs	r1, #144	@ 0x90
 8004184:	187a      	adds	r2, r7, r1
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2201      	movs	r2, #1
 800418e:	4013      	ands	r3, r2
 8004190:	d004      	beq.n	800419c <USB_ActivateEndpoint+0x2a0>
 8004192:	187b      	adds	r3, r7, r1
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	187a      	adds	r2, r7, r1
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	2390      	movs	r3, #144	@ 0x90
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	029b      	lsls	r3, r3, #10
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4313      	orrs	r3, r2
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	e02f      	b.n	8004218 <USB_ActivateEndpoint+0x31c>
 80041b8:	ffff898f 	.word	0xffff898f
 80041bc:	ffff8080 	.word	0xffff8080
 80041c0:	ffff8f8f 	.word	0xffff8f8f
 80041c4:	ffff80c0 	.word	0xffff80c0
 80041c8:	ffff8fbf 	.word	0xffff8fbf
 80041cc:	00000404 	.word	0x00000404
 80041d0:	00000406 	.word	0x00000406
 80041d4:	ffff8000 	.word	0xffff8000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	2190      	movs	r1, #144	@ 0x90
 80041e0:	187a      	adds	r2, r7, r1
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	221f      	movs	r2, #31
 80041ea:	4013      	ands	r3, r2
 80041ec:	d104      	bne.n	80041f8 <USB_ActivateEndpoint+0x2fc>
 80041ee:	187b      	adds	r3, r7, r1
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	187a      	adds	r2, r7, r1
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	2390      	movs	r3, #144	@ 0x90
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	b29b      	uxth	r3, r3
 800420a:	4313      	orrs	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	4acf      	ldr	r2, [pc, #828]	@ (800454c <USB_ActivateEndpoint+0x650>)
 8004210:	4313      	orrs	r3, r2
 8004212:	b29a      	uxth	r2, r3
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	18d2      	adds	r2, r2, r3
 8004222:	2122      	movs	r1, #34	@ 0x22
 8004224:	187b      	adds	r3, r7, r1
 8004226:	8812      	ldrh	r2, [r2, #0]
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	187b      	adds	r3, r7, r1
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	4013      	ands	r3, r2
 8004234:	d016      	beq.n	8004264 <USB_ActivateEndpoint+0x368>
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29a      	uxth	r2, r3
 8004244:	2020      	movs	r0, #32
 8004246:	183b      	adds	r3, r7, r0
 8004248:	49c1      	ldr	r1, [pc, #772]	@ (8004550 <USB_ActivateEndpoint+0x654>)
 800424a:	400a      	ands	r2, r1
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	183a      	adds	r2, r7, r0
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	49bd      	ldr	r1, [pc, #756]	@ (8004554 <USB_ActivateEndpoint+0x658>)
 800425e:	430a      	orrs	r2, r1
 8004260:	b292      	uxth	r2, r2
 8004262:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d125      	bne.n	80042b8 <USB_ActivateEndpoint+0x3bc>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	18d3      	adds	r3, r2, r3
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29a      	uxth	r2, r3
 800427a:	201c      	movs	r0, #28
 800427c:	183b      	adds	r3, r7, r0
 800427e:	49b6      	ldr	r1, [pc, #728]	@ (8004558 <USB_ActivateEndpoint+0x65c>)
 8004280:	400a      	ands	r2, r1
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	183b      	adds	r3, r7, r0
 8004286:	183a      	adds	r2, r7, r0
 8004288:	8812      	ldrh	r2, [r2, #0]
 800428a:	2180      	movs	r1, #128	@ 0x80
 800428c:	0149      	lsls	r1, r1, #5
 800428e:	404a      	eors	r2, r1
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	183b      	adds	r3, r7, r0
 8004294:	183a      	adds	r2, r7, r0
 8004296:	8812      	ldrh	r2, [r2, #0]
 8004298:	2180      	movs	r1, #128	@ 0x80
 800429a:	0189      	lsls	r1, r1, #6
 800429c:	404a      	eors	r2, r1
 800429e:	801a      	strh	r2, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	18d3      	adds	r3, r2, r3
 80042aa:	183a      	adds	r2, r7, r0
 80042ac:	8812      	ldrh	r2, [r2, #0]
 80042ae:	49ab      	ldr	r1, [pc, #684]	@ (800455c <USB_ActivateEndpoint+0x660>)
 80042b0:	430a      	orrs	r2, r1
 80042b2:	b292      	uxth	r2, r2
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	e2dc      	b.n	8004872 <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	18d3      	adds	r3, r2, r3
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	201e      	movs	r0, #30
 80042c8:	183b      	adds	r3, r7, r0
 80042ca:	49a3      	ldr	r1, [pc, #652]	@ (8004558 <USB_ActivateEndpoint+0x65c>)
 80042cc:	400a      	ands	r2, r1
 80042ce:	801a      	strh	r2, [r3, #0]
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	183a      	adds	r2, r7, r0
 80042d4:	8812      	ldrh	r2, [r2, #0]
 80042d6:	2180      	movs	r1, #128	@ 0x80
 80042d8:	0189      	lsls	r1, r1, #6
 80042da:	404a      	eors	r2, r1
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	18d3      	adds	r3, r2, r3
 80042e8:	183a      	adds	r2, r7, r0
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	499b      	ldr	r1, [pc, #620]	@ (800455c <USB_ActivateEndpoint+0x660>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	e2bd      	b.n	8004872 <USB_ActivateEndpoint+0x976>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d117      	bne.n	800432e <USB_ActivateEndpoint+0x432>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	18d3      	adds	r3, r2, r3
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29a      	uxth	r2, r3
 800430c:	2082      	movs	r0, #130	@ 0x82
 800430e:	183b      	adds	r3, r7, r0
 8004310:	498f      	ldr	r1, [pc, #572]	@ (8004550 <USB_ActivateEndpoint+0x654>)
 8004312:	400a      	ands	r2, r1
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	183a      	adds	r2, r7, r0
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	498e      	ldr	r1, [pc, #568]	@ (8004560 <USB_ActivateEndpoint+0x664>)
 8004326:	430a      	orrs	r2, r1
 8004328:	b292      	uxth	r2, r2
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	e016      	b.n	800435c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	18d3      	adds	r3, r2, r3
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29a      	uxth	r2, r3
 800433c:	2084      	movs	r0, #132	@ 0x84
 800433e:	183b      	adds	r3, r7, r0
 8004340:	4988      	ldr	r1, [pc, #544]	@ (8004564 <USB_ActivateEndpoint+0x668>)
 8004342:	400a      	ands	r2, r1
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	183a      	adds	r2, r7, r0
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	4981      	ldr	r1, [pc, #516]	@ (800455c <USB_ActivateEndpoint+0x660>)
 8004356:	430a      	orrs	r2, r1
 8004358:	b292      	uxth	r2, r2
 800435a:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2250      	movs	r2, #80	@ 0x50
 8004364:	5a9b      	ldrh	r3, [r3, r2]
 8004366:	b29b      	uxth	r3, r3
 8004368:	001a      	movs	r2, r3
 800436a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800436c:	189b      	adds	r3, r3, r2
 800436e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	00da      	lsls	r2, r3, #3
 8004376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004378:	18d3      	adds	r3, r2, r3
 800437a:	2280      	movs	r2, #128	@ 0x80
 800437c:	00d2      	lsls	r2, r2, #3
 800437e:	4694      	mov	ip, r2
 8004380:	4463      	add	r3, ip
 8004382:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	891b      	ldrh	r3, [r3, #8]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	18db      	adds	r3, r3, r3
 800438e:	b29a      	uxth	r2, r3
 8004390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	677b      	str	r3, [r7, #116]	@ 0x74
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2250      	movs	r2, #80	@ 0x50
 800439c:	5a9b      	ldrh	r3, [r3, r2]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	001a      	movs	r2, r3
 80043a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	00da      	lsls	r2, r3, #3
 80043ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043b0:	18d3      	adds	r3, r2, r3
 80043b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004568 <USB_ActivateEndpoint+0x66c>)
 80043b4:	4694      	mov	ip, r2
 80043b6:	4463      	add	r3, ip
 80043b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	895b      	ldrh	r3, [r3, #10]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	18db      	adds	r3, r3, r3
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043c8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d000      	beq.n	80043d4 <USB_ActivateEndpoint+0x4d8>
 80043d2:	e1b3      	b.n	800473c <USB_ActivateEndpoint+0x840>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	18d2      	adds	r2, r2, r3
 80043de:	2160      	movs	r1, #96	@ 0x60
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	8812      	ldrh	r2, [r2, #0]
 80043e4:	801a      	strh	r2, [r3, #0]
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	01db      	lsls	r3, r3, #7
 80043ee:	4013      	ands	r3, r2
 80043f0:	d016      	beq.n	8004420 <USB_ActivateEndpoint+0x524>
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	18d3      	adds	r3, r2, r3
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	205e      	movs	r0, #94	@ 0x5e
 8004402:	183b      	adds	r3, r7, r0
 8004404:	4952      	ldr	r1, [pc, #328]	@ (8004550 <USB_ActivateEndpoint+0x654>)
 8004406:	400a      	ands	r2, r1
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	18d3      	adds	r3, r2, r3
 8004414:	183a      	adds	r2, r7, r0
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	494e      	ldr	r1, [pc, #312]	@ (8004554 <USB_ActivateEndpoint+0x658>)
 800441a:	430a      	orrs	r2, r1
 800441c:	b292      	uxth	r2, r2
 800441e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	18d2      	adds	r2, r2, r3
 800442a:	215c      	movs	r1, #92	@ 0x5c
 800442c:	187b      	adds	r3, r7, r1
 800442e:	8812      	ldrh	r2, [r2, #0]
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	187b      	adds	r3, r7, r1
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	2240      	movs	r2, #64	@ 0x40
 8004438:	4013      	ands	r3, r2
 800443a:	d016      	beq.n	800446a <USB_ActivateEndpoint+0x56e>
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	18d3      	adds	r3, r2, r3
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29a      	uxth	r2, r3
 800444a:	205a      	movs	r0, #90	@ 0x5a
 800444c:	183b      	adds	r3, r7, r0
 800444e:	4940      	ldr	r1, [pc, #256]	@ (8004550 <USB_ActivateEndpoint+0x654>)
 8004450:	400a      	ands	r2, r1
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	183a      	adds	r2, r7, r0
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	4942      	ldr	r1, [pc, #264]	@ (800456c <USB_ActivateEndpoint+0x670>)
 8004464:	430a      	orrs	r2, r1
 8004466:	b292      	uxth	r2, r2
 8004468:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d000      	beq.n	8004474 <USB_ActivateEndpoint+0x578>
 8004472:	e07f      	b.n	8004574 <USB_ActivateEndpoint+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2250      	movs	r2, #80	@ 0x50
 800447c:	5a9b      	ldrh	r3, [r3, r2]
 800447e:	b29b      	uxth	r3, r3
 8004480:	001a      	movs	r2, r3
 8004482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004484:	189b      	adds	r3, r3, r2
 8004486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	00da      	lsls	r2, r3, #3
 800448e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004490:	18d3      	adds	r3, r2, r3
 8004492:	4a37      	ldr	r2, [pc, #220]	@ (8004570 <USB_ActivateEndpoint+0x674>)
 8004494:	4694      	mov	ip, r2
 8004496:	4463      	add	r3, ip
 8004498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800449a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	059b      	lsls	r3, r3, #22
 80044a2:	0d9b      	lsrs	r3, r3, #22
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d108      	bne.n	80044c4 <USB_ActivateEndpoint+0x5c8>
 80044b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4a24      	ldr	r2, [pc, #144]	@ (800454c <USB_ActivateEndpoint+0x650>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c0:	801a      	strh	r2, [r3, #0]
 80044c2:	e073      	b.n	80045ac <USB_ActivateEndpoint+0x6b0>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80044ca:	d81d      	bhi.n	8004508 <USB_ActivateEndpoint+0x60c>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	218c      	movs	r1, #140	@ 0x8c
 80044d4:	187a      	adds	r2, r7, r1
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	d004      	beq.n	80044ec <USB_ActivateEndpoint+0x5f0>
 80044e2:	187b      	adds	r3, r7, r1
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	187a      	adds	r2, r7, r1
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	238c      	movs	r3, #140	@ 0x8c
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	029b      	lsls	r3, r3, #10
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	b29a      	uxth	r2, r3
 8004502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	e051      	b.n	80045ac <USB_ActivateEndpoint+0x6b0>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	218c      	movs	r1, #140	@ 0x8c
 8004510:	187a      	adds	r2, r7, r1
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	221f      	movs	r2, #31
 800451a:	4013      	ands	r3, r2
 800451c:	d104      	bne.n	8004528 <USB_ActivateEndpoint+0x62c>
 800451e:	187b      	adds	r3, r7, r1
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	187a      	adds	r2, r7, r1
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29a      	uxth	r2, r3
 800452e:	238c      	movs	r3, #140	@ 0x8c
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	029b      	lsls	r3, r3, #10
 8004538:	b29b      	uxth	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	4a03      	ldr	r2, [pc, #12]	@ (800454c <USB_ActivateEndpoint+0x650>)
 8004540:	4313      	orrs	r3, r2
 8004542:	b29a      	uxth	r2, r3
 8004544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	e030      	b.n	80045ac <USB_ActivateEndpoint+0x6b0>
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	ffff8000 	.word	0xffff8000
 8004550:	ffff8f8f 	.word	0xffff8f8f
 8004554:	ffffc080 	.word	0xffffc080
 8004558:	ffffbf8f 	.word	0xffffbf8f
 800455c:	ffff8080 	.word	0xffff8080
 8004560:	ffff8180 	.word	0xffff8180
 8004564:	ffff8e8f 	.word	0xffff8e8f
 8004568:	00000404 	.word	0x00000404
 800456c:	ffff80c0 	.word	0xffff80c0
 8004570:	00000402 	.word	0x00000402
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d117      	bne.n	80045ac <USB_ActivateEndpoint+0x6b0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2250      	movs	r2, #80	@ 0x50
 8004584:	5a9b      	ldrh	r3, [r3, r2]
 8004586:	b29b      	uxth	r3, r3
 8004588:	001a      	movs	r2, r3
 800458a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458c:	189b      	adds	r3, r3, r2
 800458e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	00da      	lsls	r2, r3, #3
 8004596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004598:	18d3      	adds	r3, r2, r3
 800459a:	4ab9      	ldr	r2, [pc, #740]	@ (8004880 <USB_ActivateEndpoint+0x984>)
 800459c:	4694      	mov	ip, r2
 800459e:	4463      	add	r3, ip
 80045a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d16a      	bne.n	800468e <USB_ActivateEndpoint+0x792>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2250      	movs	r2, #80	@ 0x50
 80045c0:	5a9b      	ldrh	r3, [r3, r2]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	001a      	movs	r2, r3
 80045c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	00da      	lsls	r2, r3, #3
 80045d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d4:	18d3      	adds	r3, r2, r3
 80045d6:	4aab      	ldr	r2, [pc, #684]	@ (8004884 <USB_ActivateEndpoint+0x988>)
 80045d8:	4694      	mov	ip, r2
 80045da:	4463      	add	r3, ip
 80045dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	059b      	lsls	r3, r3, #22
 80045e6:	0d9b      	lsrs	r3, r3, #22
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d108      	bne.n	8004608 <USB_ActivateEndpoint+0x70c>
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4aa2      	ldr	r2, [pc, #648]	@ (8004888 <USB_ActivateEndpoint+0x98c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	b29a      	uxth	r2, r3
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	e05c      	b.n	80046c2 <USB_ActivateEndpoint+0x7c6>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b3e      	cmp	r3, #62	@ 0x3e
 800460e:	d81d      	bhi.n	800464c <USB_ActivateEndpoint+0x750>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	2188      	movs	r1, #136	@ 0x88
 8004618:	187a      	adds	r2, r7, r1
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2201      	movs	r2, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d004      	beq.n	8004630 <USB_ActivateEndpoint+0x734>
 8004626:	187b      	adds	r3, r7, r1
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3301      	adds	r3, #1
 800462c:	187a      	adds	r2, r7, r1
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29a      	uxth	r2, r3
 8004636:	2388      	movs	r3, #136	@ 0x88
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	029b      	lsls	r3, r3, #10
 8004640:	b29b      	uxth	r3, r3
 8004642:	4313      	orrs	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	e03a      	b.n	80046c2 <USB_ActivateEndpoint+0x7c6>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2188      	movs	r1, #136	@ 0x88
 8004654:	187a      	adds	r2, r7, r1
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	221f      	movs	r2, #31
 800465e:	4013      	ands	r3, r2
 8004660:	d104      	bne.n	800466c <USB_ActivateEndpoint+0x770>
 8004662:	187b      	adds	r3, r7, r1
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3b01      	subs	r3, #1
 8004668:	187a      	adds	r2, r7, r1
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29a      	uxth	r2, r3
 8004672:	2388      	movs	r3, #136	@ 0x88
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	b29b      	uxth	r3, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	b29b      	uxth	r3, r3
 8004682:	4a81      	ldr	r2, [pc, #516]	@ (8004888 <USB_ActivateEndpoint+0x98c>)
 8004684:	4313      	orrs	r3, r2
 8004686:	b29a      	uxth	r2, r3
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	e019      	b.n	80046c2 <USB_ActivateEndpoint+0x7c6>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d115      	bne.n	80046c2 <USB_ActivateEndpoint+0x7c6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2250      	movs	r2, #80	@ 0x50
 800469a:	5a9b      	ldrh	r3, [r3, r2]
 800469c:	b29b      	uxth	r3, r3
 800469e:	001a      	movs	r2, r3
 80046a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	00da      	lsls	r2, r3, #3
 80046ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ae:	18d3      	adds	r3, r2, r3
 80046b0:	4a74      	ldr	r2, [pc, #464]	@ (8004884 <USB_ActivateEndpoint+0x988>)
 80046b2:	4694      	mov	ip, r2
 80046b4:	4463      	add	r3, ip
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	b29a      	uxth	r2, r3
 80046be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	18d3      	adds	r3, r2, r3
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	2036      	movs	r0, #54	@ 0x36
 80046d2:	183b      	adds	r3, r7, r0
 80046d4:	496d      	ldr	r1, [pc, #436]	@ (800488c <USB_ActivateEndpoint+0x990>)
 80046d6:	400a      	ands	r2, r1
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	183b      	adds	r3, r7, r0
 80046dc:	183a      	adds	r2, r7, r0
 80046de:	8812      	ldrh	r2, [r2, #0]
 80046e0:	2180      	movs	r1, #128	@ 0x80
 80046e2:	0149      	lsls	r1, r1, #5
 80046e4:	404a      	eors	r2, r1
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	183a      	adds	r2, r7, r0
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	2180      	movs	r1, #128	@ 0x80
 80046f0:	0189      	lsls	r1, r1, #6
 80046f2:	404a      	eors	r2, r1
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	18d3      	adds	r3, r2, r3
 8004700:	183a      	adds	r2, r7, r0
 8004702:	8812      	ldrh	r2, [r2, #0]
 8004704:	4962      	ldr	r1, [pc, #392]	@ (8004890 <USB_ActivateEndpoint+0x994>)
 8004706:	430a      	orrs	r2, r1
 8004708:	b292      	uxth	r2, r2
 800470a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29a      	uxth	r2, r3
 800471a:	2034      	movs	r0, #52	@ 0x34
 800471c:	183b      	adds	r3, r7, r0
 800471e:	495d      	ldr	r1, [pc, #372]	@ (8004894 <USB_ActivateEndpoint+0x998>)
 8004720:	400a      	ands	r2, r1
 8004722:	801a      	strh	r2, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	183a      	adds	r2, r7, r0
 8004730:	8812      	ldrh	r2, [r2, #0]
 8004732:	4957      	ldr	r1, [pc, #348]	@ (8004890 <USB_ActivateEndpoint+0x994>)
 8004734:	430a      	orrs	r2, r1
 8004736:	b292      	uxth	r2, r2
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e09a      	b.n	8004872 <USB_ActivateEndpoint+0x976>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	18d2      	adds	r2, r2, r3
 8004746:	216e      	movs	r1, #110	@ 0x6e
 8004748:	187b      	adds	r3, r7, r1
 800474a:	8812      	ldrh	r2, [r2, #0]
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	187b      	adds	r3, r7, r1
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4013      	ands	r3, r2
 8004758:	d016      	beq.n	8004788 <USB_ActivateEndpoint+0x88c>
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	18d3      	adds	r3, r2, r3
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29a      	uxth	r2, r3
 8004768:	206c      	movs	r0, #108	@ 0x6c
 800476a:	183b      	adds	r3, r7, r0
 800476c:	494a      	ldr	r1, [pc, #296]	@ (8004898 <USB_ActivateEndpoint+0x99c>)
 800476e:	400a      	ands	r2, r1
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	18d3      	adds	r3, r2, r3
 800477c:	183a      	adds	r2, r7, r0
 800477e:	8812      	ldrh	r2, [r2, #0]
 8004780:	4946      	ldr	r1, [pc, #280]	@ (800489c <USB_ActivateEndpoint+0x9a0>)
 8004782:	430a      	orrs	r2, r1
 8004784:	b292      	uxth	r2, r2
 8004786:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	18d2      	adds	r2, r2, r3
 8004792:	216a      	movs	r1, #106	@ 0x6a
 8004794:	187b      	adds	r3, r7, r1
 8004796:	8812      	ldrh	r2, [r2, #0]
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	187b      	adds	r3, r7, r1
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	2240      	movs	r2, #64	@ 0x40
 80047a0:	4013      	ands	r3, r2
 80047a2:	d016      	beq.n	80047d2 <USB_ActivateEndpoint+0x8d6>
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	2068      	movs	r0, #104	@ 0x68
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	4938      	ldr	r1, [pc, #224]	@ (8004898 <USB_ActivateEndpoint+0x99c>)
 80047b8:	400a      	ands	r2, r1
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	183a      	adds	r2, r7, r0
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	4935      	ldr	r1, [pc, #212]	@ (80048a0 <USB_ActivateEndpoint+0x9a4>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	b292      	uxth	r2, r2
 80047d0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	78db      	ldrb	r3, [r3, #3]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d01d      	beq.n	8004816 <USB_ActivateEndpoint+0x91a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	18d3      	adds	r3, r2, r3
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	2064      	movs	r0, #100	@ 0x64
 80047ea:	183b      	adds	r3, r7, r0
 80047ec:	4929      	ldr	r1, [pc, #164]	@ (8004894 <USB_ActivateEndpoint+0x998>)
 80047ee:	400a      	ands	r2, r1
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	183b      	adds	r3, r7, r0
 80047f4:	183a      	adds	r2, r7, r0
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	2120      	movs	r1, #32
 80047fa:	404a      	eors	r2, r1
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	183a      	adds	r2, r7, r0
 800480a:	8812      	ldrh	r2, [r2, #0]
 800480c:	4920      	ldr	r1, [pc, #128]	@ (8004890 <USB_ActivateEndpoint+0x994>)
 800480e:	430a      	orrs	r2, r1
 8004810:	b292      	uxth	r2, r2
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	e016      	b.n	8004844 <USB_ActivateEndpoint+0x948>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	18d3      	adds	r3, r2, r3
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29a      	uxth	r2, r3
 8004824:	2066      	movs	r0, #102	@ 0x66
 8004826:	183b      	adds	r3, r7, r0
 8004828:	491a      	ldr	r1, [pc, #104]	@ (8004894 <USB_ActivateEndpoint+0x998>)
 800482a:	400a      	ands	r2, r1
 800482c:	801a      	strh	r2, [r3, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	18d3      	adds	r3, r2, r3
 8004838:	183a      	adds	r2, r7, r0
 800483a:	8812      	ldrh	r2, [r2, #0]
 800483c:	4914      	ldr	r1, [pc, #80]	@ (8004890 <USB_ActivateEndpoint+0x994>)
 800483e:	430a      	orrs	r2, r1
 8004840:	b292      	uxth	r2, r2
 8004842:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	18d3      	adds	r3, r2, r3
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29a      	uxth	r2, r3
 8004852:	2062      	movs	r0, #98	@ 0x62
 8004854:	183b      	adds	r3, r7, r0
 8004856:	490d      	ldr	r1, [pc, #52]	@ (800488c <USB_ActivateEndpoint+0x990>)
 8004858:	400a      	ands	r2, r1
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	18d3      	adds	r3, r2, r3
 8004866:	183a      	adds	r2, r7, r0
 8004868:	8812      	ldrh	r2, [r2, #0]
 800486a:	4909      	ldr	r1, [pc, #36]	@ (8004890 <USB_ActivateEndpoint+0x994>)
 800486c:	430a      	orrs	r2, r1
 800486e:	b292      	uxth	r2, r2
 8004870:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004872:	2397      	movs	r3, #151	@ 0x97
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	781b      	ldrb	r3, [r3, #0]
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	b026      	add	sp, #152	@ 0x98
 800487e:	bd80      	pop	{r7, pc}
 8004880:	00000402 	.word	0x00000402
 8004884:	00000406 	.word	0x00000406
 8004888:	ffff8000 	.word	0xffff8000
 800488c:	ffffbf8f 	.word	0xffffbf8f
 8004890:	ffff8080 	.word	0xffff8080
 8004894:	ffff8fbf 	.word	0xffff8fbf
 8004898:	ffff8f8f 	.word	0xffff8f8f
 800489c:	ffffc080 	.word	0xffffc080
 80048a0:	ffff80c0 	.word	0xffff80c0

080048a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	@ 0x30
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	7b1b      	ldrb	r3, [r3, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d000      	beq.n	80048b8 <USB_DeactivateEndpoint+0x14>
 80048b6:	e07e      	b.n	80049b6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d03c      	beq.n	800493a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	18d2      	adds	r2, r2, r3
 80048ca:	210c      	movs	r1, #12
 80048cc:	187b      	adds	r3, r7, r1
 80048ce:	8812      	ldrh	r2, [r2, #0]
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	187b      	adds	r3, r7, r1
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	2240      	movs	r2, #64	@ 0x40
 80048d8:	4013      	ands	r3, r2
 80048da:	d016      	beq.n	800490a <USB_DeactivateEndpoint+0x66>
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	18d3      	adds	r3, r2, r3
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	200a      	movs	r0, #10
 80048ec:	183b      	adds	r3, r7, r0
 80048ee:	49c7      	ldr	r1, [pc, #796]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 80048f0:	400a      	ands	r2, r1
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	18d3      	adds	r3, r2, r3
 80048fe:	183a      	adds	r2, r7, r0
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	49c3      	ldr	r1, [pc, #780]	@ (8004c10 <USB_DeactivateEndpoint+0x36c>)
 8004904:	430a      	orrs	r2, r1
 8004906:	b292      	uxth	r2, r2
 8004908:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	18d3      	adds	r3, r2, r3
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29a      	uxth	r2, r3
 8004918:	2008      	movs	r0, #8
 800491a:	183b      	adds	r3, r7, r0
 800491c:	49bd      	ldr	r1, [pc, #756]	@ (8004c14 <USB_DeactivateEndpoint+0x370>)
 800491e:	400a      	ands	r2, r1
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	183a      	adds	r2, r7, r0
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	49b9      	ldr	r1, [pc, #740]	@ (8004c18 <USB_DeactivateEndpoint+0x374>)
 8004932:	430a      	orrs	r2, r1
 8004934:	b292      	uxth	r2, r2
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	e163      	b.n	8004c02 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	18d2      	adds	r2, r2, r3
 8004944:	2112      	movs	r1, #18
 8004946:	187b      	adds	r3, r7, r1
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	187b      	adds	r3, r7, r1
 800494e:	881a      	ldrh	r2, [r3, #0]
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	01db      	lsls	r3, r3, #7
 8004954:	4013      	ands	r3, r2
 8004956:	d016      	beq.n	8004986 <USB_DeactivateEndpoint+0xe2>
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	18d3      	adds	r3, r2, r3
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29a      	uxth	r2, r3
 8004966:	2010      	movs	r0, #16
 8004968:	183b      	adds	r3, r7, r0
 800496a:	49a8      	ldr	r1, [pc, #672]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 800496c:	400a      	ands	r2, r1
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	18d3      	adds	r3, r2, r3
 800497a:	183a      	adds	r2, r7, r0
 800497c:	8812      	ldrh	r2, [r2, #0]
 800497e:	49a7      	ldr	r1, [pc, #668]	@ (8004c1c <USB_DeactivateEndpoint+0x378>)
 8004980:	430a      	orrs	r2, r1
 8004982:	b292      	uxth	r2, r2
 8004984:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	18d3      	adds	r3, r2, r3
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29a      	uxth	r2, r3
 8004994:	200e      	movs	r0, #14
 8004996:	183b      	adds	r3, r7, r0
 8004998:	49a1      	ldr	r1, [pc, #644]	@ (8004c20 <USB_DeactivateEndpoint+0x37c>)
 800499a:	400a      	ands	r2, r1
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	18d3      	adds	r3, r2, r3
 80049a8:	183a      	adds	r2, r7, r0
 80049aa:	8812      	ldrh	r2, [r2, #0]
 80049ac:	499a      	ldr	r1, [pc, #616]	@ (8004c18 <USB_DeactivateEndpoint+0x374>)
 80049ae:	430a      	orrs	r2, r1
 80049b0:	b292      	uxth	r2, r2
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	e125      	b.n	8004c02 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d000      	beq.n	80049c0 <USB_DeactivateEndpoint+0x11c>
 80049be:	e090      	b.n	8004ae2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	18d2      	adds	r2, r2, r3
 80049ca:	2120      	movs	r1, #32
 80049cc:	187b      	adds	r3, r7, r1
 80049ce:	8812      	ldrh	r2, [r2, #0]
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	187b      	adds	r3, r7, r1
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	01db      	lsls	r3, r3, #7
 80049da:	4013      	ands	r3, r2
 80049dc:	d016      	beq.n	8004a0c <USB_DeactivateEndpoint+0x168>
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18d3      	adds	r3, r2, r3
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	201e      	movs	r0, #30
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	4986      	ldr	r1, [pc, #536]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 80049f2:	400a      	ands	r2, r1
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	18d3      	adds	r3, r2, r3
 8004a00:	183a      	adds	r2, r7, r0
 8004a02:	8812      	ldrh	r2, [r2, #0]
 8004a04:	4985      	ldr	r1, [pc, #532]	@ (8004c1c <USB_DeactivateEndpoint+0x378>)
 8004a06:	430a      	orrs	r2, r1
 8004a08:	b292      	uxth	r2, r2
 8004a0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	18d2      	adds	r2, r2, r3
 8004a16:	211c      	movs	r1, #28
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	8812      	ldrh	r2, [r2, #0]
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	187b      	adds	r3, r7, r1
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	2240      	movs	r2, #64	@ 0x40
 8004a24:	4013      	ands	r3, r2
 8004a26:	d016      	beq.n	8004a56 <USB_DeactivateEndpoint+0x1b2>
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	18d3      	adds	r3, r2, r3
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	201a      	movs	r0, #26
 8004a38:	183b      	adds	r3, r7, r0
 8004a3a:	4974      	ldr	r1, [pc, #464]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 8004a3c:	400a      	ands	r2, r1
 8004a3e:	801a      	strh	r2, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	18d3      	adds	r3, r2, r3
 8004a4a:	183a      	adds	r2, r7, r0
 8004a4c:	8812      	ldrh	r2, [r2, #0]
 8004a4e:	4970      	ldr	r1, [pc, #448]	@ (8004c10 <USB_DeactivateEndpoint+0x36c>)
 8004a50:	430a      	orrs	r2, r1
 8004a52:	b292      	uxth	r2, r2
 8004a54:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	18d3      	adds	r3, r2, r3
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	2018      	movs	r0, #24
 8004a66:	183b      	adds	r3, r7, r0
 8004a68:	4968      	ldr	r1, [pc, #416]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	18d3      	adds	r3, r2, r3
 8004a78:	183a      	adds	r2, r7, r0
 8004a7a:	8812      	ldrh	r2, [r2, #0]
 8004a7c:	4964      	ldr	r1, [pc, #400]	@ (8004c10 <USB_DeactivateEndpoint+0x36c>)
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	b292      	uxth	r2, r2
 8004a82:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	18d3      	adds	r3, r2, r3
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	2016      	movs	r0, #22
 8004a94:	183b      	adds	r3, r7, r0
 8004a96:	4962      	ldr	r1, [pc, #392]	@ (8004c20 <USB_DeactivateEndpoint+0x37c>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	801a      	strh	r2, [r3, #0]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	18d3      	adds	r3, r2, r3
 8004aa6:	183a      	adds	r2, r7, r0
 8004aa8:	8812      	ldrh	r2, [r2, #0]
 8004aaa:	495b      	ldr	r1, [pc, #364]	@ (8004c18 <USB_DeactivateEndpoint+0x374>)
 8004aac:	430a      	orrs	r2, r1
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	2014      	movs	r0, #20
 8004ac2:	183b      	adds	r3, r7, r0
 8004ac4:	4953      	ldr	r1, [pc, #332]	@ (8004c14 <USB_DeactivateEndpoint+0x370>)
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	18d3      	adds	r3, r2, r3
 8004ad4:	183a      	adds	r2, r7, r0
 8004ad6:	8812      	ldrh	r2, [r2, #0]
 8004ad8:	494f      	ldr	r1, [pc, #316]	@ (8004c18 <USB_DeactivateEndpoint+0x374>)
 8004ada:	430a      	orrs	r2, r1
 8004adc:	b292      	uxth	r2, r2
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	e08f      	b.n	8004c02 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	18d2      	adds	r2, r2, r3
 8004aec:	212e      	movs	r1, #46	@ 0x2e
 8004aee:	187b      	adds	r3, r7, r1
 8004af0:	8812      	ldrh	r2, [r2, #0]
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	187b      	adds	r3, r7, r1
 8004af6:	881a      	ldrh	r2, [r3, #0]
 8004af8:	2380      	movs	r3, #128	@ 0x80
 8004afa:	01db      	lsls	r3, r3, #7
 8004afc:	4013      	ands	r3, r2
 8004afe:	d016      	beq.n	8004b2e <USB_DeactivateEndpoint+0x28a>
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	202c      	movs	r0, #44	@ 0x2c
 8004b10:	183b      	adds	r3, r7, r0
 8004b12:	493e      	ldr	r1, [pc, #248]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	18d3      	adds	r3, r2, r3
 8004b22:	183a      	adds	r2, r7, r0
 8004b24:	8812      	ldrh	r2, [r2, #0]
 8004b26:	493d      	ldr	r1, [pc, #244]	@ (8004c1c <USB_DeactivateEndpoint+0x378>)
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	b292      	uxth	r2, r2
 8004b2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	18d2      	adds	r2, r2, r3
 8004b38:	212a      	movs	r1, #42	@ 0x2a
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	2240      	movs	r2, #64	@ 0x40
 8004b46:	4013      	ands	r3, r2
 8004b48:	d016      	beq.n	8004b78 <USB_DeactivateEndpoint+0x2d4>
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	2028      	movs	r0, #40	@ 0x28
 8004b5a:	183b      	adds	r3, r7, r0
 8004b5c:	492b      	ldr	r1, [pc, #172]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 8004b5e:	400a      	ands	r2, r1
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	18d3      	adds	r3, r2, r3
 8004b6c:	183a      	adds	r2, r7, r0
 8004b6e:	8812      	ldrh	r2, [r2, #0]
 8004b70:	4927      	ldr	r1, [pc, #156]	@ (8004c10 <USB_DeactivateEndpoint+0x36c>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	b292      	uxth	r2, r2
 8004b76:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	2026      	movs	r0, #38	@ 0x26
 8004b88:	183b      	adds	r3, r7, r0
 8004b8a:	4920      	ldr	r1, [pc, #128]	@ (8004c0c <USB_DeactivateEndpoint+0x368>)
 8004b8c:	400a      	ands	r2, r1
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	18d3      	adds	r3, r2, r3
 8004b9a:	183a      	adds	r2, r7, r0
 8004b9c:	8812      	ldrh	r2, [r2, #0]
 8004b9e:	491f      	ldr	r1, [pc, #124]	@ (8004c1c <USB_DeactivateEndpoint+0x378>)
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	b292      	uxth	r2, r2
 8004ba4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	18d3      	adds	r3, r2, r3
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	2024      	movs	r0, #36	@ 0x24
 8004bb6:	183b      	adds	r3, r7, r0
 8004bb8:	4916      	ldr	r1, [pc, #88]	@ (8004c14 <USB_DeactivateEndpoint+0x370>)
 8004bba:	400a      	ands	r2, r1
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	18d3      	adds	r3, r2, r3
 8004bc8:	183a      	adds	r2, r7, r0
 8004bca:	8812      	ldrh	r2, [r2, #0]
 8004bcc:	4912      	ldr	r1, [pc, #72]	@ (8004c18 <USB_DeactivateEndpoint+0x374>)
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	18d3      	adds	r3, r2, r3
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	2022      	movs	r0, #34	@ 0x22
 8004be4:	183b      	adds	r3, r7, r0
 8004be6:	490e      	ldr	r1, [pc, #56]	@ (8004c20 <USB_DeactivateEndpoint+0x37c>)
 8004be8:	400a      	ands	r2, r1
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	18d3      	adds	r3, r2, r3
 8004bf6:	183a      	adds	r2, r7, r0
 8004bf8:	8812      	ldrh	r2, [r2, #0]
 8004bfa:	4907      	ldr	r1, [pc, #28]	@ (8004c18 <USB_DeactivateEndpoint+0x374>)
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	b292      	uxth	r2, r2
 8004c00:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b00c      	add	sp, #48	@ 0x30
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	ffff8f8f 	.word	0xffff8f8f
 8004c10:	ffff80c0 	.word	0xffff80c0
 8004c14:	ffff8fbf 	.word	0xffff8fbf
 8004c18:	ffff8080 	.word	0xffff8080
 8004c1c:	ffffc080 	.word	0xffffc080
 8004c20:	ffffbf8f 	.word	0xffffbf8f

08004c24 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b0ac      	sub	sp, #176	@ 0xb0
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d001      	beq.n	8004c3a <USB_EPStartXfer+0x16>
 8004c36:	f000 fd07 	bl	8005648 <USB_EPStartXfer+0xa24>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d905      	bls.n	8004c52 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	22ac      	movs	r2, #172	@ 0xac
 8004c4c:	18ba      	adds	r2, r7, r2
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e004      	b.n	8004c5c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	22ac      	movs	r2, #172	@ 0xac
 8004c58:	18ba      	adds	r2, r7, r2
 8004c5a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	7b1b      	ldrb	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d124      	bne.n	8004cae <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6959      	ldr	r1, [r3, #20]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	88da      	ldrh	r2, [r3, #6]
 8004c6c:	24ac      	movs	r4, #172	@ 0xac
 8004c6e:	193b      	adds	r3, r7, r4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fef5 	bl	8005a64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2250      	movs	r2, #80	@ 0x50
 8004c82:	5a9b      	ldrh	r3, [r3, r2]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	001a      	movs	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	00da      	lsls	r2, r3, #3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	18d3      	adds	r3, r2, r3
 8004c98:	4acf      	ldr	r2, [pc, #828]	@ (8004fd8 <USB_EPStartXfer+0x3b4>)
 8004c9a:	4694      	mov	ip, r2
 8004c9c:	4463      	add	r3, ip
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	193b      	adds	r3, r7, r4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	801a      	strh	r2, [r3, #0]
 8004caa:	f000 fca9 	bl	8005600 <USB_EPStartXfer+0x9dc>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	78db      	ldrb	r3, [r3, #3]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d000      	beq.n	8004cb8 <USB_EPStartXfer+0x94>
 8004cb6:	e347      	b.n	8005348 <USB_EPStartXfer+0x724>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d800      	bhi.n	8004cc6 <USB_EPStartXfer+0xa2>
 8004cc4:	e2f0      	b.n	80052a8 <USB_EPStartXfer+0x684>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	18d3      	adds	r3, r2, r3
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	2056      	movs	r0, #86	@ 0x56
 8004cd6:	183b      	adds	r3, r7, r0
 8004cd8:	49c0      	ldr	r1, [pc, #768]	@ (8004fdc <USB_EPStartXfer+0x3b8>)
 8004cda:	400a      	ands	r2, r1
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	18d3      	adds	r3, r2, r3
 8004ce8:	183a      	adds	r2, r7, r0
 8004cea:	8812      	ldrh	r2, [r2, #0]
 8004cec:	49bc      	ldr	r1, [pc, #752]	@ (8004fe0 <USB_EPStartXfer+0x3bc>)
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	21ac      	movs	r1, #172	@ 0xac
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	001a      	movs	r2, r3
 8004d14:	2340      	movs	r3, #64	@ 0x40
 8004d16:	4013      	ands	r3, r2
 8004d18:	d100      	bne.n	8004d1c <USB_EPStartXfer+0xf8>
 8004d1a:	e167      	b.n	8004fec <USB_EPStartXfer+0x3c8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d16c      	bne.n	8004e02 <USB_EPStartXfer+0x1de>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2250      	movs	r2, #80	@ 0x50
 8004d30:	5a9b      	ldrh	r3, [r3, r2]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	001a      	movs	r2, r3
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	189b      	adds	r3, r3, r2
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	00da      	lsls	r2, r3, #3
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	18d3      	adds	r3, r2, r3
 8004d46:	4aa7      	ldr	r2, [pc, #668]	@ (8004fe4 <USB_EPStartXfer+0x3c0>)
 8004d48:	4694      	mov	ip, r2
 8004d4a:	4463      	add	r3, ip
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	059b      	lsls	r3, r3, #22
 8004d56:	0d9b      	lsrs	r3, r3, #22
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	801a      	strh	r2, [r3, #0]
 8004d5e:	187b      	adds	r3, r7, r1
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <USB_EPStartXfer+0x154>
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4a9e      	ldr	r2, [pc, #632]	@ (8004fe8 <USB_EPStartXfer+0x3c4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e05f      	b.n	8004e38 <USB_EPStartXfer+0x214>
 8004d78:	22ac      	movs	r2, #172	@ 0xac
 8004d7a:	18bb      	adds	r3, r7, r2
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d80:	d81d      	bhi.n	8004dbe <USB_EPStartXfer+0x19a>
 8004d82:	18bb      	adds	r3, r7, r2
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	21a8      	movs	r1, #168	@ 0xa8
 8004d8a:	1878      	adds	r0, r7, r1
 8004d8c:	6003      	str	r3, [r0, #0]
 8004d8e:	18bb      	adds	r3, r7, r2
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2201      	movs	r2, #1
 8004d94:	4013      	ands	r3, r2
 8004d96:	d004      	beq.n	8004da2 <USB_EPStartXfer+0x17e>
 8004d98:	187b      	adds	r3, r7, r1
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	187a      	adds	r2, r7, r1
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	23a8      	movs	r3, #168	@ 0xa8
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e03c      	b.n	8004e38 <USB_EPStartXfer+0x214>
 8004dbe:	22ac      	movs	r2, #172	@ 0xac
 8004dc0:	18bb      	adds	r3, r7, r2
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	21a8      	movs	r1, #168	@ 0xa8
 8004dc8:	1878      	adds	r0, r7, r1
 8004dca:	6003      	str	r3, [r0, #0]
 8004dcc:	18bb      	adds	r3, r7, r2
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	221f      	movs	r2, #31
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d104      	bne.n	8004de0 <USB_EPStartXfer+0x1bc>
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	187a      	adds	r2, r7, r1
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	23a8      	movs	r3, #168	@ 0xa8
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	4313      	orrs	r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe8 <USB_EPStartXfer+0x3c4>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	e01a      	b.n	8004e38 <USB_EPStartXfer+0x214>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d116      	bne.n	8004e38 <USB_EPStartXfer+0x214>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2250      	movs	r2, #80	@ 0x50
 8004e0e:	5a9b      	ldrh	r3, [r3, r2]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	001a      	movs	r2, r3
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	00da      	lsls	r2, r3, #3
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	4a6f      	ldr	r2, [pc, #444]	@ (8004fe4 <USB_EPStartXfer+0x3c0>)
 8004e26:	4694      	mov	ip, r2
 8004e28:	4463      	add	r3, ip
 8004e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e2c:	23ac      	movs	r3, #172	@ 0xac
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e38:	2076      	movs	r0, #118	@ 0x76
 8004e3a:	183b      	adds	r3, r7, r0
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	8952      	ldrh	r2, [r2, #10]
 8004e40:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6959      	ldr	r1, [r3, #20]
 8004e46:	25ac      	movs	r5, #172	@ 0xac
 8004e48:	197b      	adds	r3, r7, r5
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	b29c      	uxth	r4, r3
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	881a      	ldrh	r2, [r3, #0]
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	0023      	movs	r3, r4
 8004e56:	f000 fe05 	bl	8005a64 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	197b      	adds	r3, r7, r5
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	18d2      	adds	r2, r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d907      	bls.n	8004e84 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	197b      	adds	r3, r7, r5
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	1ad2      	subs	r2, r2, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	621a      	str	r2, [r3, #32]
 8004e82:	e007      	b.n	8004e94 <USB_EPStartXfer+0x270>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	22ac      	movs	r2, #172	@ 0xac
 8004e8a:	18ba      	adds	r2, r7, r2
 8004e8c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2200      	movs	r2, #0
 8004e92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d16d      	bne.n	8004f78 <USB_EPStartXfer+0x354>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2250      	movs	r2, #80	@ 0x50
 8004ea4:	5a9b      	ldrh	r3, [r3, r2]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	00da      	lsls	r2, r3, #3
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	4a47      	ldr	r2, [pc, #284]	@ (8004fd8 <USB_EPStartXfer+0x3b4>)
 8004ebc:	4694      	mov	ip, r2
 8004ebe:	4463      	add	r3, ip
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	059b      	lsls	r3, r3, #22
 8004eca:	0d9b      	lsrs	r3, r3, #22
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	23ac      	movs	r3, #172	@ 0xac
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d108      	bne.n	8004eee <USB_EPStartXfer+0x2ca>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	4a41      	ldr	r2, [pc, #260]	@ (8004fe8 <USB_EPStartXfer+0x3c4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	e061      	b.n	8004fb2 <USB_EPStartXfer+0x38e>
 8004eee:	22ac      	movs	r2, #172	@ 0xac
 8004ef0:	18bb      	adds	r3, r7, r2
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ef6:	d81d      	bhi.n	8004f34 <USB_EPStartXfer+0x310>
 8004ef8:	18bb      	adds	r3, r7, r2
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	21a4      	movs	r1, #164	@ 0xa4
 8004f00:	1878      	adds	r0, r7, r1
 8004f02:	6003      	str	r3, [r0, #0]
 8004f04:	18bb      	adds	r3, r7, r2
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <USB_EPStartXfer+0x2f4>
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	187a      	adds	r2, r7, r1
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	23a4      	movs	r3, #164	@ 0xa4
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	029b      	lsls	r3, r3, #10
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	e03e      	b.n	8004fb2 <USB_EPStartXfer+0x38e>
 8004f34:	22ac      	movs	r2, #172	@ 0xac
 8004f36:	18bb      	adds	r3, r7, r2
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	21a4      	movs	r1, #164	@ 0xa4
 8004f3e:	1878      	adds	r0, r7, r1
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	18bb      	adds	r3, r7, r2
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	221f      	movs	r2, #31
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d104      	bne.n	8004f56 <USB_EPStartXfer+0x332>
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	187a      	adds	r2, r7, r1
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	23a4      	movs	r3, #164	@ 0xa4
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	029b      	lsls	r3, r3, #10
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <USB_EPStartXfer+0x3c4>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	e01c      	b.n	8004fb2 <USB_EPStartXfer+0x38e>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d118      	bne.n	8004fb2 <USB_EPStartXfer+0x38e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	623b      	str	r3, [r7, #32]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2250      	movs	r2, #80	@ 0x50
 8004f88:	5a9b      	ldrh	r3, [r3, r2]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	189b      	adds	r3, r3, r2
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	00da      	lsls	r2, r3, #3
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	18d3      	adds	r3, r2, r3
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd8 <USB_EPStartXfer+0x3b4>)
 8004fa0:	4694      	mov	ip, r2
 8004fa2:	4463      	add	r3, ip
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	23ac      	movs	r3, #172	@ 0xac
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fb2:	2076      	movs	r0, #118	@ 0x76
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	8912      	ldrh	r2, [r2, #8]
 8004fba:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6959      	ldr	r1, [r3, #20]
 8004fc0:	23ac      	movs	r3, #172	@ 0xac
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	b29c      	uxth	r4, r3
 8004fc8:	183b      	adds	r3, r7, r0
 8004fca:	881a      	ldrh	r2, [r3, #0]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	0023      	movs	r3, r4
 8004fd0:	f000 fd48 	bl	8005a64 <USB_WritePMA>
 8004fd4:	e314      	b.n	8005600 <USB_EPStartXfer+0x9dc>
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	00000402 	.word	0x00000402
 8004fdc:	ffff8f8f 	.word	0xffff8f8f
 8004fe0:	ffff8180 	.word	0xffff8180
 8004fe4:	00000406 	.word	0x00000406
 8004fe8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d16d      	bne.n	80050d0 <USB_EPStartXfer+0x4ac>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2250      	movs	r2, #80	@ 0x50
 8004ffc:	5a9b      	ldrh	r3, [r3, r2]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	001a      	movs	r2, r3
 8005002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005004:	189b      	adds	r3, r3, r2
 8005006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	00da      	lsls	r2, r3, #3
 800500e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005010:	18d3      	adds	r3, r2, r3
 8005012:	4ac8      	ldr	r2, [pc, #800]	@ (8005334 <USB_EPStartXfer+0x710>)
 8005014:	4694      	mov	ip, r2
 8005016:	4463      	add	r3, ip
 8005018:	647b      	str	r3, [r7, #68]	@ 0x44
 800501a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	059b      	lsls	r3, r3, #22
 8005022:	0d9b      	lsrs	r3, r3, #22
 8005024:	b29a      	uxth	r2, r3
 8005026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	23ac      	movs	r3, #172	@ 0xac
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d108      	bne.n	8005046 <USB_EPStartXfer+0x422>
 8005034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	4abf      	ldr	r2, [pc, #764]	@ (8005338 <USB_EPStartXfer+0x714>)
 800503c:	4313      	orrs	r3, r2
 800503e:	b29a      	uxth	r2, r3
 8005040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e061      	b.n	800510a <USB_EPStartXfer+0x4e6>
 8005046:	22ac      	movs	r2, #172	@ 0xac
 8005048:	18bb      	adds	r3, r7, r2
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b3e      	cmp	r3, #62	@ 0x3e
 800504e:	d81d      	bhi.n	800508c <USB_EPStartXfer+0x468>
 8005050:	18bb      	adds	r3, r7, r2
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	21a0      	movs	r1, #160	@ 0xa0
 8005058:	1878      	adds	r0, r7, r1
 800505a:	6003      	str	r3, [r0, #0]
 800505c:	18bb      	adds	r3, r7, r2
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	4013      	ands	r3, r2
 8005064:	d004      	beq.n	8005070 <USB_EPStartXfer+0x44c>
 8005066:	187b      	adds	r3, r7, r1
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	187a      	adds	r2, r7, r1
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29a      	uxth	r2, r3
 8005076:	23a0      	movs	r3, #160	@ 0xa0
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	b29b      	uxth	r3, r3
 8005082:	4313      	orrs	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e03e      	b.n	800510a <USB_EPStartXfer+0x4e6>
 800508c:	22ac      	movs	r2, #172	@ 0xac
 800508e:	18bb      	adds	r3, r7, r2
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	21a0      	movs	r1, #160	@ 0xa0
 8005096:	1878      	adds	r0, r7, r1
 8005098:	6003      	str	r3, [r0, #0]
 800509a:	18bb      	adds	r3, r7, r2
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	221f      	movs	r2, #31
 80050a0:	4013      	ands	r3, r2
 80050a2:	d104      	bne.n	80050ae <USB_EPStartXfer+0x48a>
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	187a      	adds	r2, r7, r1
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	23a0      	movs	r3, #160	@ 0xa0
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	029b      	lsls	r3, r3, #10
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4313      	orrs	r3, r2
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4a9c      	ldr	r2, [pc, #624]	@ (8005338 <USB_EPStartXfer+0x714>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	e01c      	b.n	800510a <USB_EPStartXfer+0x4e6>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d118      	bne.n	800510a <USB_EPStartXfer+0x4e6>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	653b      	str	r3, [r7, #80]	@ 0x50
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2250      	movs	r2, #80	@ 0x50
 80050e0:	5a9b      	ldrh	r3, [r3, r2]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	001a      	movs	r2, r3
 80050e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e8:	189b      	adds	r3, r3, r2
 80050ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	00da      	lsls	r2, r3, #3
 80050f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f4:	18d3      	adds	r3, r2, r3
 80050f6:	4a8f      	ldr	r2, [pc, #572]	@ (8005334 <USB_EPStartXfer+0x710>)
 80050f8:	4694      	mov	ip, r2
 80050fa:	4463      	add	r3, ip
 80050fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050fe:	23ac      	movs	r3, #172	@ 0xac
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b29a      	uxth	r2, r3
 8005106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005108:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800510a:	2076      	movs	r0, #118	@ 0x76
 800510c:	183b      	adds	r3, r7, r0
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	8912      	ldrh	r2, [r2, #8]
 8005112:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6959      	ldr	r1, [r3, #20]
 8005118:	25ac      	movs	r5, #172	@ 0xac
 800511a:	197b      	adds	r3, r7, r5
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	b29c      	uxth	r4, r3
 8005120:	183b      	adds	r3, r7, r0
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	0023      	movs	r3, r4
 8005128:	f000 fc9c 	bl	8005a64 <USB_WritePMA>
            ep->xfer_buff += len;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	197b      	adds	r3, r7, r5
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	18d2      	adds	r2, r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	d907      	bls.n	8005156 <USB_EPStartXfer+0x532>
            {
              ep->xfer_len_db -= len;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	197b      	adds	r3, r7, r5
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1ad2      	subs	r2, r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	621a      	str	r2, [r3, #32]
 8005154:	e007      	b.n	8005166 <USB_EPStartXfer+0x542>
            }
            else
            {
              len = ep->xfer_len_db;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	22ac      	movs	r2, #172	@ 0xac
 800515c:	18ba      	adds	r2, r7, r2
 800515e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	643b      	str	r3, [r7, #64]	@ 0x40
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d16d      	bne.n	800524e <USB_EPStartXfer+0x62a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2250      	movs	r2, #80	@ 0x50
 800517a:	5a9b      	ldrh	r3, [r3, r2]
 800517c:	b29b      	uxth	r3, r3
 800517e:	001a      	movs	r2, r3
 8005180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005182:	189b      	adds	r3, r3, r2
 8005184:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	00da      	lsls	r2, r3, #3
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	4a6a      	ldr	r2, [pc, #424]	@ (800533c <USB_EPStartXfer+0x718>)
 8005192:	4694      	mov	ip, r2
 8005194:	4463      	add	r3, ip
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
 8005198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	059b      	lsls	r3, r3, #22
 80051a0:	0d9b      	lsrs	r3, r3, #22
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	23ac      	movs	r3, #172	@ 0xac
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d108      	bne.n	80051c4 <USB_EPStartXfer+0x5a0>
 80051b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4a5f      	ldr	r2, [pc, #380]	@ (8005338 <USB_EPStartXfer+0x714>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c0:	801a      	strh	r2, [r3, #0]
 80051c2:	e05f      	b.n	8005284 <USB_EPStartXfer+0x660>
 80051c4:	22ac      	movs	r2, #172	@ 0xac
 80051c6:	18bb      	adds	r3, r7, r2
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80051cc:	d81d      	bhi.n	800520a <USB_EPStartXfer+0x5e6>
 80051ce:	18bb      	adds	r3, r7, r2
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	219c      	movs	r1, #156	@ 0x9c
 80051d6:	1878      	adds	r0, r7, r1
 80051d8:	6003      	str	r3, [r0, #0]
 80051da:	18bb      	adds	r3, r7, r2
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	4013      	ands	r3, r2
 80051e2:	d004      	beq.n	80051ee <USB_EPStartXfer+0x5ca>
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	187a      	adds	r2, r7, r1
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	239c      	movs	r3, #156	@ 0x9c
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b29a      	uxth	r2, r3
 8005204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	e03c      	b.n	8005284 <USB_EPStartXfer+0x660>
 800520a:	22ac      	movs	r2, #172	@ 0xac
 800520c:	18bb      	adds	r3, r7, r2
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	219c      	movs	r1, #156	@ 0x9c
 8005214:	1878      	adds	r0, r7, r1
 8005216:	6003      	str	r3, [r0, #0]
 8005218:	18bb      	adds	r3, r7, r2
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	221f      	movs	r2, #31
 800521e:	4013      	ands	r3, r2
 8005220:	d104      	bne.n	800522c <USB_EPStartXfer+0x608>
 8005222:	187b      	adds	r3, r7, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	187a      	adds	r2, r7, r1
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29a      	uxth	r2, r3
 8005232:	239c      	movs	r3, #156	@ 0x9c
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	029b      	lsls	r3, r3, #10
 800523c:	b29b      	uxth	r3, r3
 800523e:	4313      	orrs	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	4a3d      	ldr	r2, [pc, #244]	@ (8005338 <USB_EPStartXfer+0x714>)
 8005244:	4313      	orrs	r3, r2
 8005246:	b29a      	uxth	r2, r3
 8005248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e01a      	b.n	8005284 <USB_EPStartXfer+0x660>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d116      	bne.n	8005284 <USB_EPStartXfer+0x660>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2250      	movs	r2, #80	@ 0x50
 800525a:	5a9b      	ldrh	r3, [r3, r2]
 800525c:	b29b      	uxth	r3, r3
 800525e:	001a      	movs	r2, r3
 8005260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005262:	189b      	adds	r3, r3, r2
 8005264:	643b      	str	r3, [r7, #64]	@ 0x40
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	00da      	lsls	r2, r3, #3
 800526c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800526e:	18d3      	adds	r3, r2, r3
 8005270:	4a32      	ldr	r2, [pc, #200]	@ (800533c <USB_EPStartXfer+0x718>)
 8005272:	4694      	mov	ip, r2
 8005274:	4463      	add	r3, ip
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005278:	23ac      	movs	r3, #172	@ 0xac
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b29a      	uxth	r2, r3
 8005280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005282:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005284:	2076      	movs	r0, #118	@ 0x76
 8005286:	183b      	adds	r3, r7, r0
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	8952      	ldrh	r2, [r2, #10]
 800528c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6959      	ldr	r1, [r3, #20]
 8005292:	23ac      	movs	r3, #172	@ 0xac
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	b29c      	uxth	r4, r3
 800529a:	183b      	adds	r3, r7, r0
 800529c:	881a      	ldrh	r2, [r3, #0]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	0023      	movs	r3, r4
 80052a2:	f000 fbdf 	bl	8005a64 <USB_WritePMA>
 80052a6:	e1ab      	b.n	8005600 <USB_EPStartXfer+0x9dc>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	20ac      	movs	r0, #172	@ 0xac
 80052ae:	183a      	adds	r2, r7, r0
 80052b0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29a      	uxth	r2, r3
 80052c0:	2462      	movs	r4, #98	@ 0x62
 80052c2:	193b      	adds	r3, r7, r4
 80052c4:	491e      	ldr	r1, [pc, #120]	@ (8005340 <USB_EPStartXfer+0x71c>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	193a      	adds	r2, r7, r4
 80052d6:	8812      	ldrh	r2, [r2, #0]
 80052d8:	491a      	ldr	r1, [pc, #104]	@ (8005344 <USB_EPStartXfer+0x720>)
 80052da:	430a      	orrs	r2, r1
 80052dc:	b292      	uxth	r2, r2
 80052de:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2250      	movs	r2, #80	@ 0x50
 80052e8:	5a9b      	ldrh	r3, [r3, r2]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	001a      	movs	r2, r3
 80052ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	00da      	lsls	r2, r3, #3
 80052fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052fc:	18d3      	adds	r3, r2, r3
 80052fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005334 <USB_EPStartXfer+0x710>)
 8005300:	4694      	mov	ip, r2
 8005302:	4463      	add	r3, ip
 8005304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005306:	183b      	adds	r3, r7, r0
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	b29a      	uxth	r2, r3
 800530c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800530e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005310:	2576      	movs	r5, #118	@ 0x76
 8005312:	197b      	adds	r3, r7, r5
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	8912      	ldrh	r2, [r2, #8]
 8005318:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6959      	ldr	r1, [r3, #20]
 800531e:	183b      	adds	r3, r7, r0
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b29c      	uxth	r4, r3
 8005324:	197b      	adds	r3, r7, r5
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	0023      	movs	r3, r4
 800532c:	f000 fb9a 	bl	8005a64 <USB_WritePMA>
 8005330:	e166      	b.n	8005600 <USB_EPStartXfer+0x9dc>
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	00000402 	.word	0x00000402
 8005338:	ffff8000 	.word	0xffff8000
 800533c:	00000406 	.word	0x00000406
 8005340:	ffff8e8f 	.word	0xffff8e8f
 8005344:	ffff8080 	.word	0xffff8080
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	21ac      	movs	r1, #172	@ 0xac
 800534e:	187b      	adds	r3, r7, r1
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	1ad2      	subs	r2, r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	18d3      	adds	r3, r2, r3
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	001a      	movs	r2, r3
 8005368:	2340      	movs	r3, #64	@ 0x40
 800536a:	4013      	ands	r3, r2
 800536c:	d100      	bne.n	8005370 <USB_EPStartXfer+0x74c>
 800536e:	e09f      	b.n	80054b0 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	673b      	str	r3, [r7, #112]	@ 0x70
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d16c      	bne.n	8005456 <USB_EPStartXfer+0x832>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2250      	movs	r2, #80	@ 0x50
 8005384:	5a9b      	ldrh	r3, [r3, r2]
 8005386:	b29b      	uxth	r3, r3
 8005388:	001a      	movs	r2, r3
 800538a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800538c:	189b      	adds	r3, r3, r2
 800538e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	00da      	lsls	r2, r3, #3
 8005396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	4ad2      	ldr	r2, [pc, #840]	@ (80056e4 <USB_EPStartXfer+0xac0>)
 800539c:	4694      	mov	ip, r2
 800539e:	4463      	add	r3, ip
 80053a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80053a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	059b      	lsls	r3, r3, #22
 80053aa:	0d9b      	lsrs	r3, r3, #22
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d108      	bne.n	80053cc <USB_EPStartXfer+0x7a8>
 80053ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4ac9      	ldr	r2, [pc, #804]	@ (80056e8 <USB_EPStartXfer+0xac4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e05f      	b.n	800548c <USB_EPStartXfer+0x868>
 80053cc:	22ac      	movs	r2, #172	@ 0xac
 80053ce:	18bb      	adds	r3, r7, r2
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80053d4:	d81d      	bhi.n	8005412 <USB_EPStartXfer+0x7ee>
 80053d6:	18bb      	adds	r3, r7, r2
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	2198      	movs	r1, #152	@ 0x98
 80053de:	1878      	adds	r0, r7, r1
 80053e0:	6003      	str	r3, [r0, #0]
 80053e2:	18bb      	adds	r3, r7, r2
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	4013      	ands	r3, r2
 80053ea:	d004      	beq.n	80053f6 <USB_EPStartXfer+0x7d2>
 80053ec:	187b      	adds	r3, r7, r1
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	187a      	adds	r2, r7, r1
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	2398      	movs	r3, #152	@ 0x98
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	b29b      	uxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b29a      	uxth	r2, r3
 800540c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	e03c      	b.n	800548c <USB_EPStartXfer+0x868>
 8005412:	22ac      	movs	r2, #172	@ 0xac
 8005414:	18bb      	adds	r3, r7, r2
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	2198      	movs	r1, #152	@ 0x98
 800541c:	1878      	adds	r0, r7, r1
 800541e:	6003      	str	r3, [r0, #0]
 8005420:	18bb      	adds	r3, r7, r2
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	221f      	movs	r2, #31
 8005426:	4013      	ands	r3, r2
 8005428:	d104      	bne.n	8005434 <USB_EPStartXfer+0x810>
 800542a:	187b      	adds	r3, r7, r1
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3b01      	subs	r3, #1
 8005430:	187a      	adds	r2, r7, r1
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29a      	uxth	r2, r3
 800543a:	2398      	movs	r3, #152	@ 0x98
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	029b      	lsls	r3, r3, #10
 8005444:	b29b      	uxth	r3, r3
 8005446:	4313      	orrs	r3, r2
 8005448:	b29b      	uxth	r3, r3
 800544a:	4aa7      	ldr	r2, [pc, #668]	@ (80056e8 <USB_EPStartXfer+0xac4>)
 800544c:	4313      	orrs	r3, r2
 800544e:	b29a      	uxth	r2, r3
 8005450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	e01a      	b.n	800548c <USB_EPStartXfer+0x868>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d116      	bne.n	800548c <USB_EPStartXfer+0x868>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2250      	movs	r2, #80	@ 0x50
 8005462:	5a9b      	ldrh	r3, [r3, r2]
 8005464:	b29b      	uxth	r3, r3
 8005466:	001a      	movs	r2, r3
 8005468:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800546a:	189b      	adds	r3, r3, r2
 800546c:	673b      	str	r3, [r7, #112]	@ 0x70
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	00da      	lsls	r2, r3, #3
 8005474:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	4a9a      	ldr	r2, [pc, #616]	@ (80056e4 <USB_EPStartXfer+0xac0>)
 800547a:	4694      	mov	ip, r2
 800547c:	4463      	add	r3, ip
 800547e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005480:	23ac      	movs	r3, #172	@ 0xac
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	b29a      	uxth	r2, r3
 8005488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800548c:	2076      	movs	r0, #118	@ 0x76
 800548e:	183b      	adds	r3, r7, r0
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	8952      	ldrh	r2, [r2, #10]
 8005494:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6959      	ldr	r1, [r3, #20]
 800549a:	23ac      	movs	r3, #172	@ 0xac
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	b29c      	uxth	r4, r3
 80054a2:	183b      	adds	r3, r7, r0
 80054a4:	881a      	ldrh	r2, [r3, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	0023      	movs	r3, r4
 80054aa:	f000 fadb 	bl	8005a64 <USB_WritePMA>
 80054ae:	e0a7      	b.n	8005600 <USB_EPStartXfer+0x9dc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d16d      	bne.n	8005594 <USB_EPStartXfer+0x970>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2250      	movs	r2, #80	@ 0x50
 80054c0:	5a9b      	ldrh	r3, [r3, r2]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	001a      	movs	r2, r3
 80054c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054c8:	189b      	adds	r3, r3, r2
 80054ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	00da      	lsls	r2, r3, #3
 80054d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054d4:	18d3      	adds	r3, r2, r3
 80054d6:	4a85      	ldr	r2, [pc, #532]	@ (80056ec <USB_EPStartXfer+0xac8>)
 80054d8:	4694      	mov	ip, r2
 80054da:	4463      	add	r3, ip
 80054dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	059b      	lsls	r3, r3, #22
 80054e6:	0d9b      	lsrs	r3, r3, #22
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	23ac      	movs	r3, #172	@ 0xac
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d108      	bne.n	800550a <USB_EPStartXfer+0x8e6>
 80054f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	4a7a      	ldr	r2, [pc, #488]	@ (80056e8 <USB_EPStartXfer+0xac4>)
 8005500:	4313      	orrs	r3, r2
 8005502:	b29a      	uxth	r2, r3
 8005504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	e069      	b.n	80055de <USB_EPStartXfer+0x9ba>
 800550a:	22ac      	movs	r2, #172	@ 0xac
 800550c:	18bb      	adds	r3, r7, r2
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b3e      	cmp	r3, #62	@ 0x3e
 8005512:	d81d      	bhi.n	8005550 <USB_EPStartXfer+0x92c>
 8005514:	18bb      	adds	r3, r7, r2
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	2194      	movs	r1, #148	@ 0x94
 800551c:	1878      	adds	r0, r7, r1
 800551e:	6003      	str	r3, [r0, #0]
 8005520:	18bb      	adds	r3, r7, r2
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d004      	beq.n	8005534 <USB_EPStartXfer+0x910>
 800552a:	187b      	adds	r3, r7, r1
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	187a      	adds	r2, r7, r1
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29a      	uxth	r2, r3
 800553a:	2394      	movs	r3, #148	@ 0x94
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	b29b      	uxth	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b29a      	uxth	r2, r3
 800554a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e046      	b.n	80055de <USB_EPStartXfer+0x9ba>
 8005550:	22ac      	movs	r2, #172	@ 0xac
 8005552:	18bb      	adds	r3, r7, r2
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2194      	movs	r1, #148	@ 0x94
 800555a:	1878      	adds	r0, r7, r1
 800555c:	6003      	str	r3, [r0, #0]
 800555e:	18bb      	adds	r3, r7, r2
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	221f      	movs	r2, #31
 8005564:	4013      	ands	r3, r2
 8005566:	d104      	bne.n	8005572 <USB_EPStartXfer+0x94e>
 8005568:	187b      	adds	r3, r7, r1
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	187a      	adds	r2, r7, r1
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29a      	uxth	r2, r3
 8005578:	2394      	movs	r3, #148	@ 0x94
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	b29b      	uxth	r3, r3
 8005584:	4313      	orrs	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	4a57      	ldr	r2, [pc, #348]	@ (80056e8 <USB_EPStartXfer+0xac4>)
 800558a:	4313      	orrs	r3, r2
 800558c:	b29a      	uxth	r2, r3
 800558e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e024      	b.n	80055de <USB_EPStartXfer+0x9ba>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d120      	bne.n	80055de <USB_EPStartXfer+0x9ba>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2184      	movs	r1, #132	@ 0x84
 80055a0:	187a      	adds	r2, r7, r1
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2250      	movs	r2, #80	@ 0x50
 80055a8:	5a9b      	ldrh	r3, [r3, r2]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	001a      	movs	r2, r3
 80055ae:	187b      	adds	r3, r7, r1
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	187a      	adds	r2, r7, r1
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	00da      	lsls	r2, r3, #3
 80055be:	187b      	adds	r3, r7, r1
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	4a49      	ldr	r2, [pc, #292]	@ (80056ec <USB_EPStartXfer+0xac8>)
 80055c6:	4694      	mov	ip, r2
 80055c8:	4463      	add	r3, ip
 80055ca:	2180      	movs	r1, #128	@ 0x80
 80055cc:	187a      	adds	r2, r7, r1
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	23ac      	movs	r3, #172	@ 0xac
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055de:	2076      	movs	r0, #118	@ 0x76
 80055e0:	183b      	adds	r3, r7, r0
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	8912      	ldrh	r2, [r2, #8]
 80055e6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6959      	ldr	r1, [r3, #20]
 80055ec:	23ac      	movs	r3, #172	@ 0xac
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	b29c      	uxth	r4, r3
 80055f4:	183b      	adds	r3, r7, r0
 80055f6:	881a      	ldrh	r2, [r3, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	0023      	movs	r3, r4
 80055fc:	f000 fa32 	bl	8005a64 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	18d3      	adds	r3, r2, r3
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29a      	uxth	r2, r3
 800560e:	200a      	movs	r0, #10
 8005610:	183b      	adds	r3, r7, r0
 8005612:	4937      	ldr	r1, [pc, #220]	@ (80056f0 <USB_EPStartXfer+0xacc>)
 8005614:	400a      	ands	r2, r1
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	183b      	adds	r3, r7, r0
 800561a:	183a      	adds	r2, r7, r0
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	2110      	movs	r1, #16
 8005620:	404a      	eors	r2, r1
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	183b      	adds	r3, r7, r0
 8005626:	183a      	adds	r2, r7, r0
 8005628:	8812      	ldrh	r2, [r2, #0]
 800562a:	2120      	movs	r1, #32
 800562c:	404a      	eors	r2, r1
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	18d3      	adds	r3, r2, r3
 800563a:	183a      	adds	r2, r7, r0
 800563c:	8812      	ldrh	r2, [r2, #0]
 800563e:	492d      	ldr	r1, [pc, #180]	@ (80056f4 <USB_EPStartXfer+0xad0>)
 8005640:	430a      	orrs	r2, r1
 8005642:	b292      	uxth	r2, r2
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e0cc      	b.n	80057e2 <USB_EPStartXfer+0xbbe>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	7b1b      	ldrb	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d159      	bne.n	8005704 <USB_EPStartXfer+0xae0>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11b      	bne.n	8005690 <USB_EPStartXfer+0xa6c>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	78db      	ldrb	r3, [r3, #3]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d117      	bne.n	8005690 <USB_EPStartXfer+0xa6c>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	18d3      	adds	r3, r2, r3
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29a      	uxth	r2, r3
 800566e:	208e      	movs	r0, #142	@ 0x8e
 8005670:	183b      	adds	r3, r7, r0
 8005672:	4921      	ldr	r1, [pc, #132]	@ (80056f8 <USB_EPStartXfer+0xad4>)
 8005674:	400a      	ands	r2, r1
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	18d3      	adds	r3, r2, r3
 8005682:	183a      	adds	r2, r7, r0
 8005684:	8812      	ldrh	r2, [r2, #0]
 8005686:	491d      	ldr	r1, [pc, #116]	@ (80056fc <USB_EPStartXfer+0xad8>)
 8005688:	430a      	orrs	r2, r1
 800568a:	b292      	uxth	r2, r2
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e016      	b.n	80056be <USB_EPStartXfer+0xa9a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	18d3      	adds	r3, r2, r3
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29a      	uxth	r2, r3
 800569e:	208c      	movs	r0, #140	@ 0x8c
 80056a0:	183b      	adds	r3, r7, r0
 80056a2:	4917      	ldr	r1, [pc, #92]	@ (8005700 <USB_EPStartXfer+0xadc>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	18d3      	adds	r3, r2, r3
 80056b2:	183a      	adds	r2, r7, r0
 80056b4:	8812      	ldrh	r2, [r2, #0]
 80056b6:	490f      	ldr	r1, [pc, #60]	@ (80056f4 <USB_EPStartXfer+0xad0>)
 80056b8:	430a      	orrs	r2, r1
 80056ba:	b292      	uxth	r2, r2
 80056bc:	801a      	strh	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d907      	bls.n	80056da <USB_EPStartXfer+0xab6>
      {
        ep->xfer_len -= ep->maxpacket;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	619a      	str	r2, [r3, #24]
 80056d8:	e05e      	b.n	8005798 <USB_EPStartXfer+0xb74>
      }
      else
      {
        ep->xfer_len = 0U;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2200      	movs	r2, #0
 80056de:	619a      	str	r2, [r3, #24]
 80056e0:	e05a      	b.n	8005798 <USB_EPStartXfer+0xb74>
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	00000406 	.word	0x00000406
 80056e8:	ffff8000 	.word	0xffff8000
 80056ec:	00000402 	.word	0x00000402
 80056f0:	ffff8fbf 	.word	0xffff8fbf
 80056f4:	ffff8080 	.word	0xffff8080
 80056f8:	ffff8f8f 	.word	0xffff8f8f
 80056fc:	ffff8180 	.word	0xffff8180
 8005700:	ffff8e8f 	.word	0xffff8e8f
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	78db      	ldrb	r3, [r3, #3]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d13b      	bne.n	8005784 <USB_EPStartXfer+0xb60>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d041      	beq.n	8005798 <USB_EPStartXfer+0xb74>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	18d2      	adds	r2, r2, r3
 800571e:	2192      	movs	r1, #146	@ 0x92
 8005720:	187b      	adds	r3, r7, r1
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005726:	187b      	adds	r3, r7, r1
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	2380      	movs	r3, #128	@ 0x80
 800572c:	01db      	lsls	r3, r3, #7
 800572e:	4013      	ands	r3, r2
 8005730:	d004      	beq.n	800573c <USB_EPStartXfer+0xb18>
 8005732:	187b      	adds	r3, r7, r1
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	2240      	movs	r2, #64	@ 0x40
 8005738:	4013      	ands	r3, r2
 800573a:	d10b      	bne.n	8005754 <USB_EPStartXfer+0xb30>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800573c:	2192      	movs	r1, #146	@ 0x92
 800573e:	187b      	adds	r3, r7, r1
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	2380      	movs	r3, #128	@ 0x80
 8005744:	01db      	lsls	r3, r3, #7
 8005746:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005748:	d126      	bne.n	8005798 <USB_EPStartXfer+0xb74>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800574a:	187b      	adds	r3, r7, r1
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	2240      	movs	r2, #64	@ 0x40
 8005750:	4013      	ands	r3, r2
 8005752:	d121      	bne.n	8005798 <USB_EPStartXfer+0xb74>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	18d3      	adds	r3, r2, r3
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29a      	uxth	r2, r3
 8005762:	2090      	movs	r0, #144	@ 0x90
 8005764:	183b      	adds	r3, r7, r0
 8005766:	4921      	ldr	r1, [pc, #132]	@ (80057ec <USB_EPStartXfer+0xbc8>)
 8005768:	400a      	ands	r2, r1
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	183a      	adds	r2, r7, r0
 8005778:	8812      	ldrh	r2, [r2, #0]
 800577a:	491d      	ldr	r1, [pc, #116]	@ (80057f0 <USB_EPStartXfer+0xbcc>)
 800577c:	430a      	orrs	r2, r1
 800577e:	b292      	uxth	r2, r2
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	e009      	b.n	8005798 <USB_EPStartXfer+0xb74>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	78db      	ldrb	r3, [r3, #3]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d103      	bne.n	8005794 <USB_EPStartXfer+0xb70>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]
 8005792:	e001      	b.n	8005798 <USB_EPStartXfer+0xb74>
      }
      else
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e025      	b.n	80057e4 <USB_EPStartXfer+0xbc0>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	18d3      	adds	r3, r2, r3
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	208a      	movs	r0, #138	@ 0x8a
 80057a8:	183b      	adds	r3, r7, r0
 80057aa:	4912      	ldr	r1, [pc, #72]	@ (80057f4 <USB_EPStartXfer+0xbd0>)
 80057ac:	400a      	ands	r2, r1
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	183b      	adds	r3, r7, r0
 80057b2:	183a      	adds	r2, r7, r0
 80057b4:	8812      	ldrh	r2, [r2, #0]
 80057b6:	2180      	movs	r1, #128	@ 0x80
 80057b8:	0149      	lsls	r1, r1, #5
 80057ba:	404a      	eors	r2, r1
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	183b      	adds	r3, r7, r0
 80057c0:	183a      	adds	r2, r7, r0
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	2180      	movs	r1, #128	@ 0x80
 80057c6:	0189      	lsls	r1, r1, #6
 80057c8:	404a      	eors	r2, r1
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	183a      	adds	r2, r7, r0
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	4907      	ldr	r1, [pc, #28]	@ (80057f8 <USB_EPStartXfer+0xbd4>)
 80057dc:	430a      	orrs	r2, r1
 80057de:	b292      	uxth	r2, r2
 80057e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b02c      	add	sp, #176	@ 0xb0
 80057ea:	bdb0      	pop	{r4, r5, r7, pc}
 80057ec:	ffff8f8f 	.word	0xffff8f8f
 80057f0:	ffff80c0 	.word	0xffff80c0
 80057f4:	ffffbf8f 	.word	0xffffbf8f
 80057f8:	ffff8080 	.word	0xffff8080

080057fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01d      	beq.n	800584a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	18d3      	adds	r3, r2, r3
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29a      	uxth	r2, r3
 800581c:	200c      	movs	r0, #12
 800581e:	183b      	adds	r3, r7, r0
 8005820:	491b      	ldr	r1, [pc, #108]	@ (8005890 <USB_EPSetStall+0x94>)
 8005822:	400a      	ands	r2, r1
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	183b      	adds	r3, r7, r0
 8005828:	183a      	adds	r2, r7, r0
 800582a:	8812      	ldrh	r2, [r2, #0]
 800582c:	2110      	movs	r1, #16
 800582e:	404a      	eors	r2, r1
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	18d3      	adds	r3, r2, r3
 800583c:	183a      	adds	r2, r7, r0
 800583e:	8812      	ldrh	r2, [r2, #0]
 8005840:	4914      	ldr	r1, [pc, #80]	@ (8005894 <USB_EPSetStall+0x98>)
 8005842:	430a      	orrs	r2, r1
 8005844:	b292      	uxth	r2, r2
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	e01d      	b.n	8005886 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	18d3      	adds	r3, r2, r3
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29a      	uxth	r2, r3
 8005858:	200e      	movs	r0, #14
 800585a:	183b      	adds	r3, r7, r0
 800585c:	490e      	ldr	r1, [pc, #56]	@ (8005898 <USB_EPSetStall+0x9c>)
 800585e:	400a      	ands	r2, r1
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	183b      	adds	r3, r7, r0
 8005864:	183a      	adds	r2, r7, r0
 8005866:	8812      	ldrh	r2, [r2, #0]
 8005868:	2180      	movs	r1, #128	@ 0x80
 800586a:	0149      	lsls	r1, r1, #5
 800586c:	404a      	eors	r2, r1
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	183a      	adds	r2, r7, r0
 800587c:	8812      	ldrh	r2, [r2, #0]
 800587e:	4905      	ldr	r1, [pc, #20]	@ (8005894 <USB_EPSetStall+0x98>)
 8005880:	430a      	orrs	r2, r1
 8005882:	b292      	uxth	r2, r2
 8005884:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b004      	add	sp, #16
 800588e:	bd80      	pop	{r7, pc}
 8005890:	ffff8fbf 	.word	0xffff8fbf
 8005894:	ffff8080 	.word	0xffff8080
 8005898:	ffffbf8f 	.word	0xffffbf8f

0800589c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d046      	beq.n	800593c <USB_EPClearStall+0xa0>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	18d2      	adds	r2, r2, r3
 80058b8:	2110      	movs	r1, #16
 80058ba:	187b      	adds	r3, r7, r1
 80058bc:	8812      	ldrh	r2, [r2, #0]
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	187b      	adds	r3, r7, r1
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	2240      	movs	r2, #64	@ 0x40
 80058c6:	4013      	ands	r3, r2
 80058c8:	d016      	beq.n	80058f8 <USB_EPClearStall+0x5c>
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	200e      	movs	r0, #14
 80058da:	183b      	adds	r3, r7, r0
 80058dc:	493f      	ldr	r1, [pc, #252]	@ (80059dc <USB_EPClearStall+0x140>)
 80058de:	400a      	ands	r2, r1
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	18d3      	adds	r3, r2, r3
 80058ec:	183a      	adds	r2, r7, r0
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	493b      	ldr	r1, [pc, #236]	@ (80059e0 <USB_EPClearStall+0x144>)
 80058f2:	430a      	orrs	r2, r1
 80058f4:	b292      	uxth	r2, r2
 80058f6:	801a      	strh	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	78db      	ldrb	r3, [r3, #3]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d068      	beq.n	80059d2 <USB_EPClearStall+0x136>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	18d3      	adds	r3, r2, r3
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29a      	uxth	r2, r3
 800590e:	200c      	movs	r0, #12
 8005910:	183b      	adds	r3, r7, r0
 8005912:	4934      	ldr	r1, [pc, #208]	@ (80059e4 <USB_EPClearStall+0x148>)
 8005914:	400a      	ands	r2, r1
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	183b      	adds	r3, r7, r0
 800591a:	183a      	adds	r2, r7, r0
 800591c:	8812      	ldrh	r2, [r2, #0]
 800591e:	2120      	movs	r1, #32
 8005920:	404a      	eors	r2, r1
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	18d3      	adds	r3, r2, r3
 800592e:	183a      	adds	r2, r7, r0
 8005930:	8812      	ldrh	r2, [r2, #0]
 8005932:	492d      	ldr	r1, [pc, #180]	@ (80059e8 <USB_EPClearStall+0x14c>)
 8005934:	430a      	orrs	r2, r1
 8005936:	b292      	uxth	r2, r2
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	e04a      	b.n	80059d2 <USB_EPClearStall+0x136>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	18d2      	adds	r2, r2, r3
 8005946:	2116      	movs	r1, #22
 8005948:	187b      	adds	r3, r7, r1
 800594a:	8812      	ldrh	r2, [r2, #0]
 800594c:	801a      	strh	r2, [r3, #0]
 800594e:	187b      	adds	r3, r7, r1
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	@ 0x80
 8005954:	01db      	lsls	r3, r3, #7
 8005956:	4013      	ands	r3, r2
 8005958:	d016      	beq.n	8005988 <USB_EPClearStall+0xec>
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	18d3      	adds	r3, r2, r3
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29a      	uxth	r2, r3
 8005968:	2014      	movs	r0, #20
 800596a:	183b      	adds	r3, r7, r0
 800596c:	491b      	ldr	r1, [pc, #108]	@ (80059dc <USB_EPClearStall+0x140>)
 800596e:	400a      	ands	r2, r1
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	18d3      	adds	r3, r2, r3
 800597c:	183a      	adds	r2, r7, r0
 800597e:	8812      	ldrh	r2, [r2, #0]
 8005980:	491a      	ldr	r1, [pc, #104]	@ (80059ec <USB_EPClearStall+0x150>)
 8005982:	430a      	orrs	r2, r1
 8005984:	b292      	uxth	r2, r2
 8005986:	801a      	strh	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	18d3      	adds	r3, r2, r3
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29a      	uxth	r2, r3
 8005996:	2012      	movs	r0, #18
 8005998:	183b      	adds	r3, r7, r0
 800599a:	4915      	ldr	r1, [pc, #84]	@ (80059f0 <USB_EPClearStall+0x154>)
 800599c:	400a      	ands	r2, r1
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	183b      	adds	r3, r7, r0
 80059a2:	183a      	adds	r2, r7, r0
 80059a4:	8812      	ldrh	r2, [r2, #0]
 80059a6:	2180      	movs	r1, #128	@ 0x80
 80059a8:	0149      	lsls	r1, r1, #5
 80059aa:	404a      	eors	r2, r1
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	183b      	adds	r3, r7, r0
 80059b0:	183a      	adds	r2, r7, r0
 80059b2:	8812      	ldrh	r2, [r2, #0]
 80059b4:	2180      	movs	r1, #128	@ 0x80
 80059b6:	0189      	lsls	r1, r1, #6
 80059b8:	404a      	eors	r2, r1
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	18d3      	adds	r3, r2, r3
 80059c6:	183a      	adds	r2, r7, r0
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	4907      	ldr	r1, [pc, #28]	@ (80059e8 <USB_EPClearStall+0x14c>)
 80059cc:	430a      	orrs	r2, r1
 80059ce:	b292      	uxth	r2, r2
 80059d0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b006      	add	sp, #24
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	ffff8f8f 	.word	0xffff8f8f
 80059e0:	ffff80c0 	.word	0xffff80c0
 80059e4:	ffff8fbf 	.word	0xffff8fbf
 80059e8:	ffff8080 	.word	0xffff8080
 80059ec:	ffffc080 	.word	0xffffc080
 80059f0:	ffffbf8f 	.word	0xffffbf8f

080059f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	000a      	movs	r2, r1
 80059fe:	1cfb      	adds	r3, r7, #3
 8005a00:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005a02:	1cfb      	adds	r3, r7, #3
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	224c      	movs	r2, #76	@ 0x4c
 8005a0e:	2180      	movs	r1, #128	@ 0x80
 8005a10:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	0018      	movs	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2258      	movs	r2, #88	@ 0x58
 8005a28:	5a9b      	ldrh	r3, [r3, r2]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4a05      	ldr	r2, [pc, #20]	@ (8005a44 <USB_DevConnect+0x28>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b299      	uxth	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2258      	movs	r2, #88	@ 0x58
 8005a36:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b002      	add	sp, #8
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	ffff8000 	.word	0xffff8000

08005a48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2244      	movs	r2, #68	@ 0x44
 8005a54:	5a9b      	ldrh	r3, [r3, r2]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
}
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b004      	add	sp, #16
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	@ 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	0019      	movs	r1, r3
 8005a70:	1dbb      	adds	r3, r7, #6
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	1c0a      	adds	r2, r1, #0
 8005a78:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a8c:	1dbb      	adds	r3, r7, #6
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	18d3      	adds	r3, r2, r3
 8005a94:	2280      	movs	r2, #128	@ 0x80
 8005a96:	00d2      	lsls	r2, r2, #3
 8005a98:	4694      	mov	ip, r2
 8005a9a:	4463      	add	r3, ip
 8005a9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa2:	e021      	b.n	8005ae8 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	781a      	ldrb	r2, [r3, #0]
 8005aa8:	2112      	movs	r1, #18
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b21b      	sxth	r3, r3
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	b21a      	sxth	r2, r3
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	2000      	movs	r0, #0
 8005abe:	5e1b      	ldrsh	r3, [r3, r0]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b21a      	sxth	r2, r3
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	187a      	adds	r2, r7, r1
 8005acc:	8812      	ldrh	r2, [r2, #0]
 8005ace:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1da      	bne.n	8005aa4 <USB_WritePMA+0x40>
  }
}
 8005aee:	46c0      	nop			@ (mov r8, r8)
 8005af0:	46c0      	nop			@ (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b00a      	add	sp, #40	@ 0x28
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	@ 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	0019      	movs	r1, r3
 8005b04:	1dbb      	adds	r3, r7, #6
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	1c0a      	adds	r2, r1, #0
 8005b0c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b20:	1dbb      	adds	r3, r7, #6
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	2280      	movs	r2, #128	@ 0x80
 8005b2a:	00d2      	lsls	r2, r2, #3
 8005b2c:	4694      	mov	ip, r2
 8005b2e:	4463      	add	r3, ip
 8005b30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b36:	e018      	b.n	8005b6a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	3302      	adds	r3, #2
 8005b44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	3b01      	subs	r3, #1
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e3      	bne.n	8005b38 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	2201      	movs	r2, #1
 8005b76:	4013      	ands	r3, r2
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	701a      	strb	r2, [r3, #0]
  }
}
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b00a      	add	sp, #40	@ 0x28
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	000a      	movs	r2, r1
 8005ba0:	1cfb      	adds	r3, r7, #3
 8005ba2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005ba4:	230f      	movs	r3, #15
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7c1b      	ldrb	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bb4:	2380      	movs	r3, #128	@ 0x80
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	2181      	movs	r1, #129	@ 0x81
 8005bbe:	f002 f81e 	bl	8007bfe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bc8:	2380      	movs	r3, #128	@ 0x80
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	f002 f814 	bl	8007bfe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	23b6      	movs	r3, #182	@ 0xb6
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	2101      	movs	r1, #1
 8005bde:	50d1      	str	r1, [r2, r3]
 8005be0:	e013      	b.n	8005c0a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	2340      	movs	r3, #64	@ 0x40
 8005be6:	2202      	movs	r2, #2
 8005be8:	2181      	movs	r1, #129	@ 0x81
 8005bea:	f002 f808 	bl	8007bfe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	2340      	movs	r3, #64	@ 0x40
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	f001 ffff 	bl	8007bfe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	23b6      	movs	r3, #182	@ 0xb6
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	2101      	movs	r1, #1
 8005c08:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	2203      	movs	r2, #3
 8005c10:	2182      	movs	r1, #130	@ 0x82
 8005c12:	f001 fff4 	bl	8007bfe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c1c:	2387      	movs	r3, #135	@ 0x87
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	0018      	movs	r0, r3
 8005c22:	f002 f983 	bl	8007f2c <USBD_static_malloc>
 8005c26:	0001      	movs	r1, r0
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	23ae      	movs	r3, #174	@ 0xae
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	23ae      	movs	r3, #174	@ 0xae
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	58d3      	ldr	r3, [r2, r3]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005c3c:	230f      	movs	r3, #15
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e02c      	b.n	8005ca0 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	23ae      	movs	r3, #174	@ 0xae
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	58d3      	ldr	r3, [r2, r3]
 8005c4e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	23af      	movs	r3, #175	@ 0xaf
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	58d3      	ldr	r3, [r2, r3]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	2385      	movs	r3, #133	@ 0x85
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	2100      	movs	r1, #0
 8005c64:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	2386      	movs	r3, #134	@ 0x86
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7c1b      	ldrb	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	2381      	movs	r3, #129	@ 0x81
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	58d2      	ldr	r2, [r2, r3]
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	2101      	movs	r1, #1
 8005c88:	f002 f903 	bl	8007e92 <USBD_LL_PrepareReceive>
 8005c8c:	e008      	b.n	8005ca0 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	2381      	movs	r3, #129	@ 0x81
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	58d2      	ldr	r2, [r2, r3]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	2340      	movs	r3, #64	@ 0x40
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	f002 f8f9 	bl	8007e92 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005ca0:	230f      	movs	r3, #15
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	781b      	ldrb	r3, [r3, #0]
}
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b004      	add	sp, #16
 8005cac:	bd80      	pop	{r7, pc}

08005cae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	000a      	movs	r2, r1
 8005cb8:	1cfb      	adds	r3, r7, #3
 8005cba:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2181      	movs	r1, #129	@ 0x81
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f001 ffcf 	bl	8007c6c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f001 ffc7 	bl	8007c6c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	23b6      	movs	r3, #182	@ 0xb6
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2182      	movs	r1, #130	@ 0x82
 8005cec:	0018      	movs	r0, r3
 8005cee:	f001 ffbd 	bl	8007c6c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	23ae      	movs	r3, #174	@ 0xae
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	58d3      	ldr	r3, [r2, r3]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d011      	beq.n	8005d28 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	23af      	movs	r3, #175	@ 0xaf
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	58d3      	ldr	r3, [r2, r3]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	23ae      	movs	r3, #174	@ 0xae
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	58d3      	ldr	r3, [r2, r3]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f002 f913 	bl	8007f44 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	23ae      	movs	r3, #174	@ 0xae
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	2100      	movs	r1, #0
 8005d26:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005d28:	230f      	movs	r3, #15
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b004      	add	sp, #16
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	23ae      	movs	r3, #174	@ 0xae
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	58d3      	ldr	r3, [r2, r3]
 8005d4a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005d4c:	230f      	movs	r3, #15
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005d54:	230c      	movs	r3, #12
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	2200      	movs	r2, #0
 8005d5a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005d5c:	2317      	movs	r3, #23
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	001a      	movs	r2, r3
 8005d6a:	2360      	movs	r3, #96	@ 0x60
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d03d      	beq.n	8005dec <USBD_CDC_Setup+0xb4>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d000      	beq.n	8005d76 <USBD_CDC_Setup+0x3e>
 8005d74:	e094      	b.n	8005ea0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	88db      	ldrh	r3, [r3, #6]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02b      	beq.n	8005dd6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	da12      	bge.n	8005dae <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	23af      	movs	r3, #175	@ 0xaf
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	58d3      	ldr	r3, [r2, r3]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005d96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	88d2      	ldrh	r2, [r2, #6]
 8005d9c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005d9e:	6939      	ldr	r1, [r7, #16]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	88da      	ldrh	r2, [r3, #6]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f001 fb79 	bl	800749e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005dac:	e083      	b.n	8005eb6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	7859      	ldrb	r1, [r3, #1]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	2380      	movs	r3, #128	@ 0x80
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	88db      	ldrh	r3, [r3, #6]
 8005dbe:	b2d9      	uxtb	r1, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4a40      	ldr	r2, [pc, #256]	@ (8005ec4 <USBD_CDC_Setup+0x18c>)
 8005dc4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005dc6:	6939      	ldr	r1, [r7, #16]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	88da      	ldrh	r2, [r3, #6]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f001 fb98 	bl	8007504 <USBD_CtlPrepareRx>
      break;
 8005dd4:	e06f      	b.n	8005eb6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	23af      	movs	r3, #175	@ 0xaf
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	58d3      	ldr	r3, [r2, r3]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	7850      	ldrb	r0, [r2, #1]
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	4798      	blx	r3
      break;
 8005dea:	e064      	b.n	8005eb6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b0b      	cmp	r3, #11
 8005df2:	d037      	beq.n	8005e64 <USBD_CDC_Setup+0x12c>
 8005df4:	dc47      	bgt.n	8005e86 <USBD_CDC_Setup+0x14e>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <USBD_CDC_Setup+0xc8>
 8005dfa:	2b0a      	cmp	r3, #10
 8005dfc:	d019      	beq.n	8005e32 <USBD_CDC_Setup+0xfa>
 8005dfe:	e042      	b.n	8005e86 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	23a7      	movs	r3, #167	@ 0xa7
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d107      	bne.n	8005e1c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	18f9      	adds	r1, r7, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f001 fb42 	bl	800749e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e1a:	e040      	b.n	8005e9e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	0011      	movs	r1, r2
 8005e22:	0018      	movs	r0, r3
 8005e24:	f001 fabd 	bl	80073a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e28:	2317      	movs	r3, #23
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	701a      	strb	r2, [r3, #0]
          break;
 8005e30:	e035      	b.n	8005e9e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	23a7      	movs	r3, #167	@ 0xa7
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	5cd3      	ldrb	r3, [r2, r3]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d107      	bne.n	8005e4e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e3e:	230f      	movs	r3, #15
 8005e40:	18f9      	adds	r1, r7, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	0018      	movs	r0, r3
 8005e48:	f001 fb29 	bl	800749e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e4c:	e027      	b.n	8005e9e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	0011      	movs	r1, r2
 8005e54:	0018      	movs	r0, r3
 8005e56:	f001 faa4 	bl	80073a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e5a:	2317      	movs	r3, #23
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	2202      	movs	r2, #2
 8005e60:	701a      	strb	r2, [r3, #0]
          break;
 8005e62:	e01c      	b.n	8005e9e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	23a7      	movs	r3, #167	@ 0xa7
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	5cd3      	ldrb	r3, [r2, r3]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d015      	beq.n	8005e9c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0011      	movs	r1, r2
 8005e76:	0018      	movs	r0, r3
 8005e78:	f001 fa93 	bl	80073a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e7c:	2317      	movs	r3, #23
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	2202      	movs	r2, #2
 8005e82:	701a      	strb	r2, [r3, #0]
          }
          break;
 8005e84:	e00a      	b.n	8005e9c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0011      	movs	r1, r2
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f001 fa88 	bl	80073a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e92:	2317      	movs	r3, #23
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	2202      	movs	r2, #2
 8005e98:	701a      	strb	r2, [r3, #0]
          break;
 8005e9a:	e000      	b.n	8005e9e <USBD_CDC_Setup+0x166>
          break;
 8005e9c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005e9e:	e00a      	b.n	8005eb6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0011      	movs	r1, r2
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f001 fa7b 	bl	80073a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005eac:	2317      	movs	r3, #23
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	701a      	strb	r2, [r3, #0]
      break;
 8005eb4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005eb6:	2317      	movs	r3, #23
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781b      	ldrb	r3, [r3, #0]
}
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b006      	add	sp, #24
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00000201 	.word	0x00000201

08005ec8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	000a      	movs	r2, r1
 8005ed2:	1cfb      	adds	r3, r7, #3
 8005ed4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	23ae      	movs	r3, #174	@ 0xae
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	58d3      	ldr	r3, [r2, r3]
 8005ede:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	23b0      	movs	r3, #176	@ 0xb0
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	58d3      	ldr	r3, [r2, r3]
 8005ee8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	23ae      	movs	r3, #174	@ 0xae
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	58d3      	ldr	r3, [r2, r3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d03e      	beq.n	8005f74 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ef6:	1cfb      	adds	r3, r7, #3
 8005ef8:	781a      	ldrb	r2, [r3, #0]
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	0013      	movs	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	189b      	adds	r3, r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	18cb      	adds	r3, r1, r3
 8005f06:	331c      	adds	r3, #28
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d02b      	beq.n	8005f66 <USBD_CDC_DataIn+0x9e>
 8005f0e:	1cfb      	adds	r3, r7, #3
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	0013      	movs	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	189b      	adds	r3, r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	18cb      	adds	r3, r1, r3
 8005f1e:	331c      	adds	r3, #28
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	1cfb      	adds	r3, r7, #3
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	0013      	movs	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	189b      	adds	r3, r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	18cb      	adds	r3, r1, r3
 8005f32:	3320      	adds	r3, #32
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	0019      	movs	r1, r3
 8005f38:	f7fa f96c 	bl	8000214 <__aeabi_uidivmod>
 8005f3c:	1e0b      	subs	r3, r1, #0
 8005f3e:	d112      	bne.n	8005f66 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005f40:	1cfb      	adds	r3, r7, #3
 8005f42:	781a      	ldrb	r2, [r3, #0]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	0013      	movs	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	189b      	adds	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	18cb      	adds	r3, r1, r3
 8005f50:	331c      	adds	r3, #28
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f56:	1cfb      	adds	r3, r7, #3
 8005f58:	7819      	ldrb	r1, [r3, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f001 ff60 	bl	8007e24 <USBD_LL_Transmit>
 8005f64:	e004      	b.n	8005f70 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	2385      	movs	r3, #133	@ 0x85
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b004      	add	sp, #16
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	000a      	movs	r2, r1
 8005f88:	1cfb      	adds	r3, r7, #3
 8005f8a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	23ae      	movs	r3, #174	@ 0xae
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	58d3      	ldr	r3, [r2, r3]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f96:	1cfb      	adds	r3, r7, #3
 8005f98:	781a      	ldrb	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	0011      	movs	r1, r2
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f001 ffae 	bl	8007f00 <USBD_LL_GetRxDataSize>
 8005fa4:	0001      	movs	r1, r0
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	2383      	movs	r3, #131	@ 0x83
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	23ae      	movs	r3, #174	@ 0xae
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	58d3      	ldr	r3, [r2, r3]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d011      	beq.n	8005fde <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	23af      	movs	r3, #175	@ 0xaf
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	58d3      	ldr	r3, [r2, r3]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	2381      	movs	r3, #129	@ 0x81
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	58c8      	ldr	r0, [r1, r3]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2183      	movs	r1, #131	@ 0x83
 8005fd0:	0089      	lsls	r1, r1, #2
 8005fd2:	468c      	mov	ip, r1
 8005fd4:	4463      	add	r3, ip
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	4790      	blx	r2

    return USBD_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b004      	add	sp, #16
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	23ae      	movs	r3, #174	@ 0xae
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	58d3      	ldr	r3, [r2, r3]
 8005ff8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	23af      	movs	r3, #175	@ 0xaf
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	58d3      	ldr	r3, [r2, r3]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d018      	beq.n	8006038 <USBD_CDC_EP0_RxReady+0x50>
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	2380      	movs	r3, #128	@ 0x80
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	5cd3      	ldrb	r3, [r2, r3]
 800600e:	2bff      	cmp	r3, #255	@ 0xff
 8006010:	d012      	beq.n	8006038 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	23af      	movs	r3, #175	@ 0xaf
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	58d3      	ldr	r3, [r2, r3]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	68f9      	ldr	r1, [r7, #12]
 800601e:	2280      	movs	r2, #128	@ 0x80
 8006020:	0092      	lsls	r2, r2, #2
 8006022:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8006024:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4c06      	ldr	r4, [pc, #24]	@ (8006044 <USBD_CDC_EP0_RxReady+0x5c>)
 800602a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800602c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	2380      	movs	r3, #128	@ 0x80
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	21ff      	movs	r1, #255	@ 0xff
 8006036:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	0018      	movs	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	b005      	add	sp, #20
 8006040:	bd90      	pop	{r4, r7, pc}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	00000201 	.word	0x00000201

08006048 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2243      	movs	r2, #67	@ 0x43
 8006054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006056:	4b02      	ldr	r3, [pc, #8]	@ (8006060 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8006058:	0018      	movs	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	b002      	add	sp, #8
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000094 	.word	0x20000094

08006064 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2243      	movs	r2, #67	@ 0x43
 8006070:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006072:	4b02      	ldr	r3, [pc, #8]	@ (800607c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000050 	.word	0x20000050

08006080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2243      	movs	r2, #67	@ 0x43
 800608c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800608e:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	b002      	add	sp, #8
 8006096:	bd80      	pop	{r7, pc}
 8006098:	200000d8 	.word	0x200000d8

0800609c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	220a      	movs	r2, #10
 80060a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80060aa:	4b02      	ldr	r3, [pc, #8]	@ (80060b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80060ac:	0018      	movs	r0, r3
 80060ae:	46bd      	mov	sp, r7
 80060b0:	b002      	add	sp, #8
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	2000000c 	.word	0x2000000c

080060b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80060c2:	200f      	movs	r0, #15
 80060c4:	183b      	adds	r3, r7, r0
 80060c6:	2202      	movs	r2, #2
 80060c8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	23af      	movs	r3, #175	@ 0xaf
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80060da:	183b      	adds	r3, r7, r0
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80060e0:	230f      	movs	r3, #15
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	781b      	ldrb	r3, [r3, #0]
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b004      	add	sp, #16
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	1dbb      	adds	r3, r7, #6
 80060fa:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	23ae      	movs	r3, #174	@ 0xae
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	58d3      	ldr	r3, [r2, r3]
 8006104:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	2382      	movs	r3, #130	@ 0x82
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8006110:	1dbb      	adds	r3, r7, #6
 8006112:	8819      	ldrh	r1, [r3, #0]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	2384      	movs	r3, #132	@ 0x84
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b006      	add	sp, #24
 8006124:	bd80      	pop	{r7, pc}

08006126 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	23ae      	movs	r3, #174	@ 0xae
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	58d3      	ldr	r3, [r2, r3]
 8006138:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	2381      	movs	r3, #129	@ 0x81
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	0018      	movs	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	b004      	add	sp, #16
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	23ae      	movs	r3, #174	@ 0xae
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	58d3      	ldr	r3, [r2, r3]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	23ae      	movs	r3, #174	@ 0xae
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	58d3      	ldr	r3, [r2, r3]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d019      	beq.n	80061a0 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	7c1b      	ldrb	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	2381      	movs	r3, #129	@ 0x81
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	58d2      	ldr	r2, [r2, r3]
 800617c:	2380      	movs	r3, #128	@ 0x80
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	2101      	movs	r1, #1
 8006184:	f001 fe85 	bl	8007e92 <USBD_LL_PrepareReceive>
 8006188:	e008      	b.n	800619c <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	2381      	movs	r3, #129	@ 0x81
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	58d2      	ldr	r2, [r2, r3]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	2340      	movs	r3, #64	@ 0x40
 8006196:	2101      	movs	r1, #1
 8006198:	f001 fe7b 	bl	8007e92 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	e000      	b.n	80061a2 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80061a0:	2302      	movs	r3, #2
  }
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b004      	add	sp, #16
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	1dfb      	adds	r3, r7, #7
 80061b6:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80061be:	2302      	movs	r3, #2
 80061c0:	e020      	b.n	8006204 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	23ad      	movs	r3, #173	@ 0xad
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	58d3      	ldr	r3, [r2, r3]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d004      	beq.n	80061d8 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	23ad      	movs	r3, #173	@ 0xad
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	2100      	movs	r1, #0
 80061d6:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	23ac      	movs	r3, #172	@ 0xac
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	23a7      	movs	r3, #167	@ 0xa7
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	2101      	movs	r1, #1
 80061f0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1dfa      	adds	r2, r7, #7
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f001 fc75 	bl	8007aec <USBD_LL_Init>

  return USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b004      	add	sp, #16
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006216:	200f      	movs	r0, #15
 8006218:	183b      	adds	r3, r7, r0
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	23ad      	movs	r3, #173	@ 0xad
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800622e:	183b      	adds	r3, r7, r0
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e003      	b.n	800623e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006236:	230f      	movs	r3, #15
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	2202      	movs	r2, #2
 800623c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800623e:	230f      	movs	r3, #15
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	781b      	ldrb	r3, [r3, #0]
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b004      	add	sp, #16
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	0018      	movs	r0, r3
 8006258:	f001 fcac 	bl	8007bb4 <USBD_LL_Start>

  return USBD_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b002      	add	sp, #8
 8006264:	bd80      	pop	{r7, pc}

08006266 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b002      	add	sp, #8
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006278:	b590      	push	{r4, r7, lr}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	000a      	movs	r2, r1
 8006282:	1cfb      	adds	r3, r7, #3
 8006284:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006286:	240f      	movs	r4, #15
 8006288:	193b      	adds	r3, r7, r4
 800628a:	2202      	movs	r2, #2
 800628c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	23ad      	movs	r3, #173	@ 0xad
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	58d3      	ldr	r3, [r2, r3]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	23ad      	movs	r3, #173	@ 0xad
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	58d3      	ldr	r3, [r2, r3]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	1cfa      	adds	r2, r7, #3
 80062a6:	7811      	ldrb	r1, [r2, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	0010      	movs	r0, r2
 80062ac:	4798      	blx	r3
 80062ae:	1e03      	subs	r3, r0, #0
 80062b0:	d102      	bne.n	80062b8 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80062b2:	193b      	adds	r3, r7, r4
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80062b8:	230f      	movs	r3, #15
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	781b      	ldrb	r3, [r3, #0]
}
 80062be:	0018      	movs	r0, r3
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b005      	add	sp, #20
 80062c4:	bd90      	pop	{r4, r7, pc}

080062c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	000a      	movs	r2, r1
 80062d0:	1cfb      	adds	r3, r7, #3
 80062d2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	23ad      	movs	r3, #173	@ 0xad
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	58d3      	ldr	r3, [r2, r3]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	1cfa      	adds	r2, r7, #3
 80062e0:	7811      	ldrb	r1, [r2, #0]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	0010      	movs	r0, r2
 80062e6:	4798      	blx	r3

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	0018      	movs	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b002      	add	sp, #8
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	22aa      	movs	r2, #170	@ 0xaa
 8006302:	0092      	lsls	r2, r2, #2
 8006304:	4694      	mov	ip, r2
 8006306:	4463      	add	r3, ip
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	0011      	movs	r1, r2
 800630c:	0018      	movs	r0, r3
 800630e:	f001 f810 	bl	8007332 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	23a5      	movs	r3, #165	@ 0xa5
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	2101      	movs	r1, #1
 800631a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a23      	ldr	r2, [pc, #140]	@ (80063ac <USBD_LL_SetupStage+0xb8>)
 8006320:	5a9b      	ldrh	r3, [r3, r2]
 8006322:	0019      	movs	r1, r3
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	23a6      	movs	r3, #166	@ 0xa6
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	23aa      	movs	r3, #170	@ 0xaa
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	5cd3      	ldrb	r3, [r2, r3]
 8006334:	001a      	movs	r2, r3
 8006336:	231f      	movs	r3, #31
 8006338:	4013      	ands	r3, r2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d019      	beq.n	8006372 <USBD_LL_SetupStage+0x7e>
 800633e:	d822      	bhi.n	8006386 <USBD_LL_SetupStage+0x92>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <USBD_LL_SetupStage+0x56>
 8006344:	2b01      	cmp	r3, #1
 8006346:	d00a      	beq.n	800635e <USBD_LL_SetupStage+0x6a>
 8006348:	e01d      	b.n	8006386 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	22aa      	movs	r2, #170	@ 0xaa
 800634e:	0092      	lsls	r2, r2, #2
 8006350:	189a      	adds	r2, r3, r2
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	0011      	movs	r1, r2
 8006356:	0018      	movs	r0, r3
 8006358:	f000 fa10 	bl	800677c <USBD_StdDevReq>
      break;
 800635c:	e020      	b.n	80063a0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	22aa      	movs	r2, #170	@ 0xaa
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	189a      	adds	r2, r3, r2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0011      	movs	r1, r2
 800636a:	0018      	movs	r0, r3
 800636c:	f000 fa78 	bl	8006860 <USBD_StdItfReq>
      break;
 8006370:	e016      	b.n	80063a0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	22aa      	movs	r2, #170	@ 0xaa
 8006376:	0092      	lsls	r2, r2, #2
 8006378:	189a      	adds	r2, r3, r2
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0011      	movs	r1, r2
 800637e:	0018      	movs	r0, r3
 8006380:	f000 fac5 	bl	800690e <USBD_StdEPReq>
      break;
 8006384:	e00c      	b.n	80063a0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	23aa      	movs	r3, #170	@ 0xaa
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	5cd3      	ldrb	r3, [r2, r3]
 800638e:	227f      	movs	r2, #127	@ 0x7f
 8006390:	4393      	bics	r3, r2
 8006392:	b2da      	uxtb	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	0011      	movs	r1, r2
 8006398:	0018      	movs	r0, r3
 800639a:	f001 fc92 	bl	8007cc2 <USBD_LL_StallEP>
      break;
 800639e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	0018      	movs	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b002      	add	sp, #8
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	000002ae 	.word	0x000002ae

080063b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	200b      	movs	r0, #11
 80063bc:	183b      	adds	r3, r7, r0
 80063be:	1c0a      	adds	r2, r1, #0
 80063c0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80063c2:	183b      	adds	r3, r7, r0
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d154      	bne.n	8006474 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3355      	adds	r3, #85	@ 0x55
 80063ce:	33ff      	adds	r3, #255	@ 0xff
 80063d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	23a5      	movs	r3, #165	@ 0xa5
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	58d3      	ldr	r3, [r2, r3]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d139      	bne.n	8006452 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d919      	bls.n	800641e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006400:	429a      	cmp	r2, r3
 8006402:	d203      	bcs.n	800640c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006408:	b29b      	uxth	r3, r3
 800640a:	e002      	b.n	8006412 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006410:	b29b      	uxth	r3, r3
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	001a      	movs	r2, r3
 8006418:	f001 f898 	bl	800754c <USBD_CtlContinueRx>
 800641c:	e045      	b.n	80064aa <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	23ad      	movs	r3, #173	@ 0xad
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	58d3      	ldr	r3, [r2, r3]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	23a7      	movs	r3, #167	@ 0xa7
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006434:	2b03      	cmp	r3, #3
 8006436:	d107      	bne.n	8006448 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	23ad      	movs	r3, #173	@ 0xad
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	58d3      	ldr	r3, [r2, r3]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	0010      	movs	r0, r2
 8006446:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	0018      	movs	r0, r3
 800644c:	f001 f891 	bl	8007572 <USBD_CtlSendStatus>
 8006450:	e02b      	b.n	80064aa <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	23a5      	movs	r3, #165	@ 0xa5
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	58d3      	ldr	r3, [r2, r3]
 800645a:	2b05      	cmp	r3, #5
 800645c:	d125      	bne.n	80064aa <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	23a5      	movs	r3, #165	@ 0xa5
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	2100      	movs	r1, #0
 8006466:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2100      	movs	r1, #0
 800646c:	0018      	movs	r0, r3
 800646e:	f001 fc28 	bl	8007cc2 <USBD_LL_StallEP>
 8006472:	e01a      	b.n	80064aa <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	23ad      	movs	r3, #173	@ 0xad
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	58d3      	ldr	r3, [r2, r3]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d011      	beq.n	80064a6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	23a7      	movs	r3, #167	@ 0xa7
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800648a:	2b03      	cmp	r3, #3
 800648c:	d10b      	bne.n	80064a6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	23ad      	movs	r3, #173	@ 0xad
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	58d3      	ldr	r3, [r2, r3]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	220b      	movs	r2, #11
 800649a:	18ba      	adds	r2, r7, r2
 800649c:	7811      	ldrb	r1, [r2, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	0010      	movs	r0, r2
 80064a2:	4798      	blx	r3
 80064a4:	e001      	b.n	80064aa <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064a6:	2302      	movs	r3, #2
 80064a8:	e000      	b.n	80064ac <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	0018      	movs	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b006      	add	sp, #24
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	200b      	movs	r0, #11
 80064c0:	183b      	adds	r3, r7, r0
 80064c2:	1c0a      	adds	r2, r1, #0
 80064c4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80064c6:	183b      	adds	r3, r7, r0
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d000      	beq.n	80064d0 <USBD_LL_DataInStage+0x1c>
 80064ce:	e08e      	b.n	80065ee <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3314      	adds	r3, #20
 80064d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	23a5      	movs	r3, #165	@ 0xa5
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	58d3      	ldr	r3, [r2, r3]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d164      	bne.n	80065ac <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d915      	bls.n	800651a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	b29a      	uxth	r2, r3
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	0018      	movs	r0, r3
 8006508:	f000 ffe9 	bl	80074de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	2300      	movs	r3, #0
 8006510:	2200      	movs	r2, #0
 8006512:	2100      	movs	r1, #0
 8006514:	f001 fcbd 	bl	8007e92 <USBD_LL_PrepareReceive>
 8006518:	e059      	b.n	80065ce <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	0019      	movs	r1, r3
 8006524:	0010      	movs	r0, r2
 8006526:	f7f9 fe75 	bl	8000214 <__aeabi_uidivmod>
 800652a:	1e0b      	subs	r3, r1, #0
 800652c:	d11f      	bne.n	800656e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006536:	429a      	cmp	r2, r3
 8006538:	d319      	bcc.n	800656e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	23a6      	movs	r3, #166	@ 0xa6
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006546:	429a      	cmp	r2, r3
 8006548:	d211      	bcs.n	800656e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	2100      	movs	r1, #0
 8006550:	0018      	movs	r0, r3
 8006552:	f000 ffc4 	bl	80074de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	23a6      	movs	r3, #166	@ 0xa6
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	2100      	movs	r1, #0
 800655e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	2300      	movs	r3, #0
 8006564:	2200      	movs	r2, #0
 8006566:	2100      	movs	r1, #0
 8006568:	f001 fc93 	bl	8007e92 <USBD_LL_PrepareReceive>
 800656c:	e02f      	b.n	80065ce <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	23ad      	movs	r3, #173	@ 0xad
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	58d3      	ldr	r3, [r2, r3]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00d      	beq.n	8006598 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	23a7      	movs	r3, #167	@ 0xa7
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006584:	2b03      	cmp	r3, #3
 8006586:	d107      	bne.n	8006598 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	23ad      	movs	r3, #173	@ 0xad
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	58d3      	ldr	r3, [r2, r3]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	0010      	movs	r0, r2
 8006596:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2180      	movs	r1, #128	@ 0x80
 800659c:	0018      	movs	r0, r3
 800659e:	f001 fb90 	bl	8007cc2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0018      	movs	r0, r3
 80065a6:	f000 fff8 	bl	800759a <USBD_CtlReceiveStatus>
 80065aa:	e010      	b.n	80065ce <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	23a5      	movs	r3, #165	@ 0xa5
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	58d3      	ldr	r3, [r2, r3]
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d005      	beq.n	80065c4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	23a5      	movs	r3, #165	@ 0xa5
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2180      	movs	r1, #128	@ 0x80
 80065c8:	0018      	movs	r0, r3
 80065ca:	f001 fb7a 	bl	8007cc2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	23a8      	movs	r3, #168	@ 0xa8
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	5cd3      	ldrb	r3, [r2, r3]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d124      	bne.n	8006624 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	0018      	movs	r0, r3
 80065de:	f7ff fe42 	bl	8006266 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	23a8      	movs	r3, #168	@ 0xa8
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	2100      	movs	r1, #0
 80065ea:	54d1      	strb	r1, [r2, r3]
 80065ec:	e01a      	b.n	8006624 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	23ad      	movs	r3, #173	@ 0xad
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	58d3      	ldr	r3, [r2, r3]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	23a7      	movs	r3, #167	@ 0xa7
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006604:	2b03      	cmp	r3, #3
 8006606:	d10b      	bne.n	8006620 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	23ad      	movs	r3, #173	@ 0xad
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	58d3      	ldr	r3, [r2, r3]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	220b      	movs	r2, #11
 8006614:	18ba      	adds	r2, r7, r2
 8006616:	7811      	ldrb	r1, [r2, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	0010      	movs	r0, r2
 800661c:	4798      	blx	r3
 800661e:	e001      	b.n	8006624 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006620:	2302      	movs	r3, #2
 8006622:	e000      	b.n	8006626 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b006      	add	sp, #24
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	2200      	movs	r2, #0
 800663c:	2100      	movs	r1, #0
 800663e:	f001 fade 	bl	8007bfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	23ac      	movs	r3, #172	@ 0xac
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	2101      	movs	r1, #1
 800664a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	23b2      	movs	r3, #178	@ 0xb2
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	2140      	movs	r1, #64	@ 0x40
 8006654:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	2340      	movs	r3, #64	@ 0x40
 800665a:	2200      	movs	r2, #0
 800665c:	2180      	movs	r1, #128	@ 0x80
 800665e:	f001 face 	bl	8007bfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2240      	movs	r2, #64	@ 0x40
 800666c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	23a7      	movs	r3, #167	@ 0xa7
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	2101      	movs	r1, #1
 8006676:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	23a5      	movs	r3, #165	@ 0xa5
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	2100      	movs	r1, #0
 8006680:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	23a9      	movs	r3, #169	@ 0xa9
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	2100      	movs	r1, #0
 8006690:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	23ae      	movs	r3, #174	@ 0xae
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	58d3      	ldr	r3, [r2, r3]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	23ad      	movs	r3, #173	@ 0xad
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	58d3      	ldr	r3, [r2, r3]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	b2d9      	uxtb	r1, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	4790      	blx	r2
  }

  return USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b002      	add	sp, #8
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	000a      	movs	r2, r1
 80066c8:	1cfb      	adds	r3, r7, #3
 80066ca:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	1cfa      	adds	r2, r7, #3
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	0018      	movs	r0, r3
 80066d8:	46bd      	mov	sp, r7
 80066da:	b002      	add	sp, #8
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	23a7      	movs	r3, #167	@ 0xa7
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	5cd1      	ldrb	r1, [r2, r3]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a06      	ldr	r2, [pc, #24]	@ (800670c <USBD_LL_Suspend+0x2c>)
 80066f4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	23a7      	movs	r3, #167	@ 0xa7
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	2104      	movs	r1, #4
 80066fe:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b002      	add	sp, #8
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	0000029d 	.word	0x0000029d

08006710 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	23a7      	movs	r3, #167	@ 0xa7
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	5cd3      	ldrb	r3, [r2, r3]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d106      	bne.n	8006732 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a05      	ldr	r2, [pc, #20]	@ (800673c <USBD_LL_Resume+0x2c>)
 8006728:	5c99      	ldrb	r1, [r3, r2]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	23a7      	movs	r3, #167	@ 0xa7
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}
 800673c:	0000029d 	.word	0x0000029d

08006740 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	23a7      	movs	r3, #167	@ 0xa7
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	5cd3      	ldrb	r3, [r2, r3]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d10e      	bne.n	8006772 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	23ad      	movs	r3, #173	@ 0xad
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	58d3      	ldr	r3, [r2, r3]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d007      	beq.n	8006772 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	23ad      	movs	r3, #173	@ 0xad
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	58d3      	ldr	r3, [r2, r3]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	0010      	movs	r0, r2
 8006770:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	b002      	add	sp, #8
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	230f      	movs	r3, #15
 8006788:	18fb      	adds	r3, r7, r3
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	001a      	movs	r2, r3
 8006794:	2360      	movs	r3, #96	@ 0x60
 8006796:	4013      	ands	r3, r2
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	d004      	beq.n	80067a6 <USBD_StdDevReq+0x2a>
 800679c:	d84f      	bhi.n	800683e <USBD_StdDevReq+0xc2>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <USBD_StdDevReq+0x3e>
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d14b      	bne.n	800683e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	23ad      	movs	r3, #173	@ 0xad
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	58d3      	ldr	r3, [r2, r3]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	0010      	movs	r0, r2
 80067b6:	4798      	blx	r3
      break;
 80067b8:	e048      	b.n	800684c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	2b09      	cmp	r3, #9
 80067c0:	d835      	bhi.n	800682e <USBD_StdDevReq+0xb2>
 80067c2:	009a      	lsls	r2, r3, #2
 80067c4:	4b25      	ldr	r3, [pc, #148]	@ (800685c <USBD_StdDevReq+0xe0>)
 80067c6:	18d3      	adds	r3, r2, r3
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0011      	movs	r1, r2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 fa52 	bl	8006c7c <USBD_GetDescriptor>
          break;
 80067d8:	e030      	b.n	800683c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	0011      	movs	r1, r2
 80067e0:	0018      	movs	r0, r3
 80067e2:	f000 fbfd 	bl	8006fe0 <USBD_SetAddress>
          break;
 80067e6:	e029      	b.n	800683c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0011      	movs	r1, r2
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 fc4a 	bl	8007088 <USBD_SetConfig>
          break;
 80067f4:	e022      	b.n	800683c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0011      	movs	r1, r2
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 fce7 	bl	80071d0 <USBD_GetConfig>
          break;
 8006802:	e01b      	b.n	800683c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0011      	movs	r1, r2
 800680a:	0018      	movs	r0, r3
 800680c:	f000 fd1b 	bl	8007246 <USBD_GetStatus>
          break;
 8006810:	e014      	b.n	800683c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	0011      	movs	r1, r2
 8006818:	0018      	movs	r0, r3
 800681a:	f000 fd4e 	bl	80072ba <USBD_SetFeature>
          break;
 800681e:	e00d      	b.n	800683c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0011      	movs	r1, r2
 8006826:	0018      	movs	r0, r3
 8006828:	f000 fd5d 	bl	80072e6 <USBD_ClrFeature>
          break;
 800682c:	e006      	b.n	800683c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	0011      	movs	r1, r2
 8006834:	0018      	movs	r0, r3
 8006836:	f000 fdb4 	bl	80073a2 <USBD_CtlError>
          break;
 800683a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800683c:	e006      	b.n	800684c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	0011      	movs	r1, r2
 8006844:	0018      	movs	r0, r3
 8006846:	f000 fdac 	bl	80073a2 <USBD_CtlError>
      break;
 800684a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800684c:	230f      	movs	r3, #15
 800684e:	18fb      	adds	r3, r7, r3
 8006850:	781b      	ldrb	r3, [r3, #0]
}
 8006852:	0018      	movs	r0, r3
 8006854:	46bd      	mov	sp, r7
 8006856:	b004      	add	sp, #16
 8006858:	bd80      	pop	{r7, pc}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	080080a4 	.word	0x080080a4

08006860 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006860:	b5b0      	push	{r4, r5, r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800686a:	230f      	movs	r3, #15
 800686c:	18fb      	adds	r3, r7, r3
 800686e:	2200      	movs	r2, #0
 8006870:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	001a      	movs	r2, r3
 8006878:	2360      	movs	r3, #96	@ 0x60
 800687a:	4013      	ands	r3, r2
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	d004      	beq.n	800688a <USBD_StdItfReq+0x2a>
 8006880:	d839      	bhi.n	80068f6 <USBD_StdItfReq+0x96>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <USBD_StdItfReq+0x2a>
 8006886:	2b20      	cmp	r3, #32
 8006888:	d135      	bne.n	80068f6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	23a7      	movs	r3, #167	@ 0xa7
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	5cd3      	ldrb	r3, [r2, r3]
 8006892:	3b01      	subs	r3, #1
 8006894:	2b02      	cmp	r3, #2
 8006896:	d825      	bhi.n	80068e4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	889b      	ldrh	r3, [r3, #4]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d819      	bhi.n	80068d6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	23ad      	movs	r3, #173	@ 0xad
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	58d3      	ldr	r3, [r2, r3]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	250f      	movs	r5, #15
 80068ae:	197c      	adds	r4, r7, r5
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	0010      	movs	r0, r2
 80068b6:	4798      	blx	r3
 80068b8:	0003      	movs	r3, r0
 80068ba:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	88db      	ldrh	r3, [r3, #6]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d116      	bne.n	80068f2 <USBD_StdItfReq+0x92>
 80068c4:	197b      	adds	r3, r7, r5
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d112      	bne.n	80068f2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f000 fe4f 	bl	8007572 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068d4:	e00d      	b.n	80068f2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	0011      	movs	r1, r2
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 fd60 	bl	80073a2 <USBD_CtlError>
          break;
 80068e2:	e006      	b.n	80068f2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	0011      	movs	r1, r2
 80068ea:	0018      	movs	r0, r3
 80068ec:	f000 fd59 	bl	80073a2 <USBD_CtlError>
          break;
 80068f0:	e000      	b.n	80068f4 <USBD_StdItfReq+0x94>
          break;
 80068f2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80068f4:	e006      	b.n	8006904 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	0011      	movs	r1, r2
 80068fc:	0018      	movs	r0, r3
 80068fe:	f000 fd50 	bl	80073a2 <USBD_CtlError>
      break;
 8006902:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	0018      	movs	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	b004      	add	sp, #16
 800690c:	bdb0      	pop	{r4, r5, r7, pc}

0800690e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800690e:	b5b0      	push	{r4, r5, r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006918:	230f      	movs	r3, #15
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	889a      	ldrh	r2, [r3, #4]
 8006924:	230e      	movs	r3, #14
 8006926:	18fb      	adds	r3, r7, r3
 8006928:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	001a      	movs	r2, r3
 8006930:	2360      	movs	r3, #96	@ 0x60
 8006932:	4013      	ands	r3, r2
 8006934:	2b40      	cmp	r3, #64	@ 0x40
 8006936:	d006      	beq.n	8006946 <USBD_StdEPReq+0x38>
 8006938:	d900      	bls.n	800693c <USBD_StdEPReq+0x2e>
 800693a:	e190      	b.n	8006c5e <USBD_StdEPReq+0x350>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00c      	beq.n	800695a <USBD_StdEPReq+0x4c>
 8006940:	2b20      	cmp	r3, #32
 8006942:	d000      	beq.n	8006946 <USBD_StdEPReq+0x38>
 8006944:	e18b      	b.n	8006c5e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	23ad      	movs	r3, #173	@ 0xad
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	58d3      	ldr	r3, [r2, r3]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	0010      	movs	r0, r2
 8006956:	4798      	blx	r3
      break;
 8006958:	e188      	b.n	8006c6c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	001a      	movs	r2, r3
 8006960:	2360      	movs	r3, #96	@ 0x60
 8006962:	4013      	ands	r3, r2
 8006964:	2b20      	cmp	r3, #32
 8006966:	d10f      	bne.n	8006988 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	23ad      	movs	r3, #173	@ 0xad
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	58d3      	ldr	r3, [r2, r3]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	250f      	movs	r5, #15
 8006974:	197c      	adds	r4, r7, r5
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	0010      	movs	r0, r2
 800697c:	4798      	blx	r3
 800697e:	0003      	movs	r3, r0
 8006980:	7023      	strb	r3, [r4, #0]

        return ret;
 8006982:	197b      	adds	r3, r7, r5
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	e174      	b.n	8006c72 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b03      	cmp	r3, #3
 800698e:	d007      	beq.n	80069a0 <USBD_StdEPReq+0x92>
 8006990:	dd00      	ble.n	8006994 <USBD_StdEPReq+0x86>
 8006992:	e15c      	b.n	8006c4e <USBD_StdEPReq+0x340>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d100      	bne.n	800699a <USBD_StdEPReq+0x8c>
 8006998:	e092      	b.n	8006ac0 <USBD_StdEPReq+0x1b2>
 800699a:	2b01      	cmp	r3, #1
 800699c:	d04b      	beq.n	8006a36 <USBD_StdEPReq+0x128>
 800699e:	e156      	b.n	8006c4e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	23a7      	movs	r3, #167	@ 0xa7
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	5cd3      	ldrb	r3, [r2, r3]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d002      	beq.n	80069b2 <USBD_StdEPReq+0xa4>
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d01d      	beq.n	80069ec <USBD_StdEPReq+0xde>
 80069b0:	e039      	b.n	8006a26 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069b2:	220e      	movs	r2, #14
 80069b4:	18bb      	adds	r3, r7, r2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d010      	beq.n	80069de <USBD_StdEPReq+0xd0>
 80069bc:	18bb      	adds	r3, r7, r2
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b80      	cmp	r3, #128	@ 0x80
 80069c2:	d00c      	beq.n	80069de <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069c4:	18bb      	adds	r3, r7, r2
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0011      	movs	r1, r2
 80069cc:	0018      	movs	r0, r3
 80069ce:	f001 f978 	bl	8007cc2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2180      	movs	r1, #128	@ 0x80
 80069d6:	0018      	movs	r0, r3
 80069d8:	f001 f973 	bl	8007cc2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069dc:	e02a      	b.n	8006a34 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	0011      	movs	r1, r2
 80069e4:	0018      	movs	r0, r3
 80069e6:	f000 fcdc 	bl	80073a2 <USBD_CtlError>
              break;
 80069ea:	e023      	b.n	8006a34 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	885b      	ldrh	r3, [r3, #2]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d113      	bne.n	8006a1c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80069f4:	220e      	movs	r2, #14
 80069f6:	18bb      	adds	r3, r7, r2
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <USBD_StdEPReq+0x10e>
 80069fe:	18bb      	adds	r3, r7, r2
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b80      	cmp	r3, #128	@ 0x80
 8006a04:	d00a      	beq.n	8006a1c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	88db      	ldrh	r3, [r3, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006a0e:	18bb      	adds	r3, r7, r2
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	0011      	movs	r1, r2
 8006a16:	0018      	movs	r0, r3
 8006a18:	f001 f953 	bl	8007cc2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f000 fda7 	bl	8007572 <USBD_CtlSendStatus>

              break;
 8006a24:	e006      	b.n	8006a34 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0011      	movs	r1, r2
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 fcb8 	bl	80073a2 <USBD_CtlError>
              break;
 8006a32:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006a34:	e112      	b.n	8006c5c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	23a7      	movs	r3, #167	@ 0xa7
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	5cd3      	ldrb	r3, [r2, r3]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d002      	beq.n	8006a48 <USBD_StdEPReq+0x13a>
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d01d      	beq.n	8006a82 <USBD_StdEPReq+0x174>
 8006a46:	e032      	b.n	8006aae <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a48:	220e      	movs	r2, #14
 8006a4a:	18bb      	adds	r3, r7, r2
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <USBD_StdEPReq+0x166>
 8006a52:	18bb      	adds	r3, r7, r2
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b80      	cmp	r3, #128	@ 0x80
 8006a58:	d00c      	beq.n	8006a74 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006a5a:	18bb      	adds	r3, r7, r2
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0011      	movs	r1, r2
 8006a62:	0018      	movs	r0, r3
 8006a64:	f001 f92d 	bl	8007cc2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2180      	movs	r1, #128	@ 0x80
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f001 f928 	bl	8007cc2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a72:	e024      	b.n	8006abe <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	0011      	movs	r1, r2
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 fc91 	bl	80073a2 <USBD_CtlError>
              break;
 8006a80:	e01d      	b.n	8006abe <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	885b      	ldrh	r3, [r3, #2]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d118      	bne.n	8006abc <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a8a:	210e      	movs	r1, #14
 8006a8c:	187b      	adds	r3, r7, r1
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	227f      	movs	r2, #127	@ 0x7f
 8006a92:	4013      	ands	r3, r2
 8006a94:	d006      	beq.n	8006aa4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a96:	187b      	adds	r3, r7, r1
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0011      	movs	r1, r2
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f001 f93a 	bl	8007d18 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 fd63 	bl	8007572 <USBD_CtlSendStatus>
              }
              break;
 8006aac:	e006      	b.n	8006abc <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	0011      	movs	r1, r2
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 fc74 	bl	80073a2 <USBD_CtlError>
              break;
 8006aba:	e000      	b.n	8006abe <USBD_StdEPReq+0x1b0>
              break;
 8006abc:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006abe:	e0cd      	b.n	8006c5c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	23a7      	movs	r3, #167	@ 0xa7
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	5cd3      	ldrb	r3, [r2, r3]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d002      	beq.n	8006ad2 <USBD_StdEPReq+0x1c4>
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d03c      	beq.n	8006b4a <USBD_StdEPReq+0x23c>
 8006ad0:	e0b5      	b.n	8006c3e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ad2:	220e      	movs	r2, #14
 8006ad4:	18bb      	adds	r3, r7, r2
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <USBD_StdEPReq+0x1e4>
 8006adc:	18bb      	adds	r3, r7, r2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d006      	beq.n	8006af2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	0011      	movs	r1, r2
 8006aea:	0018      	movs	r0, r3
 8006aec:	f000 fc59 	bl	80073a2 <USBD_CtlError>
                break;
 8006af0:	e0ac      	b.n	8006c4c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006af2:	220e      	movs	r2, #14
 8006af4:	18bb      	adds	r3, r7, r2
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	b25b      	sxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da0c      	bge.n	8006b18 <USBD_StdEPReq+0x20a>
 8006afe:	18bb      	adds	r3, r7, r2
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	227f      	movs	r2, #127	@ 0x7f
 8006b04:	401a      	ands	r2, r3
 8006b06:	0013      	movs	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	189b      	adds	r3, r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	3310      	adds	r3, #16
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	18d3      	adds	r3, r2, r3
 8006b14:	3304      	adds	r3, #4
 8006b16:	e00d      	b.n	8006b34 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b18:	230e      	movs	r3, #14
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	227f      	movs	r2, #127	@ 0x7f
 8006b20:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b22:	0013      	movs	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	3351      	adds	r3, #81	@ 0x51
 8006b2c:	33ff      	adds	r3, #255	@ 0xff
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	18d3      	adds	r3, r2, r3
 8006b32:	3304      	adds	r3, #4
 8006b34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	0018      	movs	r0, r3
 8006b44:	f000 fcab 	bl	800749e <USBD_CtlSendData>
              break;
 8006b48:	e080      	b.n	8006c4c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b4a:	220e      	movs	r2, #14
 8006b4c:	18bb      	adds	r3, r7, r2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	b25b      	sxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da14      	bge.n	8006b80 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b56:	18bb      	adds	r3, r7, r2
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	220f      	movs	r2, #15
 8006b5c:	401a      	ands	r2, r3
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	0013      	movs	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	189b      	adds	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	18cb      	adds	r3, r1, r3
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d11e      	bne.n	8006bb0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0011      	movs	r1, r2
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f000 fc12 	bl	80073a2 <USBD_CtlError>
                  break;
 8006b7e:	e065      	b.n	8006c4c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b80:	230e      	movs	r3, #14
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	220f      	movs	r2, #15
 8006b88:	401a      	ands	r2, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	23ac      	movs	r3, #172	@ 0xac
 8006b8e:	0059      	lsls	r1, r3, #1
 8006b90:	0013      	movs	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	189b      	adds	r3, r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	18c3      	adds	r3, r0, r3
 8006b9a:	185b      	adds	r3, r3, r1
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	0011      	movs	r1, r2
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f000 fbfa 	bl	80073a2 <USBD_CtlError>
                  break;
 8006bae:	e04d      	b.n	8006c4c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb0:	220e      	movs	r2, #14
 8006bb2:	18bb      	adds	r3, r7, r2
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da0c      	bge.n	8006bd6 <USBD_StdEPReq+0x2c8>
 8006bbc:	18bb      	adds	r3, r7, r2
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	227f      	movs	r2, #127	@ 0x7f
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	0013      	movs	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	3310      	adds	r3, #16
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	18d3      	adds	r3, r2, r3
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	e00d      	b.n	8006bf2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bd6:	230e      	movs	r3, #14
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	227f      	movs	r2, #127	@ 0x7f
 8006bde:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be0:	0013      	movs	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	189b      	adds	r3, r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	3351      	adds	r3, #81	@ 0x51
 8006bea:	33ff      	adds	r3, #255	@ 0xff
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	18d3      	adds	r3, r2, r3
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bf4:	220e      	movs	r2, #14
 8006bf6:	18bb      	adds	r3, r7, r2
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <USBD_StdEPReq+0x2f8>
 8006bfe:	18bb      	adds	r3, r7, r2
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b80      	cmp	r3, #128	@ 0x80
 8006c04:	d103      	bne.n	8006c0e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e010      	b.n	8006c30 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c0e:	230e      	movs	r3, #14
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	0011      	movs	r1, r2
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f001 f8a8 	bl	8007d6e <USBD_LL_IsStallEP>
 8006c1e:	1e03      	subs	r3, r0, #0
 8006c20:	d003      	beq.n	8006c2a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e002      	b.n	8006c30 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 fc31 	bl	800749e <USBD_CtlSendData>
              break;
 8006c3c:	e006      	b.n	8006c4c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	0011      	movs	r1, r2
 8006c44:	0018      	movs	r0, r3
 8006c46:	f000 fbac 	bl	80073a2 <USBD_CtlError>
              break;
 8006c4a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8006c4c:	e006      	b.n	8006c5c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	0011      	movs	r1, r2
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 fba4 	bl	80073a2 <USBD_CtlError>
          break;
 8006c5a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006c5c:	e006      	b.n	8006c6c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0011      	movs	r1, r2
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fb9c 	bl	80073a2 <USBD_CtlError>
      break;
 8006c6a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006c6c:	230f      	movs	r3, #15
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	781b      	ldrb	r3, [r3, #0]
}
 8006c72:	0018      	movs	r0, r3
 8006c74:	46bd      	mov	sp, r7
 8006c76:	b004      	add	sp, #16
 8006c78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c86:	2308      	movs	r3, #8
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c92:	230b      	movs	r3, #11
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	885b      	ldrh	r3, [r3, #2]
 8006c9e:	0a1b      	lsrs	r3, r3, #8
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b07      	cmp	r3, #7
 8006ca4:	d900      	bls.n	8006ca8 <USBD_GetDescriptor+0x2c>
 8006ca6:	e159      	b.n	8006f5c <USBD_GetDescriptor+0x2e0>
 8006ca8:	009a      	lsls	r2, r3, #2
 8006caa:	4bcb      	ldr	r3, [pc, #812]	@ (8006fd8 <USBD_GetDescriptor+0x35c>)
 8006cac:	18d3      	adds	r3, r2, r3
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	23ac      	movs	r3, #172	@ 0xac
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	58d3      	ldr	r3, [r2, r3]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7c12      	ldrb	r2, [r2, #16]
 8006cc0:	2108      	movs	r1, #8
 8006cc2:	1879      	adds	r1, r7, r1
 8006cc4:	0010      	movs	r0, r2
 8006cc6:	4798      	blx	r3
 8006cc8:	0003      	movs	r3, r0
 8006cca:	60fb      	str	r3, [r7, #12]
      break;
 8006ccc:	e153      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7c1b      	ldrb	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10f      	bne.n	8006cf6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	23ad      	movs	r3, #173	@ 0xad
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	58d3      	ldr	r3, [r2, r3]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	18ba      	adds	r2, r7, r2
 8006ce4:	0010      	movs	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	0003      	movs	r3, r0
 8006cea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cf4:	e13f      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	23ad      	movs	r3, #173	@ 0xad
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	58d3      	ldr	r3, [r2, r3]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d00:	2208      	movs	r2, #8
 8006d02:	18ba      	adds	r2, r7, r2
 8006d04:	0010      	movs	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	0003      	movs	r3, r0
 8006d0a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	2202      	movs	r2, #2
 8006d12:	701a      	strb	r2, [r3, #0]
      break;
 8006d14:	e12f      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	885b      	ldrh	r3, [r3, #2]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	d900      	bls.n	8006d22 <USBD_GetDescriptor+0xa6>
 8006d20:	e0d0      	b.n	8006ec4 <USBD_GetDescriptor+0x248>
 8006d22:	009a      	lsls	r2, r3, #2
 8006d24:	4bad      	ldr	r3, [pc, #692]	@ (8006fdc <USBD_GetDescriptor+0x360>)
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	23ac      	movs	r3, #172	@ 0xac
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	58d3      	ldr	r3, [r2, r3]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	23ac      	movs	r3, #172	@ 0xac
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	58d3      	ldr	r3, [r2, r3]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	2108      	movs	r1, #8
 8006d4a:	1879      	adds	r1, r7, r1
 8006d4c:	0010      	movs	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	0003      	movs	r3, r0
 8006d52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d54:	e0c3      	b.n	8006ede <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	0011      	movs	r1, r2
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f000 fb20 	bl	80073a2 <USBD_CtlError>
            err++;
 8006d62:	210b      	movs	r1, #11
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	781a      	ldrb	r2, [r3, #0]
 8006d68:	187b      	adds	r3, r7, r1
 8006d6a:	3201      	adds	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
          break;
 8006d6e:	e0b6      	b.n	8006ede <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	23ac      	movs	r3, #172	@ 0xac
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	58d3      	ldr	r3, [r2, r3]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00d      	beq.n	8006d9a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	23ac      	movs	r3, #172	@ 0xac
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	58d3      	ldr	r3, [r2, r3]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7c12      	ldrb	r2, [r2, #16]
 8006d8c:	2108      	movs	r1, #8
 8006d8e:	1879      	adds	r1, r7, r1
 8006d90:	0010      	movs	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	0003      	movs	r3, r0
 8006d96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d98:	e0a1      	b.n	8006ede <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0011      	movs	r1, r2
 8006da0:	0018      	movs	r0, r3
 8006da2:	f000 fafe 	bl	80073a2 <USBD_CtlError>
            err++;
 8006da6:	210b      	movs	r1, #11
 8006da8:	187b      	adds	r3, r7, r1
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	187b      	adds	r3, r7, r1
 8006dae:	3201      	adds	r2, #1
 8006db0:	701a      	strb	r2, [r3, #0]
          break;
 8006db2:	e094      	b.n	8006ede <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	23ac      	movs	r3, #172	@ 0xac
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	58d3      	ldr	r3, [r2, r3]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	23ac      	movs	r3, #172	@ 0xac
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	58d3      	ldr	r3, [r2, r3]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	7c12      	ldrb	r2, [r2, #16]
 8006dd0:	2108      	movs	r1, #8
 8006dd2:	1879      	adds	r1, r7, r1
 8006dd4:	0010      	movs	r0, r2
 8006dd6:	4798      	blx	r3
 8006dd8:	0003      	movs	r3, r0
 8006dda:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ddc:	e07f      	b.n	8006ede <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	0011      	movs	r1, r2
 8006de4:	0018      	movs	r0, r3
 8006de6:	f000 fadc 	bl	80073a2 <USBD_CtlError>
            err++;
 8006dea:	210b      	movs	r1, #11
 8006dec:	187b      	adds	r3, r7, r1
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	187b      	adds	r3, r7, r1
 8006df2:	3201      	adds	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]
          break;
 8006df6:	e072      	b.n	8006ede <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	23ac      	movs	r3, #172	@ 0xac
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	58d3      	ldr	r3, [r2, r3]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00d      	beq.n	8006e22 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	23ac      	movs	r3, #172	@ 0xac
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	58d3      	ldr	r3, [r2, r3]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	2108      	movs	r1, #8
 8006e16:	1879      	adds	r1, r7, r1
 8006e18:	0010      	movs	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e20:	e05d      	b.n	8006ede <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	0011      	movs	r1, r2
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f000 faba 	bl	80073a2 <USBD_CtlError>
            err++;
 8006e2e:	210b      	movs	r1, #11
 8006e30:	187b      	adds	r3, r7, r1
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	187b      	adds	r3, r7, r1
 8006e36:	3201      	adds	r2, #1
 8006e38:	701a      	strb	r2, [r3, #0]
          break;
 8006e3a:	e050      	b.n	8006ede <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	23ac      	movs	r3, #172	@ 0xac
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	58d3      	ldr	r3, [r2, r3]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00d      	beq.n	8006e66 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	23ac      	movs	r3, #172	@ 0xac
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	58d3      	ldr	r3, [r2, r3]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	2108      	movs	r1, #8
 8006e5a:	1879      	adds	r1, r7, r1
 8006e5c:	0010      	movs	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	0003      	movs	r3, r0
 8006e62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e64:	e03b      	b.n	8006ede <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	0011      	movs	r1, r2
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fa98 	bl	80073a2 <USBD_CtlError>
            err++;
 8006e72:	210b      	movs	r1, #11
 8006e74:	187b      	adds	r3, r7, r1
 8006e76:	781a      	ldrb	r2, [r3, #0]
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	3201      	adds	r2, #1
 8006e7c:	701a      	strb	r2, [r3, #0]
          break;
 8006e7e:	e02e      	b.n	8006ede <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	23ac      	movs	r3, #172	@ 0xac
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	58d3      	ldr	r3, [r2, r3]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	23ac      	movs	r3, #172	@ 0xac
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	58d3      	ldr	r3, [r2, r3]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	2108      	movs	r1, #8
 8006e9e:	1879      	adds	r1, r7, r1
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea8:	e019      	b.n	8006ede <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	0011      	movs	r1, r2
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f000 fa76 	bl	80073a2 <USBD_CtlError>
            err++;
 8006eb6:	210b      	movs	r1, #11
 8006eb8:	187b      	adds	r3, r7, r1
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	187b      	adds	r3, r7, r1
 8006ebe:	3201      	adds	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
          break;
 8006ec2:	e00c      	b.n	8006ede <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	0011      	movs	r1, r2
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f000 fa69 	bl	80073a2 <USBD_CtlError>
          err++;
 8006ed0:	210b      	movs	r1, #11
 8006ed2:	187b      	adds	r3, r7, r1
 8006ed4:	781a      	ldrb	r2, [r3, #0]
 8006ed6:	187b      	adds	r3, r7, r1
 8006ed8:	3201      	adds	r2, #1
 8006eda:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006edc:	e04b      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>
 8006ede:	e04a      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7c1b      	ldrb	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10b      	bne.n	8006f00 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	23ad      	movs	r3, #173	@ 0xad
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	58d3      	ldr	r3, [r2, r3]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef2:	2208      	movs	r2, #8
 8006ef4:	18ba      	adds	r2, r7, r2
 8006ef6:	0010      	movs	r0, r2
 8006ef8:	4798      	blx	r3
 8006efa:	0003      	movs	r3, r0
 8006efc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006efe:	e03a      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	0011      	movs	r1, r2
 8006f06:	0018      	movs	r0, r3
 8006f08:	f000 fa4b 	bl	80073a2 <USBD_CtlError>
        err++;
 8006f0c:	210b      	movs	r1, #11
 8006f0e:	187b      	adds	r3, r7, r1
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	187b      	adds	r3, r7, r1
 8006f14:	3201      	adds	r2, #1
 8006f16:	701a      	strb	r2, [r3, #0]
      break;
 8006f18:	e02d      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7c1b      	ldrb	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10f      	bne.n	8006f42 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	23ad      	movs	r3, #173	@ 0xad
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	58d3      	ldr	r3, [r2, r3]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	18ba      	adds	r2, r7, r2
 8006f30:	0010      	movs	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	0003      	movs	r3, r0
 8006f36:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	2207      	movs	r2, #7
 8006f3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f40:	e019      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	0011      	movs	r1, r2
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 fa2a 	bl	80073a2 <USBD_CtlError>
        err++;
 8006f4e:	210b      	movs	r1, #11
 8006f50:	187b      	adds	r3, r7, r1
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	3201      	adds	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
      break;
 8006f5a:	e00c      	b.n	8006f76 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	0011      	movs	r1, r2
 8006f62:	0018      	movs	r0, r3
 8006f64:	f000 fa1d 	bl	80073a2 <USBD_CtlError>
      err++;
 8006f68:	210b      	movs	r1, #11
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	781a      	ldrb	r2, [r3, #0]
 8006f6e:	187b      	adds	r3, r7, r1
 8006f70:	3201      	adds	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
      break;
 8006f74:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8006f76:	230b      	movs	r3, #11
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d127      	bne.n	8006fd0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006f80:	2108      	movs	r1, #8
 8006f82:	187b      	adds	r3, r7, r1
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d019      	beq.n	8006fbe <USBD_GetDescriptor+0x342>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d015      	beq.n	8006fbe <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	88da      	ldrh	r2, [r3, #6]
 8006f96:	187b      	adds	r3, r7, r1
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	1c18      	adds	r0, r3, #0
 8006f9c:	1c11      	adds	r1, r2, #0
 8006f9e:	b28a      	uxth	r2, r1
 8006fa0:	b283      	uxth	r3, r0
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d900      	bls.n	8006fa8 <USBD_GetDescriptor+0x32c>
 8006fa6:	1c01      	adds	r1, r0, #0
 8006fa8:	b28a      	uxth	r2, r1
 8006faa:	2108      	movs	r1, #8
 8006fac:	187b      	adds	r3, r7, r1
 8006fae:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fb0:	187b      	adds	r3, r7, r1
 8006fb2:	881a      	ldrh	r2, [r3, #0]
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f000 fa70 	bl	800749e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	88db      	ldrh	r3, [r3, #6]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 fad2 	bl	8007572 <USBD_CtlSendStatus>
 8006fce:	e000      	b.n	8006fd2 <USBD_GetDescriptor+0x356>
    return;
 8006fd0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b004      	add	sp, #16
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	080080cc 	.word	0x080080cc
 8006fdc:	080080ec 	.word	0x080080ec

08006fe0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	889b      	ldrh	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d13d      	bne.n	800706e <USBD_SetAddress+0x8e>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	88db      	ldrh	r3, [r3, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d139      	bne.n	800706e <USBD_SetAddress+0x8e>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007000:	d835      	bhi.n	800706e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	b2da      	uxtb	r2, r3
 8007008:	230f      	movs	r3, #15
 800700a:	18fb      	adds	r3, r7, r3
 800700c:	217f      	movs	r1, #127	@ 0x7f
 800700e:	400a      	ands	r2, r1
 8007010:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	23a7      	movs	r3, #167	@ 0xa7
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	5cd3      	ldrb	r3, [r2, r3]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d106      	bne.n	800702c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	0011      	movs	r1, r2
 8007024:	0018      	movs	r0, r3
 8007026:	f000 f9bc 	bl	80073a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702a:	e027      	b.n	800707c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	240f      	movs	r4, #15
 8007030:	193a      	adds	r2, r7, r4
 8007032:	4914      	ldr	r1, [pc, #80]	@ (8007084 <USBD_SetAddress+0xa4>)
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007038:	193b      	adds	r3, r7, r4
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	0011      	movs	r1, r2
 8007040:	0018      	movs	r0, r3
 8007042:	f000 fec4 	bl	8007dce <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	0018      	movs	r0, r3
 800704a:	f000 fa92 	bl	8007572 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800704e:	193b      	adds	r3, r7, r4
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	23a7      	movs	r3, #167	@ 0xa7
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	2102      	movs	r1, #2
 800705e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007060:	e00c      	b.n	800707c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	23a7      	movs	r3, #167	@ 0xa7
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	2101      	movs	r1, #1
 800706a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706c:	e006      	b.n	800707c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	0011      	movs	r1, r2
 8007074:	0018      	movs	r0, r3
 8007076:	f000 f994 	bl	80073a2 <USBD_CtlError>
  }
}
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	46c0      	nop			@ (mov r8, r8)
 800707e:	46bd      	mov	sp, r7
 8007080:	b005      	add	sp, #20
 8007082:	bd90      	pop	{r4, r7, pc}
 8007084:	0000029e 	.word	0x0000029e

08007088 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	885b      	ldrh	r3, [r3, #2]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b4c      	ldr	r3, [pc, #304]	@ (80071cc <USBD_SetConfig+0x144>)
 800709a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800709c:	4b4b      	ldr	r3, [pc, #300]	@ (80071cc <USBD_SetConfig+0x144>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d906      	bls.n	80070b2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	0011      	movs	r1, r2
 80070aa:	0018      	movs	r0, r3
 80070ac:	f000 f979 	bl	80073a2 <USBD_CtlError>
 80070b0:	e088      	b.n	80071c4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	23a7      	movs	r3, #167	@ 0xa7
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	5cd3      	ldrb	r3, [r2, r3]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d002      	beq.n	80070c4 <USBD_SetConfig+0x3c>
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d029      	beq.n	8007116 <USBD_SetConfig+0x8e>
 80070c2:	e071      	b.n	80071a8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80070c4:	4b41      	ldr	r3, [pc, #260]	@ (80071cc <USBD_SetConfig+0x144>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01f      	beq.n	800710c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80070cc:	4b3f      	ldr	r3, [pc, #252]	@ (80071cc <USBD_SetConfig+0x144>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	001a      	movs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	23a7      	movs	r3, #167	@ 0xa7
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	2103      	movs	r1, #3
 80070de:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070e0:	4b3a      	ldr	r3, [pc, #232]	@ (80071cc <USBD_SetConfig+0x144>)
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	0011      	movs	r1, r2
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7ff f8c5 	bl	8006278 <USBD_SetClassConfig>
 80070ee:	0003      	movs	r3, r0
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d106      	bne.n	8007102 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	0011      	movs	r1, r2
 80070fa:	0018      	movs	r0, r3
 80070fc:	f000 f951 	bl	80073a2 <USBD_CtlError>
            return;
 8007100:	e060      	b.n	80071c4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0018      	movs	r0, r3
 8007106:	f000 fa34 	bl	8007572 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800710a:	e05b      	b.n	80071c4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0018      	movs	r0, r3
 8007110:	f000 fa2f 	bl	8007572 <USBD_CtlSendStatus>
        break;
 8007114:	e056      	b.n	80071c4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007116:	4b2d      	ldr	r3, [pc, #180]	@ (80071cc <USBD_SetConfig+0x144>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d115      	bne.n	800714a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	23a7      	movs	r3, #167	@ 0xa7
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	2102      	movs	r1, #2
 8007126:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007128:	4b28      	ldr	r3, [pc, #160]	@ (80071cc <USBD_SetConfig+0x144>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	001a      	movs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007132:	4b26      	ldr	r3, [pc, #152]	@ (80071cc <USBD_SetConfig+0x144>)
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	0011      	movs	r1, r2
 800713a:	0018      	movs	r0, r3
 800713c:	f7ff f8c3 	bl	80062c6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	0018      	movs	r0, r3
 8007144:	f000 fa15 	bl	8007572 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007148:	e03c      	b.n	80071c4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800714a:	4b20      	ldr	r3, [pc, #128]	@ (80071cc <USBD_SetConfig+0x144>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	001a      	movs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d022      	beq.n	800719e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	0011      	movs	r1, r2
 8007162:	0018      	movs	r0, r3
 8007164:	f7ff f8af 	bl	80062c6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007168:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <USBD_SetConfig+0x144>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	001a      	movs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007172:	4b16      	ldr	r3, [pc, #88]	@ (80071cc <USBD_SetConfig+0x144>)
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	0011      	movs	r1, r2
 800717a:	0018      	movs	r0, r3
 800717c:	f7ff f87c 	bl	8006278 <USBD_SetClassConfig>
 8007180:	0003      	movs	r3, r0
 8007182:	2b02      	cmp	r3, #2
 8007184:	d106      	bne.n	8007194 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	0011      	movs	r1, r2
 800718c:	0018      	movs	r0, r3
 800718e:	f000 f908 	bl	80073a2 <USBD_CtlError>
            return;
 8007192:	e017      	b.n	80071c4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	0018      	movs	r0, r3
 8007198:	f000 f9eb 	bl	8007572 <USBD_CtlSendStatus>
        break;
 800719c:	e012      	b.n	80071c4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	0018      	movs	r0, r3
 80071a2:	f000 f9e6 	bl	8007572 <USBD_CtlSendStatus>
        break;
 80071a6:	e00d      	b.n	80071c4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	0011      	movs	r1, r2
 80071ae:	0018      	movs	r0, r3
 80071b0:	f000 f8f7 	bl	80073a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <USBD_SetConfig+0x144>)
 80071b6:	781a      	ldrb	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	0011      	movs	r1, r2
 80071bc:	0018      	movs	r0, r3
 80071be:	f7ff f882 	bl	80062c6 <USBD_ClrClassConfig>
        break;
 80071c2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b002      	add	sp, #8
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	200001f8 	.word	0x200001f8

080071d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	88db      	ldrh	r3, [r3, #6]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d006      	beq.n	80071f0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	0011      	movs	r1, r2
 80071e8:	0018      	movs	r0, r3
 80071ea:	f000 f8da 	bl	80073a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071ee:	e026      	b.n	800723e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	23a7      	movs	r3, #167	@ 0xa7
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	5cd3      	ldrb	r3, [r2, r3]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	dc02      	bgt.n	8007202 <USBD_GetConfig+0x32>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dc03      	bgt.n	8007208 <USBD_GetConfig+0x38>
 8007200:	e016      	b.n	8007230 <USBD_GetConfig+0x60>
 8007202:	2b03      	cmp	r3, #3
 8007204:	d00c      	beq.n	8007220 <USBD_GetConfig+0x50>
 8007206:	e013      	b.n	8007230 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3308      	adds	r3, #8
 8007212:	0019      	movs	r1, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	0018      	movs	r0, r3
 800721a:	f000 f940 	bl	800749e <USBD_CtlSendData>
        break;
 800721e:	e00e      	b.n	800723e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	1d19      	adds	r1, r3, #4
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	0018      	movs	r0, r3
 800722a:	f000 f938 	bl	800749e <USBD_CtlSendData>
        break;
 800722e:	e006      	b.n	800723e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	0011      	movs	r1, r2
 8007236:	0018      	movs	r0, r3
 8007238:	f000 f8b3 	bl	80073a2 <USBD_CtlError>
        break;
 800723c:	46c0      	nop			@ (mov r8, r8)
}
 800723e:	46c0      	nop			@ (mov r8, r8)
 8007240:	46bd      	mov	sp, r7
 8007242:	b002      	add	sp, #8
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	23a7      	movs	r3, #167	@ 0xa7
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	5cd3      	ldrb	r3, [r2, r3]
 8007258:	3b01      	subs	r3, #1
 800725a:	2b02      	cmp	r3, #2
 800725c:	d822      	bhi.n	80072a4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	88db      	ldrh	r3, [r3, #6]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d006      	beq.n	8007274 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0011      	movs	r1, r2
 800726c:	0018      	movs	r0, r3
 800726e:	f000 f898 	bl	80073a2 <USBD_CtlError>
        break;
 8007272:	e01e      	b.n	80072b2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	23a9      	movs	r3, #169	@ 0xa9
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	58d3      	ldr	r3, [r2, r3]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	2202      	movs	r2, #2
 800728c:	431a      	orrs	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	330c      	adds	r3, #12
 8007296:	0019      	movs	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	0018      	movs	r0, r3
 800729e:	f000 f8fe 	bl	800749e <USBD_CtlSendData>
      break;
 80072a2:	e006      	b.n	80072b2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	0011      	movs	r1, r2
 80072aa:	0018      	movs	r0, r3
 80072ac:	f000 f879 	bl	80073a2 <USBD_CtlError>
      break;
 80072b0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b002      	add	sp, #8
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	885b      	ldrh	r3, [r3, #2]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d108      	bne.n	80072de <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	23a9      	movs	r3, #169	@ 0xa9
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	2101      	movs	r1, #1
 80072d4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	0018      	movs	r0, r3
 80072da:	f000 f94a 	bl	8007572 <USBD_CtlSendStatus>
  }
}
 80072de:	46c0      	nop			@ (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b002      	add	sp, #8
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	23a7      	movs	r3, #167	@ 0xa7
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	5cd3      	ldrb	r3, [r2, r3]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d80d      	bhi.n	800731a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d110      	bne.n	8007328 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	23a9      	movs	r3, #169	@ 0xa9
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	2100      	movs	r1, #0
 800730e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	0018      	movs	r0, r3
 8007314:	f000 f92d 	bl	8007572 <USBD_CtlSendStatus>
      }
      break;
 8007318:	e006      	b.n	8007328 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	0011      	movs	r1, r2
 8007320:	0018      	movs	r0, r3
 8007322:	f000 f83e 	bl	80073a2 <USBD_CtlError>
      break;
 8007326:	e000      	b.n	800732a <USBD_ClrFeature+0x44>
      break;
 8007328:	46c0      	nop			@ (mov r8, r8)
  }
}
 800732a:	46c0      	nop			@ (mov r8, r8)
 800732c:	46bd      	mov	sp, r7
 800732e:	b002      	add	sp, #8
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	785a      	ldrb	r2, [r3, #1]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	3302      	adds	r3, #2
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	001a      	movs	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	3303      	adds	r3, #3
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	b29b      	uxth	r3, r3
 800735e:	18d3      	adds	r3, r2, r3
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	3304      	adds	r3, #4
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	001a      	movs	r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	3305      	adds	r3, #5
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	021b      	lsls	r3, r3, #8
 8007376:	b29b      	uxth	r3, r3
 8007378:	18d3      	adds	r3, r2, r3
 800737a:	b29a      	uxth	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	3306      	adds	r3, #6
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	001a      	movs	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	3307      	adds	r3, #7
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	b29b      	uxth	r3, r3
 8007392:	18d3      	adds	r3, r2, r3
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	80da      	strh	r2, [r3, #6]

}
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	46bd      	mov	sp, r7
 800739e:	b002      	add	sp, #8
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2180      	movs	r1, #128	@ 0x80
 80073b0:	0018      	movs	r0, r3
 80073b2:	f000 fc86 	bl	8007cc2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2100      	movs	r1, #0
 80073ba:	0018      	movs	r0, r3
 80073bc:	f000 fc81 	bl	8007cc2 <USBD_LL_StallEP>
}
 80073c0:	46c0      	nop			@ (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b002      	add	sp, #8
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073d4:	2417      	movs	r4, #23
 80073d6:	193b      	adds	r3, r7, r4
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d03c      	beq.n	800745c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	0018      	movs	r0, r3
 80073e6:	f000 f83d 	bl	8007464 <USBD_GetLen>
 80073ea:	0003      	movs	r3, r0
 80073ec:	3301      	adds	r3, #1
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	18db      	adds	r3, r3, r3
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80073f8:	193b      	adds	r3, r7, r4
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	193a      	adds	r2, r7, r4
 80073fe:	1c59      	adds	r1, r3, #1
 8007400:	7011      	strb	r1, [r2, #0]
 8007402:	001a      	movs	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	189b      	adds	r3, r3, r2
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	7812      	ldrb	r2, [r2, #0]
 800740c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800740e:	193b      	adds	r3, r7, r4
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	193a      	adds	r2, r7, r4
 8007414:	1c59      	adds	r1, r3, #1
 8007416:	7011      	strb	r1, [r2, #0]
 8007418:	001a      	movs	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	189b      	adds	r3, r3, r2
 800741e:	2203      	movs	r2, #3
 8007420:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007422:	e017      	b.n	8007454 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	60fa      	str	r2, [r7, #12]
 800742a:	2417      	movs	r4, #23
 800742c:	193a      	adds	r2, r7, r4
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	1939      	adds	r1, r7, r4
 8007432:	1c50      	adds	r0, r2, #1
 8007434:	7008      	strb	r0, [r1, #0]
 8007436:	0011      	movs	r1, r2
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	1852      	adds	r2, r2, r1
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007440:	193b      	adds	r3, r7, r4
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	193a      	adds	r2, r7, r4
 8007446:	1c59      	adds	r1, r3, #1
 8007448:	7011      	strb	r1, [r2, #0]
 800744a:	001a      	movs	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	189b      	adds	r3, r3, r2
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e3      	bne.n	8007424 <USBD_GetString+0x5c>
    }
  }
}
 800745c:	46c0      	nop			@ (mov r8, r8)
 800745e:	46bd      	mov	sp, r7
 8007460:	b007      	add	sp, #28
 8007462:	bd90      	pop	{r4, r7, pc}

08007464 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800746c:	230f      	movs	r3, #15
 800746e:	18fb      	adds	r3, r7, r3
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007474:	e008      	b.n	8007488 <USBD_GetLen+0x24>
  {
    len++;
 8007476:	210f      	movs	r1, #15
 8007478:	187b      	adds	r3, r7, r1
 800747a:	781a      	ldrb	r2, [r3, #0]
 800747c:	187b      	adds	r3, r7, r1
 800747e:	3201      	adds	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
    buf++;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3301      	adds	r3, #1
 8007486:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1f2      	bne.n	8007476 <USBD_GetLen+0x12>
  }

  return len;
 8007490:	230f      	movs	r3, #15
 8007492:	18fb      	adds	r3, r7, r3
 8007494:	781b      	ldrb	r3, [r3, #0]
}
 8007496:	0018      	movs	r0, r3
 8007498:	46bd      	mov	sp, r7
 800749a:	b004      	add	sp, #16
 800749c:	bd80      	pop	{r7, pc}

0800749e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	1dbb      	adds	r3, r7, #6
 80074aa:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	23a5      	movs	r3, #165	@ 0xa5
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	2102      	movs	r1, #2
 80074b4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80074b6:	1dbb      	adds	r3, r7, #6
 80074b8:	881a      	ldrh	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80074be:	1dbb      	adds	r3, r7, #6
 80074c0:	881a      	ldrh	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c6:	1dbb      	adds	r3, r7, #6
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	2100      	movs	r1, #0
 80074d0:	f000 fca8 	bl	8007e24 <USBD_LL_Transmit>

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	0018      	movs	r0, r3
 80074d8:	46bd      	mov	sp, r7
 80074da:	b004      	add	sp, #16
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	1dbb      	adds	r3, r7, #6
 80074ea:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074ec:	1dbb      	adds	r3, r7, #6
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	2100      	movs	r1, #0
 80074f6:	f000 fc95 	bl	8007e24 <USBD_LL_Transmit>

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	0018      	movs	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	b004      	add	sp, #16
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	1dbb      	adds	r3, r7, #6
 8007510:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	23a5      	movs	r3, #165	@ 0xa5
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	2103      	movs	r1, #3
 800751a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800751c:	1dbb      	adds	r3, r7, #6
 800751e:	8819      	ldrh	r1, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	23ae      	movs	r3, #174	@ 0xae
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8007528:	1dbb      	adds	r3, r7, #6
 800752a:	8819      	ldrh	r1, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	23b0      	movs	r3, #176	@ 0xb0
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007534:	1dbb      	adds	r3, r7, #6
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	2100      	movs	r1, #0
 800753e:	f000 fca8 	bl	8007e92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	0018      	movs	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	b004      	add	sp, #16
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	1dbb      	adds	r3, r7, #6
 8007558:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800755a:	1dbb      	adds	r3, r7, #6
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	2100      	movs	r1, #0
 8007564:	f000 fc95 	bl	8007e92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	0018      	movs	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	b004      	add	sp, #16
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	23a5      	movs	r3, #165	@ 0xa5
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	2104      	movs	r1, #4
 8007582:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	2300      	movs	r3, #0
 8007588:	2200      	movs	r2, #0
 800758a:	2100      	movs	r1, #0
 800758c:	f000 fc4a 	bl	8007e24 <USBD_LL_Transmit>

  return USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	0018      	movs	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	b002      	add	sp, #8
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b082      	sub	sp, #8
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	23a5      	movs	r3, #165	@ 0xa5
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	2105      	movs	r1, #5
 80075aa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	2300      	movs	r3, #0
 80075b0:	2200      	movs	r2, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	f000 fc6d 	bl	8007e92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	0018      	movs	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	b002      	add	sp, #8
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075c8:	4914      	ldr	r1, [pc, #80]	@ (800761c <MX_USB_DEVICE_Init+0x58>)
 80075ca:	4b15      	ldr	r3, [pc, #84]	@ (8007620 <MX_USB_DEVICE_Init+0x5c>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	0018      	movs	r0, r3
 80075d0:	f7fe fdeb 	bl	80061aa <USBD_Init>
 80075d4:	1e03      	subs	r3, r0, #0
 80075d6:	d001      	beq.n	80075dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075d8:	f7f9 f822 	bl	8000620 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075dc:	4a11      	ldr	r2, [pc, #68]	@ (8007624 <MX_USB_DEVICE_Init+0x60>)
 80075de:	4b10      	ldr	r3, [pc, #64]	@ (8007620 <MX_USB_DEVICE_Init+0x5c>)
 80075e0:	0011      	movs	r1, r2
 80075e2:	0018      	movs	r0, r3
 80075e4:	f7fe fe12 	bl	800620c <USBD_RegisterClass>
 80075e8:	1e03      	subs	r3, r0, #0
 80075ea:	d001      	beq.n	80075f0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80075ec:	f7f9 f818 	bl	8000620 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007628 <MX_USB_DEVICE_Init+0x64>)
 80075f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <MX_USB_DEVICE_Init+0x5c>)
 80075f4:	0011      	movs	r1, r2
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7fe fd5e 	bl	80060b8 <USBD_CDC_RegisterInterface>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d001      	beq.n	8007604 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007600:	f7f9 f80e 	bl	8000620 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007604:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <MX_USB_DEVICE_Init+0x5c>)
 8007606:	0018      	movs	r0, r3
 8007608:	f7fe fe20 	bl	800624c <USBD_Start>
 800760c:	1e03      	subs	r3, r0, #0
 800760e:	d001      	beq.n	8007614 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007610:	f7f9 f806 	bl	8000620 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007614:	46c0      	nop			@ (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	2000012c 	.word	0x2000012c
 8007620:	200001fc 	.word	0x200001fc
 8007624:	20000018 	.word	0x20000018
 8007628:	2000011c 	.word	0x2000011c

0800762c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007630:	4907      	ldr	r1, [pc, #28]	@ (8007650 <CDC_Init_FS+0x24>)
 8007632:	4b08      	ldr	r3, [pc, #32]	@ (8007654 <CDC_Init_FS+0x28>)
 8007634:	2200      	movs	r2, #0
 8007636:	0018      	movs	r0, r3
 8007638:	f7fe fd59 	bl	80060ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800763c:	4a06      	ldr	r2, [pc, #24]	@ (8007658 <CDC_Init_FS+0x2c>)
 800763e:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <CDC_Init_FS+0x28>)
 8007640:	0011      	movs	r1, r2
 8007642:	0018      	movs	r0, r3
 8007644:	f7fe fd6f 	bl	8006126 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007648:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	200008c0 	.word	0x200008c0
 8007654:	200001fc 	.word	0x200001fc
 8007658:	200004c0 	.word	0x200004c0

0800765c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007660:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007662:	0018      	movs	r0, r3
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6039      	str	r1, [r7, #0]
 8007670:	0011      	movs	r1, r2
 8007672:	1dfb      	adds	r3, r7, #7
 8007674:	1c02      	adds	r2, r0, #0
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	1d3b      	adds	r3, r7, #4
 800767a:	1c0a      	adds	r2, r1, #0
 800767c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800767e:	1dfb      	adds	r3, r7, #7
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b23      	cmp	r3, #35	@ 0x23
 8007684:	d804      	bhi.n	8007690 <CDC_Control_FS+0x28>
 8007686:	009a      	lsls	r2, r3, #2
 8007688:	4b04      	ldr	r3, [pc, #16]	@ (800769c <CDC_Control_FS+0x34>)
 800768a:	18d3      	adds	r3, r2, r3
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007690:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8007692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007694:	0018      	movs	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	b002      	add	sp, #8
 800769a:	bd80      	pop	{r7, pc}
 800769c:	08008104 	.word	0x08008104

080076a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <CDC_Receive_FS+0x28>)
 80076ae:	0011      	movs	r1, r2
 80076b0:	0018      	movs	r0, r3
 80076b2:	f7fe fd38 	bl	8006126 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076b6:	4b04      	ldr	r3, [pc, #16]	@ (80076c8 <CDC_Receive_FS+0x28>)
 80076b8:	0018      	movs	r0, r3
 80076ba:	f7fe fd48 	bl	800614e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076c0:	0018      	movs	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b002      	add	sp, #8
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	200001fc 	.word	0x200001fc

080076cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	0002      	movs	r2, r0
 80076d4:	6039      	str	r1, [r7, #0]
 80076d6:	1dfb      	adds	r3, r7, #7
 80076d8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2212      	movs	r2, #18
 80076de:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076e0:	4b02      	ldr	r3, [pc, #8]	@ (80076ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80076e2:	0018      	movs	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b002      	add	sp, #8
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	46c0      	nop			@ (mov r8, r8)
 80076ec:	20000148 	.word	0x20000148

080076f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	0002      	movs	r2, r0
 80076f8:	6039      	str	r1, [r7, #0]
 80076fa:	1dfb      	adds	r3, r7, #7
 80076fc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2204      	movs	r2, #4
 8007702:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007704:	4b02      	ldr	r3, [pc, #8]	@ (8007710 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007706:	0018      	movs	r0, r3
 8007708:	46bd      	mov	sp, r7
 800770a:	b002      	add	sp, #8
 800770c:	bd80      	pop	{r7, pc}
 800770e:	46c0      	nop			@ (mov r8, r8)
 8007710:	2000015c 	.word	0x2000015c

08007714 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	0002      	movs	r2, r0
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	1dfb      	adds	r3, r7, #7
 8007720:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007722:	1dfb      	adds	r3, r7, #7
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4908      	ldr	r1, [pc, #32]	@ (8007750 <USBD_FS_ProductStrDescriptor+0x3c>)
 800772e:	4b09      	ldr	r3, [pc, #36]	@ (8007754 <USBD_FS_ProductStrDescriptor+0x40>)
 8007730:	0018      	movs	r0, r3
 8007732:	f7ff fe49 	bl	80073c8 <USBD_GetString>
 8007736:	e005      	b.n	8007744 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	4905      	ldr	r1, [pc, #20]	@ (8007750 <USBD_FS_ProductStrDescriptor+0x3c>)
 800773c:	4b05      	ldr	r3, [pc, #20]	@ (8007754 <USBD_FS_ProductStrDescriptor+0x40>)
 800773e:	0018      	movs	r0, r3
 8007740:	f7ff fe42 	bl	80073c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007744:	4b02      	ldr	r3, [pc, #8]	@ (8007750 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007746:	0018      	movs	r0, r3
 8007748:	46bd      	mov	sp, r7
 800774a:	b002      	add	sp, #8
 800774c:	bd80      	pop	{r7, pc}
 800774e:	46c0      	nop			@ (mov r8, r8)
 8007750:	20000cc0 	.word	0x20000cc0
 8007754:	08008040 	.word	0x08008040

08007758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	0002      	movs	r2, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	1dfb      	adds	r3, r7, #7
 8007764:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	4904      	ldr	r1, [pc, #16]	@ (800777c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800776a:	4b05      	ldr	r3, [pc, #20]	@ (8007780 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800776c:	0018      	movs	r0, r3
 800776e:	f7ff fe2b 	bl	80073c8 <USBD_GetString>
  return USBD_StrDesc;
 8007772:	4b02      	ldr	r3, [pc, #8]	@ (800777c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007774:	0018      	movs	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	b002      	add	sp, #8
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000cc0 	.word	0x20000cc0
 8007780:	08008058 	.word	0x08008058

08007784 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	0002      	movs	r2, r0
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	1dfb      	adds	r3, r7, #7
 8007790:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	221a      	movs	r2, #26
 8007796:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007798:	f000 f84c 	bl	8007834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800779e:	0018      	movs	r0, r3
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b002      	add	sp, #8
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			@ (mov r8, r8)
 80077a8:	20000160 	.word	0x20000160

080077ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	0002      	movs	r2, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80077ba:	1dfb      	adds	r3, r7, #7
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	4908      	ldr	r1, [pc, #32]	@ (80077e8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80077c6:	4b09      	ldr	r3, [pc, #36]	@ (80077ec <USBD_FS_ConfigStrDescriptor+0x40>)
 80077c8:	0018      	movs	r0, r3
 80077ca:	f7ff fdfd 	bl	80073c8 <USBD_GetString>
 80077ce:	e005      	b.n	80077dc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	4905      	ldr	r1, [pc, #20]	@ (80077e8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80077d4:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <USBD_FS_ConfigStrDescriptor+0x40>)
 80077d6:	0018      	movs	r0, r3
 80077d8:	f7ff fdf6 	bl	80073c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077dc:	4b02      	ldr	r3, [pc, #8]	@ (80077e8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b002      	add	sp, #8
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	46c0      	nop			@ (mov r8, r8)
 80077e8:	20000cc0 	.word	0x20000cc0
 80077ec:	0800806c 	.word	0x0800806c

080077f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	0002      	movs	r2, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	1dfb      	adds	r3, r7, #7
 80077fc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80077fe:	1dfb      	adds	r3, r7, #7
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4908      	ldr	r1, [pc, #32]	@ (800782c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800780a:	4b09      	ldr	r3, [pc, #36]	@ (8007830 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800780c:	0018      	movs	r0, r3
 800780e:	f7ff fddb 	bl	80073c8 <USBD_GetString>
 8007812:	e005      	b.n	8007820 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	4905      	ldr	r1, [pc, #20]	@ (800782c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007818:	4b05      	ldr	r3, [pc, #20]	@ (8007830 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800781a:	0018      	movs	r0, r3
 800781c:	f7ff fdd4 	bl	80073c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007820:	4b02      	ldr	r3, [pc, #8]	@ (800782c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007822:	0018      	movs	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	b002      	add	sp, #8
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	20000cc0 	.word	0x20000cc0
 8007830:	08008078 	.word	0x08008078

08007834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800783a:	4b10      	ldr	r3, [pc, #64]	@ (800787c <Get_SerialNum+0x48>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007840:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <Get_SerialNum+0x4c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007846:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <Get_SerialNum+0x50>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	18d3      	adds	r3, r2, r3
 8007852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00b      	beq.n	8007872 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800785a:	490b      	ldr	r1, [pc, #44]	@ (8007888 <Get_SerialNum+0x54>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2208      	movs	r2, #8
 8007860:	0018      	movs	r0, r3
 8007862:	f000 f815 	bl	8007890 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007866:	4909      	ldr	r1, [pc, #36]	@ (800788c <Get_SerialNum+0x58>)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2204      	movs	r2, #4
 800786c:	0018      	movs	r0, r3
 800786e:	f000 f80f 	bl	8007890 <IntToUnicode>
  }
}
 8007872:	46c0      	nop			@ (mov r8, r8)
 8007874:	46bd      	mov	sp, r7
 8007876:	b004      	add	sp, #16
 8007878:	bd80      	pop	{r7, pc}
 800787a:	46c0      	nop			@ (mov r8, r8)
 800787c:	1ff80050 	.word	0x1ff80050
 8007880:	1ff80054 	.word	0x1ff80054
 8007884:	1ff80058 	.word	0x1ff80058
 8007888:	20000162 	.word	0x20000162
 800788c:	20000172 	.word	0x20000172

08007890 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	1dfb      	adds	r3, r7, #7
 800789c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800789e:	2117      	movs	r1, #23
 80078a0:	187b      	adds	r3, r7, r1
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80078a6:	187b      	adds	r3, r7, r1
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e02f      	b.n	800790e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	0f1b      	lsrs	r3, r3, #28
 80078b2:	2b09      	cmp	r3, #9
 80078b4:	d80d      	bhi.n	80078d2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	0f1b      	lsrs	r3, r3, #28
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	2317      	movs	r3, #23
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	0019      	movs	r1, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	185b      	adds	r3, r3, r1
 80078ca:	3230      	adds	r2, #48	@ 0x30
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	e00c      	b.n	80078ec <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	0f1b      	lsrs	r3, r3, #28
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	2317      	movs	r3, #23
 80078da:	18fb      	adds	r3, r7, r3
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	0019      	movs	r1, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	185b      	adds	r3, r3, r1
 80078e6:	3237      	adds	r2, #55	@ 0x37
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078f2:	2117      	movs	r1, #23
 80078f4:	187b      	adds	r3, r7, r1
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	3301      	adds	r3, #1
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	18d3      	adds	r3, r2, r3
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007904:	187b      	adds	r3, r7, r1
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	187b      	adds	r3, r7, r1
 800790a:	3201      	adds	r2, #1
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	2317      	movs	r3, #23
 8007910:	18fa      	adds	r2, r7, r3
 8007912:	1dfb      	adds	r3, r7, #7
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d3c8      	bcc.n	80078ae <IntToUnicode+0x1e>
  }
}
 800791c:	46c0      	nop			@ (mov r8, r8)
 800791e:	46c0      	nop			@ (mov r8, r8)
 8007920:	46bd      	mov	sp, r7
 8007922:	b006      	add	sp, #24
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a0a      	ldr	r2, [pc, #40]	@ (8007960 <HAL_PCD_MspInit+0x38>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d10e      	bne.n	8007958 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800793a:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <HAL_PCD_MspInit+0x3c>)
 800793c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800793e:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <HAL_PCD_MspInit+0x3c>)
 8007940:	2180      	movs	r1, #128	@ 0x80
 8007942:	0409      	lsls	r1, r1, #16
 8007944:	430a      	orrs	r2, r1
 8007946:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007948:	2200      	movs	r2, #0
 800794a:	2100      	movs	r1, #0
 800794c:	201f      	movs	r0, #31
 800794e:	f7f9 f837 	bl	80009c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007952:	201f      	movs	r0, #31
 8007954:	f7f9 f849 	bl	80009ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007958:	46c0      	nop			@ (mov r8, r8)
 800795a:	46bd      	mov	sp, r7
 800795c:	b002      	add	sp, #8
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40005c00 	.word	0x40005c00
 8007964:	40021000 	.word	0x40021000

08007968 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	23b6      	movs	r3, #182	@ 0xb6
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	58d2      	ldr	r2, [r2, r3]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	21a6      	movs	r1, #166	@ 0xa6
 800797c:	0089      	lsls	r1, r1, #2
 800797e:	468c      	mov	ip, r1
 8007980:	4463      	add	r3, ip
 8007982:	0019      	movs	r1, r3
 8007984:	0010      	movs	r0, r2
 8007986:	f7fe fcb5 	bl	80062f4 <USBD_LL_SetupStage>
}
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	46bd      	mov	sp, r7
 800798e:	b002      	add	sp, #8
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007992:	b590      	push	{r4, r7, lr}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	000a      	movs	r2, r1
 800799c:	1cfb      	adds	r3, r7, #3
 800799e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	23b6      	movs	r3, #182	@ 0xb6
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	58d4      	ldr	r4, [r2, r3]
 80079a8:	1cfb      	adds	r3, r7, #3
 80079aa:	781a      	ldrb	r2, [r3, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	23b2      	movs	r3, #178	@ 0xb2
 80079b0:	0059      	lsls	r1, r3, #1
 80079b2:	0013      	movs	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	18c3      	adds	r3, r0, r3
 80079bc:	185b      	adds	r3, r3, r1
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	1cfb      	adds	r3, r7, #3
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	0019      	movs	r1, r3
 80079c6:	0020      	movs	r0, r4
 80079c8:	f7fe fcf2 	bl	80063b0 <USBD_LL_DataOutStage>
}
 80079cc:	46c0      	nop			@ (mov r8, r8)
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b003      	add	sp, #12
 80079d2:	bd90      	pop	{r4, r7, pc}

080079d4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	000a      	movs	r2, r1
 80079de:	1cfb      	adds	r3, r7, #3
 80079e0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	23b6      	movs	r3, #182	@ 0xb6
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	58d0      	ldr	r0, [r2, r3]
 80079ea:	1cfb      	adds	r3, r7, #3
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	0013      	movs	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	189b      	adds	r3, r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	18cb      	adds	r3, r1, r3
 80079fa:	3324      	adds	r3, #36	@ 0x24
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	1cfb      	adds	r3, r7, #3
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	0019      	movs	r1, r3
 8007a04:	f7fe fd56 	bl	80064b4 <USBD_LL_DataInStage>
}
 8007a08:	46c0      	nop			@ (mov r8, r8)
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	b002      	add	sp, #8
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	23b6      	movs	r3, #182	@ 0xb6
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	58d3      	ldr	r3, [r2, r3]
 8007a20:	0018      	movs	r0, r3
 8007a22:	f7fe fe8d 	bl	8006740 <USBD_LL_SOF>
}
 8007a26:	46c0      	nop			@ (mov r8, r8)
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	b002      	add	sp, #8
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a36:	230f      	movs	r3, #15
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	795b      	ldrb	r3, [r3, #5]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d001      	beq.n	8007a4a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007a46:	f7f8 fdeb 	bl	8000620 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	23b6      	movs	r3, #182	@ 0xb6
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	58d2      	ldr	r2, [r2, r3]
 8007a52:	230f      	movs	r3, #15
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	0019      	movs	r1, r3
 8007a5a:	0010      	movs	r0, r2
 8007a5c:	f7fe fe2f 	bl	80066be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	23b6      	movs	r3, #182	@ 0xb6
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	58d3      	ldr	r3, [r2, r3]
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f7fe fde0 	bl	800662e <USBD_LL_Reset>
}
 8007a6e:	46c0      	nop			@ (mov r8, r8)
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b004      	add	sp, #16
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	23b6      	movs	r3, #182	@ 0xb6
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	58d3      	ldr	r3, [r2, r3]
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7fe fe29 	bl	80066e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	7a5b      	ldrb	r3, [r3, #9]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a96:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <HAL_PCD_SuspendCallback+0x34>)
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	4b04      	ldr	r3, [pc, #16]	@ (8007aac <HAL_PCD_SuspendCallback+0x34>)
 8007a9c:	2106      	movs	r1, #6
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007aa2:	46c0      	nop			@ (mov r8, r8)
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b002      	add	sp, #8
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	e000ed00 	.word	0xe000ed00

08007ab0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7a5b      	ldrb	r3, [r3, #9]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ac0:	4b09      	ldr	r3, [pc, #36]	@ (8007ae8 <HAL_PCD_ResumeCallback+0x38>)
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	4b08      	ldr	r3, [pc, #32]	@ (8007ae8 <HAL_PCD_ResumeCallback+0x38>)
 8007ac6:	2106      	movs	r1, #6
 8007ac8:	438a      	bics	r2, r1
 8007aca:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007acc:	f000 fa42 	bl	8007f54 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	23b6      	movs	r3, #182	@ 0xb6
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	58d3      	ldr	r3, [r2, r3]
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f7fe fe19 	bl	8006710 <USBD_LL_Resume>
}
 8007ade:	46c0      	nop			@ (mov r8, r8)
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	46c0      	nop			@ (mov r8, r8)
 8007ae8:	e000ed00 	.word	0xe000ed00

08007aec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007af4:	4a2d      	ldr	r2, [pc, #180]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007af6:	23b6      	movs	r3, #182	@ 0xb6
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	23b0      	movs	r3, #176	@ 0xb0
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4929      	ldr	r1, [pc, #164]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b06:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007b08:	4b28      	ldr	r3, [pc, #160]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b0a:	4a29      	ldr	r2, [pc, #164]	@ (8007bb0 <USBD_LL_Init+0xc4>)
 8007b0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b0e:	4b27      	ldr	r3, [pc, #156]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b10:	2208      	movs	r2, #8
 8007b12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b14:	4b25      	ldr	r3, [pc, #148]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b16:	2202      	movs	r2, #2
 8007b18:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b1a:	4b24      	ldr	r3, [pc, #144]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b20:	4b22      	ldr	r3, [pc, #136]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b26:	4b21      	ldr	r3, [pc, #132]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b32:	4b1e      	ldr	r3, [pc, #120]	@ (8007bac <USBD_LL_Init+0xc0>)
 8007b34:	0018      	movs	r0, r3
 8007b36:	f7f9 f911 	bl	8000d5c <HAL_PCD_Init>
 8007b3a:	1e03      	subs	r3, r0, #0
 8007b3c:	d001      	beq.n	8007b42 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007b3e:	f7f8 fd6f 	bl	8000620 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	23b0      	movs	r3, #176	@ 0xb0
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	58d0      	ldr	r0, [r2, r3]
 8007b4a:	2318      	movs	r3, #24
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2100      	movs	r1, #0
 8007b50:	f7fa fecc 	bl	80028ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	23b0      	movs	r3, #176	@ 0xb0
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	58d0      	ldr	r0, [r2, r3]
 8007b5c:	2358      	movs	r3, #88	@ 0x58
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2180      	movs	r1, #128	@ 0x80
 8007b62:	f7fa fec3 	bl	80028ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	23b0      	movs	r3, #176	@ 0xb0
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	58d0      	ldr	r0, [r2, r3]
 8007b6e:	23c0      	movs	r3, #192	@ 0xc0
 8007b70:	2200      	movs	r2, #0
 8007b72:	2181      	movs	r1, #129	@ 0x81
 8007b74:	f7fa feba 	bl	80028ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	23b0      	movs	r3, #176	@ 0xb0
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	58d0      	ldr	r0, [r2, r3]
 8007b80:	2388      	movs	r3, #136	@ 0x88
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	2200      	movs	r2, #0
 8007b86:	2101      	movs	r1, #1
 8007b88:	f7fa feb0 	bl	80028ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	23b0      	movs	r3, #176	@ 0xb0
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	58d0      	ldr	r0, [r2, r3]
 8007b94:	2380      	movs	r3, #128	@ 0x80
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2182      	movs	r1, #130	@ 0x82
 8007b9c:	f7fa fea6 	bl	80028ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b002      	add	sp, #8
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	46c0      	nop			@ (mov r8, r8)
 8007bac:	20000ec0 	.word	0x20000ec0
 8007bb0:	40005c00 	.word	0x40005c00

08007bb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bbc:	210f      	movs	r1, #15
 8007bbe:	187b      	adds	r3, r7, r1
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc4:	260e      	movs	r6, #14
 8007bc6:	19bb      	adds	r3, r7, r6
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	23b0      	movs	r3, #176	@ 0xb0
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	58d3      	ldr	r3, [r2, r3]
 8007bd4:	000d      	movs	r5, r1
 8007bd6:	187c      	adds	r4, r7, r1
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f7f9 f9b3 	bl	8000f44 <HAL_PCD_Start>
 8007bde:	0003      	movs	r3, r0
 8007be0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be2:	19bc      	adds	r4, r7, r6
 8007be4:	197b      	adds	r3, r7, r5
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f000 f9ba 	bl	8007f62 <USBD_Get_USB_Status>
 8007bee:	0003      	movs	r3, r0
 8007bf0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007bf2:	19bb      	adds	r3, r7, r6
 8007bf4:	781b      	ldrb	r3, [r3, #0]
}
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b005      	add	sp, #20
 8007bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	000c      	movs	r4, r1
 8007c08:	0010      	movs	r0, r2
 8007c0a:	0019      	movs	r1, r3
 8007c0c:	1cfb      	adds	r3, r7, #3
 8007c0e:	1c22      	adds	r2, r4, #0
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	1cbb      	adds	r3, r7, #2
 8007c14:	1c02      	adds	r2, r0, #0
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	003b      	movs	r3, r7
 8007c1a:	1c0a      	adds	r2, r1, #0
 8007c1c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1e:	260f      	movs	r6, #15
 8007c20:	19bb      	adds	r3, r7, r6
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c26:	250e      	movs	r5, #14
 8007c28:	197b      	adds	r3, r7, r5
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	23b0      	movs	r3, #176	@ 0xb0
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	58d0      	ldr	r0, [r2, r3]
 8007c36:	19bc      	adds	r4, r7, r6
 8007c38:	1cbb      	adds	r3, r7, #2
 8007c3a:	781d      	ldrb	r5, [r3, #0]
 8007c3c:	003b      	movs	r3, r7
 8007c3e:	881a      	ldrh	r2, [r3, #0]
 8007c40:	1cfb      	adds	r3, r7, #3
 8007c42:	7819      	ldrb	r1, [r3, #0]
 8007c44:	002b      	movs	r3, r5
 8007c46:	f7f9 fb11 	bl	800126c <HAL_PCD_EP_Open>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c4e:	250e      	movs	r5, #14
 8007c50:	197c      	adds	r4, r7, r5
 8007c52:	19bb      	adds	r3, r7, r6
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	0018      	movs	r0, r3
 8007c58:	f000 f983 	bl	8007f62 <USBD_Get_USB_Status>
 8007c5c:	0003      	movs	r3, r0
 8007c5e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007c60:	197b      	adds	r3, r7, r5
 8007c62:	781b      	ldrb	r3, [r3, #0]
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b005      	add	sp, #20
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c6c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	000a      	movs	r2, r1
 8007c76:	1cfb      	adds	r3, r7, #3
 8007c78:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c7a:	210f      	movs	r1, #15
 8007c7c:	187b      	adds	r3, r7, r1
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c82:	260e      	movs	r6, #14
 8007c84:	19bb      	adds	r3, r7, r6
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	23b0      	movs	r3, #176	@ 0xb0
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	58d2      	ldr	r2, [r2, r3]
 8007c92:	000d      	movs	r5, r1
 8007c94:	187c      	adds	r4, r7, r1
 8007c96:	1cfb      	adds	r3, r7, #3
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	0019      	movs	r1, r3
 8007c9c:	0010      	movs	r0, r2
 8007c9e:	f7f9 fb56 	bl	800134e <HAL_PCD_EP_Close>
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca6:	19bc      	adds	r4, r7, r6
 8007ca8:	197b      	adds	r3, r7, r5
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f000 f958 	bl	8007f62 <USBD_Get_USB_Status>
 8007cb2:	0003      	movs	r3, r0
 8007cb4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007cb6:	19bb      	adds	r3, r7, r6
 8007cb8:	781b      	ldrb	r3, [r3, #0]
}
 8007cba:	0018      	movs	r0, r3
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	b005      	add	sp, #20
 8007cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cc2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	000a      	movs	r2, r1
 8007ccc:	1cfb      	adds	r3, r7, #3
 8007cce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd0:	210f      	movs	r1, #15
 8007cd2:	187b      	adds	r3, r7, r1
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd8:	260e      	movs	r6, #14
 8007cda:	19bb      	adds	r3, r7, r6
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	23b0      	movs	r3, #176	@ 0xb0
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	58d2      	ldr	r2, [r2, r3]
 8007ce8:	000d      	movs	r5, r1
 8007cea:	187c      	adds	r4, r7, r1
 8007cec:	1cfb      	adds	r3, r7, #3
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	0019      	movs	r1, r3
 8007cf2:	0010      	movs	r0, r2
 8007cf4:	f7f9 fc08 	bl	8001508 <HAL_PCD_EP_SetStall>
 8007cf8:	0003      	movs	r3, r0
 8007cfa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfc:	19bc      	adds	r4, r7, r6
 8007cfe:	197b      	adds	r3, r7, r5
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	0018      	movs	r0, r3
 8007d04:	f000 f92d 	bl	8007f62 <USBD_Get_USB_Status>
 8007d08:	0003      	movs	r3, r0
 8007d0a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007d0c:	19bb      	adds	r3, r7, r6
 8007d0e:	781b      	ldrb	r3, [r3, #0]
}
 8007d10:	0018      	movs	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b005      	add	sp, #20
 8007d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d18 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	000a      	movs	r2, r1
 8007d22:	1cfb      	adds	r3, r7, #3
 8007d24:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d26:	210f      	movs	r1, #15
 8007d28:	187b      	adds	r3, r7, r1
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2e:	260e      	movs	r6, #14
 8007d30:	19bb      	adds	r3, r7, r6
 8007d32:	2200      	movs	r2, #0
 8007d34:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	23b0      	movs	r3, #176	@ 0xb0
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	58d2      	ldr	r2, [r2, r3]
 8007d3e:	000d      	movs	r5, r1
 8007d40:	187c      	adds	r4, r7, r1
 8007d42:	1cfb      	adds	r3, r7, #3
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	0019      	movs	r1, r3
 8007d48:	0010      	movs	r0, r2
 8007d4a:	f7f9 fc39 	bl	80015c0 <HAL_PCD_EP_ClrStall>
 8007d4e:	0003      	movs	r3, r0
 8007d50:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d52:	19bc      	adds	r4, r7, r6
 8007d54:	197b      	adds	r3, r7, r5
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f000 f902 	bl	8007f62 <USBD_Get_USB_Status>
 8007d5e:	0003      	movs	r3, r0
 8007d60:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007d62:	19bb      	adds	r3, r7, r6
 8007d64:	781b      	ldrb	r3, [r3, #0]
}
 8007d66:	0018      	movs	r0, r3
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b005      	add	sp, #20
 8007d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d6e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	000a      	movs	r2, r1
 8007d78:	1cfb      	adds	r3, r7, #3
 8007d7a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	23b0      	movs	r3, #176	@ 0xb0
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	58d3      	ldr	r3, [r2, r3]
 8007d84:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d86:	1cfb      	adds	r3, r7, #3
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da0c      	bge.n	8007daa <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d90:	1cfb      	adds	r3, r7, #3
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	227f      	movs	r2, #127	@ 0x7f
 8007d96:	401a      	ands	r2, r3
 8007d98:	68f9      	ldr	r1, [r7, #12]
 8007d9a:	0013      	movs	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	189b      	adds	r3, r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	18cb      	adds	r3, r1, r3
 8007da4:	3312      	adds	r3, #18
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	e00d      	b.n	8007dc6 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007daa:	1cfb      	adds	r3, r7, #3
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	227f      	movs	r2, #127	@ 0x7f
 8007db0:	401a      	ands	r2, r3
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	23a9      	movs	r3, #169	@ 0xa9
 8007db6:	0059      	lsls	r1, r3, #1
 8007db8:	0013      	movs	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	189b      	adds	r3, r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	18c3      	adds	r3, r0, r3
 8007dc2:	185b      	adds	r3, r3, r1
 8007dc4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b004      	add	sp, #16
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	000a      	movs	r2, r1
 8007dd8:	1cfb      	adds	r3, r7, #3
 8007dda:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ddc:	210f      	movs	r1, #15
 8007dde:	187b      	adds	r3, r7, r1
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de4:	260e      	movs	r6, #14
 8007de6:	19bb      	adds	r3, r7, r6
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	23b0      	movs	r3, #176	@ 0xb0
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	58d2      	ldr	r2, [r2, r3]
 8007df4:	000d      	movs	r5, r1
 8007df6:	187c      	adds	r4, r7, r1
 8007df8:	1cfb      	adds	r3, r7, #3
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	0019      	movs	r1, r3
 8007dfe:	0010      	movs	r0, r2
 8007e00:	f7f9 fa0a 	bl	8001218 <HAL_PCD_SetAddress>
 8007e04:	0003      	movs	r3, r0
 8007e06:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e08:	19bc      	adds	r4, r7, r6
 8007e0a:	197b      	adds	r3, r7, r5
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f000 f8a7 	bl	8007f62 <USBD_Get_USB_Status>
 8007e14:	0003      	movs	r3, r0
 8007e16:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e18:	19bb      	adds	r3, r7, r6
 8007e1a:	781b      	ldrb	r3, [r3, #0]
}
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b005      	add	sp, #20
 8007e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	0008      	movs	r0, r1
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	0019      	movs	r1, r3
 8007e32:	230b      	movs	r3, #11
 8007e34:	18fb      	adds	r3, r7, r3
 8007e36:	1c02      	adds	r2, r0, #0
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	2408      	movs	r4, #8
 8007e3c:	193b      	adds	r3, r7, r4
 8007e3e:	1c0a      	adds	r2, r1, #0
 8007e40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e42:	2117      	movs	r1, #23
 8007e44:	187b      	adds	r3, r7, r1
 8007e46:	2200      	movs	r2, #0
 8007e48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4a:	2516      	movs	r5, #22
 8007e4c:	197b      	adds	r3, r7, r5
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	23b0      	movs	r3, #176	@ 0xb0
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	58d0      	ldr	r0, [r2, r3]
 8007e5a:	193b      	adds	r3, r7, r4
 8007e5c:	881d      	ldrh	r5, [r3, #0]
 8007e5e:	000e      	movs	r6, r1
 8007e60:	187c      	adds	r4, r7, r1
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	230b      	movs	r3, #11
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	7819      	ldrb	r1, [r3, #0]
 8007e6a:	002b      	movs	r3, r5
 8007e6c:	f7f9 fb10 	bl	8001490 <HAL_PCD_EP_Transmit>
 8007e70:	0003      	movs	r3, r0
 8007e72:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e74:	2516      	movs	r5, #22
 8007e76:	197c      	adds	r4, r7, r5
 8007e78:	19bb      	adds	r3, r7, r6
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 f870 	bl	8007f62 <USBD_Get_USB_Status>
 8007e82:	0003      	movs	r3, r0
 8007e84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007e86:	197b      	adds	r3, r7, r5
 8007e88:	781b      	ldrb	r3, [r3, #0]
}
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	b007      	add	sp, #28
 8007e90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e92 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e94:	b087      	sub	sp, #28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	0008      	movs	r0, r1
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	0019      	movs	r1, r3
 8007ea0:	230b      	movs	r3, #11
 8007ea2:	18fb      	adds	r3, r7, r3
 8007ea4:	1c02      	adds	r2, r0, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	2408      	movs	r4, #8
 8007eaa:	193b      	adds	r3, r7, r4
 8007eac:	1c0a      	adds	r2, r1, #0
 8007eae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb0:	2117      	movs	r1, #23
 8007eb2:	187b      	adds	r3, r7, r1
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb8:	2516      	movs	r5, #22
 8007eba:	197b      	adds	r3, r7, r5
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	23b0      	movs	r3, #176	@ 0xb0
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	58d0      	ldr	r0, [r2, r3]
 8007ec8:	193b      	adds	r3, r7, r4
 8007eca:	881d      	ldrh	r5, [r3, #0]
 8007ecc:	000e      	movs	r6, r1
 8007ece:	187c      	adds	r4, r7, r1
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	230b      	movs	r3, #11
 8007ed4:	18fb      	adds	r3, r7, r3
 8007ed6:	7819      	ldrb	r1, [r3, #0]
 8007ed8:	002b      	movs	r3, r5
 8007eda:	f7f9 fa89 	bl	80013f0 <HAL_PCD_EP_Receive>
 8007ede:	0003      	movs	r3, r0
 8007ee0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee2:	2516      	movs	r5, #22
 8007ee4:	197c      	adds	r4, r7, r5
 8007ee6:	19bb      	adds	r3, r7, r6
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	0018      	movs	r0, r3
 8007eec:	f000 f839 	bl	8007f62 <USBD_Get_USB_Status>
 8007ef0:	0003      	movs	r3, r0
 8007ef2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ef4:	197b      	adds	r3, r7, r5
 8007ef6:	781b      	ldrb	r3, [r3, #0]
}
 8007ef8:	0018      	movs	r0, r3
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b007      	add	sp, #28
 8007efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	000a      	movs	r2, r1
 8007f0a:	1cfb      	adds	r3, r7, #3
 8007f0c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	23b0      	movs	r3, #176	@ 0xb0
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	58d2      	ldr	r2, [r2, r3]
 8007f16:	1cfb      	adds	r3, r7, #3
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	0019      	movs	r1, r3
 8007f1c:	0010      	movs	r0, r2
 8007f1e:	f7f9 fa9e 	bl	800145e <HAL_PCD_EP_GetRxCount>
 8007f22:	0003      	movs	r3, r0
}
 8007f24:	0018      	movs	r0, r3
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f34:	4b02      	ldr	r3, [pc, #8]	@ (8007f40 <USBD_static_malloc+0x14>)
}
 8007f36:	0018      	movs	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b002      	add	sp, #8
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	46c0      	nop			@ (mov r8, r8)
 8007f40:	2000119c 	.word	0x2000119c

08007f44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]

}
 8007f4c:	46c0      	nop			@ (mov r8, r8)
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b002      	add	sp, #8
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007f58:	f7f8 fa32 	bl	80003c0 <SystemClock_Config>
}
 8007f5c:	46c0      	nop			@ (mov r8, r8)
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	0002      	movs	r2, r0
 8007f6a:	1dfb      	adds	r3, r7, #7
 8007f6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6e:	230f      	movs	r3, #15
 8007f70:	18fb      	adds	r3, r7, r3
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007f76:	1dfb      	adds	r3, r7, #7
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d017      	beq.n	8007fae <USBD_Get_USB_Status+0x4c>
 8007f7e:	dc1b      	bgt.n	8007fb8 <USBD_Get_USB_Status+0x56>
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d00f      	beq.n	8007fa4 <USBD_Get_USB_Status+0x42>
 8007f84:	dc18      	bgt.n	8007fb8 <USBD_Get_USB_Status+0x56>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <USBD_Get_USB_Status+0x2e>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d005      	beq.n	8007f9a <USBD_Get_USB_Status+0x38>
 8007f8e:	e013      	b.n	8007fb8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f90:	230f      	movs	r3, #15
 8007f92:	18fb      	adds	r3, r7, r3
 8007f94:	2200      	movs	r2, #0
 8007f96:	701a      	strb	r2, [r3, #0]
    break;
 8007f98:	e013      	b.n	8007fc2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f9a:	230f      	movs	r3, #15
 8007f9c:	18fb      	adds	r3, r7, r3
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	701a      	strb	r2, [r3, #0]
    break;
 8007fa2:	e00e      	b.n	8007fc2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fa4:	230f      	movs	r3, #15
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
    break;
 8007fac:	e009      	b.n	8007fc2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fae:	230f      	movs	r3, #15
 8007fb0:	18fb      	adds	r3, r7, r3
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	701a      	strb	r2, [r3, #0]
    break;
 8007fb6:	e004      	b.n	8007fc2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007fb8:	230f      	movs	r3, #15
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	701a      	strb	r2, [r3, #0]
    break;
 8007fc0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8007fc2:	230f      	movs	r3, #15
 8007fc4:	18fb      	adds	r3, r7, r3
 8007fc6:	781b      	ldrb	r3, [r3, #0]
}
 8007fc8:	0018      	movs	r0, r3
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b004      	add	sp, #16
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <memset>:
 8007fd0:	0003      	movs	r3, r0
 8007fd2:	1882      	adds	r2, r0, r2
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d100      	bne.n	8007fda <memset+0xa>
 8007fd8:	4770      	bx	lr
 8007fda:	7019      	strb	r1, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	e7f9      	b.n	8007fd4 <memset+0x4>

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	4c0c      	ldr	r4, [pc, #48]	@ (8008018 <__libc_init_array+0x38>)
 8007fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800801c <__libc_init_array+0x3c>)
 8007fe8:	1b64      	subs	r4, r4, r5
 8007fea:	10a4      	asrs	r4, r4, #2
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	2600      	movs	r6, #0
 8007ff2:	f000 f819 	bl	8008028 <_init>
 8007ff6:	4c0a      	ldr	r4, [pc, #40]	@ (8008020 <__libc_init_array+0x40>)
 8007ff8:	4d0a      	ldr	r5, [pc, #40]	@ (8008024 <__libc_init_array+0x44>)
 8007ffa:	1b64      	subs	r4, r4, r5
 8007ffc:	10a4      	asrs	r4, r4, #2
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	00b3      	lsls	r3, r6, #2
 8008006:	58eb      	ldr	r3, [r5, r3]
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	00b3      	lsls	r3, r6, #2
 8008010:	58eb      	ldr	r3, [r5, r3]
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	08008194 	.word	0x08008194
 800801c:	08008194 	.word	0x08008194
 8008020:	08008198 	.word	0x08008198
 8008024:	08008194 	.word	0x08008194

08008028 <_init>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	46c0      	nop			@ (mov r8, r8)
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr

08008034 <_fini>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	46c0      	nop			@ (mov r8, r8)
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr
